// ECE423_QSYS_mm_interconnect_0.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 15.1 185

`timescale 1 ps / 1 ps
module ECE423_QSYS_mm_interconnect_0 (
		input  wire        clk_125_clk_clk,                                     //                                   clk_125_clk.clk
		input  wire        clk_50_out_clk_clk,                                  //                                clk_50_out_clk.clk
		input  wire        cpu_0_reset_reset_bridge_in_reset_reset,             //             cpu_0_reset_reset_bridge_in_reset.reset
		input  wire        cpu_1_reset_reset_bridge_in_reset_reset,             //             cpu_1_reset_reset_bridge_in_reset.reset
		input  wire        lpddr2_mp_cmd_reset_n_0_reset_bridge_in_reset_reset, // lpddr2_mp_cmd_reset_n_0_reset_bridge_in_reset.reset
		input  wire        sd_cont_reset_reset_bridge_in_reset_reset,           //           sd_cont_reset_reset_bridge_in_reset.reset
		input  wire        sram_reset_reset_bridge_in_reset_reset,              //              sram_reset_reset_bridge_in_reset.reset
		input  wire        sysid_reset_reset_bridge_in_reset_reset,             //             sysid_reset_reset_bridge_in_reset.reset
		input  wire [29:0] cpu_0_data_master_address,                           //                             cpu_0_data_master.address
		output wire        cpu_0_data_master_waitrequest,                       //                                              .waitrequest
		input  wire [3:0]  cpu_0_data_master_burstcount,                        //                                              .burstcount
		input  wire [3:0]  cpu_0_data_master_byteenable,                        //                                              .byteenable
		input  wire        cpu_0_data_master_read,                              //                                              .read
		output wire [31:0] cpu_0_data_master_readdata,                          //                                              .readdata
		output wire        cpu_0_data_master_readdatavalid,                     //                                              .readdatavalid
		input  wire        cpu_0_data_master_write,                             //                                              .write
		input  wire [31:0] cpu_0_data_master_writedata,                         //                                              .writedata
		input  wire        cpu_0_data_master_debugaccess,                       //                                              .debugaccess
		input  wire [29:0] cpu_0_instruction_master_address,                    //                      cpu_0_instruction_master.address
		output wire        cpu_0_instruction_master_waitrequest,                //                                              .waitrequest
		input  wire        cpu_0_instruction_master_read,                       //                                              .read
		output wire [31:0] cpu_0_instruction_master_readdata,                   //                                              .readdata
		output wire        cpu_0_instruction_master_readdatavalid,              //                                              .readdatavalid
		input  wire [29:0] cpu_1_data_master_address,                           //                             cpu_1_data_master.address
		output wire        cpu_1_data_master_waitrequest,                       //                                              .waitrequest
		input  wire [3:0]  cpu_1_data_master_burstcount,                        //                                              .burstcount
		input  wire [3:0]  cpu_1_data_master_byteenable,                        //                                              .byteenable
		input  wire        cpu_1_data_master_read,                              //                                              .read
		output wire [31:0] cpu_1_data_master_readdata,                          //                                              .readdata
		output wire        cpu_1_data_master_readdatavalid,                     //                                              .readdatavalid
		input  wire        cpu_1_data_master_write,                             //                                              .write
		input  wire [31:0] cpu_1_data_master_writedata,                         //                                              .writedata
		input  wire        cpu_1_data_master_debugaccess,                       //                                              .debugaccess
		input  wire [29:0] cpu_1_instruction_master_address,                    //                      cpu_1_instruction_master.address
		output wire        cpu_1_instruction_master_waitrequest,                //                                              .waitrequest
		input  wire        cpu_1_instruction_master_read,                       //                                              .read
		output wire [31:0] cpu_1_instruction_master_readdata,                   //                                              .readdata
		output wire        cpu_1_instruction_master_readdatavalid,              //                                              .readdatavalid
		input  wire [31:0] sd_cont_master_address,                              //                                sd_cont_master.address
		output wire        sd_cont_master_waitrequest,                          //                                              .waitrequest
		input  wire        sd_cont_master_read,                                 //                                              .read
		output wire [31:0] sd_cont_master_readdata,                             //                                              .readdata
		input  wire        sd_cont_master_write,                                //                                              .write
		input  wire [31:0] sd_cont_master_writedata,                            //                                              .writedata
		output wire [8:0]  cpu_0_debug_mem_slave_address,                       //                         cpu_0_debug_mem_slave.address
		output wire        cpu_0_debug_mem_slave_write,                         //                                              .write
		output wire        cpu_0_debug_mem_slave_read,                          //                                              .read
		input  wire [31:0] cpu_0_debug_mem_slave_readdata,                      //                                              .readdata
		output wire [31:0] cpu_0_debug_mem_slave_writedata,                     //                                              .writedata
		output wire [3:0]  cpu_0_debug_mem_slave_byteenable,                    //                                              .byteenable
		input  wire        cpu_0_debug_mem_slave_waitrequest,                   //                                              .waitrequest
		output wire        cpu_0_debug_mem_slave_debugaccess,                   //                                              .debugaccess
		output wire [10:0] cpu_0_bridge_s0_address,                             //                               cpu_0_bridge_s0.address
		output wire        cpu_0_bridge_s0_write,                               //                                              .write
		output wire        cpu_0_bridge_s0_read,                                //                                              .read
		input  wire [31:0] cpu_0_bridge_s0_readdata,                            //                                              .readdata
		output wire [31:0] cpu_0_bridge_s0_writedata,                           //                                              .writedata
		output wire [0:0]  cpu_0_bridge_s0_burstcount,                          //                                              .burstcount
		output wire [3:0]  cpu_0_bridge_s0_byteenable,                          //                                              .byteenable
		input  wire        cpu_0_bridge_s0_readdatavalid,                       //                                              .readdatavalid
		input  wire        cpu_0_bridge_s0_waitrequest,                         //                                              .waitrequest
		output wire        cpu_0_bridge_s0_debugaccess,                         //                                              .debugaccess
		output wire [8:0]  cpu_1_debug_mem_slave_address,                       //                         cpu_1_debug_mem_slave.address
		output wire        cpu_1_debug_mem_slave_write,                         //                                              .write
		output wire        cpu_1_debug_mem_slave_read,                          //                                              .read
		input  wire [31:0] cpu_1_debug_mem_slave_readdata,                      //                                              .readdata
		output wire [31:0] cpu_1_debug_mem_slave_writedata,                     //                                              .writedata
		output wire [3:0]  cpu_1_debug_mem_slave_byteenable,                    //                                              .byteenable
		input  wire        cpu_1_debug_mem_slave_waitrequest,                   //                                              .waitrequest
		output wire        cpu_1_debug_mem_slave_debugaccess,                   //                                              .debugaccess
		output wire [6:0]  cpu_1_bridge_0_s0_address,                           //                             cpu_1_bridge_0_s0.address
		output wire        cpu_1_bridge_0_s0_write,                             //                                              .write
		output wire        cpu_1_bridge_0_s0_read,                              //                                              .read
		input  wire [31:0] cpu_1_bridge_0_s0_readdata,                          //                                              .readdata
		output wire [31:0] cpu_1_bridge_0_s0_writedata,                         //                                              .writedata
		output wire [0:0]  cpu_1_bridge_0_s0_burstcount,                        //                                              .burstcount
		output wire [3:0]  cpu_1_bridge_0_s0_byteenable,                        //                                              .byteenable
		input  wire        cpu_1_bridge_0_s0_readdatavalid,                     //                                              .readdatavalid
		input  wire        cpu_1_bridge_0_s0_waitrequest,                       //                                              .waitrequest
		output wire        cpu_1_bridge_0_s0_debugaccess,                       //                                              .debugaccess
		output wire [0:0]  jtag_uart_0_avalon_jtag_slave_address,               //                 jtag_uart_0_avalon_jtag_slave.address
		output wire        jtag_uart_0_avalon_jtag_slave_write,                 //                                              .write
		output wire        jtag_uart_0_avalon_jtag_slave_read,                  //                                              .read
		input  wire [31:0] jtag_uart_0_avalon_jtag_slave_readdata,              //                                              .readdata
		output wire [31:0] jtag_uart_0_avalon_jtag_slave_writedata,             //                                              .writedata
		input  wire        jtag_uart_0_avalon_jtag_slave_waitrequest,           //                                              .waitrequest
		output wire        jtag_uart_0_avalon_jtag_slave_chipselect,            //                                              .chipselect
		output wire [0:0]  jtag_uart_1_avalon_jtag_slave_address,               //                 jtag_uart_1_avalon_jtag_slave.address
		output wire        jtag_uart_1_avalon_jtag_slave_write,                 //                                              .write
		output wire        jtag_uart_1_avalon_jtag_slave_read,                  //                                              .read
		input  wire [31:0] jtag_uart_1_avalon_jtag_slave_readdata,              //                                              .readdata
		output wire [31:0] jtag_uart_1_avalon_jtag_slave_writedata,             //                                              .writedata
		input  wire        jtag_uart_1_avalon_jtag_slave_waitrequest,           //                                              .waitrequest
		output wire        jtag_uart_1_avalon_jtag_slave_chipselect,            //                                              .chipselect
		output wire [26:0] lpddr2_avl_0_address,                                //                                  lpddr2_avl_0.address
		output wire        lpddr2_avl_0_write,                                  //                                              .write
		output wire        lpddr2_avl_0_read,                                   //                                              .read
		input  wire [31:0] lpddr2_avl_0_readdata,                               //                                              .readdata
		output wire [31:0] lpddr2_avl_0_writedata,                              //                                              .writedata
		output wire        lpddr2_avl_0_beginbursttransfer,                     //                                              .beginbursttransfer
		output wire [7:0]  lpddr2_avl_0_burstcount,                             //                                              .burstcount
		output wire [3:0]  lpddr2_avl_0_byteenable,                             //                                              .byteenable
		input  wire        lpddr2_avl_0_readdatavalid,                          //                                              .readdatavalid
		input  wire        lpddr2_avl_0_waitrequest,                            //                                              .waitrequest
		output wire [26:0] lpddr2_avl_2_address,                                //                                  lpddr2_avl_2.address
		output wire        lpddr2_avl_2_write,                                  //                                              .write
		output wire        lpddr2_avl_2_read,                                   //                                              .read
		input  wire [31:0] lpddr2_avl_2_readdata,                               //                                              .readdata
		output wire [31:0] lpddr2_avl_2_writedata,                              //                                              .writedata
		output wire        lpddr2_avl_2_beginbursttransfer,                     //                                              .beginbursttransfer
		output wire [7:0]  lpddr2_avl_2_burstcount,                             //                                              .burstcount
		output wire [3:0]  lpddr2_avl_2_byteenable,                             //                                              .byteenable
		input  wire        lpddr2_avl_2_readdatavalid,                          //                                              .readdatavalid
		input  wire        lpddr2_avl_2_waitrequest,                            //                                              .waitrequest
		output wire [18:0] sram_uas_address,                                    //                                      sram_uas.address
		output wire        sram_uas_write,                                      //                                              .write
		output wire        sram_uas_read,                                       //                                              .read
		input  wire [15:0] sram_uas_readdata,                                   //                                              .readdata
		output wire [15:0] sram_uas_writedata,                                  //                                              .writedata
		output wire [1:0]  sram_uas_burstcount,                                 //                                              .burstcount
		output wire [1:0]  sram_uas_byteenable,                                 //                                              .byteenable
		input  wire        sram_uas_readdatavalid,                              //                                              .readdatavalid
		input  wire        sram_uas_waitrequest,                                //                                              .waitrequest
		output wire        sram_uas_lock,                                       //                                              .lock
		output wire        sram_uas_debugaccess,                                //                                              .debugaccess
		output wire [0:0]  sysid_control_slave_address,                         //                           sysid_control_slave.address
		input  wire [31:0] sysid_control_slave_readdata                         //                                              .readdata
	);

	wire          cpu_0_data_master_translator_avalon_universal_master_0_waitrequest;          // cpu_0_data_master_agent:av_waitrequest -> cpu_0_data_master_translator:uav_waitrequest
	wire   [31:0] cpu_0_data_master_translator_avalon_universal_master_0_readdata;             // cpu_0_data_master_agent:av_readdata -> cpu_0_data_master_translator:uav_readdata
	wire          cpu_0_data_master_translator_avalon_universal_master_0_debugaccess;          // cpu_0_data_master_translator:uav_debugaccess -> cpu_0_data_master_agent:av_debugaccess
	wire   [31:0] cpu_0_data_master_translator_avalon_universal_master_0_address;              // cpu_0_data_master_translator:uav_address -> cpu_0_data_master_agent:av_address
	wire          cpu_0_data_master_translator_avalon_universal_master_0_read;                 // cpu_0_data_master_translator:uav_read -> cpu_0_data_master_agent:av_read
	wire    [3:0] cpu_0_data_master_translator_avalon_universal_master_0_byteenable;           // cpu_0_data_master_translator:uav_byteenable -> cpu_0_data_master_agent:av_byteenable
	wire          cpu_0_data_master_translator_avalon_universal_master_0_readdatavalid;        // cpu_0_data_master_agent:av_readdatavalid -> cpu_0_data_master_translator:uav_readdatavalid
	wire          cpu_0_data_master_translator_avalon_universal_master_0_lock;                 // cpu_0_data_master_translator:uav_lock -> cpu_0_data_master_agent:av_lock
	wire          cpu_0_data_master_translator_avalon_universal_master_0_write;                // cpu_0_data_master_translator:uav_write -> cpu_0_data_master_agent:av_write
	wire   [31:0] cpu_0_data_master_translator_avalon_universal_master_0_writedata;            // cpu_0_data_master_translator:uav_writedata -> cpu_0_data_master_agent:av_writedata
	wire    [5:0] cpu_0_data_master_translator_avalon_universal_master_0_burstcount;           // cpu_0_data_master_translator:uav_burstcount -> cpu_0_data_master_agent:av_burstcount
	wire          cpu_1_data_master_translator_avalon_universal_master_0_waitrequest;          // cpu_1_data_master_agent:av_waitrequest -> cpu_1_data_master_translator:uav_waitrequest
	wire   [31:0] cpu_1_data_master_translator_avalon_universal_master_0_readdata;             // cpu_1_data_master_agent:av_readdata -> cpu_1_data_master_translator:uav_readdata
	wire          cpu_1_data_master_translator_avalon_universal_master_0_debugaccess;          // cpu_1_data_master_translator:uav_debugaccess -> cpu_1_data_master_agent:av_debugaccess
	wire   [31:0] cpu_1_data_master_translator_avalon_universal_master_0_address;              // cpu_1_data_master_translator:uav_address -> cpu_1_data_master_agent:av_address
	wire          cpu_1_data_master_translator_avalon_universal_master_0_read;                 // cpu_1_data_master_translator:uav_read -> cpu_1_data_master_agent:av_read
	wire    [3:0] cpu_1_data_master_translator_avalon_universal_master_0_byteenable;           // cpu_1_data_master_translator:uav_byteenable -> cpu_1_data_master_agent:av_byteenable
	wire          cpu_1_data_master_translator_avalon_universal_master_0_readdatavalid;        // cpu_1_data_master_agent:av_readdatavalid -> cpu_1_data_master_translator:uav_readdatavalid
	wire          cpu_1_data_master_translator_avalon_universal_master_0_lock;                 // cpu_1_data_master_translator:uav_lock -> cpu_1_data_master_agent:av_lock
	wire          cpu_1_data_master_translator_avalon_universal_master_0_write;                // cpu_1_data_master_translator:uav_write -> cpu_1_data_master_agent:av_write
	wire   [31:0] cpu_1_data_master_translator_avalon_universal_master_0_writedata;            // cpu_1_data_master_translator:uav_writedata -> cpu_1_data_master_agent:av_writedata
	wire    [5:0] cpu_1_data_master_translator_avalon_universal_master_0_burstcount;           // cpu_1_data_master_translator:uav_burstcount -> cpu_1_data_master_agent:av_burstcount
	wire          cpu_0_instruction_master_translator_avalon_universal_master_0_waitrequest;   // cpu_0_instruction_master_agent:av_waitrequest -> cpu_0_instruction_master_translator:uav_waitrequest
	wire   [31:0] cpu_0_instruction_master_translator_avalon_universal_master_0_readdata;      // cpu_0_instruction_master_agent:av_readdata -> cpu_0_instruction_master_translator:uav_readdata
	wire          cpu_0_instruction_master_translator_avalon_universal_master_0_debugaccess;   // cpu_0_instruction_master_translator:uav_debugaccess -> cpu_0_instruction_master_agent:av_debugaccess
	wire   [31:0] cpu_0_instruction_master_translator_avalon_universal_master_0_address;       // cpu_0_instruction_master_translator:uav_address -> cpu_0_instruction_master_agent:av_address
	wire          cpu_0_instruction_master_translator_avalon_universal_master_0_read;          // cpu_0_instruction_master_translator:uav_read -> cpu_0_instruction_master_agent:av_read
	wire    [3:0] cpu_0_instruction_master_translator_avalon_universal_master_0_byteenable;    // cpu_0_instruction_master_translator:uav_byteenable -> cpu_0_instruction_master_agent:av_byteenable
	wire          cpu_0_instruction_master_translator_avalon_universal_master_0_readdatavalid; // cpu_0_instruction_master_agent:av_readdatavalid -> cpu_0_instruction_master_translator:uav_readdatavalid
	wire          cpu_0_instruction_master_translator_avalon_universal_master_0_lock;          // cpu_0_instruction_master_translator:uav_lock -> cpu_0_instruction_master_agent:av_lock
	wire          cpu_0_instruction_master_translator_avalon_universal_master_0_write;         // cpu_0_instruction_master_translator:uav_write -> cpu_0_instruction_master_agent:av_write
	wire   [31:0] cpu_0_instruction_master_translator_avalon_universal_master_0_writedata;     // cpu_0_instruction_master_translator:uav_writedata -> cpu_0_instruction_master_agent:av_writedata
	wire    [2:0] cpu_0_instruction_master_translator_avalon_universal_master_0_burstcount;    // cpu_0_instruction_master_translator:uav_burstcount -> cpu_0_instruction_master_agent:av_burstcount
	wire          cpu_1_instruction_master_translator_avalon_universal_master_0_waitrequest;   // cpu_1_instruction_master_agent:av_waitrequest -> cpu_1_instruction_master_translator:uav_waitrequest
	wire   [31:0] cpu_1_instruction_master_translator_avalon_universal_master_0_readdata;      // cpu_1_instruction_master_agent:av_readdata -> cpu_1_instruction_master_translator:uav_readdata
	wire          cpu_1_instruction_master_translator_avalon_universal_master_0_debugaccess;   // cpu_1_instruction_master_translator:uav_debugaccess -> cpu_1_instruction_master_agent:av_debugaccess
	wire   [31:0] cpu_1_instruction_master_translator_avalon_universal_master_0_address;       // cpu_1_instruction_master_translator:uav_address -> cpu_1_instruction_master_agent:av_address
	wire          cpu_1_instruction_master_translator_avalon_universal_master_0_read;          // cpu_1_instruction_master_translator:uav_read -> cpu_1_instruction_master_agent:av_read
	wire    [3:0] cpu_1_instruction_master_translator_avalon_universal_master_0_byteenable;    // cpu_1_instruction_master_translator:uav_byteenable -> cpu_1_instruction_master_agent:av_byteenable
	wire          cpu_1_instruction_master_translator_avalon_universal_master_0_readdatavalid; // cpu_1_instruction_master_agent:av_readdatavalid -> cpu_1_instruction_master_translator:uav_readdatavalid
	wire          cpu_1_instruction_master_translator_avalon_universal_master_0_lock;          // cpu_1_instruction_master_translator:uav_lock -> cpu_1_instruction_master_agent:av_lock
	wire          cpu_1_instruction_master_translator_avalon_universal_master_0_write;         // cpu_1_instruction_master_translator:uav_write -> cpu_1_instruction_master_agent:av_write
	wire   [31:0] cpu_1_instruction_master_translator_avalon_universal_master_0_writedata;     // cpu_1_instruction_master_translator:uav_writedata -> cpu_1_instruction_master_agent:av_writedata
	wire    [2:0] cpu_1_instruction_master_translator_avalon_universal_master_0_burstcount;    // cpu_1_instruction_master_translator:uav_burstcount -> cpu_1_instruction_master_agent:av_burstcount
	wire          sd_cont_master_translator_avalon_universal_master_0_waitrequest;             // sd_cont_master_agent:av_waitrequest -> sd_cont_master_translator:uav_waitrequest
	wire   [31:0] sd_cont_master_translator_avalon_universal_master_0_readdata;                // sd_cont_master_agent:av_readdata -> sd_cont_master_translator:uav_readdata
	wire          sd_cont_master_translator_avalon_universal_master_0_debugaccess;             // sd_cont_master_translator:uav_debugaccess -> sd_cont_master_agent:av_debugaccess
	wire   [31:0] sd_cont_master_translator_avalon_universal_master_0_address;                 // sd_cont_master_translator:uav_address -> sd_cont_master_agent:av_address
	wire          sd_cont_master_translator_avalon_universal_master_0_read;                    // sd_cont_master_translator:uav_read -> sd_cont_master_agent:av_read
	wire    [3:0] sd_cont_master_translator_avalon_universal_master_0_byteenable;              // sd_cont_master_translator:uav_byteenable -> sd_cont_master_agent:av_byteenable
	wire          sd_cont_master_translator_avalon_universal_master_0_readdatavalid;           // sd_cont_master_agent:av_readdatavalid -> sd_cont_master_translator:uav_readdatavalid
	wire          sd_cont_master_translator_avalon_universal_master_0_lock;                    // sd_cont_master_translator:uav_lock -> sd_cont_master_agent:av_lock
	wire          sd_cont_master_translator_avalon_universal_master_0_write;                   // sd_cont_master_translator:uav_write -> sd_cont_master_agent:av_write
	wire   [31:0] sd_cont_master_translator_avalon_universal_master_0_writedata;               // sd_cont_master_translator:uav_writedata -> sd_cont_master_agent:av_writedata
	wire    [2:0] sd_cont_master_translator_avalon_universal_master_0_burstcount;              // sd_cont_master_translator:uav_burstcount -> sd_cont_master_agent:av_burstcount
	wire          rsp_mux_004_src_valid;                                                       // rsp_mux_004:src_valid -> sd_cont_master_agent:rp_valid
	wire  [116:0] rsp_mux_004_src_data;                                                        // rsp_mux_004:src_data -> sd_cont_master_agent:rp_data
	wire          rsp_mux_004_src_ready;                                                       // sd_cont_master_agent:rp_ready -> rsp_mux_004:src_ready
	wire    [9:0] rsp_mux_004_src_channel;                                                     // rsp_mux_004:src_channel -> sd_cont_master_agent:rp_channel
	wire          rsp_mux_004_src_startofpacket;                                               // rsp_mux_004:src_startofpacket -> sd_cont_master_agent:rp_startofpacket
	wire          rsp_mux_004_src_endofpacket;                                                 // rsp_mux_004:src_endofpacket -> sd_cont_master_agent:rp_endofpacket
	wire   [31:0] jtag_uart_0_avalon_jtag_slave_agent_m0_readdata;                             // jtag_uart_0_avalon_jtag_slave_translator:uav_readdata -> jtag_uart_0_avalon_jtag_slave_agent:m0_readdata
	wire          jtag_uart_0_avalon_jtag_slave_agent_m0_waitrequest;                          // jtag_uart_0_avalon_jtag_slave_translator:uav_waitrequest -> jtag_uart_0_avalon_jtag_slave_agent:m0_waitrequest
	wire          jtag_uart_0_avalon_jtag_slave_agent_m0_debugaccess;                          // jtag_uart_0_avalon_jtag_slave_agent:m0_debugaccess -> jtag_uart_0_avalon_jtag_slave_translator:uav_debugaccess
	wire   [31:0] jtag_uart_0_avalon_jtag_slave_agent_m0_address;                              // jtag_uart_0_avalon_jtag_slave_agent:m0_address -> jtag_uart_0_avalon_jtag_slave_translator:uav_address
	wire    [3:0] jtag_uart_0_avalon_jtag_slave_agent_m0_byteenable;                           // jtag_uart_0_avalon_jtag_slave_agent:m0_byteenable -> jtag_uart_0_avalon_jtag_slave_translator:uav_byteenable
	wire          jtag_uart_0_avalon_jtag_slave_agent_m0_read;                                 // jtag_uart_0_avalon_jtag_slave_agent:m0_read -> jtag_uart_0_avalon_jtag_slave_translator:uav_read
	wire          jtag_uart_0_avalon_jtag_slave_agent_m0_readdatavalid;                        // jtag_uart_0_avalon_jtag_slave_translator:uav_readdatavalid -> jtag_uart_0_avalon_jtag_slave_agent:m0_readdatavalid
	wire          jtag_uart_0_avalon_jtag_slave_agent_m0_lock;                                 // jtag_uart_0_avalon_jtag_slave_agent:m0_lock -> jtag_uart_0_avalon_jtag_slave_translator:uav_lock
	wire   [31:0] jtag_uart_0_avalon_jtag_slave_agent_m0_writedata;                            // jtag_uart_0_avalon_jtag_slave_agent:m0_writedata -> jtag_uart_0_avalon_jtag_slave_translator:uav_writedata
	wire          jtag_uart_0_avalon_jtag_slave_agent_m0_write;                                // jtag_uart_0_avalon_jtag_slave_agent:m0_write -> jtag_uart_0_avalon_jtag_slave_translator:uav_write
	wire    [2:0] jtag_uart_0_avalon_jtag_slave_agent_m0_burstcount;                           // jtag_uart_0_avalon_jtag_slave_agent:m0_burstcount -> jtag_uart_0_avalon_jtag_slave_translator:uav_burstcount
	wire          jtag_uart_0_avalon_jtag_slave_agent_rf_source_valid;                         // jtag_uart_0_avalon_jtag_slave_agent:rf_source_valid -> jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:in_valid
	wire  [117:0] jtag_uart_0_avalon_jtag_slave_agent_rf_source_data;                          // jtag_uart_0_avalon_jtag_slave_agent:rf_source_data -> jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:in_data
	wire          jtag_uart_0_avalon_jtag_slave_agent_rf_source_ready;                         // jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:in_ready -> jtag_uart_0_avalon_jtag_slave_agent:rf_source_ready
	wire          jtag_uart_0_avalon_jtag_slave_agent_rf_source_startofpacket;                 // jtag_uart_0_avalon_jtag_slave_agent:rf_source_startofpacket -> jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:in_startofpacket
	wire          jtag_uart_0_avalon_jtag_slave_agent_rf_source_endofpacket;                   // jtag_uart_0_avalon_jtag_slave_agent:rf_source_endofpacket -> jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:in_endofpacket
	wire          jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_valid;                      // jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:out_valid -> jtag_uart_0_avalon_jtag_slave_agent:rf_sink_valid
	wire  [117:0] jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_data;                       // jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:out_data -> jtag_uart_0_avalon_jtag_slave_agent:rf_sink_data
	wire          jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_ready;                      // jtag_uart_0_avalon_jtag_slave_agent:rf_sink_ready -> jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:out_ready
	wire          jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket;              // jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:out_startofpacket -> jtag_uart_0_avalon_jtag_slave_agent:rf_sink_startofpacket
	wire          jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket;                // jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:out_endofpacket -> jtag_uart_0_avalon_jtag_slave_agent:rf_sink_endofpacket
	wire          jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_valid;                    // jtag_uart_0_avalon_jtag_slave_agent:rdata_fifo_src_valid -> jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo:in_valid
	wire   [33:0] jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_data;                     // jtag_uart_0_avalon_jtag_slave_agent:rdata_fifo_src_data -> jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo:in_data
	wire          jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_ready;                    // jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo:in_ready -> jtag_uart_0_avalon_jtag_slave_agent:rdata_fifo_src_ready
	wire   [31:0] lpddr2_avl_0_agent_m0_readdata;                                              // lpddr2_avl_0_translator:uav_readdata -> lpddr2_avl_0_agent:m0_readdata
	wire          lpddr2_avl_0_agent_m0_waitrequest;                                           // lpddr2_avl_0_translator:uav_waitrequest -> lpddr2_avl_0_agent:m0_waitrequest
	wire          lpddr2_avl_0_agent_m0_debugaccess;                                           // lpddr2_avl_0_agent:m0_debugaccess -> lpddr2_avl_0_translator:uav_debugaccess
	wire   [31:0] lpddr2_avl_0_agent_m0_address;                                               // lpddr2_avl_0_agent:m0_address -> lpddr2_avl_0_translator:uav_address
	wire    [3:0] lpddr2_avl_0_agent_m0_byteenable;                                            // lpddr2_avl_0_agent:m0_byteenable -> lpddr2_avl_0_translator:uav_byteenable
	wire          lpddr2_avl_0_agent_m0_read;                                                  // lpddr2_avl_0_agent:m0_read -> lpddr2_avl_0_translator:uav_read
	wire          lpddr2_avl_0_agent_m0_readdatavalid;                                         // lpddr2_avl_0_translator:uav_readdatavalid -> lpddr2_avl_0_agent:m0_readdatavalid
	wire          lpddr2_avl_0_agent_m0_lock;                                                  // lpddr2_avl_0_agent:m0_lock -> lpddr2_avl_0_translator:uav_lock
	wire   [31:0] lpddr2_avl_0_agent_m0_writedata;                                             // lpddr2_avl_0_agent:m0_writedata -> lpddr2_avl_0_translator:uav_writedata
	wire          lpddr2_avl_0_agent_m0_write;                                                 // lpddr2_avl_0_agent:m0_write -> lpddr2_avl_0_translator:uav_write
	wire    [9:0] lpddr2_avl_0_agent_m0_burstcount;                                            // lpddr2_avl_0_agent:m0_burstcount -> lpddr2_avl_0_translator:uav_burstcount
	wire          lpddr2_avl_0_agent_rf_source_valid;                                          // lpddr2_avl_0_agent:rf_source_valid -> lpddr2_avl_0_agent_rsp_fifo:in_valid
	wire  [117:0] lpddr2_avl_0_agent_rf_source_data;                                           // lpddr2_avl_0_agent:rf_source_data -> lpddr2_avl_0_agent_rsp_fifo:in_data
	wire          lpddr2_avl_0_agent_rf_source_ready;                                          // lpddr2_avl_0_agent_rsp_fifo:in_ready -> lpddr2_avl_0_agent:rf_source_ready
	wire          lpddr2_avl_0_agent_rf_source_startofpacket;                                  // lpddr2_avl_0_agent:rf_source_startofpacket -> lpddr2_avl_0_agent_rsp_fifo:in_startofpacket
	wire          lpddr2_avl_0_agent_rf_source_endofpacket;                                    // lpddr2_avl_0_agent:rf_source_endofpacket -> lpddr2_avl_0_agent_rsp_fifo:in_endofpacket
	wire          lpddr2_avl_0_agent_rsp_fifo_out_valid;                                       // lpddr2_avl_0_agent_rsp_fifo:out_valid -> lpddr2_avl_0_agent:rf_sink_valid
	wire  [117:0] lpddr2_avl_0_agent_rsp_fifo_out_data;                                        // lpddr2_avl_0_agent_rsp_fifo:out_data -> lpddr2_avl_0_agent:rf_sink_data
	wire          lpddr2_avl_0_agent_rsp_fifo_out_ready;                                       // lpddr2_avl_0_agent:rf_sink_ready -> lpddr2_avl_0_agent_rsp_fifo:out_ready
	wire          lpddr2_avl_0_agent_rsp_fifo_out_startofpacket;                               // lpddr2_avl_0_agent_rsp_fifo:out_startofpacket -> lpddr2_avl_0_agent:rf_sink_startofpacket
	wire          lpddr2_avl_0_agent_rsp_fifo_out_endofpacket;                                 // lpddr2_avl_0_agent_rsp_fifo:out_endofpacket -> lpddr2_avl_0_agent:rf_sink_endofpacket
	wire          lpddr2_avl_0_agent_rdata_fifo_src_valid;                                     // lpddr2_avl_0_agent:rdata_fifo_src_valid -> lpddr2_avl_0_agent_rdata_fifo:in_valid
	wire   [33:0] lpddr2_avl_0_agent_rdata_fifo_src_data;                                      // lpddr2_avl_0_agent:rdata_fifo_src_data -> lpddr2_avl_0_agent_rdata_fifo:in_data
	wire          lpddr2_avl_0_agent_rdata_fifo_src_ready;                                     // lpddr2_avl_0_agent_rdata_fifo:in_ready -> lpddr2_avl_0_agent:rdata_fifo_src_ready
	wire   [31:0] sysid_control_slave_agent_m0_readdata;                                       // sysid_control_slave_translator:uav_readdata -> sysid_control_slave_agent:m0_readdata
	wire          sysid_control_slave_agent_m0_waitrequest;                                    // sysid_control_slave_translator:uav_waitrequest -> sysid_control_slave_agent:m0_waitrequest
	wire          sysid_control_slave_agent_m0_debugaccess;                                    // sysid_control_slave_agent:m0_debugaccess -> sysid_control_slave_translator:uav_debugaccess
	wire   [31:0] sysid_control_slave_agent_m0_address;                                        // sysid_control_slave_agent:m0_address -> sysid_control_slave_translator:uav_address
	wire    [3:0] sysid_control_slave_agent_m0_byteenable;                                     // sysid_control_slave_agent:m0_byteenable -> sysid_control_slave_translator:uav_byteenable
	wire          sysid_control_slave_agent_m0_read;                                           // sysid_control_slave_agent:m0_read -> sysid_control_slave_translator:uav_read
	wire          sysid_control_slave_agent_m0_readdatavalid;                                  // sysid_control_slave_translator:uav_readdatavalid -> sysid_control_slave_agent:m0_readdatavalid
	wire          sysid_control_slave_agent_m0_lock;                                           // sysid_control_slave_agent:m0_lock -> sysid_control_slave_translator:uav_lock
	wire   [31:0] sysid_control_slave_agent_m0_writedata;                                      // sysid_control_slave_agent:m0_writedata -> sysid_control_slave_translator:uav_writedata
	wire          sysid_control_slave_agent_m0_write;                                          // sysid_control_slave_agent:m0_write -> sysid_control_slave_translator:uav_write
	wire    [2:0] sysid_control_slave_agent_m0_burstcount;                                     // sysid_control_slave_agent:m0_burstcount -> sysid_control_slave_translator:uav_burstcount
	wire          sysid_control_slave_agent_rf_source_valid;                                   // sysid_control_slave_agent:rf_source_valid -> sysid_control_slave_agent_rsp_fifo:in_valid
	wire  [117:0] sysid_control_slave_agent_rf_source_data;                                    // sysid_control_slave_agent:rf_source_data -> sysid_control_slave_agent_rsp_fifo:in_data
	wire          sysid_control_slave_agent_rf_source_ready;                                   // sysid_control_slave_agent_rsp_fifo:in_ready -> sysid_control_slave_agent:rf_source_ready
	wire          sysid_control_slave_agent_rf_source_startofpacket;                           // sysid_control_slave_agent:rf_source_startofpacket -> sysid_control_slave_agent_rsp_fifo:in_startofpacket
	wire          sysid_control_slave_agent_rf_source_endofpacket;                             // sysid_control_slave_agent:rf_source_endofpacket -> sysid_control_slave_agent_rsp_fifo:in_endofpacket
	wire          sysid_control_slave_agent_rsp_fifo_out_valid;                                // sysid_control_slave_agent_rsp_fifo:out_valid -> sysid_control_slave_agent:rf_sink_valid
	wire  [117:0] sysid_control_slave_agent_rsp_fifo_out_data;                                 // sysid_control_slave_agent_rsp_fifo:out_data -> sysid_control_slave_agent:rf_sink_data
	wire          sysid_control_slave_agent_rsp_fifo_out_ready;                                // sysid_control_slave_agent:rf_sink_ready -> sysid_control_slave_agent_rsp_fifo:out_ready
	wire          sysid_control_slave_agent_rsp_fifo_out_startofpacket;                        // sysid_control_slave_agent_rsp_fifo:out_startofpacket -> sysid_control_slave_agent:rf_sink_startofpacket
	wire          sysid_control_slave_agent_rsp_fifo_out_endofpacket;                          // sysid_control_slave_agent_rsp_fifo:out_endofpacket -> sysid_control_slave_agent:rf_sink_endofpacket
	wire          sysid_control_slave_agent_rdata_fifo_src_valid;                              // sysid_control_slave_agent:rdata_fifo_src_valid -> sysid_control_slave_agent_rdata_fifo:in_valid
	wire   [33:0] sysid_control_slave_agent_rdata_fifo_src_data;                               // sysid_control_slave_agent:rdata_fifo_src_data -> sysid_control_slave_agent_rdata_fifo:in_data
	wire          sysid_control_slave_agent_rdata_fifo_src_ready;                              // sysid_control_slave_agent_rdata_fifo:in_ready -> sysid_control_slave_agent:rdata_fifo_src_ready
	wire   [31:0] cpu_0_debug_mem_slave_agent_m0_readdata;                                     // cpu_0_debug_mem_slave_translator:uav_readdata -> cpu_0_debug_mem_slave_agent:m0_readdata
	wire          cpu_0_debug_mem_slave_agent_m0_waitrequest;                                  // cpu_0_debug_mem_slave_translator:uav_waitrequest -> cpu_0_debug_mem_slave_agent:m0_waitrequest
	wire          cpu_0_debug_mem_slave_agent_m0_debugaccess;                                  // cpu_0_debug_mem_slave_agent:m0_debugaccess -> cpu_0_debug_mem_slave_translator:uav_debugaccess
	wire   [31:0] cpu_0_debug_mem_slave_agent_m0_address;                                      // cpu_0_debug_mem_slave_agent:m0_address -> cpu_0_debug_mem_slave_translator:uav_address
	wire    [3:0] cpu_0_debug_mem_slave_agent_m0_byteenable;                                   // cpu_0_debug_mem_slave_agent:m0_byteenable -> cpu_0_debug_mem_slave_translator:uav_byteenable
	wire          cpu_0_debug_mem_slave_agent_m0_read;                                         // cpu_0_debug_mem_slave_agent:m0_read -> cpu_0_debug_mem_slave_translator:uav_read
	wire          cpu_0_debug_mem_slave_agent_m0_readdatavalid;                                // cpu_0_debug_mem_slave_translator:uav_readdatavalid -> cpu_0_debug_mem_slave_agent:m0_readdatavalid
	wire          cpu_0_debug_mem_slave_agent_m0_lock;                                         // cpu_0_debug_mem_slave_agent:m0_lock -> cpu_0_debug_mem_slave_translator:uav_lock
	wire   [31:0] cpu_0_debug_mem_slave_agent_m0_writedata;                                    // cpu_0_debug_mem_slave_agent:m0_writedata -> cpu_0_debug_mem_slave_translator:uav_writedata
	wire          cpu_0_debug_mem_slave_agent_m0_write;                                        // cpu_0_debug_mem_slave_agent:m0_write -> cpu_0_debug_mem_slave_translator:uav_write
	wire    [2:0] cpu_0_debug_mem_slave_agent_m0_burstcount;                                   // cpu_0_debug_mem_slave_agent:m0_burstcount -> cpu_0_debug_mem_slave_translator:uav_burstcount
	wire          cpu_0_debug_mem_slave_agent_rf_source_valid;                                 // cpu_0_debug_mem_slave_agent:rf_source_valid -> cpu_0_debug_mem_slave_agent_rsp_fifo:in_valid
	wire  [117:0] cpu_0_debug_mem_slave_agent_rf_source_data;                                  // cpu_0_debug_mem_slave_agent:rf_source_data -> cpu_0_debug_mem_slave_agent_rsp_fifo:in_data
	wire          cpu_0_debug_mem_slave_agent_rf_source_ready;                                 // cpu_0_debug_mem_slave_agent_rsp_fifo:in_ready -> cpu_0_debug_mem_slave_agent:rf_source_ready
	wire          cpu_0_debug_mem_slave_agent_rf_source_startofpacket;                         // cpu_0_debug_mem_slave_agent:rf_source_startofpacket -> cpu_0_debug_mem_slave_agent_rsp_fifo:in_startofpacket
	wire          cpu_0_debug_mem_slave_agent_rf_source_endofpacket;                           // cpu_0_debug_mem_slave_agent:rf_source_endofpacket -> cpu_0_debug_mem_slave_agent_rsp_fifo:in_endofpacket
	wire          cpu_0_debug_mem_slave_agent_rsp_fifo_out_valid;                              // cpu_0_debug_mem_slave_agent_rsp_fifo:out_valid -> cpu_0_debug_mem_slave_agent:rf_sink_valid
	wire  [117:0] cpu_0_debug_mem_slave_agent_rsp_fifo_out_data;                               // cpu_0_debug_mem_slave_agent_rsp_fifo:out_data -> cpu_0_debug_mem_slave_agent:rf_sink_data
	wire          cpu_0_debug_mem_slave_agent_rsp_fifo_out_ready;                              // cpu_0_debug_mem_slave_agent:rf_sink_ready -> cpu_0_debug_mem_slave_agent_rsp_fifo:out_ready
	wire          cpu_0_debug_mem_slave_agent_rsp_fifo_out_startofpacket;                      // cpu_0_debug_mem_slave_agent_rsp_fifo:out_startofpacket -> cpu_0_debug_mem_slave_agent:rf_sink_startofpacket
	wire          cpu_0_debug_mem_slave_agent_rsp_fifo_out_endofpacket;                        // cpu_0_debug_mem_slave_agent_rsp_fifo:out_endofpacket -> cpu_0_debug_mem_slave_agent:rf_sink_endofpacket
	wire          cpu_0_debug_mem_slave_agent_rdata_fifo_src_valid;                            // cpu_0_debug_mem_slave_agent:rdata_fifo_src_valid -> cpu_0_debug_mem_slave_agent_rdata_fifo:in_valid
	wire   [33:0] cpu_0_debug_mem_slave_agent_rdata_fifo_src_data;                             // cpu_0_debug_mem_slave_agent:rdata_fifo_src_data -> cpu_0_debug_mem_slave_agent_rdata_fifo:in_data
	wire          cpu_0_debug_mem_slave_agent_rdata_fifo_src_ready;                            // cpu_0_debug_mem_slave_agent_rdata_fifo:in_ready -> cpu_0_debug_mem_slave_agent:rdata_fifo_src_ready
	wire   [31:0] cpu_0_bridge_s0_agent_m0_readdata;                                           // cpu_0_bridge_s0_translator:uav_readdata -> cpu_0_bridge_s0_agent:m0_readdata
	wire          cpu_0_bridge_s0_agent_m0_waitrequest;                                        // cpu_0_bridge_s0_translator:uav_waitrequest -> cpu_0_bridge_s0_agent:m0_waitrequest
	wire          cpu_0_bridge_s0_agent_m0_debugaccess;                                        // cpu_0_bridge_s0_agent:m0_debugaccess -> cpu_0_bridge_s0_translator:uav_debugaccess
	wire   [31:0] cpu_0_bridge_s0_agent_m0_address;                                            // cpu_0_bridge_s0_agent:m0_address -> cpu_0_bridge_s0_translator:uav_address
	wire    [3:0] cpu_0_bridge_s0_agent_m0_byteenable;                                         // cpu_0_bridge_s0_agent:m0_byteenable -> cpu_0_bridge_s0_translator:uav_byteenable
	wire          cpu_0_bridge_s0_agent_m0_read;                                               // cpu_0_bridge_s0_agent:m0_read -> cpu_0_bridge_s0_translator:uav_read
	wire          cpu_0_bridge_s0_agent_m0_readdatavalid;                                      // cpu_0_bridge_s0_translator:uav_readdatavalid -> cpu_0_bridge_s0_agent:m0_readdatavalid
	wire          cpu_0_bridge_s0_agent_m0_lock;                                               // cpu_0_bridge_s0_agent:m0_lock -> cpu_0_bridge_s0_translator:uav_lock
	wire   [31:0] cpu_0_bridge_s0_agent_m0_writedata;                                          // cpu_0_bridge_s0_agent:m0_writedata -> cpu_0_bridge_s0_translator:uav_writedata
	wire          cpu_0_bridge_s0_agent_m0_write;                                              // cpu_0_bridge_s0_agent:m0_write -> cpu_0_bridge_s0_translator:uav_write
	wire    [2:0] cpu_0_bridge_s0_agent_m0_burstcount;                                         // cpu_0_bridge_s0_agent:m0_burstcount -> cpu_0_bridge_s0_translator:uav_burstcount
	wire          cpu_0_bridge_s0_agent_rf_source_valid;                                       // cpu_0_bridge_s0_agent:rf_source_valid -> cpu_0_bridge_s0_agent_rsp_fifo:in_valid
	wire  [117:0] cpu_0_bridge_s0_agent_rf_source_data;                                        // cpu_0_bridge_s0_agent:rf_source_data -> cpu_0_bridge_s0_agent_rsp_fifo:in_data
	wire          cpu_0_bridge_s0_agent_rf_source_ready;                                       // cpu_0_bridge_s0_agent_rsp_fifo:in_ready -> cpu_0_bridge_s0_agent:rf_source_ready
	wire          cpu_0_bridge_s0_agent_rf_source_startofpacket;                               // cpu_0_bridge_s0_agent:rf_source_startofpacket -> cpu_0_bridge_s0_agent_rsp_fifo:in_startofpacket
	wire          cpu_0_bridge_s0_agent_rf_source_endofpacket;                                 // cpu_0_bridge_s0_agent:rf_source_endofpacket -> cpu_0_bridge_s0_agent_rsp_fifo:in_endofpacket
	wire          cpu_0_bridge_s0_agent_rsp_fifo_out_valid;                                    // cpu_0_bridge_s0_agent_rsp_fifo:out_valid -> cpu_0_bridge_s0_agent:rf_sink_valid
	wire  [117:0] cpu_0_bridge_s0_agent_rsp_fifo_out_data;                                     // cpu_0_bridge_s0_agent_rsp_fifo:out_data -> cpu_0_bridge_s0_agent:rf_sink_data
	wire          cpu_0_bridge_s0_agent_rsp_fifo_out_ready;                                    // cpu_0_bridge_s0_agent:rf_sink_ready -> cpu_0_bridge_s0_agent_rsp_fifo:out_ready
	wire          cpu_0_bridge_s0_agent_rsp_fifo_out_startofpacket;                            // cpu_0_bridge_s0_agent_rsp_fifo:out_startofpacket -> cpu_0_bridge_s0_agent:rf_sink_startofpacket
	wire          cpu_0_bridge_s0_agent_rsp_fifo_out_endofpacket;                              // cpu_0_bridge_s0_agent_rsp_fifo:out_endofpacket -> cpu_0_bridge_s0_agent:rf_sink_endofpacket
	wire          cpu_0_bridge_s0_agent_rdata_fifo_src_valid;                                  // cpu_0_bridge_s0_agent:rdata_fifo_src_valid -> cpu_0_bridge_s0_agent_rdata_fifo:in_valid
	wire   [33:0] cpu_0_bridge_s0_agent_rdata_fifo_src_data;                                   // cpu_0_bridge_s0_agent:rdata_fifo_src_data -> cpu_0_bridge_s0_agent_rdata_fifo:in_data
	wire          cpu_0_bridge_s0_agent_rdata_fifo_src_ready;                                  // cpu_0_bridge_s0_agent_rdata_fifo:in_ready -> cpu_0_bridge_s0_agent:rdata_fifo_src_ready
	wire   [15:0] sram_uas_agent_m0_readdata;                                                  // sram_uas_translator:uav_readdata -> sram_uas_agent:m0_readdata
	wire          sram_uas_agent_m0_waitrequest;                                               // sram_uas_translator:uav_waitrequest -> sram_uas_agent:m0_waitrequest
	wire          sram_uas_agent_m0_debugaccess;                                               // sram_uas_agent:m0_debugaccess -> sram_uas_translator:uav_debugaccess
	wire   [31:0] sram_uas_agent_m0_address;                                                   // sram_uas_agent:m0_address -> sram_uas_translator:uav_address
	wire    [1:0] sram_uas_agent_m0_byteenable;                                                // sram_uas_agent:m0_byteenable -> sram_uas_translator:uav_byteenable
	wire          sram_uas_agent_m0_read;                                                      // sram_uas_agent:m0_read -> sram_uas_translator:uav_read
	wire          sram_uas_agent_m0_readdatavalid;                                             // sram_uas_translator:uav_readdatavalid -> sram_uas_agent:m0_readdatavalid
	wire          sram_uas_agent_m0_lock;                                                      // sram_uas_agent:m0_lock -> sram_uas_translator:uav_lock
	wire   [15:0] sram_uas_agent_m0_writedata;                                                 // sram_uas_agent:m0_writedata -> sram_uas_translator:uav_writedata
	wire          sram_uas_agent_m0_write;                                                     // sram_uas_agent:m0_write -> sram_uas_translator:uav_write
	wire    [1:0] sram_uas_agent_m0_burstcount;                                                // sram_uas_agent:m0_burstcount -> sram_uas_translator:uav_burstcount
	wire          sram_uas_agent_rf_source_valid;                                              // sram_uas_agent:rf_source_valid -> sram_uas_agent_rsp_fifo:in_valid
	wire   [99:0] sram_uas_agent_rf_source_data;                                               // sram_uas_agent:rf_source_data -> sram_uas_agent_rsp_fifo:in_data
	wire          sram_uas_agent_rf_source_ready;                                              // sram_uas_agent_rsp_fifo:in_ready -> sram_uas_agent:rf_source_ready
	wire          sram_uas_agent_rf_source_startofpacket;                                      // sram_uas_agent:rf_source_startofpacket -> sram_uas_agent_rsp_fifo:in_startofpacket
	wire          sram_uas_agent_rf_source_endofpacket;                                        // sram_uas_agent:rf_source_endofpacket -> sram_uas_agent_rsp_fifo:in_endofpacket
	wire          sram_uas_agent_rsp_fifo_out_valid;                                           // sram_uas_agent_rsp_fifo:out_valid -> sram_uas_agent:rf_sink_valid
	wire   [99:0] sram_uas_agent_rsp_fifo_out_data;                                            // sram_uas_agent_rsp_fifo:out_data -> sram_uas_agent:rf_sink_data
	wire          sram_uas_agent_rsp_fifo_out_ready;                                           // sram_uas_agent:rf_sink_ready -> sram_uas_agent_rsp_fifo:out_ready
	wire          sram_uas_agent_rsp_fifo_out_startofpacket;                                   // sram_uas_agent_rsp_fifo:out_startofpacket -> sram_uas_agent:rf_sink_startofpacket
	wire          sram_uas_agent_rsp_fifo_out_endofpacket;                                     // sram_uas_agent_rsp_fifo:out_endofpacket -> sram_uas_agent:rf_sink_endofpacket
	wire          sram_uas_agent_rdata_fifo_src_valid;                                         // sram_uas_agent:rdata_fifo_src_valid -> sram_uas_agent_rdata_fifo:in_valid
	wire   [17:0] sram_uas_agent_rdata_fifo_src_data;                                          // sram_uas_agent:rdata_fifo_src_data -> sram_uas_agent_rdata_fifo:in_data
	wire          sram_uas_agent_rdata_fifo_src_ready;                                         // sram_uas_agent_rdata_fifo:in_ready -> sram_uas_agent:rdata_fifo_src_ready
	wire   [31:0] cpu_1_debug_mem_slave_agent_m0_readdata;                                     // cpu_1_debug_mem_slave_translator:uav_readdata -> cpu_1_debug_mem_slave_agent:m0_readdata
	wire          cpu_1_debug_mem_slave_agent_m0_waitrequest;                                  // cpu_1_debug_mem_slave_translator:uav_waitrequest -> cpu_1_debug_mem_slave_agent:m0_waitrequest
	wire          cpu_1_debug_mem_slave_agent_m0_debugaccess;                                  // cpu_1_debug_mem_slave_agent:m0_debugaccess -> cpu_1_debug_mem_slave_translator:uav_debugaccess
	wire   [31:0] cpu_1_debug_mem_slave_agent_m0_address;                                      // cpu_1_debug_mem_slave_agent:m0_address -> cpu_1_debug_mem_slave_translator:uav_address
	wire    [3:0] cpu_1_debug_mem_slave_agent_m0_byteenable;                                   // cpu_1_debug_mem_slave_agent:m0_byteenable -> cpu_1_debug_mem_slave_translator:uav_byteenable
	wire          cpu_1_debug_mem_slave_agent_m0_read;                                         // cpu_1_debug_mem_slave_agent:m0_read -> cpu_1_debug_mem_slave_translator:uav_read
	wire          cpu_1_debug_mem_slave_agent_m0_readdatavalid;                                // cpu_1_debug_mem_slave_translator:uav_readdatavalid -> cpu_1_debug_mem_slave_agent:m0_readdatavalid
	wire          cpu_1_debug_mem_slave_agent_m0_lock;                                         // cpu_1_debug_mem_slave_agent:m0_lock -> cpu_1_debug_mem_slave_translator:uav_lock
	wire   [31:0] cpu_1_debug_mem_slave_agent_m0_writedata;                                    // cpu_1_debug_mem_slave_agent:m0_writedata -> cpu_1_debug_mem_slave_translator:uav_writedata
	wire          cpu_1_debug_mem_slave_agent_m0_write;                                        // cpu_1_debug_mem_slave_agent:m0_write -> cpu_1_debug_mem_slave_translator:uav_write
	wire    [2:0] cpu_1_debug_mem_slave_agent_m0_burstcount;                                   // cpu_1_debug_mem_slave_agent:m0_burstcount -> cpu_1_debug_mem_slave_translator:uav_burstcount
	wire          cpu_1_debug_mem_slave_agent_rf_source_valid;                                 // cpu_1_debug_mem_slave_agent:rf_source_valid -> cpu_1_debug_mem_slave_agent_rsp_fifo:in_valid
	wire  [117:0] cpu_1_debug_mem_slave_agent_rf_source_data;                                  // cpu_1_debug_mem_slave_agent:rf_source_data -> cpu_1_debug_mem_slave_agent_rsp_fifo:in_data
	wire          cpu_1_debug_mem_slave_agent_rf_source_ready;                                 // cpu_1_debug_mem_slave_agent_rsp_fifo:in_ready -> cpu_1_debug_mem_slave_agent:rf_source_ready
	wire          cpu_1_debug_mem_slave_agent_rf_source_startofpacket;                         // cpu_1_debug_mem_slave_agent:rf_source_startofpacket -> cpu_1_debug_mem_slave_agent_rsp_fifo:in_startofpacket
	wire          cpu_1_debug_mem_slave_agent_rf_source_endofpacket;                           // cpu_1_debug_mem_slave_agent:rf_source_endofpacket -> cpu_1_debug_mem_slave_agent_rsp_fifo:in_endofpacket
	wire          cpu_1_debug_mem_slave_agent_rsp_fifo_out_valid;                              // cpu_1_debug_mem_slave_agent_rsp_fifo:out_valid -> cpu_1_debug_mem_slave_agent:rf_sink_valid
	wire  [117:0] cpu_1_debug_mem_slave_agent_rsp_fifo_out_data;                               // cpu_1_debug_mem_slave_agent_rsp_fifo:out_data -> cpu_1_debug_mem_slave_agent:rf_sink_data
	wire          cpu_1_debug_mem_slave_agent_rsp_fifo_out_ready;                              // cpu_1_debug_mem_slave_agent:rf_sink_ready -> cpu_1_debug_mem_slave_agent_rsp_fifo:out_ready
	wire          cpu_1_debug_mem_slave_agent_rsp_fifo_out_startofpacket;                      // cpu_1_debug_mem_slave_agent_rsp_fifo:out_startofpacket -> cpu_1_debug_mem_slave_agent:rf_sink_startofpacket
	wire          cpu_1_debug_mem_slave_agent_rsp_fifo_out_endofpacket;                        // cpu_1_debug_mem_slave_agent_rsp_fifo:out_endofpacket -> cpu_1_debug_mem_slave_agent:rf_sink_endofpacket
	wire          cpu_1_debug_mem_slave_agent_rdata_fifo_src_valid;                            // cpu_1_debug_mem_slave_agent:rdata_fifo_src_valid -> cpu_1_debug_mem_slave_agent_rdata_fifo:in_valid
	wire   [33:0] cpu_1_debug_mem_slave_agent_rdata_fifo_src_data;                             // cpu_1_debug_mem_slave_agent:rdata_fifo_src_data -> cpu_1_debug_mem_slave_agent_rdata_fifo:in_data
	wire          cpu_1_debug_mem_slave_agent_rdata_fifo_src_ready;                            // cpu_1_debug_mem_slave_agent_rdata_fifo:in_ready -> cpu_1_debug_mem_slave_agent:rdata_fifo_src_ready
	wire   [31:0] jtag_uart_1_avalon_jtag_slave_agent_m0_readdata;                             // jtag_uart_1_avalon_jtag_slave_translator:uav_readdata -> jtag_uart_1_avalon_jtag_slave_agent:m0_readdata
	wire          jtag_uart_1_avalon_jtag_slave_agent_m0_waitrequest;                          // jtag_uart_1_avalon_jtag_slave_translator:uav_waitrequest -> jtag_uart_1_avalon_jtag_slave_agent:m0_waitrequest
	wire          jtag_uart_1_avalon_jtag_slave_agent_m0_debugaccess;                          // jtag_uart_1_avalon_jtag_slave_agent:m0_debugaccess -> jtag_uart_1_avalon_jtag_slave_translator:uav_debugaccess
	wire   [31:0] jtag_uart_1_avalon_jtag_slave_agent_m0_address;                              // jtag_uart_1_avalon_jtag_slave_agent:m0_address -> jtag_uart_1_avalon_jtag_slave_translator:uav_address
	wire    [3:0] jtag_uart_1_avalon_jtag_slave_agent_m0_byteenable;                           // jtag_uart_1_avalon_jtag_slave_agent:m0_byteenable -> jtag_uart_1_avalon_jtag_slave_translator:uav_byteenable
	wire          jtag_uart_1_avalon_jtag_slave_agent_m0_read;                                 // jtag_uart_1_avalon_jtag_slave_agent:m0_read -> jtag_uart_1_avalon_jtag_slave_translator:uav_read
	wire          jtag_uart_1_avalon_jtag_slave_agent_m0_readdatavalid;                        // jtag_uart_1_avalon_jtag_slave_translator:uav_readdatavalid -> jtag_uart_1_avalon_jtag_slave_agent:m0_readdatavalid
	wire          jtag_uart_1_avalon_jtag_slave_agent_m0_lock;                                 // jtag_uart_1_avalon_jtag_slave_agent:m0_lock -> jtag_uart_1_avalon_jtag_slave_translator:uav_lock
	wire   [31:0] jtag_uart_1_avalon_jtag_slave_agent_m0_writedata;                            // jtag_uart_1_avalon_jtag_slave_agent:m0_writedata -> jtag_uart_1_avalon_jtag_slave_translator:uav_writedata
	wire          jtag_uart_1_avalon_jtag_slave_agent_m0_write;                                // jtag_uart_1_avalon_jtag_slave_agent:m0_write -> jtag_uart_1_avalon_jtag_slave_translator:uav_write
	wire    [2:0] jtag_uart_1_avalon_jtag_slave_agent_m0_burstcount;                           // jtag_uart_1_avalon_jtag_slave_agent:m0_burstcount -> jtag_uart_1_avalon_jtag_slave_translator:uav_burstcount
	wire          jtag_uart_1_avalon_jtag_slave_agent_rf_source_valid;                         // jtag_uart_1_avalon_jtag_slave_agent:rf_source_valid -> jtag_uart_1_avalon_jtag_slave_agent_rsp_fifo:in_valid
	wire  [117:0] jtag_uart_1_avalon_jtag_slave_agent_rf_source_data;                          // jtag_uart_1_avalon_jtag_slave_agent:rf_source_data -> jtag_uart_1_avalon_jtag_slave_agent_rsp_fifo:in_data
	wire          jtag_uart_1_avalon_jtag_slave_agent_rf_source_ready;                         // jtag_uart_1_avalon_jtag_slave_agent_rsp_fifo:in_ready -> jtag_uart_1_avalon_jtag_slave_agent:rf_source_ready
	wire          jtag_uart_1_avalon_jtag_slave_agent_rf_source_startofpacket;                 // jtag_uart_1_avalon_jtag_slave_agent:rf_source_startofpacket -> jtag_uart_1_avalon_jtag_slave_agent_rsp_fifo:in_startofpacket
	wire          jtag_uart_1_avalon_jtag_slave_agent_rf_source_endofpacket;                   // jtag_uart_1_avalon_jtag_slave_agent:rf_source_endofpacket -> jtag_uart_1_avalon_jtag_slave_agent_rsp_fifo:in_endofpacket
	wire          jtag_uart_1_avalon_jtag_slave_agent_rsp_fifo_out_valid;                      // jtag_uart_1_avalon_jtag_slave_agent_rsp_fifo:out_valid -> jtag_uart_1_avalon_jtag_slave_agent:rf_sink_valid
	wire  [117:0] jtag_uart_1_avalon_jtag_slave_agent_rsp_fifo_out_data;                       // jtag_uart_1_avalon_jtag_slave_agent_rsp_fifo:out_data -> jtag_uart_1_avalon_jtag_slave_agent:rf_sink_data
	wire          jtag_uart_1_avalon_jtag_slave_agent_rsp_fifo_out_ready;                      // jtag_uart_1_avalon_jtag_slave_agent:rf_sink_ready -> jtag_uart_1_avalon_jtag_slave_agent_rsp_fifo:out_ready
	wire          jtag_uart_1_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket;              // jtag_uart_1_avalon_jtag_slave_agent_rsp_fifo:out_startofpacket -> jtag_uart_1_avalon_jtag_slave_agent:rf_sink_startofpacket
	wire          jtag_uart_1_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket;                // jtag_uart_1_avalon_jtag_slave_agent_rsp_fifo:out_endofpacket -> jtag_uart_1_avalon_jtag_slave_agent:rf_sink_endofpacket
	wire          jtag_uart_1_avalon_jtag_slave_agent_rdata_fifo_src_valid;                    // jtag_uart_1_avalon_jtag_slave_agent:rdata_fifo_src_valid -> jtag_uart_1_avalon_jtag_slave_agent_rdata_fifo:in_valid
	wire   [33:0] jtag_uart_1_avalon_jtag_slave_agent_rdata_fifo_src_data;                     // jtag_uart_1_avalon_jtag_slave_agent:rdata_fifo_src_data -> jtag_uart_1_avalon_jtag_slave_agent_rdata_fifo:in_data
	wire          jtag_uart_1_avalon_jtag_slave_agent_rdata_fifo_src_ready;                    // jtag_uart_1_avalon_jtag_slave_agent_rdata_fifo:in_ready -> jtag_uart_1_avalon_jtag_slave_agent:rdata_fifo_src_ready
	wire   [31:0] lpddr2_avl_2_agent_m0_readdata;                                              // lpddr2_avl_2_translator:uav_readdata -> lpddr2_avl_2_agent:m0_readdata
	wire          lpddr2_avl_2_agent_m0_waitrequest;                                           // lpddr2_avl_2_translator:uav_waitrequest -> lpddr2_avl_2_agent:m0_waitrequest
	wire          lpddr2_avl_2_agent_m0_debugaccess;                                           // lpddr2_avl_2_agent:m0_debugaccess -> lpddr2_avl_2_translator:uav_debugaccess
	wire   [31:0] lpddr2_avl_2_agent_m0_address;                                               // lpddr2_avl_2_agent:m0_address -> lpddr2_avl_2_translator:uav_address
	wire    [3:0] lpddr2_avl_2_agent_m0_byteenable;                                            // lpddr2_avl_2_agent:m0_byteenable -> lpddr2_avl_2_translator:uav_byteenable
	wire          lpddr2_avl_2_agent_m0_read;                                                  // lpddr2_avl_2_agent:m0_read -> lpddr2_avl_2_translator:uav_read
	wire          lpddr2_avl_2_agent_m0_readdatavalid;                                         // lpddr2_avl_2_translator:uav_readdatavalid -> lpddr2_avl_2_agent:m0_readdatavalid
	wire          lpddr2_avl_2_agent_m0_lock;                                                  // lpddr2_avl_2_agent:m0_lock -> lpddr2_avl_2_translator:uav_lock
	wire   [31:0] lpddr2_avl_2_agent_m0_writedata;                                             // lpddr2_avl_2_agent:m0_writedata -> lpddr2_avl_2_translator:uav_writedata
	wire          lpddr2_avl_2_agent_m0_write;                                                 // lpddr2_avl_2_agent:m0_write -> lpddr2_avl_2_translator:uav_write
	wire    [9:0] lpddr2_avl_2_agent_m0_burstcount;                                            // lpddr2_avl_2_agent:m0_burstcount -> lpddr2_avl_2_translator:uav_burstcount
	wire          lpddr2_avl_2_agent_rf_source_valid;                                          // lpddr2_avl_2_agent:rf_source_valid -> lpddr2_avl_2_agent_rsp_fifo:in_valid
	wire  [117:0] lpddr2_avl_2_agent_rf_source_data;                                           // lpddr2_avl_2_agent:rf_source_data -> lpddr2_avl_2_agent_rsp_fifo:in_data
	wire          lpddr2_avl_2_agent_rf_source_ready;                                          // lpddr2_avl_2_agent_rsp_fifo:in_ready -> lpddr2_avl_2_agent:rf_source_ready
	wire          lpddr2_avl_2_agent_rf_source_startofpacket;                                  // lpddr2_avl_2_agent:rf_source_startofpacket -> lpddr2_avl_2_agent_rsp_fifo:in_startofpacket
	wire          lpddr2_avl_2_agent_rf_source_endofpacket;                                    // lpddr2_avl_2_agent:rf_source_endofpacket -> lpddr2_avl_2_agent_rsp_fifo:in_endofpacket
	wire          lpddr2_avl_2_agent_rsp_fifo_out_valid;                                       // lpddr2_avl_2_agent_rsp_fifo:out_valid -> lpddr2_avl_2_agent:rf_sink_valid
	wire  [117:0] lpddr2_avl_2_agent_rsp_fifo_out_data;                                        // lpddr2_avl_2_agent_rsp_fifo:out_data -> lpddr2_avl_2_agent:rf_sink_data
	wire          lpddr2_avl_2_agent_rsp_fifo_out_ready;                                       // lpddr2_avl_2_agent:rf_sink_ready -> lpddr2_avl_2_agent_rsp_fifo:out_ready
	wire          lpddr2_avl_2_agent_rsp_fifo_out_startofpacket;                               // lpddr2_avl_2_agent_rsp_fifo:out_startofpacket -> lpddr2_avl_2_agent:rf_sink_startofpacket
	wire          lpddr2_avl_2_agent_rsp_fifo_out_endofpacket;                                 // lpddr2_avl_2_agent_rsp_fifo:out_endofpacket -> lpddr2_avl_2_agent:rf_sink_endofpacket
	wire          lpddr2_avl_2_agent_rdata_fifo_src_valid;                                     // lpddr2_avl_2_agent:rdata_fifo_src_valid -> lpddr2_avl_2_agent_rdata_fifo:in_valid
	wire   [33:0] lpddr2_avl_2_agent_rdata_fifo_src_data;                                      // lpddr2_avl_2_agent:rdata_fifo_src_data -> lpddr2_avl_2_agent_rdata_fifo:in_data
	wire          lpddr2_avl_2_agent_rdata_fifo_src_ready;                                     // lpddr2_avl_2_agent_rdata_fifo:in_ready -> lpddr2_avl_2_agent:rdata_fifo_src_ready
	wire   [31:0] cpu_1_bridge_0_s0_agent_m0_readdata;                                         // cpu_1_bridge_0_s0_translator:uav_readdata -> cpu_1_bridge_0_s0_agent:m0_readdata
	wire          cpu_1_bridge_0_s0_agent_m0_waitrequest;                                      // cpu_1_bridge_0_s0_translator:uav_waitrequest -> cpu_1_bridge_0_s0_agent:m0_waitrequest
	wire          cpu_1_bridge_0_s0_agent_m0_debugaccess;                                      // cpu_1_bridge_0_s0_agent:m0_debugaccess -> cpu_1_bridge_0_s0_translator:uav_debugaccess
	wire   [31:0] cpu_1_bridge_0_s0_agent_m0_address;                                          // cpu_1_bridge_0_s0_agent:m0_address -> cpu_1_bridge_0_s0_translator:uav_address
	wire    [3:0] cpu_1_bridge_0_s0_agent_m0_byteenable;                                       // cpu_1_bridge_0_s0_agent:m0_byteenable -> cpu_1_bridge_0_s0_translator:uav_byteenable
	wire          cpu_1_bridge_0_s0_agent_m0_read;                                             // cpu_1_bridge_0_s0_agent:m0_read -> cpu_1_bridge_0_s0_translator:uav_read
	wire          cpu_1_bridge_0_s0_agent_m0_readdatavalid;                                    // cpu_1_bridge_0_s0_translator:uav_readdatavalid -> cpu_1_bridge_0_s0_agent:m0_readdatavalid
	wire          cpu_1_bridge_0_s0_agent_m0_lock;                                             // cpu_1_bridge_0_s0_agent:m0_lock -> cpu_1_bridge_0_s0_translator:uav_lock
	wire   [31:0] cpu_1_bridge_0_s0_agent_m0_writedata;                                        // cpu_1_bridge_0_s0_agent:m0_writedata -> cpu_1_bridge_0_s0_translator:uav_writedata
	wire          cpu_1_bridge_0_s0_agent_m0_write;                                            // cpu_1_bridge_0_s0_agent:m0_write -> cpu_1_bridge_0_s0_translator:uav_write
	wire    [2:0] cpu_1_bridge_0_s0_agent_m0_burstcount;                                       // cpu_1_bridge_0_s0_agent:m0_burstcount -> cpu_1_bridge_0_s0_translator:uav_burstcount
	wire          cpu_1_bridge_0_s0_agent_rf_source_valid;                                     // cpu_1_bridge_0_s0_agent:rf_source_valid -> cpu_1_bridge_0_s0_agent_rsp_fifo:in_valid
	wire  [117:0] cpu_1_bridge_0_s0_agent_rf_source_data;                                      // cpu_1_bridge_0_s0_agent:rf_source_data -> cpu_1_bridge_0_s0_agent_rsp_fifo:in_data
	wire          cpu_1_bridge_0_s0_agent_rf_source_ready;                                     // cpu_1_bridge_0_s0_agent_rsp_fifo:in_ready -> cpu_1_bridge_0_s0_agent:rf_source_ready
	wire          cpu_1_bridge_0_s0_agent_rf_source_startofpacket;                             // cpu_1_bridge_0_s0_agent:rf_source_startofpacket -> cpu_1_bridge_0_s0_agent_rsp_fifo:in_startofpacket
	wire          cpu_1_bridge_0_s0_agent_rf_source_endofpacket;                               // cpu_1_bridge_0_s0_agent:rf_source_endofpacket -> cpu_1_bridge_0_s0_agent_rsp_fifo:in_endofpacket
	wire          cpu_1_bridge_0_s0_agent_rsp_fifo_out_valid;                                  // cpu_1_bridge_0_s0_agent_rsp_fifo:out_valid -> cpu_1_bridge_0_s0_agent:rf_sink_valid
	wire  [117:0] cpu_1_bridge_0_s0_agent_rsp_fifo_out_data;                                   // cpu_1_bridge_0_s0_agent_rsp_fifo:out_data -> cpu_1_bridge_0_s0_agent:rf_sink_data
	wire          cpu_1_bridge_0_s0_agent_rsp_fifo_out_ready;                                  // cpu_1_bridge_0_s0_agent:rf_sink_ready -> cpu_1_bridge_0_s0_agent_rsp_fifo:out_ready
	wire          cpu_1_bridge_0_s0_agent_rsp_fifo_out_startofpacket;                          // cpu_1_bridge_0_s0_agent_rsp_fifo:out_startofpacket -> cpu_1_bridge_0_s0_agent:rf_sink_startofpacket
	wire          cpu_1_bridge_0_s0_agent_rsp_fifo_out_endofpacket;                            // cpu_1_bridge_0_s0_agent_rsp_fifo:out_endofpacket -> cpu_1_bridge_0_s0_agent:rf_sink_endofpacket
	wire          cpu_1_bridge_0_s0_agent_rdata_fifo_src_valid;                                // cpu_1_bridge_0_s0_agent:rdata_fifo_src_valid -> cpu_1_bridge_0_s0_agent_rdata_fifo:in_valid
	wire   [33:0] cpu_1_bridge_0_s0_agent_rdata_fifo_src_data;                                 // cpu_1_bridge_0_s0_agent:rdata_fifo_src_data -> cpu_1_bridge_0_s0_agent_rdata_fifo:in_data
	wire          cpu_1_bridge_0_s0_agent_rdata_fifo_src_ready;                                // cpu_1_bridge_0_s0_agent_rdata_fifo:in_ready -> cpu_1_bridge_0_s0_agent:rdata_fifo_src_ready
	wire          cpu_0_data_master_agent_cp_valid;                                            // cpu_0_data_master_agent:cp_valid -> router:sink_valid
	wire  [116:0] cpu_0_data_master_agent_cp_data;                                             // cpu_0_data_master_agent:cp_data -> router:sink_data
	wire          cpu_0_data_master_agent_cp_ready;                                            // router:sink_ready -> cpu_0_data_master_agent:cp_ready
	wire          cpu_0_data_master_agent_cp_startofpacket;                                    // cpu_0_data_master_agent:cp_startofpacket -> router:sink_startofpacket
	wire          cpu_0_data_master_agent_cp_endofpacket;                                      // cpu_0_data_master_agent:cp_endofpacket -> router:sink_endofpacket
	wire          cpu_1_data_master_agent_cp_valid;                                            // cpu_1_data_master_agent:cp_valid -> router_001:sink_valid
	wire  [116:0] cpu_1_data_master_agent_cp_data;                                             // cpu_1_data_master_agent:cp_data -> router_001:sink_data
	wire          cpu_1_data_master_agent_cp_ready;                                            // router_001:sink_ready -> cpu_1_data_master_agent:cp_ready
	wire          cpu_1_data_master_agent_cp_startofpacket;                                    // cpu_1_data_master_agent:cp_startofpacket -> router_001:sink_startofpacket
	wire          cpu_1_data_master_agent_cp_endofpacket;                                      // cpu_1_data_master_agent:cp_endofpacket -> router_001:sink_endofpacket
	wire          cpu_0_instruction_master_agent_cp_valid;                                     // cpu_0_instruction_master_agent:cp_valid -> router_002:sink_valid
	wire  [116:0] cpu_0_instruction_master_agent_cp_data;                                      // cpu_0_instruction_master_agent:cp_data -> router_002:sink_data
	wire          cpu_0_instruction_master_agent_cp_ready;                                     // router_002:sink_ready -> cpu_0_instruction_master_agent:cp_ready
	wire          cpu_0_instruction_master_agent_cp_startofpacket;                             // cpu_0_instruction_master_agent:cp_startofpacket -> router_002:sink_startofpacket
	wire          cpu_0_instruction_master_agent_cp_endofpacket;                               // cpu_0_instruction_master_agent:cp_endofpacket -> router_002:sink_endofpacket
	wire          cpu_1_instruction_master_agent_cp_valid;                                     // cpu_1_instruction_master_agent:cp_valid -> router_003:sink_valid
	wire  [116:0] cpu_1_instruction_master_agent_cp_data;                                      // cpu_1_instruction_master_agent:cp_data -> router_003:sink_data
	wire          cpu_1_instruction_master_agent_cp_ready;                                     // router_003:sink_ready -> cpu_1_instruction_master_agent:cp_ready
	wire          cpu_1_instruction_master_agent_cp_startofpacket;                             // cpu_1_instruction_master_agent:cp_startofpacket -> router_003:sink_startofpacket
	wire          cpu_1_instruction_master_agent_cp_endofpacket;                               // cpu_1_instruction_master_agent:cp_endofpacket -> router_003:sink_endofpacket
	wire          sd_cont_master_agent_cp_valid;                                               // sd_cont_master_agent:cp_valid -> router_004:sink_valid
	wire  [116:0] sd_cont_master_agent_cp_data;                                                // sd_cont_master_agent:cp_data -> router_004:sink_data
	wire          sd_cont_master_agent_cp_ready;                                               // router_004:sink_ready -> sd_cont_master_agent:cp_ready
	wire          sd_cont_master_agent_cp_startofpacket;                                       // sd_cont_master_agent:cp_startofpacket -> router_004:sink_startofpacket
	wire          sd_cont_master_agent_cp_endofpacket;                                         // sd_cont_master_agent:cp_endofpacket -> router_004:sink_endofpacket
	wire          router_004_src_valid;                                                        // router_004:src_valid -> cmd_demux_004:sink_valid
	wire  [116:0] router_004_src_data;                                                         // router_004:src_data -> cmd_demux_004:sink_data
	wire          router_004_src_ready;                                                        // cmd_demux_004:sink_ready -> router_004:src_ready
	wire    [9:0] router_004_src_channel;                                                      // router_004:src_channel -> cmd_demux_004:sink_channel
	wire          router_004_src_startofpacket;                                                // router_004:src_startofpacket -> cmd_demux_004:sink_startofpacket
	wire          router_004_src_endofpacket;                                                  // router_004:src_endofpacket -> cmd_demux_004:sink_endofpacket
	wire          router_005_src_valid;                                                        // router_005:src_valid -> rsp_demux:sink_valid
	wire  [116:0] router_005_src_data;                                                         // router_005:src_data -> rsp_demux:sink_data
	wire          router_005_src_ready;                                                        // rsp_demux:sink_ready -> router_005:src_ready
	wire    [9:0] router_005_src_channel;                                                      // router_005:src_channel -> rsp_demux:sink_channel
	wire          router_005_src_startofpacket;                                                // router_005:src_startofpacket -> rsp_demux:sink_startofpacket
	wire          router_005_src_endofpacket;                                                  // router_005:src_endofpacket -> rsp_demux:sink_endofpacket
	wire          router_006_src_valid;                                                        // router_006:src_valid -> rsp_demux_001:sink_valid
	wire  [116:0] router_006_src_data;                                                         // router_006:src_data -> rsp_demux_001:sink_data
	wire          router_006_src_ready;                                                        // rsp_demux_001:sink_ready -> router_006:src_ready
	wire    [9:0] router_006_src_channel;                                                      // router_006:src_channel -> rsp_demux_001:sink_channel
	wire          router_006_src_startofpacket;                                                // router_006:src_startofpacket -> rsp_demux_001:sink_startofpacket
	wire          router_006_src_endofpacket;                                                  // router_006:src_endofpacket -> rsp_demux_001:sink_endofpacket
	wire          router_007_src_valid;                                                        // router_007:src_valid -> rsp_demux_002:sink_valid
	wire  [116:0] router_007_src_data;                                                         // router_007:src_data -> rsp_demux_002:sink_data
	wire          router_007_src_ready;                                                        // rsp_demux_002:sink_ready -> router_007:src_ready
	wire    [9:0] router_007_src_channel;                                                      // router_007:src_channel -> rsp_demux_002:sink_channel
	wire          router_007_src_startofpacket;                                                // router_007:src_startofpacket -> rsp_demux_002:sink_startofpacket
	wire          router_007_src_endofpacket;                                                  // router_007:src_endofpacket -> rsp_demux_002:sink_endofpacket
	wire          router_008_src_valid;                                                        // router_008:src_valid -> rsp_demux_003:sink_valid
	wire  [116:0] router_008_src_data;                                                         // router_008:src_data -> rsp_demux_003:sink_data
	wire          router_008_src_ready;                                                        // rsp_demux_003:sink_ready -> router_008:src_ready
	wire    [9:0] router_008_src_channel;                                                      // router_008:src_channel -> rsp_demux_003:sink_channel
	wire          router_008_src_startofpacket;                                                // router_008:src_startofpacket -> rsp_demux_003:sink_startofpacket
	wire          router_008_src_endofpacket;                                                  // router_008:src_endofpacket -> rsp_demux_003:sink_endofpacket
	wire          router_009_src_valid;                                                        // router_009:src_valid -> rsp_demux_004:sink_valid
	wire  [116:0] router_009_src_data;                                                         // router_009:src_data -> rsp_demux_004:sink_data
	wire          router_009_src_ready;                                                        // rsp_demux_004:sink_ready -> router_009:src_ready
	wire    [9:0] router_009_src_channel;                                                      // router_009:src_channel -> rsp_demux_004:sink_channel
	wire          router_009_src_startofpacket;                                                // router_009:src_startofpacket -> rsp_demux_004:sink_startofpacket
	wire          router_009_src_endofpacket;                                                  // router_009:src_endofpacket -> rsp_demux_004:sink_endofpacket
	wire          router_011_src_valid;                                                        // router_011:src_valid -> rsp_demux_006:sink_valid
	wire  [116:0] router_011_src_data;                                                         // router_011:src_data -> rsp_demux_006:sink_data
	wire          router_011_src_ready;                                                        // rsp_demux_006:sink_ready -> router_011:src_ready
	wire    [9:0] router_011_src_channel;                                                      // router_011:src_channel -> rsp_demux_006:sink_channel
	wire          router_011_src_startofpacket;                                                // router_011:src_startofpacket -> rsp_demux_006:sink_startofpacket
	wire          router_011_src_endofpacket;                                                  // router_011:src_endofpacket -> rsp_demux_006:sink_endofpacket
	wire          router_012_src_valid;                                                        // router_012:src_valid -> rsp_demux_007:sink_valid
	wire  [116:0] router_012_src_data;                                                         // router_012:src_data -> rsp_demux_007:sink_data
	wire          router_012_src_ready;                                                        // rsp_demux_007:sink_ready -> router_012:src_ready
	wire    [9:0] router_012_src_channel;                                                      // router_012:src_channel -> rsp_demux_007:sink_channel
	wire          router_012_src_startofpacket;                                                // router_012:src_startofpacket -> rsp_demux_007:sink_startofpacket
	wire          router_012_src_endofpacket;                                                  // router_012:src_endofpacket -> rsp_demux_007:sink_endofpacket
	wire          router_013_src_valid;                                                        // router_013:src_valid -> rsp_demux_008:sink_valid
	wire  [116:0] router_013_src_data;                                                         // router_013:src_data -> rsp_demux_008:sink_data
	wire          router_013_src_ready;                                                        // rsp_demux_008:sink_ready -> router_013:src_ready
	wire    [9:0] router_013_src_channel;                                                      // router_013:src_channel -> rsp_demux_008:sink_channel
	wire          router_013_src_startofpacket;                                                // router_013:src_startofpacket -> rsp_demux_008:sink_startofpacket
	wire          router_013_src_endofpacket;                                                  // router_013:src_endofpacket -> rsp_demux_008:sink_endofpacket
	wire          router_014_src_valid;                                                        // router_014:src_valid -> rsp_demux_009:sink_valid
	wire  [116:0] router_014_src_data;                                                         // router_014:src_data -> rsp_demux_009:sink_data
	wire          router_014_src_ready;                                                        // rsp_demux_009:sink_ready -> router_014:src_ready
	wire    [9:0] router_014_src_channel;                                                      // router_014:src_channel -> rsp_demux_009:sink_channel
	wire          router_014_src_startofpacket;                                                // router_014:src_startofpacket -> rsp_demux_009:sink_startofpacket
	wire          router_014_src_endofpacket;                                                  // router_014:src_endofpacket -> rsp_demux_009:sink_endofpacket
	wire          router_src_valid;                                                            // router:src_valid -> cpu_0_data_master_limiter:cmd_sink_valid
	wire  [116:0] router_src_data;                                                             // router:src_data -> cpu_0_data_master_limiter:cmd_sink_data
	wire          router_src_ready;                                                            // cpu_0_data_master_limiter:cmd_sink_ready -> router:src_ready
	wire    [9:0] router_src_channel;                                                          // router:src_channel -> cpu_0_data_master_limiter:cmd_sink_channel
	wire          router_src_startofpacket;                                                    // router:src_startofpacket -> cpu_0_data_master_limiter:cmd_sink_startofpacket
	wire          router_src_endofpacket;                                                      // router:src_endofpacket -> cpu_0_data_master_limiter:cmd_sink_endofpacket
	wire          cpu_0_data_master_limiter_rsp_src_valid;                                     // cpu_0_data_master_limiter:rsp_src_valid -> cpu_0_data_master_agent:rp_valid
	wire  [116:0] cpu_0_data_master_limiter_rsp_src_data;                                      // cpu_0_data_master_limiter:rsp_src_data -> cpu_0_data_master_agent:rp_data
	wire          cpu_0_data_master_limiter_rsp_src_ready;                                     // cpu_0_data_master_agent:rp_ready -> cpu_0_data_master_limiter:rsp_src_ready
	wire    [9:0] cpu_0_data_master_limiter_rsp_src_channel;                                   // cpu_0_data_master_limiter:rsp_src_channel -> cpu_0_data_master_agent:rp_channel
	wire          cpu_0_data_master_limiter_rsp_src_startofpacket;                             // cpu_0_data_master_limiter:rsp_src_startofpacket -> cpu_0_data_master_agent:rp_startofpacket
	wire          cpu_0_data_master_limiter_rsp_src_endofpacket;                               // cpu_0_data_master_limiter:rsp_src_endofpacket -> cpu_0_data_master_agent:rp_endofpacket
	wire          router_001_src_valid;                                                        // router_001:src_valid -> cpu_1_data_master_limiter:cmd_sink_valid
	wire  [116:0] router_001_src_data;                                                         // router_001:src_data -> cpu_1_data_master_limiter:cmd_sink_data
	wire          router_001_src_ready;                                                        // cpu_1_data_master_limiter:cmd_sink_ready -> router_001:src_ready
	wire    [9:0] router_001_src_channel;                                                      // router_001:src_channel -> cpu_1_data_master_limiter:cmd_sink_channel
	wire          router_001_src_startofpacket;                                                // router_001:src_startofpacket -> cpu_1_data_master_limiter:cmd_sink_startofpacket
	wire          router_001_src_endofpacket;                                                  // router_001:src_endofpacket -> cpu_1_data_master_limiter:cmd_sink_endofpacket
	wire          cpu_1_data_master_limiter_rsp_src_valid;                                     // cpu_1_data_master_limiter:rsp_src_valid -> cpu_1_data_master_agent:rp_valid
	wire  [116:0] cpu_1_data_master_limiter_rsp_src_data;                                      // cpu_1_data_master_limiter:rsp_src_data -> cpu_1_data_master_agent:rp_data
	wire          cpu_1_data_master_limiter_rsp_src_ready;                                     // cpu_1_data_master_agent:rp_ready -> cpu_1_data_master_limiter:rsp_src_ready
	wire    [9:0] cpu_1_data_master_limiter_rsp_src_channel;                                   // cpu_1_data_master_limiter:rsp_src_channel -> cpu_1_data_master_agent:rp_channel
	wire          cpu_1_data_master_limiter_rsp_src_startofpacket;                             // cpu_1_data_master_limiter:rsp_src_startofpacket -> cpu_1_data_master_agent:rp_startofpacket
	wire          cpu_1_data_master_limiter_rsp_src_endofpacket;                               // cpu_1_data_master_limiter:rsp_src_endofpacket -> cpu_1_data_master_agent:rp_endofpacket
	wire          router_002_src_valid;                                                        // router_002:src_valid -> cpu_0_instruction_master_limiter:cmd_sink_valid
	wire  [116:0] router_002_src_data;                                                         // router_002:src_data -> cpu_0_instruction_master_limiter:cmd_sink_data
	wire          router_002_src_ready;                                                        // cpu_0_instruction_master_limiter:cmd_sink_ready -> router_002:src_ready
	wire    [9:0] router_002_src_channel;                                                      // router_002:src_channel -> cpu_0_instruction_master_limiter:cmd_sink_channel
	wire          router_002_src_startofpacket;                                                // router_002:src_startofpacket -> cpu_0_instruction_master_limiter:cmd_sink_startofpacket
	wire          router_002_src_endofpacket;                                                  // router_002:src_endofpacket -> cpu_0_instruction_master_limiter:cmd_sink_endofpacket
	wire          cpu_0_instruction_master_limiter_rsp_src_valid;                              // cpu_0_instruction_master_limiter:rsp_src_valid -> cpu_0_instruction_master_agent:rp_valid
	wire  [116:0] cpu_0_instruction_master_limiter_rsp_src_data;                               // cpu_0_instruction_master_limiter:rsp_src_data -> cpu_0_instruction_master_agent:rp_data
	wire          cpu_0_instruction_master_limiter_rsp_src_ready;                              // cpu_0_instruction_master_agent:rp_ready -> cpu_0_instruction_master_limiter:rsp_src_ready
	wire    [9:0] cpu_0_instruction_master_limiter_rsp_src_channel;                            // cpu_0_instruction_master_limiter:rsp_src_channel -> cpu_0_instruction_master_agent:rp_channel
	wire          cpu_0_instruction_master_limiter_rsp_src_startofpacket;                      // cpu_0_instruction_master_limiter:rsp_src_startofpacket -> cpu_0_instruction_master_agent:rp_startofpacket
	wire          cpu_0_instruction_master_limiter_rsp_src_endofpacket;                        // cpu_0_instruction_master_limiter:rsp_src_endofpacket -> cpu_0_instruction_master_agent:rp_endofpacket
	wire          router_003_src_valid;                                                        // router_003:src_valid -> cpu_1_instruction_master_limiter:cmd_sink_valid
	wire  [116:0] router_003_src_data;                                                         // router_003:src_data -> cpu_1_instruction_master_limiter:cmd_sink_data
	wire          router_003_src_ready;                                                        // cpu_1_instruction_master_limiter:cmd_sink_ready -> router_003:src_ready
	wire    [9:0] router_003_src_channel;                                                      // router_003:src_channel -> cpu_1_instruction_master_limiter:cmd_sink_channel
	wire          router_003_src_startofpacket;                                                // router_003:src_startofpacket -> cpu_1_instruction_master_limiter:cmd_sink_startofpacket
	wire          router_003_src_endofpacket;                                                  // router_003:src_endofpacket -> cpu_1_instruction_master_limiter:cmd_sink_endofpacket
	wire          cpu_1_instruction_master_limiter_rsp_src_valid;                              // cpu_1_instruction_master_limiter:rsp_src_valid -> cpu_1_instruction_master_agent:rp_valid
	wire  [116:0] cpu_1_instruction_master_limiter_rsp_src_data;                               // cpu_1_instruction_master_limiter:rsp_src_data -> cpu_1_instruction_master_agent:rp_data
	wire          cpu_1_instruction_master_limiter_rsp_src_ready;                              // cpu_1_instruction_master_agent:rp_ready -> cpu_1_instruction_master_limiter:rsp_src_ready
	wire    [9:0] cpu_1_instruction_master_limiter_rsp_src_channel;                            // cpu_1_instruction_master_limiter:rsp_src_channel -> cpu_1_instruction_master_agent:rp_channel
	wire          cpu_1_instruction_master_limiter_rsp_src_startofpacket;                      // cpu_1_instruction_master_limiter:rsp_src_startofpacket -> cpu_1_instruction_master_agent:rp_startofpacket
	wire          cpu_1_instruction_master_limiter_rsp_src_endofpacket;                        // cpu_1_instruction_master_limiter:rsp_src_endofpacket -> cpu_1_instruction_master_agent:rp_endofpacket
	wire          cmd_mux_src_valid;                                                           // cmd_mux:src_valid -> jtag_uart_0_avalon_jtag_slave_burst_adapter:sink0_valid
	wire  [116:0] cmd_mux_src_data;                                                            // cmd_mux:src_data -> jtag_uart_0_avalon_jtag_slave_burst_adapter:sink0_data
	wire          cmd_mux_src_ready;                                                           // jtag_uart_0_avalon_jtag_slave_burst_adapter:sink0_ready -> cmd_mux:src_ready
	wire    [9:0] cmd_mux_src_channel;                                                         // cmd_mux:src_channel -> jtag_uart_0_avalon_jtag_slave_burst_adapter:sink0_channel
	wire          cmd_mux_src_startofpacket;                                                   // cmd_mux:src_startofpacket -> jtag_uart_0_avalon_jtag_slave_burst_adapter:sink0_startofpacket
	wire          cmd_mux_src_endofpacket;                                                     // cmd_mux:src_endofpacket -> jtag_uart_0_avalon_jtag_slave_burst_adapter:sink0_endofpacket
	wire          cmd_mux_002_src_valid;                                                       // cmd_mux_002:src_valid -> sysid_control_slave_burst_adapter:sink0_valid
	wire  [116:0] cmd_mux_002_src_data;                                                        // cmd_mux_002:src_data -> sysid_control_slave_burst_adapter:sink0_data
	wire          cmd_mux_002_src_ready;                                                       // sysid_control_slave_burst_adapter:sink0_ready -> cmd_mux_002:src_ready
	wire    [9:0] cmd_mux_002_src_channel;                                                     // cmd_mux_002:src_channel -> sysid_control_slave_burst_adapter:sink0_channel
	wire          cmd_mux_002_src_startofpacket;                                               // cmd_mux_002:src_startofpacket -> sysid_control_slave_burst_adapter:sink0_startofpacket
	wire          cmd_mux_002_src_endofpacket;                                                 // cmd_mux_002:src_endofpacket -> sysid_control_slave_burst_adapter:sink0_endofpacket
	wire          cmd_mux_003_src_valid;                                                       // cmd_mux_003:src_valid -> cpu_0_debug_mem_slave_burst_adapter:sink0_valid
	wire  [116:0] cmd_mux_003_src_data;                                                        // cmd_mux_003:src_data -> cpu_0_debug_mem_slave_burst_adapter:sink0_data
	wire          cmd_mux_003_src_ready;                                                       // cpu_0_debug_mem_slave_burst_adapter:sink0_ready -> cmd_mux_003:src_ready
	wire    [9:0] cmd_mux_003_src_channel;                                                     // cmd_mux_003:src_channel -> cpu_0_debug_mem_slave_burst_adapter:sink0_channel
	wire          cmd_mux_003_src_startofpacket;                                               // cmd_mux_003:src_startofpacket -> cpu_0_debug_mem_slave_burst_adapter:sink0_startofpacket
	wire          cmd_mux_003_src_endofpacket;                                                 // cmd_mux_003:src_endofpacket -> cpu_0_debug_mem_slave_burst_adapter:sink0_endofpacket
	wire          cmd_mux_004_src_valid;                                                       // cmd_mux_004:src_valid -> cpu_0_bridge_s0_burst_adapter:sink0_valid
	wire  [116:0] cmd_mux_004_src_data;                                                        // cmd_mux_004:src_data -> cpu_0_bridge_s0_burst_adapter:sink0_data
	wire          cmd_mux_004_src_ready;                                                       // cpu_0_bridge_s0_burst_adapter:sink0_ready -> cmd_mux_004:src_ready
	wire    [9:0] cmd_mux_004_src_channel;                                                     // cmd_mux_004:src_channel -> cpu_0_bridge_s0_burst_adapter:sink0_channel
	wire          cmd_mux_004_src_startofpacket;                                               // cmd_mux_004:src_startofpacket -> cpu_0_bridge_s0_burst_adapter:sink0_startofpacket
	wire          cmd_mux_004_src_endofpacket;                                                 // cmd_mux_004:src_endofpacket -> cpu_0_bridge_s0_burst_adapter:sink0_endofpacket
	wire          cmd_mux_006_src_valid;                                                       // cmd_mux_006:src_valid -> cpu_1_debug_mem_slave_burst_adapter:sink0_valid
	wire  [116:0] cmd_mux_006_src_data;                                                        // cmd_mux_006:src_data -> cpu_1_debug_mem_slave_burst_adapter:sink0_data
	wire          cmd_mux_006_src_ready;                                                       // cpu_1_debug_mem_slave_burst_adapter:sink0_ready -> cmd_mux_006:src_ready
	wire    [9:0] cmd_mux_006_src_channel;                                                     // cmd_mux_006:src_channel -> cpu_1_debug_mem_slave_burst_adapter:sink0_channel
	wire          cmd_mux_006_src_startofpacket;                                               // cmd_mux_006:src_startofpacket -> cpu_1_debug_mem_slave_burst_adapter:sink0_startofpacket
	wire          cmd_mux_006_src_endofpacket;                                                 // cmd_mux_006:src_endofpacket -> cpu_1_debug_mem_slave_burst_adapter:sink0_endofpacket
	wire          cmd_mux_007_src_valid;                                                       // cmd_mux_007:src_valid -> jtag_uart_1_avalon_jtag_slave_burst_adapter:sink0_valid
	wire  [116:0] cmd_mux_007_src_data;                                                        // cmd_mux_007:src_data -> jtag_uart_1_avalon_jtag_slave_burst_adapter:sink0_data
	wire          cmd_mux_007_src_ready;                                                       // jtag_uart_1_avalon_jtag_slave_burst_adapter:sink0_ready -> cmd_mux_007:src_ready
	wire    [9:0] cmd_mux_007_src_channel;                                                     // cmd_mux_007:src_channel -> jtag_uart_1_avalon_jtag_slave_burst_adapter:sink0_channel
	wire          cmd_mux_007_src_startofpacket;                                               // cmd_mux_007:src_startofpacket -> jtag_uart_1_avalon_jtag_slave_burst_adapter:sink0_startofpacket
	wire          cmd_mux_007_src_endofpacket;                                                 // cmd_mux_007:src_endofpacket -> jtag_uart_1_avalon_jtag_slave_burst_adapter:sink0_endofpacket
	wire          cmd_mux_009_src_valid;                                                       // cmd_mux_009:src_valid -> cpu_1_bridge_0_s0_burst_adapter:sink0_valid
	wire  [116:0] cmd_mux_009_src_data;                                                        // cmd_mux_009:src_data -> cpu_1_bridge_0_s0_burst_adapter:sink0_data
	wire          cmd_mux_009_src_ready;                                                       // cpu_1_bridge_0_s0_burst_adapter:sink0_ready -> cmd_mux_009:src_ready
	wire    [9:0] cmd_mux_009_src_channel;                                                     // cmd_mux_009:src_channel -> cpu_1_bridge_0_s0_burst_adapter:sink0_channel
	wire          cmd_mux_009_src_startofpacket;                                               // cmd_mux_009:src_startofpacket -> cpu_1_bridge_0_s0_burst_adapter:sink0_startofpacket
	wire          cmd_mux_009_src_endofpacket;                                                 // cmd_mux_009:src_endofpacket -> cpu_1_bridge_0_s0_burst_adapter:sink0_endofpacket
	wire          router_010_src_valid;                                                        // router_010:src_valid -> sram_uas_rsp_width_adapter:in_valid
	wire   [98:0] router_010_src_data;                                                         // router_010:src_data -> sram_uas_rsp_width_adapter:in_data
	wire          router_010_src_ready;                                                        // sram_uas_rsp_width_adapter:in_ready -> router_010:src_ready
	wire    [9:0] router_010_src_channel;                                                      // router_010:src_channel -> sram_uas_rsp_width_adapter:in_channel
	wire          router_010_src_startofpacket;                                                // router_010:src_startofpacket -> sram_uas_rsp_width_adapter:in_startofpacket
	wire          router_010_src_endofpacket;                                                  // router_010:src_endofpacket -> sram_uas_rsp_width_adapter:in_endofpacket
	wire          sram_uas_rsp_width_adapter_src_valid;                                        // sram_uas_rsp_width_adapter:out_valid -> rsp_demux_005:sink_valid
	wire  [116:0] sram_uas_rsp_width_adapter_src_data;                                         // sram_uas_rsp_width_adapter:out_data -> rsp_demux_005:sink_data
	wire          sram_uas_rsp_width_adapter_src_ready;                                        // rsp_demux_005:sink_ready -> sram_uas_rsp_width_adapter:out_ready
	wire    [9:0] sram_uas_rsp_width_adapter_src_channel;                                      // sram_uas_rsp_width_adapter:out_channel -> rsp_demux_005:sink_channel
	wire          sram_uas_rsp_width_adapter_src_startofpacket;                                // sram_uas_rsp_width_adapter:out_startofpacket -> rsp_demux_005:sink_startofpacket
	wire          sram_uas_rsp_width_adapter_src_endofpacket;                                  // sram_uas_rsp_width_adapter:out_endofpacket -> rsp_demux_005:sink_endofpacket
	wire          cmd_mux_005_src_valid;                                                       // cmd_mux_005:src_valid -> sram_uas_cmd_width_adapter:in_valid
	wire  [116:0] cmd_mux_005_src_data;                                                        // cmd_mux_005:src_data -> sram_uas_cmd_width_adapter:in_data
	wire          cmd_mux_005_src_ready;                                                       // sram_uas_cmd_width_adapter:in_ready -> cmd_mux_005:src_ready
	wire    [9:0] cmd_mux_005_src_channel;                                                     // cmd_mux_005:src_channel -> sram_uas_cmd_width_adapter:in_channel
	wire          cmd_mux_005_src_startofpacket;                                               // cmd_mux_005:src_startofpacket -> sram_uas_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_005_src_endofpacket;                                                 // cmd_mux_005:src_endofpacket -> sram_uas_cmd_width_adapter:in_endofpacket
	wire          sram_uas_cmd_width_adapter_src_valid;                                        // sram_uas_cmd_width_adapter:out_valid -> sram_uas_burst_adapter:sink0_valid
	wire   [98:0] sram_uas_cmd_width_adapter_src_data;                                         // sram_uas_cmd_width_adapter:out_data -> sram_uas_burst_adapter:sink0_data
	wire          sram_uas_cmd_width_adapter_src_ready;                                        // sram_uas_burst_adapter:sink0_ready -> sram_uas_cmd_width_adapter:out_ready
	wire    [9:0] sram_uas_cmd_width_adapter_src_channel;                                      // sram_uas_cmd_width_adapter:out_channel -> sram_uas_burst_adapter:sink0_channel
	wire          sram_uas_cmd_width_adapter_src_startofpacket;                                // sram_uas_cmd_width_adapter:out_startofpacket -> sram_uas_burst_adapter:sink0_startofpacket
	wire          sram_uas_cmd_width_adapter_src_endofpacket;                                  // sram_uas_cmd_width_adapter:out_endofpacket -> sram_uas_burst_adapter:sink0_endofpacket
	wire          cmd_demux_004_src0_valid;                                                    // cmd_demux_004:src0_valid -> crosser:in_valid
	wire  [116:0] cmd_demux_004_src0_data;                                                     // cmd_demux_004:src0_data -> crosser:in_data
	wire          cmd_demux_004_src0_ready;                                                    // crosser:in_ready -> cmd_demux_004:src0_ready
	wire    [9:0] cmd_demux_004_src0_channel;                                                  // cmd_demux_004:src0_channel -> crosser:in_channel
	wire          cmd_demux_004_src0_startofpacket;                                            // cmd_demux_004:src0_startofpacket -> crosser:in_startofpacket
	wire          cmd_demux_004_src0_endofpacket;                                              // cmd_demux_004:src0_endofpacket -> crosser:in_endofpacket
	wire          rsp_demux_001_src1_valid;                                                    // rsp_demux_001:src1_valid -> crosser_001:in_valid
	wire  [116:0] rsp_demux_001_src1_data;                                                     // rsp_demux_001:src1_data -> crosser_001:in_data
	wire          rsp_demux_001_src1_ready;                                                    // crosser_001:in_ready -> rsp_demux_001:src1_ready
	wire    [9:0] rsp_demux_001_src1_channel;                                                  // rsp_demux_001:src1_channel -> crosser_001:in_channel
	wire          rsp_demux_001_src1_startofpacket;                                            // rsp_demux_001:src1_startofpacket -> crosser_001:in_startofpacket
	wire          rsp_demux_001_src1_endofpacket;                                              // rsp_demux_001:src1_endofpacket -> crosser_001:in_endofpacket
	wire    [0:0] cpu_0_data_master_limiter_cmd_src_valid;                                     // cpu_0_data_master_limiter:cmd_src_valid -> limiter_pipeline:in_valid
	wire  [116:0] cpu_0_data_master_limiter_cmd_src_data;                                      // cpu_0_data_master_limiter:cmd_src_data -> limiter_pipeline:in_data
	wire          cpu_0_data_master_limiter_cmd_src_ready;                                     // limiter_pipeline:in_ready -> cpu_0_data_master_limiter:cmd_src_ready
	wire    [9:0] cpu_0_data_master_limiter_cmd_src_channel;                                   // cpu_0_data_master_limiter:cmd_src_channel -> limiter_pipeline:in_channel
	wire          cpu_0_data_master_limiter_cmd_src_startofpacket;                             // cpu_0_data_master_limiter:cmd_src_startofpacket -> limiter_pipeline:in_startofpacket
	wire          cpu_0_data_master_limiter_cmd_src_endofpacket;                               // cpu_0_data_master_limiter:cmd_src_endofpacket -> limiter_pipeline:in_endofpacket
	wire          limiter_pipeline_source0_valid;                                              // limiter_pipeline:out_valid -> cmd_demux:sink_valid
	wire  [116:0] limiter_pipeline_source0_data;                                               // limiter_pipeline:out_data -> cmd_demux:sink_data
	wire          limiter_pipeline_source0_ready;                                              // cmd_demux:sink_ready -> limiter_pipeline:out_ready
	wire    [9:0] limiter_pipeline_source0_channel;                                            // limiter_pipeline:out_channel -> cmd_demux:sink_channel
	wire          limiter_pipeline_source0_startofpacket;                                      // limiter_pipeline:out_startofpacket -> cmd_demux:sink_startofpacket
	wire          limiter_pipeline_source0_endofpacket;                                        // limiter_pipeline:out_endofpacket -> cmd_demux:sink_endofpacket
	wire          rsp_mux_src_valid;                                                           // rsp_mux:src_valid -> limiter_pipeline_001:in_valid
	wire  [116:0] rsp_mux_src_data;                                                            // rsp_mux:src_data -> limiter_pipeline_001:in_data
	wire          rsp_mux_src_ready;                                                           // limiter_pipeline_001:in_ready -> rsp_mux:src_ready
	wire    [9:0] rsp_mux_src_channel;                                                         // rsp_mux:src_channel -> limiter_pipeline_001:in_channel
	wire          rsp_mux_src_startofpacket;                                                   // rsp_mux:src_startofpacket -> limiter_pipeline_001:in_startofpacket
	wire          rsp_mux_src_endofpacket;                                                     // rsp_mux:src_endofpacket -> limiter_pipeline_001:in_endofpacket
	wire          limiter_pipeline_001_source0_valid;                                          // limiter_pipeline_001:out_valid -> cpu_0_data_master_limiter:rsp_sink_valid
	wire  [116:0] limiter_pipeline_001_source0_data;                                           // limiter_pipeline_001:out_data -> cpu_0_data_master_limiter:rsp_sink_data
	wire          limiter_pipeline_001_source0_ready;                                          // cpu_0_data_master_limiter:rsp_sink_ready -> limiter_pipeline_001:out_ready
	wire    [9:0] limiter_pipeline_001_source0_channel;                                        // limiter_pipeline_001:out_channel -> cpu_0_data_master_limiter:rsp_sink_channel
	wire          limiter_pipeline_001_source0_startofpacket;                                  // limiter_pipeline_001:out_startofpacket -> cpu_0_data_master_limiter:rsp_sink_startofpacket
	wire          limiter_pipeline_001_source0_endofpacket;                                    // limiter_pipeline_001:out_endofpacket -> cpu_0_data_master_limiter:rsp_sink_endofpacket
	wire    [0:0] cpu_1_data_master_limiter_cmd_src_valid;                                     // cpu_1_data_master_limiter:cmd_src_valid -> limiter_pipeline_002:in_valid
	wire  [116:0] cpu_1_data_master_limiter_cmd_src_data;                                      // cpu_1_data_master_limiter:cmd_src_data -> limiter_pipeline_002:in_data
	wire          cpu_1_data_master_limiter_cmd_src_ready;                                     // limiter_pipeline_002:in_ready -> cpu_1_data_master_limiter:cmd_src_ready
	wire    [9:0] cpu_1_data_master_limiter_cmd_src_channel;                                   // cpu_1_data_master_limiter:cmd_src_channel -> limiter_pipeline_002:in_channel
	wire          cpu_1_data_master_limiter_cmd_src_startofpacket;                             // cpu_1_data_master_limiter:cmd_src_startofpacket -> limiter_pipeline_002:in_startofpacket
	wire          cpu_1_data_master_limiter_cmd_src_endofpacket;                               // cpu_1_data_master_limiter:cmd_src_endofpacket -> limiter_pipeline_002:in_endofpacket
	wire          limiter_pipeline_002_source0_valid;                                          // limiter_pipeline_002:out_valid -> cmd_demux_001:sink_valid
	wire  [116:0] limiter_pipeline_002_source0_data;                                           // limiter_pipeline_002:out_data -> cmd_demux_001:sink_data
	wire          limiter_pipeline_002_source0_ready;                                          // cmd_demux_001:sink_ready -> limiter_pipeline_002:out_ready
	wire    [9:0] limiter_pipeline_002_source0_channel;                                        // limiter_pipeline_002:out_channel -> cmd_demux_001:sink_channel
	wire          limiter_pipeline_002_source0_startofpacket;                                  // limiter_pipeline_002:out_startofpacket -> cmd_demux_001:sink_startofpacket
	wire          limiter_pipeline_002_source0_endofpacket;                                    // limiter_pipeline_002:out_endofpacket -> cmd_demux_001:sink_endofpacket
	wire          rsp_mux_001_src_valid;                                                       // rsp_mux_001:src_valid -> limiter_pipeline_003:in_valid
	wire  [116:0] rsp_mux_001_src_data;                                                        // rsp_mux_001:src_data -> limiter_pipeline_003:in_data
	wire          rsp_mux_001_src_ready;                                                       // limiter_pipeline_003:in_ready -> rsp_mux_001:src_ready
	wire    [9:0] rsp_mux_001_src_channel;                                                     // rsp_mux_001:src_channel -> limiter_pipeline_003:in_channel
	wire          rsp_mux_001_src_startofpacket;                                               // rsp_mux_001:src_startofpacket -> limiter_pipeline_003:in_startofpacket
	wire          rsp_mux_001_src_endofpacket;                                                 // rsp_mux_001:src_endofpacket -> limiter_pipeline_003:in_endofpacket
	wire          limiter_pipeline_003_source0_valid;                                          // limiter_pipeline_003:out_valid -> cpu_1_data_master_limiter:rsp_sink_valid
	wire  [116:0] limiter_pipeline_003_source0_data;                                           // limiter_pipeline_003:out_data -> cpu_1_data_master_limiter:rsp_sink_data
	wire          limiter_pipeline_003_source0_ready;                                          // cpu_1_data_master_limiter:rsp_sink_ready -> limiter_pipeline_003:out_ready
	wire    [9:0] limiter_pipeline_003_source0_channel;                                        // limiter_pipeline_003:out_channel -> cpu_1_data_master_limiter:rsp_sink_channel
	wire          limiter_pipeline_003_source0_startofpacket;                                  // limiter_pipeline_003:out_startofpacket -> cpu_1_data_master_limiter:rsp_sink_startofpacket
	wire          limiter_pipeline_003_source0_endofpacket;                                    // limiter_pipeline_003:out_endofpacket -> cpu_1_data_master_limiter:rsp_sink_endofpacket
	wire    [0:0] cpu_0_instruction_master_limiter_cmd_src_valid;                              // cpu_0_instruction_master_limiter:cmd_src_valid -> limiter_pipeline_004:in_valid
	wire  [116:0] cpu_0_instruction_master_limiter_cmd_src_data;                               // cpu_0_instruction_master_limiter:cmd_src_data -> limiter_pipeline_004:in_data
	wire          cpu_0_instruction_master_limiter_cmd_src_ready;                              // limiter_pipeline_004:in_ready -> cpu_0_instruction_master_limiter:cmd_src_ready
	wire    [9:0] cpu_0_instruction_master_limiter_cmd_src_channel;                            // cpu_0_instruction_master_limiter:cmd_src_channel -> limiter_pipeline_004:in_channel
	wire          cpu_0_instruction_master_limiter_cmd_src_startofpacket;                      // cpu_0_instruction_master_limiter:cmd_src_startofpacket -> limiter_pipeline_004:in_startofpacket
	wire          cpu_0_instruction_master_limiter_cmd_src_endofpacket;                        // cpu_0_instruction_master_limiter:cmd_src_endofpacket -> limiter_pipeline_004:in_endofpacket
	wire          limiter_pipeline_004_source0_valid;                                          // limiter_pipeline_004:out_valid -> cmd_demux_002:sink_valid
	wire  [116:0] limiter_pipeline_004_source0_data;                                           // limiter_pipeline_004:out_data -> cmd_demux_002:sink_data
	wire          limiter_pipeline_004_source0_ready;                                          // cmd_demux_002:sink_ready -> limiter_pipeline_004:out_ready
	wire    [9:0] limiter_pipeline_004_source0_channel;                                        // limiter_pipeline_004:out_channel -> cmd_demux_002:sink_channel
	wire          limiter_pipeline_004_source0_startofpacket;                                  // limiter_pipeline_004:out_startofpacket -> cmd_demux_002:sink_startofpacket
	wire          limiter_pipeline_004_source0_endofpacket;                                    // limiter_pipeline_004:out_endofpacket -> cmd_demux_002:sink_endofpacket
	wire          rsp_mux_002_src_valid;                                                       // rsp_mux_002:src_valid -> limiter_pipeline_005:in_valid
	wire  [116:0] rsp_mux_002_src_data;                                                        // rsp_mux_002:src_data -> limiter_pipeline_005:in_data
	wire          rsp_mux_002_src_ready;                                                       // limiter_pipeline_005:in_ready -> rsp_mux_002:src_ready
	wire    [9:0] rsp_mux_002_src_channel;                                                     // rsp_mux_002:src_channel -> limiter_pipeline_005:in_channel
	wire          rsp_mux_002_src_startofpacket;                                               // rsp_mux_002:src_startofpacket -> limiter_pipeline_005:in_startofpacket
	wire          rsp_mux_002_src_endofpacket;                                                 // rsp_mux_002:src_endofpacket -> limiter_pipeline_005:in_endofpacket
	wire          limiter_pipeline_005_source0_valid;                                          // limiter_pipeline_005:out_valid -> cpu_0_instruction_master_limiter:rsp_sink_valid
	wire  [116:0] limiter_pipeline_005_source0_data;                                           // limiter_pipeline_005:out_data -> cpu_0_instruction_master_limiter:rsp_sink_data
	wire          limiter_pipeline_005_source0_ready;                                          // cpu_0_instruction_master_limiter:rsp_sink_ready -> limiter_pipeline_005:out_ready
	wire    [9:0] limiter_pipeline_005_source0_channel;                                        // limiter_pipeline_005:out_channel -> cpu_0_instruction_master_limiter:rsp_sink_channel
	wire          limiter_pipeline_005_source0_startofpacket;                                  // limiter_pipeline_005:out_startofpacket -> cpu_0_instruction_master_limiter:rsp_sink_startofpacket
	wire          limiter_pipeline_005_source0_endofpacket;                                    // limiter_pipeline_005:out_endofpacket -> cpu_0_instruction_master_limiter:rsp_sink_endofpacket
	wire    [0:0] cpu_1_instruction_master_limiter_cmd_src_valid;                              // cpu_1_instruction_master_limiter:cmd_src_valid -> limiter_pipeline_006:in_valid
	wire  [116:0] cpu_1_instruction_master_limiter_cmd_src_data;                               // cpu_1_instruction_master_limiter:cmd_src_data -> limiter_pipeline_006:in_data
	wire          cpu_1_instruction_master_limiter_cmd_src_ready;                              // limiter_pipeline_006:in_ready -> cpu_1_instruction_master_limiter:cmd_src_ready
	wire    [9:0] cpu_1_instruction_master_limiter_cmd_src_channel;                            // cpu_1_instruction_master_limiter:cmd_src_channel -> limiter_pipeline_006:in_channel
	wire          cpu_1_instruction_master_limiter_cmd_src_startofpacket;                      // cpu_1_instruction_master_limiter:cmd_src_startofpacket -> limiter_pipeline_006:in_startofpacket
	wire          cpu_1_instruction_master_limiter_cmd_src_endofpacket;                        // cpu_1_instruction_master_limiter:cmd_src_endofpacket -> limiter_pipeline_006:in_endofpacket
	wire          limiter_pipeline_006_source0_valid;                                          // limiter_pipeline_006:out_valid -> cmd_demux_003:sink_valid
	wire  [116:0] limiter_pipeline_006_source0_data;                                           // limiter_pipeline_006:out_data -> cmd_demux_003:sink_data
	wire          limiter_pipeline_006_source0_ready;                                          // cmd_demux_003:sink_ready -> limiter_pipeline_006:out_ready
	wire    [9:0] limiter_pipeline_006_source0_channel;                                        // limiter_pipeline_006:out_channel -> cmd_demux_003:sink_channel
	wire          limiter_pipeline_006_source0_startofpacket;                                  // limiter_pipeline_006:out_startofpacket -> cmd_demux_003:sink_startofpacket
	wire          limiter_pipeline_006_source0_endofpacket;                                    // limiter_pipeline_006:out_endofpacket -> cmd_demux_003:sink_endofpacket
	wire          rsp_mux_003_src_valid;                                                       // rsp_mux_003:src_valid -> limiter_pipeline_007:in_valid
	wire  [116:0] rsp_mux_003_src_data;                                                        // rsp_mux_003:src_data -> limiter_pipeline_007:in_data
	wire          rsp_mux_003_src_ready;                                                       // limiter_pipeline_007:in_ready -> rsp_mux_003:src_ready
	wire    [9:0] rsp_mux_003_src_channel;                                                     // rsp_mux_003:src_channel -> limiter_pipeline_007:in_channel
	wire          rsp_mux_003_src_startofpacket;                                               // rsp_mux_003:src_startofpacket -> limiter_pipeline_007:in_startofpacket
	wire          rsp_mux_003_src_endofpacket;                                                 // rsp_mux_003:src_endofpacket -> limiter_pipeline_007:in_endofpacket
	wire          limiter_pipeline_007_source0_valid;                                          // limiter_pipeline_007:out_valid -> cpu_1_instruction_master_limiter:rsp_sink_valid
	wire  [116:0] limiter_pipeline_007_source0_data;                                           // limiter_pipeline_007:out_data -> cpu_1_instruction_master_limiter:rsp_sink_data
	wire          limiter_pipeline_007_source0_ready;                                          // cpu_1_instruction_master_limiter:rsp_sink_ready -> limiter_pipeline_007:out_ready
	wire    [9:0] limiter_pipeline_007_source0_channel;                                        // limiter_pipeline_007:out_channel -> cpu_1_instruction_master_limiter:rsp_sink_channel
	wire          limiter_pipeline_007_source0_startofpacket;                                  // limiter_pipeline_007:out_startofpacket -> cpu_1_instruction_master_limiter:rsp_sink_startofpacket
	wire          limiter_pipeline_007_source0_endofpacket;                                    // limiter_pipeline_007:out_endofpacket -> cpu_1_instruction_master_limiter:rsp_sink_endofpacket
	wire          jtag_uart_0_avalon_jtag_slave_burst_adapter_source0_valid;                   // jtag_uart_0_avalon_jtag_slave_burst_adapter:source0_valid -> agent_pipeline:in_valid
	wire  [116:0] jtag_uart_0_avalon_jtag_slave_burst_adapter_source0_data;                    // jtag_uart_0_avalon_jtag_slave_burst_adapter:source0_data -> agent_pipeline:in_data
	wire          jtag_uart_0_avalon_jtag_slave_burst_adapter_source0_ready;                   // agent_pipeline:in_ready -> jtag_uart_0_avalon_jtag_slave_burst_adapter:source0_ready
	wire    [9:0] jtag_uart_0_avalon_jtag_slave_burst_adapter_source0_channel;                 // jtag_uart_0_avalon_jtag_slave_burst_adapter:source0_channel -> agent_pipeline:in_channel
	wire          jtag_uart_0_avalon_jtag_slave_burst_adapter_source0_startofpacket;           // jtag_uart_0_avalon_jtag_slave_burst_adapter:source0_startofpacket -> agent_pipeline:in_startofpacket
	wire          jtag_uart_0_avalon_jtag_slave_burst_adapter_source0_endofpacket;             // jtag_uart_0_avalon_jtag_slave_burst_adapter:source0_endofpacket -> agent_pipeline:in_endofpacket
	wire          agent_pipeline_source0_valid;                                                // agent_pipeline:out_valid -> jtag_uart_0_avalon_jtag_slave_agent:cp_valid
	wire  [116:0] agent_pipeline_source0_data;                                                 // agent_pipeline:out_data -> jtag_uart_0_avalon_jtag_slave_agent:cp_data
	wire          agent_pipeline_source0_ready;                                                // jtag_uart_0_avalon_jtag_slave_agent:cp_ready -> agent_pipeline:out_ready
	wire    [9:0] agent_pipeline_source0_channel;                                              // agent_pipeline:out_channel -> jtag_uart_0_avalon_jtag_slave_agent:cp_channel
	wire          agent_pipeline_source0_startofpacket;                                        // agent_pipeline:out_startofpacket -> jtag_uart_0_avalon_jtag_slave_agent:cp_startofpacket
	wire          agent_pipeline_source0_endofpacket;                                          // agent_pipeline:out_endofpacket -> jtag_uart_0_avalon_jtag_slave_agent:cp_endofpacket
	wire          jtag_uart_0_avalon_jtag_slave_agent_rp_valid;                                // jtag_uart_0_avalon_jtag_slave_agent:rp_valid -> agent_pipeline_001:in_valid
	wire  [116:0] jtag_uart_0_avalon_jtag_slave_agent_rp_data;                                 // jtag_uart_0_avalon_jtag_slave_agent:rp_data -> agent_pipeline_001:in_data
	wire          jtag_uart_0_avalon_jtag_slave_agent_rp_ready;                                // agent_pipeline_001:in_ready -> jtag_uart_0_avalon_jtag_slave_agent:rp_ready
	wire          jtag_uart_0_avalon_jtag_slave_agent_rp_startofpacket;                        // jtag_uart_0_avalon_jtag_slave_agent:rp_startofpacket -> agent_pipeline_001:in_startofpacket
	wire          jtag_uart_0_avalon_jtag_slave_agent_rp_endofpacket;                          // jtag_uart_0_avalon_jtag_slave_agent:rp_endofpacket -> agent_pipeline_001:in_endofpacket
	wire          agent_pipeline_001_source0_valid;                                            // agent_pipeline_001:out_valid -> router_005:sink_valid
	wire  [116:0] agent_pipeline_001_source0_data;                                             // agent_pipeline_001:out_data -> router_005:sink_data
	wire          agent_pipeline_001_source0_ready;                                            // router_005:sink_ready -> agent_pipeline_001:out_ready
	wire          agent_pipeline_001_source0_startofpacket;                                    // agent_pipeline_001:out_startofpacket -> router_005:sink_startofpacket
	wire          agent_pipeline_001_source0_endofpacket;                                      // agent_pipeline_001:out_endofpacket -> router_005:sink_endofpacket
	wire          cmd_mux_001_src_valid;                                                       // cmd_mux_001:src_valid -> agent_pipeline_002:in_valid
	wire  [116:0] cmd_mux_001_src_data;                                                        // cmd_mux_001:src_data -> agent_pipeline_002:in_data
	wire          cmd_mux_001_src_ready;                                                       // agent_pipeline_002:in_ready -> cmd_mux_001:src_ready
	wire    [9:0] cmd_mux_001_src_channel;                                                     // cmd_mux_001:src_channel -> agent_pipeline_002:in_channel
	wire          cmd_mux_001_src_startofpacket;                                               // cmd_mux_001:src_startofpacket -> agent_pipeline_002:in_startofpacket
	wire          cmd_mux_001_src_endofpacket;                                                 // cmd_mux_001:src_endofpacket -> agent_pipeline_002:in_endofpacket
	wire          agent_pipeline_002_source0_valid;                                            // agent_pipeline_002:out_valid -> lpddr2_avl_0_agent:cp_valid
	wire  [116:0] agent_pipeline_002_source0_data;                                             // agent_pipeline_002:out_data -> lpddr2_avl_0_agent:cp_data
	wire          agent_pipeline_002_source0_ready;                                            // lpddr2_avl_0_agent:cp_ready -> agent_pipeline_002:out_ready
	wire    [9:0] agent_pipeline_002_source0_channel;                                          // agent_pipeline_002:out_channel -> lpddr2_avl_0_agent:cp_channel
	wire          agent_pipeline_002_source0_startofpacket;                                    // agent_pipeline_002:out_startofpacket -> lpddr2_avl_0_agent:cp_startofpacket
	wire          agent_pipeline_002_source0_endofpacket;                                      // agent_pipeline_002:out_endofpacket -> lpddr2_avl_0_agent:cp_endofpacket
	wire          lpddr2_avl_0_agent_rp_valid;                                                 // lpddr2_avl_0_agent:rp_valid -> agent_pipeline_003:in_valid
	wire  [116:0] lpddr2_avl_0_agent_rp_data;                                                  // lpddr2_avl_0_agent:rp_data -> agent_pipeline_003:in_data
	wire          lpddr2_avl_0_agent_rp_ready;                                                 // agent_pipeline_003:in_ready -> lpddr2_avl_0_agent:rp_ready
	wire          lpddr2_avl_0_agent_rp_startofpacket;                                         // lpddr2_avl_0_agent:rp_startofpacket -> agent_pipeline_003:in_startofpacket
	wire          lpddr2_avl_0_agent_rp_endofpacket;                                           // lpddr2_avl_0_agent:rp_endofpacket -> agent_pipeline_003:in_endofpacket
	wire          agent_pipeline_003_source0_valid;                                            // agent_pipeline_003:out_valid -> router_006:sink_valid
	wire  [116:0] agent_pipeline_003_source0_data;                                             // agent_pipeline_003:out_data -> router_006:sink_data
	wire          agent_pipeline_003_source0_ready;                                            // router_006:sink_ready -> agent_pipeline_003:out_ready
	wire          agent_pipeline_003_source0_startofpacket;                                    // agent_pipeline_003:out_startofpacket -> router_006:sink_startofpacket
	wire          agent_pipeline_003_source0_endofpacket;                                      // agent_pipeline_003:out_endofpacket -> router_006:sink_endofpacket
	wire          sysid_control_slave_burst_adapter_source0_valid;                             // sysid_control_slave_burst_adapter:source0_valid -> agent_pipeline_004:in_valid
	wire  [116:0] sysid_control_slave_burst_adapter_source0_data;                              // sysid_control_slave_burst_adapter:source0_data -> agent_pipeline_004:in_data
	wire          sysid_control_slave_burst_adapter_source0_ready;                             // agent_pipeline_004:in_ready -> sysid_control_slave_burst_adapter:source0_ready
	wire    [9:0] sysid_control_slave_burst_adapter_source0_channel;                           // sysid_control_slave_burst_adapter:source0_channel -> agent_pipeline_004:in_channel
	wire          sysid_control_slave_burst_adapter_source0_startofpacket;                     // sysid_control_slave_burst_adapter:source0_startofpacket -> agent_pipeline_004:in_startofpacket
	wire          sysid_control_slave_burst_adapter_source0_endofpacket;                       // sysid_control_slave_burst_adapter:source0_endofpacket -> agent_pipeline_004:in_endofpacket
	wire          agent_pipeline_004_source0_valid;                                            // agent_pipeline_004:out_valid -> sysid_control_slave_agent:cp_valid
	wire  [116:0] agent_pipeline_004_source0_data;                                             // agent_pipeline_004:out_data -> sysid_control_slave_agent:cp_data
	wire          agent_pipeline_004_source0_ready;                                            // sysid_control_slave_agent:cp_ready -> agent_pipeline_004:out_ready
	wire    [9:0] agent_pipeline_004_source0_channel;                                          // agent_pipeline_004:out_channel -> sysid_control_slave_agent:cp_channel
	wire          agent_pipeline_004_source0_startofpacket;                                    // agent_pipeline_004:out_startofpacket -> sysid_control_slave_agent:cp_startofpacket
	wire          agent_pipeline_004_source0_endofpacket;                                      // agent_pipeline_004:out_endofpacket -> sysid_control_slave_agent:cp_endofpacket
	wire          sysid_control_slave_agent_rp_valid;                                          // sysid_control_slave_agent:rp_valid -> agent_pipeline_005:in_valid
	wire  [116:0] sysid_control_slave_agent_rp_data;                                           // sysid_control_slave_agent:rp_data -> agent_pipeline_005:in_data
	wire          sysid_control_slave_agent_rp_ready;                                          // agent_pipeline_005:in_ready -> sysid_control_slave_agent:rp_ready
	wire          sysid_control_slave_agent_rp_startofpacket;                                  // sysid_control_slave_agent:rp_startofpacket -> agent_pipeline_005:in_startofpacket
	wire          sysid_control_slave_agent_rp_endofpacket;                                    // sysid_control_slave_agent:rp_endofpacket -> agent_pipeline_005:in_endofpacket
	wire          agent_pipeline_005_source0_valid;                                            // agent_pipeline_005:out_valid -> router_007:sink_valid
	wire  [116:0] agent_pipeline_005_source0_data;                                             // agent_pipeline_005:out_data -> router_007:sink_data
	wire          agent_pipeline_005_source0_ready;                                            // router_007:sink_ready -> agent_pipeline_005:out_ready
	wire          agent_pipeline_005_source0_startofpacket;                                    // agent_pipeline_005:out_startofpacket -> router_007:sink_startofpacket
	wire          agent_pipeline_005_source0_endofpacket;                                      // agent_pipeline_005:out_endofpacket -> router_007:sink_endofpacket
	wire          cpu_0_debug_mem_slave_burst_adapter_source0_valid;                           // cpu_0_debug_mem_slave_burst_adapter:source0_valid -> agent_pipeline_006:in_valid
	wire  [116:0] cpu_0_debug_mem_slave_burst_adapter_source0_data;                            // cpu_0_debug_mem_slave_burst_adapter:source0_data -> agent_pipeline_006:in_data
	wire          cpu_0_debug_mem_slave_burst_adapter_source0_ready;                           // agent_pipeline_006:in_ready -> cpu_0_debug_mem_slave_burst_adapter:source0_ready
	wire    [9:0] cpu_0_debug_mem_slave_burst_adapter_source0_channel;                         // cpu_0_debug_mem_slave_burst_adapter:source0_channel -> agent_pipeline_006:in_channel
	wire          cpu_0_debug_mem_slave_burst_adapter_source0_startofpacket;                   // cpu_0_debug_mem_slave_burst_adapter:source0_startofpacket -> agent_pipeline_006:in_startofpacket
	wire          cpu_0_debug_mem_slave_burst_adapter_source0_endofpacket;                     // cpu_0_debug_mem_slave_burst_adapter:source0_endofpacket -> agent_pipeline_006:in_endofpacket
	wire          agent_pipeline_006_source0_valid;                                            // agent_pipeline_006:out_valid -> cpu_0_debug_mem_slave_agent:cp_valid
	wire  [116:0] agent_pipeline_006_source0_data;                                             // agent_pipeline_006:out_data -> cpu_0_debug_mem_slave_agent:cp_data
	wire          agent_pipeline_006_source0_ready;                                            // cpu_0_debug_mem_slave_agent:cp_ready -> agent_pipeline_006:out_ready
	wire    [9:0] agent_pipeline_006_source0_channel;                                          // agent_pipeline_006:out_channel -> cpu_0_debug_mem_slave_agent:cp_channel
	wire          agent_pipeline_006_source0_startofpacket;                                    // agent_pipeline_006:out_startofpacket -> cpu_0_debug_mem_slave_agent:cp_startofpacket
	wire          agent_pipeline_006_source0_endofpacket;                                      // agent_pipeline_006:out_endofpacket -> cpu_0_debug_mem_slave_agent:cp_endofpacket
	wire          cpu_0_debug_mem_slave_agent_rp_valid;                                        // cpu_0_debug_mem_slave_agent:rp_valid -> agent_pipeline_007:in_valid
	wire  [116:0] cpu_0_debug_mem_slave_agent_rp_data;                                         // cpu_0_debug_mem_slave_agent:rp_data -> agent_pipeline_007:in_data
	wire          cpu_0_debug_mem_slave_agent_rp_ready;                                        // agent_pipeline_007:in_ready -> cpu_0_debug_mem_slave_agent:rp_ready
	wire          cpu_0_debug_mem_slave_agent_rp_startofpacket;                                // cpu_0_debug_mem_slave_agent:rp_startofpacket -> agent_pipeline_007:in_startofpacket
	wire          cpu_0_debug_mem_slave_agent_rp_endofpacket;                                  // cpu_0_debug_mem_slave_agent:rp_endofpacket -> agent_pipeline_007:in_endofpacket
	wire          agent_pipeline_007_source0_valid;                                            // agent_pipeline_007:out_valid -> router_008:sink_valid
	wire  [116:0] agent_pipeline_007_source0_data;                                             // agent_pipeline_007:out_data -> router_008:sink_data
	wire          agent_pipeline_007_source0_ready;                                            // router_008:sink_ready -> agent_pipeline_007:out_ready
	wire          agent_pipeline_007_source0_startofpacket;                                    // agent_pipeline_007:out_startofpacket -> router_008:sink_startofpacket
	wire          agent_pipeline_007_source0_endofpacket;                                      // agent_pipeline_007:out_endofpacket -> router_008:sink_endofpacket
	wire          cpu_0_bridge_s0_burst_adapter_source0_valid;                                 // cpu_0_bridge_s0_burst_adapter:source0_valid -> agent_pipeline_008:in_valid
	wire  [116:0] cpu_0_bridge_s0_burst_adapter_source0_data;                                  // cpu_0_bridge_s0_burst_adapter:source0_data -> agent_pipeline_008:in_data
	wire          cpu_0_bridge_s0_burst_adapter_source0_ready;                                 // agent_pipeline_008:in_ready -> cpu_0_bridge_s0_burst_adapter:source0_ready
	wire    [9:0] cpu_0_bridge_s0_burst_adapter_source0_channel;                               // cpu_0_bridge_s0_burst_adapter:source0_channel -> agent_pipeline_008:in_channel
	wire          cpu_0_bridge_s0_burst_adapter_source0_startofpacket;                         // cpu_0_bridge_s0_burst_adapter:source0_startofpacket -> agent_pipeline_008:in_startofpacket
	wire          cpu_0_bridge_s0_burst_adapter_source0_endofpacket;                           // cpu_0_bridge_s0_burst_adapter:source0_endofpacket -> agent_pipeline_008:in_endofpacket
	wire          agent_pipeline_008_source0_valid;                                            // agent_pipeline_008:out_valid -> cpu_0_bridge_s0_agent:cp_valid
	wire  [116:0] agent_pipeline_008_source0_data;                                             // agent_pipeline_008:out_data -> cpu_0_bridge_s0_agent:cp_data
	wire          agent_pipeline_008_source0_ready;                                            // cpu_0_bridge_s0_agent:cp_ready -> agent_pipeline_008:out_ready
	wire    [9:0] agent_pipeline_008_source0_channel;                                          // agent_pipeline_008:out_channel -> cpu_0_bridge_s0_agent:cp_channel
	wire          agent_pipeline_008_source0_startofpacket;                                    // agent_pipeline_008:out_startofpacket -> cpu_0_bridge_s0_agent:cp_startofpacket
	wire          agent_pipeline_008_source0_endofpacket;                                      // agent_pipeline_008:out_endofpacket -> cpu_0_bridge_s0_agent:cp_endofpacket
	wire          cpu_0_bridge_s0_agent_rp_valid;                                              // cpu_0_bridge_s0_agent:rp_valid -> agent_pipeline_009:in_valid
	wire  [116:0] cpu_0_bridge_s0_agent_rp_data;                                               // cpu_0_bridge_s0_agent:rp_data -> agent_pipeline_009:in_data
	wire          cpu_0_bridge_s0_agent_rp_ready;                                              // agent_pipeline_009:in_ready -> cpu_0_bridge_s0_agent:rp_ready
	wire          cpu_0_bridge_s0_agent_rp_startofpacket;                                      // cpu_0_bridge_s0_agent:rp_startofpacket -> agent_pipeline_009:in_startofpacket
	wire          cpu_0_bridge_s0_agent_rp_endofpacket;                                        // cpu_0_bridge_s0_agent:rp_endofpacket -> agent_pipeline_009:in_endofpacket
	wire          agent_pipeline_009_source0_valid;                                            // agent_pipeline_009:out_valid -> router_009:sink_valid
	wire  [116:0] agent_pipeline_009_source0_data;                                             // agent_pipeline_009:out_data -> router_009:sink_data
	wire          agent_pipeline_009_source0_ready;                                            // router_009:sink_ready -> agent_pipeline_009:out_ready
	wire          agent_pipeline_009_source0_startofpacket;                                    // agent_pipeline_009:out_startofpacket -> router_009:sink_startofpacket
	wire          agent_pipeline_009_source0_endofpacket;                                      // agent_pipeline_009:out_endofpacket -> router_009:sink_endofpacket
	wire          sram_uas_burst_adapter_source0_valid;                                        // sram_uas_burst_adapter:source0_valid -> agent_pipeline_010:in_valid
	wire   [98:0] sram_uas_burst_adapter_source0_data;                                         // sram_uas_burst_adapter:source0_data -> agent_pipeline_010:in_data
	wire          sram_uas_burst_adapter_source0_ready;                                        // agent_pipeline_010:in_ready -> sram_uas_burst_adapter:source0_ready
	wire    [9:0] sram_uas_burst_adapter_source0_channel;                                      // sram_uas_burst_adapter:source0_channel -> agent_pipeline_010:in_channel
	wire          sram_uas_burst_adapter_source0_startofpacket;                                // sram_uas_burst_adapter:source0_startofpacket -> agent_pipeline_010:in_startofpacket
	wire          sram_uas_burst_adapter_source0_endofpacket;                                  // sram_uas_burst_adapter:source0_endofpacket -> agent_pipeline_010:in_endofpacket
	wire          agent_pipeline_010_source0_valid;                                            // agent_pipeline_010:out_valid -> sram_uas_agent:cp_valid
	wire   [98:0] agent_pipeline_010_source0_data;                                             // agent_pipeline_010:out_data -> sram_uas_agent:cp_data
	wire          agent_pipeline_010_source0_ready;                                            // sram_uas_agent:cp_ready -> agent_pipeline_010:out_ready
	wire    [9:0] agent_pipeline_010_source0_channel;                                          // agent_pipeline_010:out_channel -> sram_uas_agent:cp_channel
	wire          agent_pipeline_010_source0_startofpacket;                                    // agent_pipeline_010:out_startofpacket -> sram_uas_agent:cp_startofpacket
	wire          agent_pipeline_010_source0_endofpacket;                                      // agent_pipeline_010:out_endofpacket -> sram_uas_agent:cp_endofpacket
	wire          sram_uas_agent_rp_valid;                                                     // sram_uas_agent:rp_valid -> agent_pipeline_011:in_valid
	wire   [98:0] sram_uas_agent_rp_data;                                                      // sram_uas_agent:rp_data -> agent_pipeline_011:in_data
	wire          sram_uas_agent_rp_ready;                                                     // agent_pipeline_011:in_ready -> sram_uas_agent:rp_ready
	wire          sram_uas_agent_rp_startofpacket;                                             // sram_uas_agent:rp_startofpacket -> agent_pipeline_011:in_startofpacket
	wire          sram_uas_agent_rp_endofpacket;                                               // sram_uas_agent:rp_endofpacket -> agent_pipeline_011:in_endofpacket
	wire          agent_pipeline_011_source0_valid;                                            // agent_pipeline_011:out_valid -> router_010:sink_valid
	wire   [98:0] agent_pipeline_011_source0_data;                                             // agent_pipeline_011:out_data -> router_010:sink_data
	wire          agent_pipeline_011_source0_ready;                                            // router_010:sink_ready -> agent_pipeline_011:out_ready
	wire          agent_pipeline_011_source0_startofpacket;                                    // agent_pipeline_011:out_startofpacket -> router_010:sink_startofpacket
	wire          agent_pipeline_011_source0_endofpacket;                                      // agent_pipeline_011:out_endofpacket -> router_010:sink_endofpacket
	wire          cpu_1_debug_mem_slave_burst_adapter_source0_valid;                           // cpu_1_debug_mem_slave_burst_adapter:source0_valid -> agent_pipeline_012:in_valid
	wire  [116:0] cpu_1_debug_mem_slave_burst_adapter_source0_data;                            // cpu_1_debug_mem_slave_burst_adapter:source0_data -> agent_pipeline_012:in_data
	wire          cpu_1_debug_mem_slave_burst_adapter_source0_ready;                           // agent_pipeline_012:in_ready -> cpu_1_debug_mem_slave_burst_adapter:source0_ready
	wire    [9:0] cpu_1_debug_mem_slave_burst_adapter_source0_channel;                         // cpu_1_debug_mem_slave_burst_adapter:source0_channel -> agent_pipeline_012:in_channel
	wire          cpu_1_debug_mem_slave_burst_adapter_source0_startofpacket;                   // cpu_1_debug_mem_slave_burst_adapter:source0_startofpacket -> agent_pipeline_012:in_startofpacket
	wire          cpu_1_debug_mem_slave_burst_adapter_source0_endofpacket;                     // cpu_1_debug_mem_slave_burst_adapter:source0_endofpacket -> agent_pipeline_012:in_endofpacket
	wire          agent_pipeline_012_source0_valid;                                            // agent_pipeline_012:out_valid -> cpu_1_debug_mem_slave_agent:cp_valid
	wire  [116:0] agent_pipeline_012_source0_data;                                             // agent_pipeline_012:out_data -> cpu_1_debug_mem_slave_agent:cp_data
	wire          agent_pipeline_012_source0_ready;                                            // cpu_1_debug_mem_slave_agent:cp_ready -> agent_pipeline_012:out_ready
	wire    [9:0] agent_pipeline_012_source0_channel;                                          // agent_pipeline_012:out_channel -> cpu_1_debug_mem_slave_agent:cp_channel
	wire          agent_pipeline_012_source0_startofpacket;                                    // agent_pipeline_012:out_startofpacket -> cpu_1_debug_mem_slave_agent:cp_startofpacket
	wire          agent_pipeline_012_source0_endofpacket;                                      // agent_pipeline_012:out_endofpacket -> cpu_1_debug_mem_slave_agent:cp_endofpacket
	wire          cpu_1_debug_mem_slave_agent_rp_valid;                                        // cpu_1_debug_mem_slave_agent:rp_valid -> agent_pipeline_013:in_valid
	wire  [116:0] cpu_1_debug_mem_slave_agent_rp_data;                                         // cpu_1_debug_mem_slave_agent:rp_data -> agent_pipeline_013:in_data
	wire          cpu_1_debug_mem_slave_agent_rp_ready;                                        // agent_pipeline_013:in_ready -> cpu_1_debug_mem_slave_agent:rp_ready
	wire          cpu_1_debug_mem_slave_agent_rp_startofpacket;                                // cpu_1_debug_mem_slave_agent:rp_startofpacket -> agent_pipeline_013:in_startofpacket
	wire          cpu_1_debug_mem_slave_agent_rp_endofpacket;                                  // cpu_1_debug_mem_slave_agent:rp_endofpacket -> agent_pipeline_013:in_endofpacket
	wire          agent_pipeline_013_source0_valid;                                            // agent_pipeline_013:out_valid -> router_011:sink_valid
	wire  [116:0] agent_pipeline_013_source0_data;                                             // agent_pipeline_013:out_data -> router_011:sink_data
	wire          agent_pipeline_013_source0_ready;                                            // router_011:sink_ready -> agent_pipeline_013:out_ready
	wire          agent_pipeline_013_source0_startofpacket;                                    // agent_pipeline_013:out_startofpacket -> router_011:sink_startofpacket
	wire          agent_pipeline_013_source0_endofpacket;                                      // agent_pipeline_013:out_endofpacket -> router_011:sink_endofpacket
	wire          jtag_uart_1_avalon_jtag_slave_burst_adapter_source0_valid;                   // jtag_uart_1_avalon_jtag_slave_burst_adapter:source0_valid -> agent_pipeline_014:in_valid
	wire  [116:0] jtag_uart_1_avalon_jtag_slave_burst_adapter_source0_data;                    // jtag_uart_1_avalon_jtag_slave_burst_adapter:source0_data -> agent_pipeline_014:in_data
	wire          jtag_uart_1_avalon_jtag_slave_burst_adapter_source0_ready;                   // agent_pipeline_014:in_ready -> jtag_uart_1_avalon_jtag_slave_burst_adapter:source0_ready
	wire    [9:0] jtag_uart_1_avalon_jtag_slave_burst_adapter_source0_channel;                 // jtag_uart_1_avalon_jtag_slave_burst_adapter:source0_channel -> agent_pipeline_014:in_channel
	wire          jtag_uart_1_avalon_jtag_slave_burst_adapter_source0_startofpacket;           // jtag_uart_1_avalon_jtag_slave_burst_adapter:source0_startofpacket -> agent_pipeline_014:in_startofpacket
	wire          jtag_uart_1_avalon_jtag_slave_burst_adapter_source0_endofpacket;             // jtag_uart_1_avalon_jtag_slave_burst_adapter:source0_endofpacket -> agent_pipeline_014:in_endofpacket
	wire          agent_pipeline_014_source0_valid;                                            // agent_pipeline_014:out_valid -> jtag_uart_1_avalon_jtag_slave_agent:cp_valid
	wire  [116:0] agent_pipeline_014_source0_data;                                             // agent_pipeline_014:out_data -> jtag_uart_1_avalon_jtag_slave_agent:cp_data
	wire          agent_pipeline_014_source0_ready;                                            // jtag_uart_1_avalon_jtag_slave_agent:cp_ready -> agent_pipeline_014:out_ready
	wire    [9:0] agent_pipeline_014_source0_channel;                                          // agent_pipeline_014:out_channel -> jtag_uart_1_avalon_jtag_slave_agent:cp_channel
	wire          agent_pipeline_014_source0_startofpacket;                                    // agent_pipeline_014:out_startofpacket -> jtag_uart_1_avalon_jtag_slave_agent:cp_startofpacket
	wire          agent_pipeline_014_source0_endofpacket;                                      // agent_pipeline_014:out_endofpacket -> jtag_uart_1_avalon_jtag_slave_agent:cp_endofpacket
	wire          jtag_uart_1_avalon_jtag_slave_agent_rp_valid;                                // jtag_uart_1_avalon_jtag_slave_agent:rp_valid -> agent_pipeline_015:in_valid
	wire  [116:0] jtag_uart_1_avalon_jtag_slave_agent_rp_data;                                 // jtag_uart_1_avalon_jtag_slave_agent:rp_data -> agent_pipeline_015:in_data
	wire          jtag_uart_1_avalon_jtag_slave_agent_rp_ready;                                // agent_pipeline_015:in_ready -> jtag_uart_1_avalon_jtag_slave_agent:rp_ready
	wire          jtag_uart_1_avalon_jtag_slave_agent_rp_startofpacket;                        // jtag_uart_1_avalon_jtag_slave_agent:rp_startofpacket -> agent_pipeline_015:in_startofpacket
	wire          jtag_uart_1_avalon_jtag_slave_agent_rp_endofpacket;                          // jtag_uart_1_avalon_jtag_slave_agent:rp_endofpacket -> agent_pipeline_015:in_endofpacket
	wire          agent_pipeline_015_source0_valid;                                            // agent_pipeline_015:out_valid -> router_012:sink_valid
	wire  [116:0] agent_pipeline_015_source0_data;                                             // agent_pipeline_015:out_data -> router_012:sink_data
	wire          agent_pipeline_015_source0_ready;                                            // router_012:sink_ready -> agent_pipeline_015:out_ready
	wire          agent_pipeline_015_source0_startofpacket;                                    // agent_pipeline_015:out_startofpacket -> router_012:sink_startofpacket
	wire          agent_pipeline_015_source0_endofpacket;                                      // agent_pipeline_015:out_endofpacket -> router_012:sink_endofpacket
	wire          cmd_mux_008_src_valid;                                                       // cmd_mux_008:src_valid -> agent_pipeline_016:in_valid
	wire  [116:0] cmd_mux_008_src_data;                                                        // cmd_mux_008:src_data -> agent_pipeline_016:in_data
	wire          cmd_mux_008_src_ready;                                                       // agent_pipeline_016:in_ready -> cmd_mux_008:src_ready
	wire    [9:0] cmd_mux_008_src_channel;                                                     // cmd_mux_008:src_channel -> agent_pipeline_016:in_channel
	wire          cmd_mux_008_src_startofpacket;                                               // cmd_mux_008:src_startofpacket -> agent_pipeline_016:in_startofpacket
	wire          cmd_mux_008_src_endofpacket;                                                 // cmd_mux_008:src_endofpacket -> agent_pipeline_016:in_endofpacket
	wire          agent_pipeline_016_source0_valid;                                            // agent_pipeline_016:out_valid -> lpddr2_avl_2_agent:cp_valid
	wire  [116:0] agent_pipeline_016_source0_data;                                             // agent_pipeline_016:out_data -> lpddr2_avl_2_agent:cp_data
	wire          agent_pipeline_016_source0_ready;                                            // lpddr2_avl_2_agent:cp_ready -> agent_pipeline_016:out_ready
	wire    [9:0] agent_pipeline_016_source0_channel;                                          // agent_pipeline_016:out_channel -> lpddr2_avl_2_agent:cp_channel
	wire          agent_pipeline_016_source0_startofpacket;                                    // agent_pipeline_016:out_startofpacket -> lpddr2_avl_2_agent:cp_startofpacket
	wire          agent_pipeline_016_source0_endofpacket;                                      // agent_pipeline_016:out_endofpacket -> lpddr2_avl_2_agent:cp_endofpacket
	wire          lpddr2_avl_2_agent_rp_valid;                                                 // lpddr2_avl_2_agent:rp_valid -> agent_pipeline_017:in_valid
	wire  [116:0] lpddr2_avl_2_agent_rp_data;                                                  // lpddr2_avl_2_agent:rp_data -> agent_pipeline_017:in_data
	wire          lpddr2_avl_2_agent_rp_ready;                                                 // agent_pipeline_017:in_ready -> lpddr2_avl_2_agent:rp_ready
	wire          lpddr2_avl_2_agent_rp_startofpacket;                                         // lpddr2_avl_2_agent:rp_startofpacket -> agent_pipeline_017:in_startofpacket
	wire          lpddr2_avl_2_agent_rp_endofpacket;                                           // lpddr2_avl_2_agent:rp_endofpacket -> agent_pipeline_017:in_endofpacket
	wire          agent_pipeline_017_source0_valid;                                            // agent_pipeline_017:out_valid -> router_013:sink_valid
	wire  [116:0] agent_pipeline_017_source0_data;                                             // agent_pipeline_017:out_data -> router_013:sink_data
	wire          agent_pipeline_017_source0_ready;                                            // router_013:sink_ready -> agent_pipeline_017:out_ready
	wire          agent_pipeline_017_source0_startofpacket;                                    // agent_pipeline_017:out_startofpacket -> router_013:sink_startofpacket
	wire          agent_pipeline_017_source0_endofpacket;                                      // agent_pipeline_017:out_endofpacket -> router_013:sink_endofpacket
	wire          cpu_1_bridge_0_s0_burst_adapter_source0_valid;                               // cpu_1_bridge_0_s0_burst_adapter:source0_valid -> agent_pipeline_018:in_valid
	wire  [116:0] cpu_1_bridge_0_s0_burst_adapter_source0_data;                                // cpu_1_bridge_0_s0_burst_adapter:source0_data -> agent_pipeline_018:in_data
	wire          cpu_1_bridge_0_s0_burst_adapter_source0_ready;                               // agent_pipeline_018:in_ready -> cpu_1_bridge_0_s0_burst_adapter:source0_ready
	wire    [9:0] cpu_1_bridge_0_s0_burst_adapter_source0_channel;                             // cpu_1_bridge_0_s0_burst_adapter:source0_channel -> agent_pipeline_018:in_channel
	wire          cpu_1_bridge_0_s0_burst_adapter_source0_startofpacket;                       // cpu_1_bridge_0_s0_burst_adapter:source0_startofpacket -> agent_pipeline_018:in_startofpacket
	wire          cpu_1_bridge_0_s0_burst_adapter_source0_endofpacket;                         // cpu_1_bridge_0_s0_burst_adapter:source0_endofpacket -> agent_pipeline_018:in_endofpacket
	wire          agent_pipeline_018_source0_valid;                                            // agent_pipeline_018:out_valid -> cpu_1_bridge_0_s0_agent:cp_valid
	wire  [116:0] agent_pipeline_018_source0_data;                                             // agent_pipeline_018:out_data -> cpu_1_bridge_0_s0_agent:cp_data
	wire          agent_pipeline_018_source0_ready;                                            // cpu_1_bridge_0_s0_agent:cp_ready -> agent_pipeline_018:out_ready
	wire    [9:0] agent_pipeline_018_source0_channel;                                          // agent_pipeline_018:out_channel -> cpu_1_bridge_0_s0_agent:cp_channel
	wire          agent_pipeline_018_source0_startofpacket;                                    // agent_pipeline_018:out_startofpacket -> cpu_1_bridge_0_s0_agent:cp_startofpacket
	wire          agent_pipeline_018_source0_endofpacket;                                      // agent_pipeline_018:out_endofpacket -> cpu_1_bridge_0_s0_agent:cp_endofpacket
	wire          cpu_1_bridge_0_s0_agent_rp_valid;                                            // cpu_1_bridge_0_s0_agent:rp_valid -> agent_pipeline_019:in_valid
	wire  [116:0] cpu_1_bridge_0_s0_agent_rp_data;                                             // cpu_1_bridge_0_s0_agent:rp_data -> agent_pipeline_019:in_data
	wire          cpu_1_bridge_0_s0_agent_rp_ready;                                            // agent_pipeline_019:in_ready -> cpu_1_bridge_0_s0_agent:rp_ready
	wire          cpu_1_bridge_0_s0_agent_rp_startofpacket;                                    // cpu_1_bridge_0_s0_agent:rp_startofpacket -> agent_pipeline_019:in_startofpacket
	wire          cpu_1_bridge_0_s0_agent_rp_endofpacket;                                      // cpu_1_bridge_0_s0_agent:rp_endofpacket -> agent_pipeline_019:in_endofpacket
	wire          agent_pipeline_019_source0_valid;                                            // agent_pipeline_019:out_valid -> router_014:sink_valid
	wire  [116:0] agent_pipeline_019_source0_data;                                             // agent_pipeline_019:out_data -> router_014:sink_data
	wire          agent_pipeline_019_source0_ready;                                            // router_014:sink_ready -> agent_pipeline_019:out_ready
	wire          agent_pipeline_019_source0_startofpacket;                                    // agent_pipeline_019:out_startofpacket -> router_014:sink_startofpacket
	wire          agent_pipeline_019_source0_endofpacket;                                      // agent_pipeline_019:out_endofpacket -> router_014:sink_endofpacket
	wire          cmd_demux_src0_valid;                                                        // cmd_demux:src0_valid -> mux_pipeline:in_valid
	wire  [116:0] cmd_demux_src0_data;                                                         // cmd_demux:src0_data -> mux_pipeline:in_data
	wire          cmd_demux_src0_ready;                                                        // mux_pipeline:in_ready -> cmd_demux:src0_ready
	wire    [9:0] cmd_demux_src0_channel;                                                      // cmd_demux:src0_channel -> mux_pipeline:in_channel
	wire          cmd_demux_src0_startofpacket;                                                // cmd_demux:src0_startofpacket -> mux_pipeline:in_startofpacket
	wire          cmd_demux_src0_endofpacket;                                                  // cmd_demux:src0_endofpacket -> mux_pipeline:in_endofpacket
	wire          mux_pipeline_source0_valid;                                                  // mux_pipeline:out_valid -> cmd_mux:sink0_valid
	wire  [116:0] mux_pipeline_source0_data;                                                   // mux_pipeline:out_data -> cmd_mux:sink0_data
	wire          mux_pipeline_source0_ready;                                                  // cmd_mux:sink0_ready -> mux_pipeline:out_ready
	wire    [9:0] mux_pipeline_source0_channel;                                                // mux_pipeline:out_channel -> cmd_mux:sink0_channel
	wire          mux_pipeline_source0_startofpacket;                                          // mux_pipeline:out_startofpacket -> cmd_mux:sink0_startofpacket
	wire          mux_pipeline_source0_endofpacket;                                            // mux_pipeline:out_endofpacket -> cmd_mux:sink0_endofpacket
	wire          cmd_demux_src1_valid;                                                        // cmd_demux:src1_valid -> mux_pipeline_001:in_valid
	wire  [116:0] cmd_demux_src1_data;                                                         // cmd_demux:src1_data -> mux_pipeline_001:in_data
	wire          cmd_demux_src1_ready;                                                        // mux_pipeline_001:in_ready -> cmd_demux:src1_ready
	wire    [9:0] cmd_demux_src1_channel;                                                      // cmd_demux:src1_channel -> mux_pipeline_001:in_channel
	wire          cmd_demux_src1_startofpacket;                                                // cmd_demux:src1_startofpacket -> mux_pipeline_001:in_startofpacket
	wire          cmd_demux_src1_endofpacket;                                                  // cmd_demux:src1_endofpacket -> mux_pipeline_001:in_endofpacket
	wire          mux_pipeline_001_source0_valid;                                              // mux_pipeline_001:out_valid -> cmd_mux_001:sink0_valid
	wire  [116:0] mux_pipeline_001_source0_data;                                               // mux_pipeline_001:out_data -> cmd_mux_001:sink0_data
	wire          mux_pipeline_001_source0_ready;                                              // cmd_mux_001:sink0_ready -> mux_pipeline_001:out_ready
	wire    [9:0] mux_pipeline_001_source0_channel;                                            // mux_pipeline_001:out_channel -> cmd_mux_001:sink0_channel
	wire          mux_pipeline_001_source0_startofpacket;                                      // mux_pipeline_001:out_startofpacket -> cmd_mux_001:sink0_startofpacket
	wire          mux_pipeline_001_source0_endofpacket;                                        // mux_pipeline_001:out_endofpacket -> cmd_mux_001:sink0_endofpacket
	wire          crosser_out_valid;                                                           // crosser:out_valid -> mux_pipeline_002:in_valid
	wire  [116:0] crosser_out_data;                                                            // crosser:out_data -> mux_pipeline_002:in_data
	wire          crosser_out_ready;                                                           // mux_pipeline_002:in_ready -> crosser:out_ready
	wire    [9:0] crosser_out_channel;                                                         // crosser:out_channel -> mux_pipeline_002:in_channel
	wire          crosser_out_startofpacket;                                                   // crosser:out_startofpacket -> mux_pipeline_002:in_startofpacket
	wire          crosser_out_endofpacket;                                                     // crosser:out_endofpacket -> mux_pipeline_002:in_endofpacket
	wire          mux_pipeline_002_source0_valid;                                              // mux_pipeline_002:out_valid -> cmd_mux_001:sink1_valid
	wire  [116:0] mux_pipeline_002_source0_data;                                               // mux_pipeline_002:out_data -> cmd_mux_001:sink1_data
	wire          mux_pipeline_002_source0_ready;                                              // cmd_mux_001:sink1_ready -> mux_pipeline_002:out_ready
	wire    [9:0] mux_pipeline_002_source0_channel;                                            // mux_pipeline_002:out_channel -> cmd_mux_001:sink1_channel
	wire          mux_pipeline_002_source0_startofpacket;                                      // mux_pipeline_002:out_startofpacket -> cmd_mux_001:sink1_startofpacket
	wire          mux_pipeline_002_source0_endofpacket;                                        // mux_pipeline_002:out_endofpacket -> cmd_mux_001:sink1_endofpacket
	wire          cmd_demux_src2_valid;                                                        // cmd_demux:src2_valid -> mux_pipeline_003:in_valid
	wire  [116:0] cmd_demux_src2_data;                                                         // cmd_demux:src2_data -> mux_pipeline_003:in_data
	wire          cmd_demux_src2_ready;                                                        // mux_pipeline_003:in_ready -> cmd_demux:src2_ready
	wire    [9:0] cmd_demux_src2_channel;                                                      // cmd_demux:src2_channel -> mux_pipeline_003:in_channel
	wire          cmd_demux_src2_startofpacket;                                                // cmd_demux:src2_startofpacket -> mux_pipeline_003:in_startofpacket
	wire          cmd_demux_src2_endofpacket;                                                  // cmd_demux:src2_endofpacket -> mux_pipeline_003:in_endofpacket
	wire          mux_pipeline_003_source0_valid;                                              // mux_pipeline_003:out_valid -> cmd_mux_002:sink0_valid
	wire  [116:0] mux_pipeline_003_source0_data;                                               // mux_pipeline_003:out_data -> cmd_mux_002:sink0_data
	wire          mux_pipeline_003_source0_ready;                                              // cmd_mux_002:sink0_ready -> mux_pipeline_003:out_ready
	wire    [9:0] mux_pipeline_003_source0_channel;                                            // mux_pipeline_003:out_channel -> cmd_mux_002:sink0_channel
	wire          mux_pipeline_003_source0_startofpacket;                                      // mux_pipeline_003:out_startofpacket -> cmd_mux_002:sink0_startofpacket
	wire          mux_pipeline_003_source0_endofpacket;                                        // mux_pipeline_003:out_endofpacket -> cmd_mux_002:sink0_endofpacket
	wire          cmd_demux_src3_valid;                                                        // cmd_demux:src3_valid -> mux_pipeline_004:in_valid
	wire  [116:0] cmd_demux_src3_data;                                                         // cmd_demux:src3_data -> mux_pipeline_004:in_data
	wire          cmd_demux_src3_ready;                                                        // mux_pipeline_004:in_ready -> cmd_demux:src3_ready
	wire    [9:0] cmd_demux_src3_channel;                                                      // cmd_demux:src3_channel -> mux_pipeline_004:in_channel
	wire          cmd_demux_src3_startofpacket;                                                // cmd_demux:src3_startofpacket -> mux_pipeline_004:in_startofpacket
	wire          cmd_demux_src3_endofpacket;                                                  // cmd_demux:src3_endofpacket -> mux_pipeline_004:in_endofpacket
	wire          mux_pipeline_004_source0_valid;                                              // mux_pipeline_004:out_valid -> cmd_mux_003:sink0_valid
	wire  [116:0] mux_pipeline_004_source0_data;                                               // mux_pipeline_004:out_data -> cmd_mux_003:sink0_data
	wire          mux_pipeline_004_source0_ready;                                              // cmd_mux_003:sink0_ready -> mux_pipeline_004:out_ready
	wire    [9:0] mux_pipeline_004_source0_channel;                                            // mux_pipeline_004:out_channel -> cmd_mux_003:sink0_channel
	wire          mux_pipeline_004_source0_startofpacket;                                      // mux_pipeline_004:out_startofpacket -> cmd_mux_003:sink0_startofpacket
	wire          mux_pipeline_004_source0_endofpacket;                                        // mux_pipeline_004:out_endofpacket -> cmd_mux_003:sink0_endofpacket
	wire          cmd_demux_002_src0_valid;                                                    // cmd_demux_002:src0_valid -> mux_pipeline_005:in_valid
	wire  [116:0] cmd_demux_002_src0_data;                                                     // cmd_demux_002:src0_data -> mux_pipeline_005:in_data
	wire          cmd_demux_002_src0_ready;                                                    // mux_pipeline_005:in_ready -> cmd_demux_002:src0_ready
	wire    [9:0] cmd_demux_002_src0_channel;                                                  // cmd_demux_002:src0_channel -> mux_pipeline_005:in_channel
	wire          cmd_demux_002_src0_startofpacket;                                            // cmd_demux_002:src0_startofpacket -> mux_pipeline_005:in_startofpacket
	wire          cmd_demux_002_src0_endofpacket;                                              // cmd_demux_002:src0_endofpacket -> mux_pipeline_005:in_endofpacket
	wire          mux_pipeline_005_source0_valid;                                              // mux_pipeline_005:out_valid -> cmd_mux_003:sink1_valid
	wire  [116:0] mux_pipeline_005_source0_data;                                               // mux_pipeline_005:out_data -> cmd_mux_003:sink1_data
	wire          mux_pipeline_005_source0_ready;                                              // cmd_mux_003:sink1_ready -> mux_pipeline_005:out_ready
	wire    [9:0] mux_pipeline_005_source0_channel;                                            // mux_pipeline_005:out_channel -> cmd_mux_003:sink1_channel
	wire          mux_pipeline_005_source0_startofpacket;                                      // mux_pipeline_005:out_startofpacket -> cmd_mux_003:sink1_startofpacket
	wire          mux_pipeline_005_source0_endofpacket;                                        // mux_pipeline_005:out_endofpacket -> cmd_mux_003:sink1_endofpacket
	wire          cmd_demux_src4_valid;                                                        // cmd_demux:src4_valid -> mux_pipeline_006:in_valid
	wire  [116:0] cmd_demux_src4_data;                                                         // cmd_demux:src4_data -> mux_pipeline_006:in_data
	wire          cmd_demux_src4_ready;                                                        // mux_pipeline_006:in_ready -> cmd_demux:src4_ready
	wire    [9:0] cmd_demux_src4_channel;                                                      // cmd_demux:src4_channel -> mux_pipeline_006:in_channel
	wire          cmd_demux_src4_startofpacket;                                                // cmd_demux:src4_startofpacket -> mux_pipeline_006:in_startofpacket
	wire          cmd_demux_src4_endofpacket;                                                  // cmd_demux:src4_endofpacket -> mux_pipeline_006:in_endofpacket
	wire          mux_pipeline_006_source0_valid;                                              // mux_pipeline_006:out_valid -> cmd_mux_004:sink0_valid
	wire  [116:0] mux_pipeline_006_source0_data;                                               // mux_pipeline_006:out_data -> cmd_mux_004:sink0_data
	wire          mux_pipeline_006_source0_ready;                                              // cmd_mux_004:sink0_ready -> mux_pipeline_006:out_ready
	wire    [9:0] mux_pipeline_006_source0_channel;                                            // mux_pipeline_006:out_channel -> cmd_mux_004:sink0_channel
	wire          mux_pipeline_006_source0_startofpacket;                                      // mux_pipeline_006:out_startofpacket -> cmd_mux_004:sink0_startofpacket
	wire          mux_pipeline_006_source0_endofpacket;                                        // mux_pipeline_006:out_endofpacket -> cmd_mux_004:sink0_endofpacket
	wire          cmd_demux_src5_valid;                                                        // cmd_demux:src5_valid -> mux_pipeline_007:in_valid
	wire  [116:0] cmd_demux_src5_data;                                                         // cmd_demux:src5_data -> mux_pipeline_007:in_data
	wire          cmd_demux_src5_ready;                                                        // mux_pipeline_007:in_ready -> cmd_demux:src5_ready
	wire    [9:0] cmd_demux_src5_channel;                                                      // cmd_demux:src5_channel -> mux_pipeline_007:in_channel
	wire          cmd_demux_src5_startofpacket;                                                // cmd_demux:src5_startofpacket -> mux_pipeline_007:in_startofpacket
	wire          cmd_demux_src5_endofpacket;                                                  // cmd_demux:src5_endofpacket -> mux_pipeline_007:in_endofpacket
	wire          mux_pipeline_007_source0_valid;                                              // mux_pipeline_007:out_valid -> cmd_mux_005:sink0_valid
	wire  [116:0] mux_pipeline_007_source0_data;                                               // mux_pipeline_007:out_data -> cmd_mux_005:sink0_data
	wire          mux_pipeline_007_source0_ready;                                              // cmd_mux_005:sink0_ready -> mux_pipeline_007:out_ready
	wire    [9:0] mux_pipeline_007_source0_channel;                                            // mux_pipeline_007:out_channel -> cmd_mux_005:sink0_channel
	wire          mux_pipeline_007_source0_startofpacket;                                      // mux_pipeline_007:out_startofpacket -> cmd_mux_005:sink0_startofpacket
	wire          mux_pipeline_007_source0_endofpacket;                                        // mux_pipeline_007:out_endofpacket -> cmd_mux_005:sink0_endofpacket
	wire          cmd_demux_001_src0_valid;                                                    // cmd_demux_001:src0_valid -> mux_pipeline_008:in_valid
	wire  [116:0] cmd_demux_001_src0_data;                                                     // cmd_demux_001:src0_data -> mux_pipeline_008:in_data
	wire          cmd_demux_001_src0_ready;                                                    // mux_pipeline_008:in_ready -> cmd_demux_001:src0_ready
	wire    [9:0] cmd_demux_001_src0_channel;                                                  // cmd_demux_001:src0_channel -> mux_pipeline_008:in_channel
	wire          cmd_demux_001_src0_startofpacket;                                            // cmd_demux_001:src0_startofpacket -> mux_pipeline_008:in_startofpacket
	wire          cmd_demux_001_src0_endofpacket;                                              // cmd_demux_001:src0_endofpacket -> mux_pipeline_008:in_endofpacket
	wire          mux_pipeline_008_source0_valid;                                              // mux_pipeline_008:out_valid -> cmd_mux_005:sink1_valid
	wire  [116:0] mux_pipeline_008_source0_data;                                               // mux_pipeline_008:out_data -> cmd_mux_005:sink1_data
	wire          mux_pipeline_008_source0_ready;                                              // cmd_mux_005:sink1_ready -> mux_pipeline_008:out_ready
	wire    [9:0] mux_pipeline_008_source0_channel;                                            // mux_pipeline_008:out_channel -> cmd_mux_005:sink1_channel
	wire          mux_pipeline_008_source0_startofpacket;                                      // mux_pipeline_008:out_startofpacket -> cmd_mux_005:sink1_startofpacket
	wire          mux_pipeline_008_source0_endofpacket;                                        // mux_pipeline_008:out_endofpacket -> cmd_mux_005:sink1_endofpacket
	wire          cmd_demux_002_src1_valid;                                                    // cmd_demux_002:src1_valid -> mux_pipeline_009:in_valid
	wire  [116:0] cmd_demux_002_src1_data;                                                     // cmd_demux_002:src1_data -> mux_pipeline_009:in_data
	wire          cmd_demux_002_src1_ready;                                                    // mux_pipeline_009:in_ready -> cmd_demux_002:src1_ready
	wire    [9:0] cmd_demux_002_src1_channel;                                                  // cmd_demux_002:src1_channel -> mux_pipeline_009:in_channel
	wire          cmd_demux_002_src1_startofpacket;                                            // cmd_demux_002:src1_startofpacket -> mux_pipeline_009:in_startofpacket
	wire          cmd_demux_002_src1_endofpacket;                                              // cmd_demux_002:src1_endofpacket -> mux_pipeline_009:in_endofpacket
	wire          mux_pipeline_009_source0_valid;                                              // mux_pipeline_009:out_valid -> cmd_mux_005:sink2_valid
	wire  [116:0] mux_pipeline_009_source0_data;                                               // mux_pipeline_009:out_data -> cmd_mux_005:sink2_data
	wire          mux_pipeline_009_source0_ready;                                              // cmd_mux_005:sink2_ready -> mux_pipeline_009:out_ready
	wire    [9:0] mux_pipeline_009_source0_channel;                                            // mux_pipeline_009:out_channel -> cmd_mux_005:sink2_channel
	wire          mux_pipeline_009_source0_startofpacket;                                      // mux_pipeline_009:out_startofpacket -> cmd_mux_005:sink2_startofpacket
	wire          mux_pipeline_009_source0_endofpacket;                                        // mux_pipeline_009:out_endofpacket -> cmd_mux_005:sink2_endofpacket
	wire          cmd_demux_003_src0_valid;                                                    // cmd_demux_003:src0_valid -> mux_pipeline_010:in_valid
	wire  [116:0] cmd_demux_003_src0_data;                                                     // cmd_demux_003:src0_data -> mux_pipeline_010:in_data
	wire          cmd_demux_003_src0_ready;                                                    // mux_pipeline_010:in_ready -> cmd_demux_003:src0_ready
	wire    [9:0] cmd_demux_003_src0_channel;                                                  // cmd_demux_003:src0_channel -> mux_pipeline_010:in_channel
	wire          cmd_demux_003_src0_startofpacket;                                            // cmd_demux_003:src0_startofpacket -> mux_pipeline_010:in_startofpacket
	wire          cmd_demux_003_src0_endofpacket;                                              // cmd_demux_003:src0_endofpacket -> mux_pipeline_010:in_endofpacket
	wire          mux_pipeline_010_source0_valid;                                              // mux_pipeline_010:out_valid -> cmd_mux_005:sink3_valid
	wire  [116:0] mux_pipeline_010_source0_data;                                               // mux_pipeline_010:out_data -> cmd_mux_005:sink3_data
	wire          mux_pipeline_010_source0_ready;                                              // cmd_mux_005:sink3_ready -> mux_pipeline_010:out_ready
	wire    [9:0] mux_pipeline_010_source0_channel;                                            // mux_pipeline_010:out_channel -> cmd_mux_005:sink3_channel
	wire          mux_pipeline_010_source0_startofpacket;                                      // mux_pipeline_010:out_startofpacket -> cmd_mux_005:sink3_startofpacket
	wire          mux_pipeline_010_source0_endofpacket;                                        // mux_pipeline_010:out_endofpacket -> cmd_mux_005:sink3_endofpacket
	wire          cmd_demux_001_src1_valid;                                                    // cmd_demux_001:src1_valid -> mux_pipeline_011:in_valid
	wire  [116:0] cmd_demux_001_src1_data;                                                     // cmd_demux_001:src1_data -> mux_pipeline_011:in_data
	wire          cmd_demux_001_src1_ready;                                                    // mux_pipeline_011:in_ready -> cmd_demux_001:src1_ready
	wire    [9:0] cmd_demux_001_src1_channel;                                                  // cmd_demux_001:src1_channel -> mux_pipeline_011:in_channel
	wire          cmd_demux_001_src1_startofpacket;                                            // cmd_demux_001:src1_startofpacket -> mux_pipeline_011:in_startofpacket
	wire          cmd_demux_001_src1_endofpacket;                                              // cmd_demux_001:src1_endofpacket -> mux_pipeline_011:in_endofpacket
	wire          mux_pipeline_011_source0_valid;                                              // mux_pipeline_011:out_valid -> cmd_mux_006:sink0_valid
	wire  [116:0] mux_pipeline_011_source0_data;                                               // mux_pipeline_011:out_data -> cmd_mux_006:sink0_data
	wire          mux_pipeline_011_source0_ready;                                              // cmd_mux_006:sink0_ready -> mux_pipeline_011:out_ready
	wire    [9:0] mux_pipeline_011_source0_channel;                                            // mux_pipeline_011:out_channel -> cmd_mux_006:sink0_channel
	wire          mux_pipeline_011_source0_startofpacket;                                      // mux_pipeline_011:out_startofpacket -> cmd_mux_006:sink0_startofpacket
	wire          mux_pipeline_011_source0_endofpacket;                                        // mux_pipeline_011:out_endofpacket -> cmd_mux_006:sink0_endofpacket
	wire          cmd_demux_003_src1_valid;                                                    // cmd_demux_003:src1_valid -> mux_pipeline_012:in_valid
	wire  [116:0] cmd_demux_003_src1_data;                                                     // cmd_demux_003:src1_data -> mux_pipeline_012:in_data
	wire          cmd_demux_003_src1_ready;                                                    // mux_pipeline_012:in_ready -> cmd_demux_003:src1_ready
	wire    [9:0] cmd_demux_003_src1_channel;                                                  // cmd_demux_003:src1_channel -> mux_pipeline_012:in_channel
	wire          cmd_demux_003_src1_startofpacket;                                            // cmd_demux_003:src1_startofpacket -> mux_pipeline_012:in_startofpacket
	wire          cmd_demux_003_src1_endofpacket;                                              // cmd_demux_003:src1_endofpacket -> mux_pipeline_012:in_endofpacket
	wire          mux_pipeline_012_source0_valid;                                              // mux_pipeline_012:out_valid -> cmd_mux_006:sink1_valid
	wire  [116:0] mux_pipeline_012_source0_data;                                               // mux_pipeline_012:out_data -> cmd_mux_006:sink1_data
	wire          mux_pipeline_012_source0_ready;                                              // cmd_mux_006:sink1_ready -> mux_pipeline_012:out_ready
	wire    [9:0] mux_pipeline_012_source0_channel;                                            // mux_pipeline_012:out_channel -> cmd_mux_006:sink1_channel
	wire          mux_pipeline_012_source0_startofpacket;                                      // mux_pipeline_012:out_startofpacket -> cmd_mux_006:sink1_startofpacket
	wire          mux_pipeline_012_source0_endofpacket;                                        // mux_pipeline_012:out_endofpacket -> cmd_mux_006:sink1_endofpacket
	wire          cmd_demux_001_src2_valid;                                                    // cmd_demux_001:src2_valid -> mux_pipeline_013:in_valid
	wire  [116:0] cmd_demux_001_src2_data;                                                     // cmd_demux_001:src2_data -> mux_pipeline_013:in_data
	wire          cmd_demux_001_src2_ready;                                                    // mux_pipeline_013:in_ready -> cmd_demux_001:src2_ready
	wire    [9:0] cmd_demux_001_src2_channel;                                                  // cmd_demux_001:src2_channel -> mux_pipeline_013:in_channel
	wire          cmd_demux_001_src2_startofpacket;                                            // cmd_demux_001:src2_startofpacket -> mux_pipeline_013:in_startofpacket
	wire          cmd_demux_001_src2_endofpacket;                                              // cmd_demux_001:src2_endofpacket -> mux_pipeline_013:in_endofpacket
	wire          mux_pipeline_013_source0_valid;                                              // mux_pipeline_013:out_valid -> cmd_mux_007:sink0_valid
	wire  [116:0] mux_pipeline_013_source0_data;                                               // mux_pipeline_013:out_data -> cmd_mux_007:sink0_data
	wire          mux_pipeline_013_source0_ready;                                              // cmd_mux_007:sink0_ready -> mux_pipeline_013:out_ready
	wire    [9:0] mux_pipeline_013_source0_channel;                                            // mux_pipeline_013:out_channel -> cmd_mux_007:sink0_channel
	wire          mux_pipeline_013_source0_startofpacket;                                      // mux_pipeline_013:out_startofpacket -> cmd_mux_007:sink0_startofpacket
	wire          mux_pipeline_013_source0_endofpacket;                                        // mux_pipeline_013:out_endofpacket -> cmd_mux_007:sink0_endofpacket
	wire          cmd_demux_001_src3_valid;                                                    // cmd_demux_001:src3_valid -> mux_pipeline_014:in_valid
	wire  [116:0] cmd_demux_001_src3_data;                                                     // cmd_demux_001:src3_data -> mux_pipeline_014:in_data
	wire          cmd_demux_001_src3_ready;                                                    // mux_pipeline_014:in_ready -> cmd_demux_001:src3_ready
	wire    [9:0] cmd_demux_001_src3_channel;                                                  // cmd_demux_001:src3_channel -> mux_pipeline_014:in_channel
	wire          cmd_demux_001_src3_startofpacket;                                            // cmd_demux_001:src3_startofpacket -> mux_pipeline_014:in_startofpacket
	wire          cmd_demux_001_src3_endofpacket;                                              // cmd_demux_001:src3_endofpacket -> mux_pipeline_014:in_endofpacket
	wire          mux_pipeline_014_source0_valid;                                              // mux_pipeline_014:out_valid -> cmd_mux_008:sink0_valid
	wire  [116:0] mux_pipeline_014_source0_data;                                               // mux_pipeline_014:out_data -> cmd_mux_008:sink0_data
	wire          mux_pipeline_014_source0_ready;                                              // cmd_mux_008:sink0_ready -> mux_pipeline_014:out_ready
	wire    [9:0] mux_pipeline_014_source0_channel;                                            // mux_pipeline_014:out_channel -> cmd_mux_008:sink0_channel
	wire          mux_pipeline_014_source0_startofpacket;                                      // mux_pipeline_014:out_startofpacket -> cmd_mux_008:sink0_startofpacket
	wire          mux_pipeline_014_source0_endofpacket;                                        // mux_pipeline_014:out_endofpacket -> cmd_mux_008:sink0_endofpacket
	wire          cmd_demux_001_src4_valid;                                                    // cmd_demux_001:src4_valid -> mux_pipeline_015:in_valid
	wire  [116:0] cmd_demux_001_src4_data;                                                     // cmd_demux_001:src4_data -> mux_pipeline_015:in_data
	wire          cmd_demux_001_src4_ready;                                                    // mux_pipeline_015:in_ready -> cmd_demux_001:src4_ready
	wire    [9:0] cmd_demux_001_src4_channel;                                                  // cmd_demux_001:src4_channel -> mux_pipeline_015:in_channel
	wire          cmd_demux_001_src4_startofpacket;                                            // cmd_demux_001:src4_startofpacket -> mux_pipeline_015:in_startofpacket
	wire          cmd_demux_001_src4_endofpacket;                                              // cmd_demux_001:src4_endofpacket -> mux_pipeline_015:in_endofpacket
	wire          mux_pipeline_015_source0_valid;                                              // mux_pipeline_015:out_valid -> cmd_mux_009:sink0_valid
	wire  [116:0] mux_pipeline_015_source0_data;                                               // mux_pipeline_015:out_data -> cmd_mux_009:sink0_data
	wire          mux_pipeline_015_source0_ready;                                              // cmd_mux_009:sink0_ready -> mux_pipeline_015:out_ready
	wire    [9:0] mux_pipeline_015_source0_channel;                                            // mux_pipeline_015:out_channel -> cmd_mux_009:sink0_channel
	wire          mux_pipeline_015_source0_startofpacket;                                      // mux_pipeline_015:out_startofpacket -> cmd_mux_009:sink0_startofpacket
	wire          mux_pipeline_015_source0_endofpacket;                                        // mux_pipeline_015:out_endofpacket -> cmd_mux_009:sink0_endofpacket
	wire          rsp_demux_src0_valid;                                                        // rsp_demux:src0_valid -> mux_pipeline_016:in_valid
	wire  [116:0] rsp_demux_src0_data;                                                         // rsp_demux:src0_data -> mux_pipeline_016:in_data
	wire          rsp_demux_src0_ready;                                                        // mux_pipeline_016:in_ready -> rsp_demux:src0_ready
	wire    [9:0] rsp_demux_src0_channel;                                                      // rsp_demux:src0_channel -> mux_pipeline_016:in_channel
	wire          rsp_demux_src0_startofpacket;                                                // rsp_demux:src0_startofpacket -> mux_pipeline_016:in_startofpacket
	wire          rsp_demux_src0_endofpacket;                                                  // rsp_demux:src0_endofpacket -> mux_pipeline_016:in_endofpacket
	wire          mux_pipeline_016_source0_valid;                                              // mux_pipeline_016:out_valid -> rsp_mux:sink0_valid
	wire  [116:0] mux_pipeline_016_source0_data;                                               // mux_pipeline_016:out_data -> rsp_mux:sink0_data
	wire          mux_pipeline_016_source0_ready;                                              // rsp_mux:sink0_ready -> mux_pipeline_016:out_ready
	wire    [9:0] mux_pipeline_016_source0_channel;                                            // mux_pipeline_016:out_channel -> rsp_mux:sink0_channel
	wire          mux_pipeline_016_source0_startofpacket;                                      // mux_pipeline_016:out_startofpacket -> rsp_mux:sink0_startofpacket
	wire          mux_pipeline_016_source0_endofpacket;                                        // mux_pipeline_016:out_endofpacket -> rsp_mux:sink0_endofpacket
	wire          rsp_demux_001_src0_valid;                                                    // rsp_demux_001:src0_valid -> mux_pipeline_017:in_valid
	wire  [116:0] rsp_demux_001_src0_data;                                                     // rsp_demux_001:src0_data -> mux_pipeline_017:in_data
	wire          rsp_demux_001_src0_ready;                                                    // mux_pipeline_017:in_ready -> rsp_demux_001:src0_ready
	wire    [9:0] rsp_demux_001_src0_channel;                                                  // rsp_demux_001:src0_channel -> mux_pipeline_017:in_channel
	wire          rsp_demux_001_src0_startofpacket;                                            // rsp_demux_001:src0_startofpacket -> mux_pipeline_017:in_startofpacket
	wire          rsp_demux_001_src0_endofpacket;                                              // rsp_demux_001:src0_endofpacket -> mux_pipeline_017:in_endofpacket
	wire          mux_pipeline_017_source0_valid;                                              // mux_pipeline_017:out_valid -> rsp_mux:sink1_valid
	wire  [116:0] mux_pipeline_017_source0_data;                                               // mux_pipeline_017:out_data -> rsp_mux:sink1_data
	wire          mux_pipeline_017_source0_ready;                                              // rsp_mux:sink1_ready -> mux_pipeline_017:out_ready
	wire    [9:0] mux_pipeline_017_source0_channel;                                            // mux_pipeline_017:out_channel -> rsp_mux:sink1_channel
	wire          mux_pipeline_017_source0_startofpacket;                                      // mux_pipeline_017:out_startofpacket -> rsp_mux:sink1_startofpacket
	wire          mux_pipeline_017_source0_endofpacket;                                        // mux_pipeline_017:out_endofpacket -> rsp_mux:sink1_endofpacket
	wire          rsp_demux_002_src0_valid;                                                    // rsp_demux_002:src0_valid -> mux_pipeline_018:in_valid
	wire  [116:0] rsp_demux_002_src0_data;                                                     // rsp_demux_002:src0_data -> mux_pipeline_018:in_data
	wire          rsp_demux_002_src0_ready;                                                    // mux_pipeline_018:in_ready -> rsp_demux_002:src0_ready
	wire    [9:0] rsp_demux_002_src0_channel;                                                  // rsp_demux_002:src0_channel -> mux_pipeline_018:in_channel
	wire          rsp_demux_002_src0_startofpacket;                                            // rsp_demux_002:src0_startofpacket -> mux_pipeline_018:in_startofpacket
	wire          rsp_demux_002_src0_endofpacket;                                              // rsp_demux_002:src0_endofpacket -> mux_pipeline_018:in_endofpacket
	wire          mux_pipeline_018_source0_valid;                                              // mux_pipeline_018:out_valid -> rsp_mux:sink2_valid
	wire  [116:0] mux_pipeline_018_source0_data;                                               // mux_pipeline_018:out_data -> rsp_mux:sink2_data
	wire          mux_pipeline_018_source0_ready;                                              // rsp_mux:sink2_ready -> mux_pipeline_018:out_ready
	wire    [9:0] mux_pipeline_018_source0_channel;                                            // mux_pipeline_018:out_channel -> rsp_mux:sink2_channel
	wire          mux_pipeline_018_source0_startofpacket;                                      // mux_pipeline_018:out_startofpacket -> rsp_mux:sink2_startofpacket
	wire          mux_pipeline_018_source0_endofpacket;                                        // mux_pipeline_018:out_endofpacket -> rsp_mux:sink2_endofpacket
	wire          rsp_demux_003_src0_valid;                                                    // rsp_demux_003:src0_valid -> mux_pipeline_019:in_valid
	wire  [116:0] rsp_demux_003_src0_data;                                                     // rsp_demux_003:src0_data -> mux_pipeline_019:in_data
	wire          rsp_demux_003_src0_ready;                                                    // mux_pipeline_019:in_ready -> rsp_demux_003:src0_ready
	wire    [9:0] rsp_demux_003_src0_channel;                                                  // rsp_demux_003:src0_channel -> mux_pipeline_019:in_channel
	wire          rsp_demux_003_src0_startofpacket;                                            // rsp_demux_003:src0_startofpacket -> mux_pipeline_019:in_startofpacket
	wire          rsp_demux_003_src0_endofpacket;                                              // rsp_demux_003:src0_endofpacket -> mux_pipeline_019:in_endofpacket
	wire          mux_pipeline_019_source0_valid;                                              // mux_pipeline_019:out_valid -> rsp_mux:sink3_valid
	wire  [116:0] mux_pipeline_019_source0_data;                                               // mux_pipeline_019:out_data -> rsp_mux:sink3_data
	wire          mux_pipeline_019_source0_ready;                                              // rsp_mux:sink3_ready -> mux_pipeline_019:out_ready
	wire    [9:0] mux_pipeline_019_source0_channel;                                            // mux_pipeline_019:out_channel -> rsp_mux:sink3_channel
	wire          mux_pipeline_019_source0_startofpacket;                                      // mux_pipeline_019:out_startofpacket -> rsp_mux:sink3_startofpacket
	wire          mux_pipeline_019_source0_endofpacket;                                        // mux_pipeline_019:out_endofpacket -> rsp_mux:sink3_endofpacket
	wire          rsp_demux_004_src0_valid;                                                    // rsp_demux_004:src0_valid -> mux_pipeline_020:in_valid
	wire  [116:0] rsp_demux_004_src0_data;                                                     // rsp_demux_004:src0_data -> mux_pipeline_020:in_data
	wire          rsp_demux_004_src0_ready;                                                    // mux_pipeline_020:in_ready -> rsp_demux_004:src0_ready
	wire    [9:0] rsp_demux_004_src0_channel;                                                  // rsp_demux_004:src0_channel -> mux_pipeline_020:in_channel
	wire          rsp_demux_004_src0_startofpacket;                                            // rsp_demux_004:src0_startofpacket -> mux_pipeline_020:in_startofpacket
	wire          rsp_demux_004_src0_endofpacket;                                              // rsp_demux_004:src0_endofpacket -> mux_pipeline_020:in_endofpacket
	wire          mux_pipeline_020_source0_valid;                                              // mux_pipeline_020:out_valid -> rsp_mux:sink4_valid
	wire  [116:0] mux_pipeline_020_source0_data;                                               // mux_pipeline_020:out_data -> rsp_mux:sink4_data
	wire          mux_pipeline_020_source0_ready;                                              // rsp_mux:sink4_ready -> mux_pipeline_020:out_ready
	wire    [9:0] mux_pipeline_020_source0_channel;                                            // mux_pipeline_020:out_channel -> rsp_mux:sink4_channel
	wire          mux_pipeline_020_source0_startofpacket;                                      // mux_pipeline_020:out_startofpacket -> rsp_mux:sink4_startofpacket
	wire          mux_pipeline_020_source0_endofpacket;                                        // mux_pipeline_020:out_endofpacket -> rsp_mux:sink4_endofpacket
	wire          rsp_demux_005_src0_valid;                                                    // rsp_demux_005:src0_valid -> mux_pipeline_021:in_valid
	wire  [116:0] rsp_demux_005_src0_data;                                                     // rsp_demux_005:src0_data -> mux_pipeline_021:in_data
	wire          rsp_demux_005_src0_ready;                                                    // mux_pipeline_021:in_ready -> rsp_demux_005:src0_ready
	wire    [9:0] rsp_demux_005_src0_channel;                                                  // rsp_demux_005:src0_channel -> mux_pipeline_021:in_channel
	wire          rsp_demux_005_src0_startofpacket;                                            // rsp_demux_005:src0_startofpacket -> mux_pipeline_021:in_startofpacket
	wire          rsp_demux_005_src0_endofpacket;                                              // rsp_demux_005:src0_endofpacket -> mux_pipeline_021:in_endofpacket
	wire          mux_pipeline_021_source0_valid;                                              // mux_pipeline_021:out_valid -> rsp_mux:sink5_valid
	wire  [116:0] mux_pipeline_021_source0_data;                                               // mux_pipeline_021:out_data -> rsp_mux:sink5_data
	wire          mux_pipeline_021_source0_ready;                                              // rsp_mux:sink5_ready -> mux_pipeline_021:out_ready
	wire    [9:0] mux_pipeline_021_source0_channel;                                            // mux_pipeline_021:out_channel -> rsp_mux:sink5_channel
	wire          mux_pipeline_021_source0_startofpacket;                                      // mux_pipeline_021:out_startofpacket -> rsp_mux:sink5_startofpacket
	wire          mux_pipeline_021_source0_endofpacket;                                        // mux_pipeline_021:out_endofpacket -> rsp_mux:sink5_endofpacket
	wire          rsp_demux_005_src1_valid;                                                    // rsp_demux_005:src1_valid -> mux_pipeline_022:in_valid
	wire  [116:0] rsp_demux_005_src1_data;                                                     // rsp_demux_005:src1_data -> mux_pipeline_022:in_data
	wire          rsp_demux_005_src1_ready;                                                    // mux_pipeline_022:in_ready -> rsp_demux_005:src1_ready
	wire    [9:0] rsp_demux_005_src1_channel;                                                  // rsp_demux_005:src1_channel -> mux_pipeline_022:in_channel
	wire          rsp_demux_005_src1_startofpacket;                                            // rsp_demux_005:src1_startofpacket -> mux_pipeline_022:in_startofpacket
	wire          rsp_demux_005_src1_endofpacket;                                              // rsp_demux_005:src1_endofpacket -> mux_pipeline_022:in_endofpacket
	wire          mux_pipeline_022_source0_valid;                                              // mux_pipeline_022:out_valid -> rsp_mux_001:sink0_valid
	wire  [116:0] mux_pipeline_022_source0_data;                                               // mux_pipeline_022:out_data -> rsp_mux_001:sink0_data
	wire          mux_pipeline_022_source0_ready;                                              // rsp_mux_001:sink0_ready -> mux_pipeline_022:out_ready
	wire    [9:0] mux_pipeline_022_source0_channel;                                            // mux_pipeline_022:out_channel -> rsp_mux_001:sink0_channel
	wire          mux_pipeline_022_source0_startofpacket;                                      // mux_pipeline_022:out_startofpacket -> rsp_mux_001:sink0_startofpacket
	wire          mux_pipeline_022_source0_endofpacket;                                        // mux_pipeline_022:out_endofpacket -> rsp_mux_001:sink0_endofpacket
	wire          rsp_demux_006_src0_valid;                                                    // rsp_demux_006:src0_valid -> mux_pipeline_023:in_valid
	wire  [116:0] rsp_demux_006_src0_data;                                                     // rsp_demux_006:src0_data -> mux_pipeline_023:in_data
	wire          rsp_demux_006_src0_ready;                                                    // mux_pipeline_023:in_ready -> rsp_demux_006:src0_ready
	wire    [9:0] rsp_demux_006_src0_channel;                                                  // rsp_demux_006:src0_channel -> mux_pipeline_023:in_channel
	wire          rsp_demux_006_src0_startofpacket;                                            // rsp_demux_006:src0_startofpacket -> mux_pipeline_023:in_startofpacket
	wire          rsp_demux_006_src0_endofpacket;                                              // rsp_demux_006:src0_endofpacket -> mux_pipeline_023:in_endofpacket
	wire          mux_pipeline_023_source0_valid;                                              // mux_pipeline_023:out_valid -> rsp_mux_001:sink1_valid
	wire  [116:0] mux_pipeline_023_source0_data;                                               // mux_pipeline_023:out_data -> rsp_mux_001:sink1_data
	wire          mux_pipeline_023_source0_ready;                                              // rsp_mux_001:sink1_ready -> mux_pipeline_023:out_ready
	wire    [9:0] mux_pipeline_023_source0_channel;                                            // mux_pipeline_023:out_channel -> rsp_mux_001:sink1_channel
	wire          mux_pipeline_023_source0_startofpacket;                                      // mux_pipeline_023:out_startofpacket -> rsp_mux_001:sink1_startofpacket
	wire          mux_pipeline_023_source0_endofpacket;                                        // mux_pipeline_023:out_endofpacket -> rsp_mux_001:sink1_endofpacket
	wire          rsp_demux_007_src0_valid;                                                    // rsp_demux_007:src0_valid -> mux_pipeline_024:in_valid
	wire  [116:0] rsp_demux_007_src0_data;                                                     // rsp_demux_007:src0_data -> mux_pipeline_024:in_data
	wire          rsp_demux_007_src0_ready;                                                    // mux_pipeline_024:in_ready -> rsp_demux_007:src0_ready
	wire    [9:0] rsp_demux_007_src0_channel;                                                  // rsp_demux_007:src0_channel -> mux_pipeline_024:in_channel
	wire          rsp_demux_007_src0_startofpacket;                                            // rsp_demux_007:src0_startofpacket -> mux_pipeline_024:in_startofpacket
	wire          rsp_demux_007_src0_endofpacket;                                              // rsp_demux_007:src0_endofpacket -> mux_pipeline_024:in_endofpacket
	wire          mux_pipeline_024_source0_valid;                                              // mux_pipeline_024:out_valid -> rsp_mux_001:sink2_valid
	wire  [116:0] mux_pipeline_024_source0_data;                                               // mux_pipeline_024:out_data -> rsp_mux_001:sink2_data
	wire          mux_pipeline_024_source0_ready;                                              // rsp_mux_001:sink2_ready -> mux_pipeline_024:out_ready
	wire    [9:0] mux_pipeline_024_source0_channel;                                            // mux_pipeline_024:out_channel -> rsp_mux_001:sink2_channel
	wire          mux_pipeline_024_source0_startofpacket;                                      // mux_pipeline_024:out_startofpacket -> rsp_mux_001:sink2_startofpacket
	wire          mux_pipeline_024_source0_endofpacket;                                        // mux_pipeline_024:out_endofpacket -> rsp_mux_001:sink2_endofpacket
	wire          rsp_demux_008_src0_valid;                                                    // rsp_demux_008:src0_valid -> mux_pipeline_025:in_valid
	wire  [116:0] rsp_demux_008_src0_data;                                                     // rsp_demux_008:src0_data -> mux_pipeline_025:in_data
	wire          rsp_demux_008_src0_ready;                                                    // mux_pipeline_025:in_ready -> rsp_demux_008:src0_ready
	wire    [9:0] rsp_demux_008_src0_channel;                                                  // rsp_demux_008:src0_channel -> mux_pipeline_025:in_channel
	wire          rsp_demux_008_src0_startofpacket;                                            // rsp_demux_008:src0_startofpacket -> mux_pipeline_025:in_startofpacket
	wire          rsp_demux_008_src0_endofpacket;                                              // rsp_demux_008:src0_endofpacket -> mux_pipeline_025:in_endofpacket
	wire          mux_pipeline_025_source0_valid;                                              // mux_pipeline_025:out_valid -> rsp_mux_001:sink3_valid
	wire  [116:0] mux_pipeline_025_source0_data;                                               // mux_pipeline_025:out_data -> rsp_mux_001:sink3_data
	wire          mux_pipeline_025_source0_ready;                                              // rsp_mux_001:sink3_ready -> mux_pipeline_025:out_ready
	wire    [9:0] mux_pipeline_025_source0_channel;                                            // mux_pipeline_025:out_channel -> rsp_mux_001:sink3_channel
	wire          mux_pipeline_025_source0_startofpacket;                                      // mux_pipeline_025:out_startofpacket -> rsp_mux_001:sink3_startofpacket
	wire          mux_pipeline_025_source0_endofpacket;                                        // mux_pipeline_025:out_endofpacket -> rsp_mux_001:sink3_endofpacket
	wire          rsp_demux_009_src0_valid;                                                    // rsp_demux_009:src0_valid -> mux_pipeline_026:in_valid
	wire  [116:0] rsp_demux_009_src0_data;                                                     // rsp_demux_009:src0_data -> mux_pipeline_026:in_data
	wire          rsp_demux_009_src0_ready;                                                    // mux_pipeline_026:in_ready -> rsp_demux_009:src0_ready
	wire    [9:0] rsp_demux_009_src0_channel;                                                  // rsp_demux_009:src0_channel -> mux_pipeline_026:in_channel
	wire          rsp_demux_009_src0_startofpacket;                                            // rsp_demux_009:src0_startofpacket -> mux_pipeline_026:in_startofpacket
	wire          rsp_demux_009_src0_endofpacket;                                              // rsp_demux_009:src0_endofpacket -> mux_pipeline_026:in_endofpacket
	wire          mux_pipeline_026_source0_valid;                                              // mux_pipeline_026:out_valid -> rsp_mux_001:sink4_valid
	wire  [116:0] mux_pipeline_026_source0_data;                                               // mux_pipeline_026:out_data -> rsp_mux_001:sink4_data
	wire          mux_pipeline_026_source0_ready;                                              // rsp_mux_001:sink4_ready -> mux_pipeline_026:out_ready
	wire    [9:0] mux_pipeline_026_source0_channel;                                            // mux_pipeline_026:out_channel -> rsp_mux_001:sink4_channel
	wire          mux_pipeline_026_source0_startofpacket;                                      // mux_pipeline_026:out_startofpacket -> rsp_mux_001:sink4_startofpacket
	wire          mux_pipeline_026_source0_endofpacket;                                        // mux_pipeline_026:out_endofpacket -> rsp_mux_001:sink4_endofpacket
	wire          rsp_demux_003_src1_valid;                                                    // rsp_demux_003:src1_valid -> mux_pipeline_027:in_valid
	wire  [116:0] rsp_demux_003_src1_data;                                                     // rsp_demux_003:src1_data -> mux_pipeline_027:in_data
	wire          rsp_demux_003_src1_ready;                                                    // mux_pipeline_027:in_ready -> rsp_demux_003:src1_ready
	wire    [9:0] rsp_demux_003_src1_channel;                                                  // rsp_demux_003:src1_channel -> mux_pipeline_027:in_channel
	wire          rsp_demux_003_src1_startofpacket;                                            // rsp_demux_003:src1_startofpacket -> mux_pipeline_027:in_startofpacket
	wire          rsp_demux_003_src1_endofpacket;                                              // rsp_demux_003:src1_endofpacket -> mux_pipeline_027:in_endofpacket
	wire          mux_pipeline_027_source0_valid;                                              // mux_pipeline_027:out_valid -> rsp_mux_002:sink0_valid
	wire  [116:0] mux_pipeline_027_source0_data;                                               // mux_pipeline_027:out_data -> rsp_mux_002:sink0_data
	wire          mux_pipeline_027_source0_ready;                                              // rsp_mux_002:sink0_ready -> mux_pipeline_027:out_ready
	wire    [9:0] mux_pipeline_027_source0_channel;                                            // mux_pipeline_027:out_channel -> rsp_mux_002:sink0_channel
	wire          mux_pipeline_027_source0_startofpacket;                                      // mux_pipeline_027:out_startofpacket -> rsp_mux_002:sink0_startofpacket
	wire          mux_pipeline_027_source0_endofpacket;                                        // mux_pipeline_027:out_endofpacket -> rsp_mux_002:sink0_endofpacket
	wire          rsp_demux_005_src2_valid;                                                    // rsp_demux_005:src2_valid -> mux_pipeline_028:in_valid
	wire  [116:0] rsp_demux_005_src2_data;                                                     // rsp_demux_005:src2_data -> mux_pipeline_028:in_data
	wire          rsp_demux_005_src2_ready;                                                    // mux_pipeline_028:in_ready -> rsp_demux_005:src2_ready
	wire    [9:0] rsp_demux_005_src2_channel;                                                  // rsp_demux_005:src2_channel -> mux_pipeline_028:in_channel
	wire          rsp_demux_005_src2_startofpacket;                                            // rsp_demux_005:src2_startofpacket -> mux_pipeline_028:in_startofpacket
	wire          rsp_demux_005_src2_endofpacket;                                              // rsp_demux_005:src2_endofpacket -> mux_pipeline_028:in_endofpacket
	wire          mux_pipeline_028_source0_valid;                                              // mux_pipeline_028:out_valid -> rsp_mux_002:sink1_valid
	wire  [116:0] mux_pipeline_028_source0_data;                                               // mux_pipeline_028:out_data -> rsp_mux_002:sink1_data
	wire          mux_pipeline_028_source0_ready;                                              // rsp_mux_002:sink1_ready -> mux_pipeline_028:out_ready
	wire    [9:0] mux_pipeline_028_source0_channel;                                            // mux_pipeline_028:out_channel -> rsp_mux_002:sink1_channel
	wire          mux_pipeline_028_source0_startofpacket;                                      // mux_pipeline_028:out_startofpacket -> rsp_mux_002:sink1_startofpacket
	wire          mux_pipeline_028_source0_endofpacket;                                        // mux_pipeline_028:out_endofpacket -> rsp_mux_002:sink1_endofpacket
	wire          rsp_demux_005_src3_valid;                                                    // rsp_demux_005:src3_valid -> mux_pipeline_029:in_valid
	wire  [116:0] rsp_demux_005_src3_data;                                                     // rsp_demux_005:src3_data -> mux_pipeline_029:in_data
	wire          rsp_demux_005_src3_ready;                                                    // mux_pipeline_029:in_ready -> rsp_demux_005:src3_ready
	wire    [9:0] rsp_demux_005_src3_channel;                                                  // rsp_demux_005:src3_channel -> mux_pipeline_029:in_channel
	wire          rsp_demux_005_src3_startofpacket;                                            // rsp_demux_005:src3_startofpacket -> mux_pipeline_029:in_startofpacket
	wire          rsp_demux_005_src3_endofpacket;                                              // rsp_demux_005:src3_endofpacket -> mux_pipeline_029:in_endofpacket
	wire          mux_pipeline_029_source0_valid;                                              // mux_pipeline_029:out_valid -> rsp_mux_003:sink0_valid
	wire  [116:0] mux_pipeline_029_source0_data;                                               // mux_pipeline_029:out_data -> rsp_mux_003:sink0_data
	wire          mux_pipeline_029_source0_ready;                                              // rsp_mux_003:sink0_ready -> mux_pipeline_029:out_ready
	wire    [9:0] mux_pipeline_029_source0_channel;                                            // mux_pipeline_029:out_channel -> rsp_mux_003:sink0_channel
	wire          mux_pipeline_029_source0_startofpacket;                                      // mux_pipeline_029:out_startofpacket -> rsp_mux_003:sink0_startofpacket
	wire          mux_pipeline_029_source0_endofpacket;                                        // mux_pipeline_029:out_endofpacket -> rsp_mux_003:sink0_endofpacket
	wire          rsp_demux_006_src1_valid;                                                    // rsp_demux_006:src1_valid -> mux_pipeline_030:in_valid
	wire  [116:0] rsp_demux_006_src1_data;                                                     // rsp_demux_006:src1_data -> mux_pipeline_030:in_data
	wire          rsp_demux_006_src1_ready;                                                    // mux_pipeline_030:in_ready -> rsp_demux_006:src1_ready
	wire    [9:0] rsp_demux_006_src1_channel;                                                  // rsp_demux_006:src1_channel -> mux_pipeline_030:in_channel
	wire          rsp_demux_006_src1_startofpacket;                                            // rsp_demux_006:src1_startofpacket -> mux_pipeline_030:in_startofpacket
	wire          rsp_demux_006_src1_endofpacket;                                              // rsp_demux_006:src1_endofpacket -> mux_pipeline_030:in_endofpacket
	wire          mux_pipeline_030_source0_valid;                                              // mux_pipeline_030:out_valid -> rsp_mux_003:sink1_valid
	wire  [116:0] mux_pipeline_030_source0_data;                                               // mux_pipeline_030:out_data -> rsp_mux_003:sink1_data
	wire          mux_pipeline_030_source0_ready;                                              // rsp_mux_003:sink1_ready -> mux_pipeline_030:out_ready
	wire    [9:0] mux_pipeline_030_source0_channel;                                            // mux_pipeline_030:out_channel -> rsp_mux_003:sink1_channel
	wire          mux_pipeline_030_source0_startofpacket;                                      // mux_pipeline_030:out_startofpacket -> rsp_mux_003:sink1_startofpacket
	wire          mux_pipeline_030_source0_endofpacket;                                        // mux_pipeline_030:out_endofpacket -> rsp_mux_003:sink1_endofpacket
	wire          crosser_001_out_valid;                                                       // crosser_001:out_valid -> mux_pipeline_031:in_valid
	wire  [116:0] crosser_001_out_data;                                                        // crosser_001:out_data -> mux_pipeline_031:in_data
	wire          crosser_001_out_ready;                                                       // mux_pipeline_031:in_ready -> crosser_001:out_ready
	wire    [9:0] crosser_001_out_channel;                                                     // crosser_001:out_channel -> mux_pipeline_031:in_channel
	wire          crosser_001_out_startofpacket;                                               // crosser_001:out_startofpacket -> mux_pipeline_031:in_startofpacket
	wire          crosser_001_out_endofpacket;                                                 // crosser_001:out_endofpacket -> mux_pipeline_031:in_endofpacket
	wire          mux_pipeline_031_source0_valid;                                              // mux_pipeline_031:out_valid -> rsp_mux_004:sink0_valid
	wire  [116:0] mux_pipeline_031_source0_data;                                               // mux_pipeline_031:out_data -> rsp_mux_004:sink0_data
	wire          mux_pipeline_031_source0_ready;                                              // rsp_mux_004:sink0_ready -> mux_pipeline_031:out_ready
	wire    [9:0] mux_pipeline_031_source0_channel;                                            // mux_pipeline_031:out_channel -> rsp_mux_004:sink0_channel
	wire          mux_pipeline_031_source0_startofpacket;                                      // mux_pipeline_031:out_startofpacket -> rsp_mux_004:sink0_startofpacket
	wire          mux_pipeline_031_source0_endofpacket;                                        // mux_pipeline_031:out_endofpacket -> rsp_mux_004:sink0_endofpacket
	wire          jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_out_valid;                    // jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo:out_valid -> avalon_st_adapter:in_0_valid
	wire   [33:0] jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_out_data;                     // jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo:out_data -> avalon_st_adapter:in_0_data
	wire          jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_out_ready;                    // avalon_st_adapter:in_0_ready -> jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_out_0_valid;                                               // avalon_st_adapter:out_0_valid -> jtag_uart_0_avalon_jtag_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_out_0_data;                                                // avalon_st_adapter:out_0_data -> jtag_uart_0_avalon_jtag_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_out_0_ready;                                               // jtag_uart_0_avalon_jtag_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter:out_0_ready
	wire    [0:0] avalon_st_adapter_out_0_error;                                               // avalon_st_adapter:out_0_error -> jtag_uart_0_avalon_jtag_slave_agent:rdata_fifo_sink_error
	wire          lpddr2_avl_0_agent_rdata_fifo_out_valid;                                     // lpddr2_avl_0_agent_rdata_fifo:out_valid -> avalon_st_adapter_001:in_0_valid
	wire   [33:0] lpddr2_avl_0_agent_rdata_fifo_out_data;                                      // lpddr2_avl_0_agent_rdata_fifo:out_data -> avalon_st_adapter_001:in_0_data
	wire          lpddr2_avl_0_agent_rdata_fifo_out_ready;                                     // avalon_st_adapter_001:in_0_ready -> lpddr2_avl_0_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_001_out_0_valid;                                           // avalon_st_adapter_001:out_0_valid -> lpddr2_avl_0_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_001_out_0_data;                                            // avalon_st_adapter_001:out_0_data -> lpddr2_avl_0_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_001_out_0_ready;                                           // lpddr2_avl_0_agent:rdata_fifo_sink_ready -> avalon_st_adapter_001:out_0_ready
	wire    [0:0] avalon_st_adapter_001_out_0_error;                                           // avalon_st_adapter_001:out_0_error -> lpddr2_avl_0_agent:rdata_fifo_sink_error
	wire          sysid_control_slave_agent_rdata_fifo_out_valid;                              // sysid_control_slave_agent_rdata_fifo:out_valid -> avalon_st_adapter_002:in_0_valid
	wire   [33:0] sysid_control_slave_agent_rdata_fifo_out_data;                               // sysid_control_slave_agent_rdata_fifo:out_data -> avalon_st_adapter_002:in_0_data
	wire          sysid_control_slave_agent_rdata_fifo_out_ready;                              // avalon_st_adapter_002:in_0_ready -> sysid_control_slave_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_002_out_0_valid;                                           // avalon_st_adapter_002:out_0_valid -> sysid_control_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_002_out_0_data;                                            // avalon_st_adapter_002:out_0_data -> sysid_control_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_002_out_0_ready;                                           // sysid_control_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_002:out_0_ready
	wire    [0:0] avalon_st_adapter_002_out_0_error;                                           // avalon_st_adapter_002:out_0_error -> sysid_control_slave_agent:rdata_fifo_sink_error
	wire          cpu_0_debug_mem_slave_agent_rdata_fifo_out_valid;                            // cpu_0_debug_mem_slave_agent_rdata_fifo:out_valid -> avalon_st_adapter_003:in_0_valid
	wire   [33:0] cpu_0_debug_mem_slave_agent_rdata_fifo_out_data;                             // cpu_0_debug_mem_slave_agent_rdata_fifo:out_data -> avalon_st_adapter_003:in_0_data
	wire          cpu_0_debug_mem_slave_agent_rdata_fifo_out_ready;                            // avalon_st_adapter_003:in_0_ready -> cpu_0_debug_mem_slave_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_003_out_0_valid;                                           // avalon_st_adapter_003:out_0_valid -> cpu_0_debug_mem_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_003_out_0_data;                                            // avalon_st_adapter_003:out_0_data -> cpu_0_debug_mem_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_003_out_0_ready;                                           // cpu_0_debug_mem_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_003:out_0_ready
	wire    [0:0] avalon_st_adapter_003_out_0_error;                                           // avalon_st_adapter_003:out_0_error -> cpu_0_debug_mem_slave_agent:rdata_fifo_sink_error
	wire          cpu_0_bridge_s0_agent_rdata_fifo_out_valid;                                  // cpu_0_bridge_s0_agent_rdata_fifo:out_valid -> avalon_st_adapter_004:in_0_valid
	wire   [33:0] cpu_0_bridge_s0_agent_rdata_fifo_out_data;                                   // cpu_0_bridge_s0_agent_rdata_fifo:out_data -> avalon_st_adapter_004:in_0_data
	wire          cpu_0_bridge_s0_agent_rdata_fifo_out_ready;                                  // avalon_st_adapter_004:in_0_ready -> cpu_0_bridge_s0_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_004_out_0_valid;                                           // avalon_st_adapter_004:out_0_valid -> cpu_0_bridge_s0_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_004_out_0_data;                                            // avalon_st_adapter_004:out_0_data -> cpu_0_bridge_s0_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_004_out_0_ready;                                           // cpu_0_bridge_s0_agent:rdata_fifo_sink_ready -> avalon_st_adapter_004:out_0_ready
	wire    [0:0] avalon_st_adapter_004_out_0_error;                                           // avalon_st_adapter_004:out_0_error -> cpu_0_bridge_s0_agent:rdata_fifo_sink_error
	wire          sram_uas_agent_rdata_fifo_out_valid;                                         // sram_uas_agent_rdata_fifo:out_valid -> avalon_st_adapter_005:in_0_valid
	wire   [17:0] sram_uas_agent_rdata_fifo_out_data;                                          // sram_uas_agent_rdata_fifo:out_data -> avalon_st_adapter_005:in_0_data
	wire          sram_uas_agent_rdata_fifo_out_ready;                                         // avalon_st_adapter_005:in_0_ready -> sram_uas_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_005_out_0_valid;                                           // avalon_st_adapter_005:out_0_valid -> sram_uas_agent:rdata_fifo_sink_valid
	wire   [17:0] avalon_st_adapter_005_out_0_data;                                            // avalon_st_adapter_005:out_0_data -> sram_uas_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_005_out_0_ready;                                           // sram_uas_agent:rdata_fifo_sink_ready -> avalon_st_adapter_005:out_0_ready
	wire    [0:0] avalon_st_adapter_005_out_0_error;                                           // avalon_st_adapter_005:out_0_error -> sram_uas_agent:rdata_fifo_sink_error
	wire          cpu_1_debug_mem_slave_agent_rdata_fifo_out_valid;                            // cpu_1_debug_mem_slave_agent_rdata_fifo:out_valid -> avalon_st_adapter_006:in_0_valid
	wire   [33:0] cpu_1_debug_mem_slave_agent_rdata_fifo_out_data;                             // cpu_1_debug_mem_slave_agent_rdata_fifo:out_data -> avalon_st_adapter_006:in_0_data
	wire          cpu_1_debug_mem_slave_agent_rdata_fifo_out_ready;                            // avalon_st_adapter_006:in_0_ready -> cpu_1_debug_mem_slave_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_006_out_0_valid;                                           // avalon_st_adapter_006:out_0_valid -> cpu_1_debug_mem_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_006_out_0_data;                                            // avalon_st_adapter_006:out_0_data -> cpu_1_debug_mem_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_006_out_0_ready;                                           // cpu_1_debug_mem_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_006:out_0_ready
	wire    [0:0] avalon_st_adapter_006_out_0_error;                                           // avalon_st_adapter_006:out_0_error -> cpu_1_debug_mem_slave_agent:rdata_fifo_sink_error
	wire          jtag_uart_1_avalon_jtag_slave_agent_rdata_fifo_out_valid;                    // jtag_uart_1_avalon_jtag_slave_agent_rdata_fifo:out_valid -> avalon_st_adapter_007:in_0_valid
	wire   [33:0] jtag_uart_1_avalon_jtag_slave_agent_rdata_fifo_out_data;                     // jtag_uart_1_avalon_jtag_slave_agent_rdata_fifo:out_data -> avalon_st_adapter_007:in_0_data
	wire          jtag_uart_1_avalon_jtag_slave_agent_rdata_fifo_out_ready;                    // avalon_st_adapter_007:in_0_ready -> jtag_uart_1_avalon_jtag_slave_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_007_out_0_valid;                                           // avalon_st_adapter_007:out_0_valid -> jtag_uart_1_avalon_jtag_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_007_out_0_data;                                            // avalon_st_adapter_007:out_0_data -> jtag_uart_1_avalon_jtag_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_007_out_0_ready;                                           // jtag_uart_1_avalon_jtag_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_007:out_0_ready
	wire    [0:0] avalon_st_adapter_007_out_0_error;                                           // avalon_st_adapter_007:out_0_error -> jtag_uart_1_avalon_jtag_slave_agent:rdata_fifo_sink_error
	wire          lpddr2_avl_2_agent_rdata_fifo_out_valid;                                     // lpddr2_avl_2_agent_rdata_fifo:out_valid -> avalon_st_adapter_008:in_0_valid
	wire   [33:0] lpddr2_avl_2_agent_rdata_fifo_out_data;                                      // lpddr2_avl_2_agent_rdata_fifo:out_data -> avalon_st_adapter_008:in_0_data
	wire          lpddr2_avl_2_agent_rdata_fifo_out_ready;                                     // avalon_st_adapter_008:in_0_ready -> lpddr2_avl_2_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_008_out_0_valid;                                           // avalon_st_adapter_008:out_0_valid -> lpddr2_avl_2_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_008_out_0_data;                                            // avalon_st_adapter_008:out_0_data -> lpddr2_avl_2_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_008_out_0_ready;                                           // lpddr2_avl_2_agent:rdata_fifo_sink_ready -> avalon_st_adapter_008:out_0_ready
	wire    [0:0] avalon_st_adapter_008_out_0_error;                                           // avalon_st_adapter_008:out_0_error -> lpddr2_avl_2_agent:rdata_fifo_sink_error
	wire          cpu_1_bridge_0_s0_agent_rdata_fifo_out_valid;                                // cpu_1_bridge_0_s0_agent_rdata_fifo:out_valid -> avalon_st_adapter_009:in_0_valid
	wire   [33:0] cpu_1_bridge_0_s0_agent_rdata_fifo_out_data;                                 // cpu_1_bridge_0_s0_agent_rdata_fifo:out_data -> avalon_st_adapter_009:in_0_data
	wire          cpu_1_bridge_0_s0_agent_rdata_fifo_out_ready;                                // avalon_st_adapter_009:in_0_ready -> cpu_1_bridge_0_s0_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_009_out_0_valid;                                           // avalon_st_adapter_009:out_0_valid -> cpu_1_bridge_0_s0_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_009_out_0_data;                                            // avalon_st_adapter_009:out_0_data -> cpu_1_bridge_0_s0_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_009_out_0_ready;                                           // cpu_1_bridge_0_s0_agent:rdata_fifo_sink_ready -> avalon_st_adapter_009:out_0_ready
	wire    [0:0] avalon_st_adapter_009_out_0_error;                                           // avalon_st_adapter_009:out_0_error -> cpu_1_bridge_0_s0_agent:rdata_fifo_sink_error

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (30),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (4),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (6),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (1),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (1),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) cpu_0_data_master_translator (
		.clk                    (clk_125_clk_clk),                                                      //                       clk.clk
		.reset                  (cpu_0_reset_reset_bridge_in_reset_reset),                              //                     reset.reset
		.uav_address            (cpu_0_data_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (cpu_0_data_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (cpu_0_data_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (cpu_0_data_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (cpu_0_data_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (cpu_0_data_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (cpu_0_data_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (cpu_0_data_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (cpu_0_data_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (cpu_0_data_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (cpu_0_data_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (cpu_0_data_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (cpu_0_data_master_waitrequest),                                        //                          .waitrequest
		.av_burstcount          (cpu_0_data_master_burstcount),                                         //                          .burstcount
		.av_byteenable          (cpu_0_data_master_byteenable),                                         //                          .byteenable
		.av_read                (cpu_0_data_master_read),                                               //                          .read
		.av_readdata            (cpu_0_data_master_readdata),                                           //                          .readdata
		.av_readdatavalid       (cpu_0_data_master_readdatavalid),                                      //                          .readdatavalid
		.av_write               (cpu_0_data_master_write),                                              //                          .write
		.av_writedata           (cpu_0_data_master_writedata),                                          //                          .writedata
		.av_debugaccess         (cpu_0_data_master_debugaccess),                                        //                          .debugaccess
		.av_beginbursttransfer  (1'b0),                                                                 //               (terminated)
		.av_begintransfer       (1'b0),                                                                 //               (terminated)
		.av_chipselect          (1'b0),                                                                 //               (terminated)
		.av_lock                (1'b0),                                                                 //               (terminated)
		.uav_clken              (),                                                                     //               (terminated)
		.av_clken               (1'b1),                                                                 //               (terminated)
		.uav_response           (2'b00),                                                                //               (terminated)
		.av_response            (),                                                                     //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                 //               (terminated)
		.av_writeresponsevalid  ()                                                                      //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (30),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (4),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (6),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (1),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (1),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) cpu_1_data_master_translator (
		.clk                    (clk_125_clk_clk),                                                      //                       clk.clk
		.reset                  (cpu_1_reset_reset_bridge_in_reset_reset),                              //                     reset.reset
		.uav_address            (cpu_1_data_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (cpu_1_data_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (cpu_1_data_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (cpu_1_data_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (cpu_1_data_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (cpu_1_data_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (cpu_1_data_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (cpu_1_data_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (cpu_1_data_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (cpu_1_data_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (cpu_1_data_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (cpu_1_data_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (cpu_1_data_master_waitrequest),                                        //                          .waitrequest
		.av_burstcount          (cpu_1_data_master_burstcount),                                         //                          .burstcount
		.av_byteenable          (cpu_1_data_master_byteenable),                                         //                          .byteenable
		.av_read                (cpu_1_data_master_read),                                               //                          .read
		.av_readdata            (cpu_1_data_master_readdata),                                           //                          .readdata
		.av_readdatavalid       (cpu_1_data_master_readdatavalid),                                      //                          .readdatavalid
		.av_write               (cpu_1_data_master_write),                                              //                          .write
		.av_writedata           (cpu_1_data_master_writedata),                                          //                          .writedata
		.av_debugaccess         (cpu_1_data_master_debugaccess),                                        //                          .debugaccess
		.av_beginbursttransfer  (1'b0),                                                                 //               (terminated)
		.av_begintransfer       (1'b0),                                                                 //               (terminated)
		.av_chipselect          (1'b0),                                                                 //               (terminated)
		.av_lock                (1'b0),                                                                 //               (terminated)
		.uav_clken              (),                                                                     //               (terminated)
		.av_clken               (1'b1),                                                                 //               (terminated)
		.uav_response           (2'b00),                                                                //               (terminated)
		.av_response            (),                                                                     //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                 //               (terminated)
		.av_writeresponsevalid  ()                                                                      //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (30),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (0),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (1),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) cpu_0_instruction_master_translator (
		.clk                    (clk_125_clk_clk),                                                             //                       clk.clk
		.reset                  (cpu_0_reset_reset_bridge_in_reset_reset),                                     //                     reset.reset
		.uav_address            (cpu_0_instruction_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (cpu_0_instruction_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (cpu_0_instruction_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (cpu_0_instruction_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (cpu_0_instruction_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (cpu_0_instruction_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (cpu_0_instruction_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (cpu_0_instruction_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (cpu_0_instruction_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (cpu_0_instruction_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (cpu_0_instruction_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (cpu_0_instruction_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (cpu_0_instruction_master_waitrequest),                                        //                          .waitrequest
		.av_read                (cpu_0_instruction_master_read),                                               //                          .read
		.av_readdata            (cpu_0_instruction_master_readdata),                                           //                          .readdata
		.av_readdatavalid       (cpu_0_instruction_master_readdatavalid),                                      //                          .readdatavalid
		.av_burstcount          (1'b1),                                                                        //               (terminated)
		.av_byteenable          (4'b1111),                                                                     //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                        //               (terminated)
		.av_begintransfer       (1'b0),                                                                        //               (terminated)
		.av_chipselect          (1'b0),                                                                        //               (terminated)
		.av_write               (1'b0),                                                                        //               (terminated)
		.av_writedata           (32'b00000000000000000000000000000000),                                        //               (terminated)
		.av_lock                (1'b0),                                                                        //               (terminated)
		.av_debugaccess         (1'b0),                                                                        //               (terminated)
		.uav_clken              (),                                                                            //               (terminated)
		.av_clken               (1'b1),                                                                        //               (terminated)
		.uav_response           (2'b00),                                                                       //               (terminated)
		.av_response            (),                                                                            //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                        //               (terminated)
		.av_writeresponsevalid  ()                                                                             //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (30),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (0),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (1),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) cpu_1_instruction_master_translator (
		.clk                    (clk_125_clk_clk),                                                             //                       clk.clk
		.reset                  (cpu_1_reset_reset_bridge_in_reset_reset),                                     //                     reset.reset
		.uav_address            (cpu_1_instruction_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (cpu_1_instruction_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (cpu_1_instruction_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (cpu_1_instruction_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (cpu_1_instruction_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (cpu_1_instruction_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (cpu_1_instruction_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (cpu_1_instruction_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (cpu_1_instruction_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (cpu_1_instruction_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (cpu_1_instruction_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (cpu_1_instruction_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (cpu_1_instruction_master_waitrequest),                                        //                          .waitrequest
		.av_read                (cpu_1_instruction_master_read),                                               //                          .read
		.av_readdata            (cpu_1_instruction_master_readdata),                                           //                          .readdata
		.av_readdatavalid       (cpu_1_instruction_master_readdatavalid),                                      //                          .readdatavalid
		.av_burstcount          (1'b1),                                                                        //               (terminated)
		.av_byteenable          (4'b1111),                                                                     //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                        //               (terminated)
		.av_begintransfer       (1'b0),                                                                        //               (terminated)
		.av_chipselect          (1'b0),                                                                        //               (terminated)
		.av_write               (1'b0),                                                                        //               (terminated)
		.av_writedata           (32'b00000000000000000000000000000000),                                        //               (terminated)
		.av_lock                (1'b0),                                                                        //               (terminated)
		.av_debugaccess         (1'b0),                                                                        //               (terminated)
		.uav_clken              (),                                                                            //               (terminated)
		.av_clken               (1'b1),                                                                        //               (terminated)
		.uav_response           (2'b00),                                                                       //               (terminated)
		.av_response            (),                                                                            //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                        //               (terminated)
		.av_writeresponsevalid  ()                                                                             //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (32),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) sd_cont_master_translator (
		.clk                    (clk_50_out_clk_clk),                                                //                       clk.clk
		.reset                  (sd_cont_reset_reset_bridge_in_reset_reset),                         //                     reset.reset
		.uav_address            (sd_cont_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (sd_cont_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (sd_cont_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (sd_cont_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (sd_cont_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (sd_cont_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (sd_cont_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (sd_cont_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (sd_cont_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (sd_cont_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (sd_cont_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (sd_cont_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (sd_cont_master_waitrequest),                                        //                          .waitrequest
		.av_read                (sd_cont_master_read),                                               //                          .read
		.av_readdata            (sd_cont_master_readdata),                                           //                          .readdata
		.av_write               (sd_cont_master_write),                                              //                          .write
		.av_writedata           (sd_cont_master_writedata),                                          //                          .writedata
		.av_burstcount          (1'b1),                                                              //               (terminated)
		.av_byteenable          (4'b1111),                                                           //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                              //               (terminated)
		.av_begintransfer       (1'b0),                                                              //               (terminated)
		.av_chipselect          (1'b0),                                                              //               (terminated)
		.av_readdatavalid       (),                                                                  //               (terminated)
		.av_lock                (1'b0),                                                              //               (terminated)
		.av_debugaccess         (1'b0),                                                              //               (terminated)
		.uav_clken              (),                                                                  //               (terminated)
		.av_clken               (1'b1),                                                              //               (terminated)
		.uav_response           (2'b00),                                                             //               (terminated)
		.av_response            (),                                                                  //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                              //               (terminated)
		.av_writeresponsevalid  ()                                                                   //               (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) jtag_uart_0_avalon_jtag_slave_translator (
		.clk                    (clk_125_clk_clk),                                      //                      clk.clk
		.reset                  (cpu_0_reset_reset_bridge_in_reset_reset),              //                    reset.reset
		.uav_address            (jtag_uart_0_avalon_jtag_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (jtag_uart_0_avalon_jtag_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (jtag_uart_0_avalon_jtag_slave_agent_m0_read),          //                         .read
		.uav_write              (jtag_uart_0_avalon_jtag_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (jtag_uart_0_avalon_jtag_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (jtag_uart_0_avalon_jtag_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (jtag_uart_0_avalon_jtag_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (jtag_uart_0_avalon_jtag_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (jtag_uart_0_avalon_jtag_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (jtag_uart_0_avalon_jtag_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (jtag_uart_0_avalon_jtag_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (jtag_uart_0_avalon_jtag_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (jtag_uart_0_avalon_jtag_slave_write),                  //                         .write
		.av_read                (jtag_uart_0_avalon_jtag_slave_read),                   //                         .read
		.av_readdata            (jtag_uart_0_avalon_jtag_slave_readdata),               //                         .readdata
		.av_writedata           (jtag_uart_0_avalon_jtag_slave_writedata),              //                         .writedata
		.av_waitrequest         (jtag_uart_0_avalon_jtag_slave_waitrequest),            //                         .waitrequest
		.av_chipselect          (jtag_uart_0_avalon_jtag_slave_chipselect),             //                         .chipselect
		.av_begintransfer       (),                                                     //              (terminated)
		.av_beginbursttransfer  (),                                                     //              (terminated)
		.av_burstcount          (),                                                     //              (terminated)
		.av_byteenable          (),                                                     //              (terminated)
		.av_readdatavalid       (1'b0),                                                 //              (terminated)
		.av_writebyteenable     (),                                                     //              (terminated)
		.av_lock                (),                                                     //              (terminated)
		.av_clken               (),                                                     //              (terminated)
		.uav_clken              (1'b0),                                                 //              (terminated)
		.av_debugaccess         (),                                                     //              (terminated)
		.av_outputenable        (),                                                     //              (terminated)
		.uav_response           (),                                                     //              (terminated)
		.av_response            (2'b00),                                                //              (terminated)
		.uav_writeresponsevalid (),                                                     //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                  //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (27),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (8),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (10),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) lpddr2_avl_0_translator (
		.clk                    (clk_125_clk_clk),                         //                      clk.clk
		.reset                  (sysid_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (lpddr2_avl_0_agent_m0_address),           // avalon_universal_slave_0.address
		.uav_burstcount         (lpddr2_avl_0_agent_m0_burstcount),        //                         .burstcount
		.uav_read               (lpddr2_avl_0_agent_m0_read),              //                         .read
		.uav_write              (lpddr2_avl_0_agent_m0_write),             //                         .write
		.uav_waitrequest        (lpddr2_avl_0_agent_m0_waitrequest),       //                         .waitrequest
		.uav_readdatavalid      (lpddr2_avl_0_agent_m0_readdatavalid),     //                         .readdatavalid
		.uav_byteenable         (lpddr2_avl_0_agent_m0_byteenable),        //                         .byteenable
		.uav_readdata           (lpddr2_avl_0_agent_m0_readdata),          //                         .readdata
		.uav_writedata          (lpddr2_avl_0_agent_m0_writedata),         //                         .writedata
		.uav_lock               (lpddr2_avl_0_agent_m0_lock),              //                         .lock
		.uav_debugaccess        (lpddr2_avl_0_agent_m0_debugaccess),       //                         .debugaccess
		.av_address             (lpddr2_avl_0_address),                    //      avalon_anti_slave_0.address
		.av_write               (lpddr2_avl_0_write),                      //                         .write
		.av_read                (lpddr2_avl_0_read),                       //                         .read
		.av_readdata            (lpddr2_avl_0_readdata),                   //                         .readdata
		.av_writedata           (lpddr2_avl_0_writedata),                  //                         .writedata
		.av_beginbursttransfer  (lpddr2_avl_0_beginbursttransfer),         //                         .beginbursttransfer
		.av_burstcount          (lpddr2_avl_0_burstcount),                 //                         .burstcount
		.av_byteenable          (lpddr2_avl_0_byteenable),                 //                         .byteenable
		.av_readdatavalid       (lpddr2_avl_0_readdatavalid),              //                         .readdatavalid
		.av_waitrequest         (lpddr2_avl_0_waitrequest),                //                         .waitrequest
		.av_begintransfer       (),                                        //              (terminated)
		.av_writebyteenable     (),                                        //              (terminated)
		.av_lock                (),                                        //              (terminated)
		.av_chipselect          (),                                        //              (terminated)
		.av_clken               (),                                        //              (terminated)
		.uav_clken              (1'b0),                                    //              (terminated)
		.av_debugaccess         (),                                        //              (terminated)
		.av_outputenable        (),                                        //              (terminated)
		.uav_response           (),                                        //              (terminated)
		.av_response            (2'b00),                                   //              (terminated)
		.uav_writeresponsevalid (),                                        //              (terminated)
		.av_writeresponsevalid  (1'b0)                                     //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sysid_control_slave_translator (
		.clk                    (clk_125_clk_clk),                            //                      clk.clk
		.reset                  (sysid_reset_reset_bridge_in_reset_reset),    //                    reset.reset
		.uav_address            (sysid_control_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (sysid_control_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (sysid_control_slave_agent_m0_read),          //                         .read
		.uav_write              (sysid_control_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (sysid_control_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (sysid_control_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (sysid_control_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (sysid_control_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (sysid_control_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (sysid_control_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (sysid_control_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (sysid_control_slave_address),                //      avalon_anti_slave_0.address
		.av_readdata            (sysid_control_slave_readdata),               //                         .readdata
		.av_write               (),                                           //              (terminated)
		.av_read                (),                                           //              (terminated)
		.av_writedata           (),                                           //              (terminated)
		.av_begintransfer       (),                                           //              (terminated)
		.av_beginbursttransfer  (),                                           //              (terminated)
		.av_burstcount          (),                                           //              (terminated)
		.av_byteenable          (),                                           //              (terminated)
		.av_readdatavalid       (1'b0),                                       //              (terminated)
		.av_waitrequest         (1'b0),                                       //              (terminated)
		.av_writebyteenable     (),                                           //              (terminated)
		.av_lock                (),                                           //              (terminated)
		.av_chipselect          (),                                           //              (terminated)
		.av_clken               (),                                           //              (terminated)
		.uav_clken              (1'b0),                                       //              (terminated)
		.av_debugaccess         (),                                           //              (terminated)
		.av_outputenable        (),                                           //              (terminated)
		.uav_response           (),                                           //              (terminated)
		.av_response            (2'b00),                                      //              (terminated)
		.uav_writeresponsevalid (),                                           //              (terminated)
		.av_writeresponsevalid  (1'b0)                                        //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (9),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) cpu_0_debug_mem_slave_translator (
		.clk                    (clk_125_clk_clk),                              //                      clk.clk
		.reset                  (cpu_0_reset_reset_bridge_in_reset_reset),      //                    reset.reset
		.uav_address            (cpu_0_debug_mem_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (cpu_0_debug_mem_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (cpu_0_debug_mem_slave_agent_m0_read),          //                         .read
		.uav_write              (cpu_0_debug_mem_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (cpu_0_debug_mem_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (cpu_0_debug_mem_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (cpu_0_debug_mem_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (cpu_0_debug_mem_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (cpu_0_debug_mem_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (cpu_0_debug_mem_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (cpu_0_debug_mem_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (cpu_0_debug_mem_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (cpu_0_debug_mem_slave_write),                  //                         .write
		.av_read                (cpu_0_debug_mem_slave_read),                   //                         .read
		.av_readdata            (cpu_0_debug_mem_slave_readdata),               //                         .readdata
		.av_writedata           (cpu_0_debug_mem_slave_writedata),              //                         .writedata
		.av_byteenable          (cpu_0_debug_mem_slave_byteenable),             //                         .byteenable
		.av_waitrequest         (cpu_0_debug_mem_slave_waitrequest),            //                         .waitrequest
		.av_debugaccess         (cpu_0_debug_mem_slave_debugaccess),            //                         .debugaccess
		.av_begintransfer       (),                                             //              (terminated)
		.av_beginbursttransfer  (),                                             //              (terminated)
		.av_burstcount          (),                                             //              (terminated)
		.av_readdatavalid       (1'b0),                                         //              (terminated)
		.av_writebyteenable     (),                                             //              (terminated)
		.av_lock                (),                                             //              (terminated)
		.av_chipselect          (),                                             //              (terminated)
		.av_clken               (),                                             //              (terminated)
		.uav_clken              (1'b0),                                         //              (terminated)
		.av_outputenable        (),                                             //              (terminated)
		.uav_response           (),                                             //              (terminated)
		.av_response            (2'b00),                                        //              (terminated)
		.uav_writeresponsevalid (),                                             //              (terminated)
		.av_writeresponsevalid  (1'b0)                                          //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (11),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (1),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) cpu_0_bridge_s0_translator (
		.clk                    (clk_125_clk_clk),                         //                      clk.clk
		.reset                  (cpu_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (cpu_0_bridge_s0_agent_m0_address),        // avalon_universal_slave_0.address
		.uav_burstcount         (cpu_0_bridge_s0_agent_m0_burstcount),     //                         .burstcount
		.uav_read               (cpu_0_bridge_s0_agent_m0_read),           //                         .read
		.uav_write              (cpu_0_bridge_s0_agent_m0_write),          //                         .write
		.uav_waitrequest        (cpu_0_bridge_s0_agent_m0_waitrequest),    //                         .waitrequest
		.uav_readdatavalid      (cpu_0_bridge_s0_agent_m0_readdatavalid),  //                         .readdatavalid
		.uav_byteenable         (cpu_0_bridge_s0_agent_m0_byteenable),     //                         .byteenable
		.uav_readdata           (cpu_0_bridge_s0_agent_m0_readdata),       //                         .readdata
		.uav_writedata          (cpu_0_bridge_s0_agent_m0_writedata),      //                         .writedata
		.uav_lock               (cpu_0_bridge_s0_agent_m0_lock),           //                         .lock
		.uav_debugaccess        (cpu_0_bridge_s0_agent_m0_debugaccess),    //                         .debugaccess
		.av_address             (cpu_0_bridge_s0_address),                 //      avalon_anti_slave_0.address
		.av_write               (cpu_0_bridge_s0_write),                   //                         .write
		.av_read                (cpu_0_bridge_s0_read),                    //                         .read
		.av_readdata            (cpu_0_bridge_s0_readdata),                //                         .readdata
		.av_writedata           (cpu_0_bridge_s0_writedata),               //                         .writedata
		.av_burstcount          (cpu_0_bridge_s0_burstcount),              //                         .burstcount
		.av_byteenable          (cpu_0_bridge_s0_byteenable),              //                         .byteenable
		.av_readdatavalid       (cpu_0_bridge_s0_readdatavalid),           //                         .readdatavalid
		.av_waitrequest         (cpu_0_bridge_s0_waitrequest),             //                         .waitrequest
		.av_debugaccess         (cpu_0_bridge_s0_debugaccess),             //                         .debugaccess
		.av_begintransfer       (),                                        //              (terminated)
		.av_beginbursttransfer  (),                                        //              (terminated)
		.av_writebyteenable     (),                                        //              (terminated)
		.av_lock                (),                                        //              (terminated)
		.av_chipselect          (),                                        //              (terminated)
		.av_clken               (),                                        //              (terminated)
		.uav_clken              (1'b0),                                    //              (terminated)
		.av_outputenable        (),                                        //              (terminated)
		.uav_response           (),                                        //              (terminated)
		.av_response            (2'b00),                                   //              (terminated)
		.uav_writeresponsevalid (),                                        //              (terminated)
		.av_writeresponsevalid  (1'b0)                                     //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (19),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (16),
		.AV_BURSTCOUNT_W                (2),
		.AV_BYTEENABLE_W                (2),
		.UAV_BYTEENABLE_W               (2),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (2),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (2),
		.AV_ADDRESS_SYMBOLS             (1),
		.AV_BURSTCOUNT_SYMBOLS          (1),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sram_uas_translator (
		.clk                    (clk_125_clk_clk),                         //                      clk.clk
		.reset                  (cpu_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (sram_uas_agent_m0_address),               // avalon_universal_slave_0.address
		.uav_burstcount         (sram_uas_agent_m0_burstcount),            //                         .burstcount
		.uav_read               (sram_uas_agent_m0_read),                  //                         .read
		.uav_write              (sram_uas_agent_m0_write),                 //                         .write
		.uav_waitrequest        (sram_uas_agent_m0_waitrequest),           //                         .waitrequest
		.uav_readdatavalid      (sram_uas_agent_m0_readdatavalid),         //                         .readdatavalid
		.uav_byteenable         (sram_uas_agent_m0_byteenable),            //                         .byteenable
		.uav_readdata           (sram_uas_agent_m0_readdata),              //                         .readdata
		.uav_writedata          (sram_uas_agent_m0_writedata),             //                         .writedata
		.uav_lock               (sram_uas_agent_m0_lock),                  //                         .lock
		.uav_debugaccess        (sram_uas_agent_m0_debugaccess),           //                         .debugaccess
		.av_address             (sram_uas_address),                        //      avalon_anti_slave_0.address
		.av_write               (sram_uas_write),                          //                         .write
		.av_read                (sram_uas_read),                           //                         .read
		.av_readdata            (sram_uas_readdata),                       //                         .readdata
		.av_writedata           (sram_uas_writedata),                      //                         .writedata
		.av_burstcount          (sram_uas_burstcount),                     //                         .burstcount
		.av_byteenable          (sram_uas_byteenable),                     //                         .byteenable
		.av_readdatavalid       (sram_uas_readdatavalid),                  //                         .readdatavalid
		.av_waitrequest         (sram_uas_waitrequest),                    //                         .waitrequest
		.av_lock                (sram_uas_lock),                           //                         .lock
		.av_debugaccess         (sram_uas_debugaccess),                    //                         .debugaccess
		.av_begintransfer       (),                                        //              (terminated)
		.av_beginbursttransfer  (),                                        //              (terminated)
		.av_writebyteenable     (),                                        //              (terminated)
		.av_chipselect          (),                                        //              (terminated)
		.av_clken               (),                                        //              (terminated)
		.uav_clken              (1'b0),                                    //              (terminated)
		.av_outputenable        (),                                        //              (terminated)
		.uav_response           (),                                        //              (terminated)
		.av_response            (2'b00),                                   //              (terminated)
		.uav_writeresponsevalid (),                                        //              (terminated)
		.av_writeresponsevalid  (1'b0)                                     //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (9),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) cpu_1_debug_mem_slave_translator (
		.clk                    (clk_125_clk_clk),                              //                      clk.clk
		.reset                  (cpu_1_reset_reset_bridge_in_reset_reset),      //                    reset.reset
		.uav_address            (cpu_1_debug_mem_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (cpu_1_debug_mem_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (cpu_1_debug_mem_slave_agent_m0_read),          //                         .read
		.uav_write              (cpu_1_debug_mem_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (cpu_1_debug_mem_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (cpu_1_debug_mem_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (cpu_1_debug_mem_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (cpu_1_debug_mem_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (cpu_1_debug_mem_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (cpu_1_debug_mem_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (cpu_1_debug_mem_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (cpu_1_debug_mem_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (cpu_1_debug_mem_slave_write),                  //                         .write
		.av_read                (cpu_1_debug_mem_slave_read),                   //                         .read
		.av_readdata            (cpu_1_debug_mem_slave_readdata),               //                         .readdata
		.av_writedata           (cpu_1_debug_mem_slave_writedata),              //                         .writedata
		.av_byteenable          (cpu_1_debug_mem_slave_byteenable),             //                         .byteenable
		.av_waitrequest         (cpu_1_debug_mem_slave_waitrequest),            //                         .waitrequest
		.av_debugaccess         (cpu_1_debug_mem_slave_debugaccess),            //                         .debugaccess
		.av_begintransfer       (),                                             //              (terminated)
		.av_beginbursttransfer  (),                                             //              (terminated)
		.av_burstcount          (),                                             //              (terminated)
		.av_readdatavalid       (1'b0),                                         //              (terminated)
		.av_writebyteenable     (),                                             //              (terminated)
		.av_lock                (),                                             //              (terminated)
		.av_chipselect          (),                                             //              (terminated)
		.av_clken               (),                                             //              (terminated)
		.uav_clken              (1'b0),                                         //              (terminated)
		.av_outputenable        (),                                             //              (terminated)
		.uav_response           (),                                             //              (terminated)
		.av_response            (2'b00),                                        //              (terminated)
		.uav_writeresponsevalid (),                                             //              (terminated)
		.av_writeresponsevalid  (1'b0)                                          //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) jtag_uart_1_avalon_jtag_slave_translator (
		.clk                    (clk_125_clk_clk),                                      //                      clk.clk
		.reset                  (sysid_reset_reset_bridge_in_reset_reset),              //                    reset.reset
		.uav_address            (jtag_uart_1_avalon_jtag_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (jtag_uart_1_avalon_jtag_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (jtag_uart_1_avalon_jtag_slave_agent_m0_read),          //                         .read
		.uav_write              (jtag_uart_1_avalon_jtag_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (jtag_uart_1_avalon_jtag_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (jtag_uart_1_avalon_jtag_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (jtag_uart_1_avalon_jtag_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (jtag_uart_1_avalon_jtag_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (jtag_uart_1_avalon_jtag_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (jtag_uart_1_avalon_jtag_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (jtag_uart_1_avalon_jtag_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (jtag_uart_1_avalon_jtag_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (jtag_uart_1_avalon_jtag_slave_write),                  //                         .write
		.av_read                (jtag_uart_1_avalon_jtag_slave_read),                   //                         .read
		.av_readdata            (jtag_uart_1_avalon_jtag_slave_readdata),               //                         .readdata
		.av_writedata           (jtag_uart_1_avalon_jtag_slave_writedata),              //                         .writedata
		.av_waitrequest         (jtag_uart_1_avalon_jtag_slave_waitrequest),            //                         .waitrequest
		.av_chipselect          (jtag_uart_1_avalon_jtag_slave_chipselect),             //                         .chipselect
		.av_begintransfer       (),                                                     //              (terminated)
		.av_beginbursttransfer  (),                                                     //              (terminated)
		.av_burstcount          (),                                                     //              (terminated)
		.av_byteenable          (),                                                     //              (terminated)
		.av_readdatavalid       (1'b0),                                                 //              (terminated)
		.av_writebyteenable     (),                                                     //              (terminated)
		.av_lock                (),                                                     //              (terminated)
		.av_clken               (),                                                     //              (terminated)
		.uav_clken              (1'b0),                                                 //              (terminated)
		.av_debugaccess         (),                                                     //              (terminated)
		.av_outputenable        (),                                                     //              (terminated)
		.uav_response           (),                                                     //              (terminated)
		.av_response            (2'b00),                                                //              (terminated)
		.uav_writeresponsevalid (),                                                     //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                  //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (27),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (8),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (10),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) lpddr2_avl_2_translator (
		.clk                    (clk_125_clk_clk),                         //                      clk.clk
		.reset                  (sysid_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (lpddr2_avl_2_agent_m0_address),           // avalon_universal_slave_0.address
		.uav_burstcount         (lpddr2_avl_2_agent_m0_burstcount),        //                         .burstcount
		.uav_read               (lpddr2_avl_2_agent_m0_read),              //                         .read
		.uav_write              (lpddr2_avl_2_agent_m0_write),             //                         .write
		.uav_waitrequest        (lpddr2_avl_2_agent_m0_waitrequest),       //                         .waitrequest
		.uav_readdatavalid      (lpddr2_avl_2_agent_m0_readdatavalid),     //                         .readdatavalid
		.uav_byteenable         (lpddr2_avl_2_agent_m0_byteenable),        //                         .byteenable
		.uav_readdata           (lpddr2_avl_2_agent_m0_readdata),          //                         .readdata
		.uav_writedata          (lpddr2_avl_2_agent_m0_writedata),         //                         .writedata
		.uav_lock               (lpddr2_avl_2_agent_m0_lock),              //                         .lock
		.uav_debugaccess        (lpddr2_avl_2_agent_m0_debugaccess),       //                         .debugaccess
		.av_address             (lpddr2_avl_2_address),                    //      avalon_anti_slave_0.address
		.av_write               (lpddr2_avl_2_write),                      //                         .write
		.av_read                (lpddr2_avl_2_read),                       //                         .read
		.av_readdata            (lpddr2_avl_2_readdata),                   //                         .readdata
		.av_writedata           (lpddr2_avl_2_writedata),                  //                         .writedata
		.av_beginbursttransfer  (lpddr2_avl_2_beginbursttransfer),         //                         .beginbursttransfer
		.av_burstcount          (lpddr2_avl_2_burstcount),                 //                         .burstcount
		.av_byteenable          (lpddr2_avl_2_byteenable),                 //                         .byteenable
		.av_readdatavalid       (lpddr2_avl_2_readdatavalid),              //                         .readdatavalid
		.av_waitrequest         (lpddr2_avl_2_waitrequest),                //                         .waitrequest
		.av_begintransfer       (),                                        //              (terminated)
		.av_writebyteenable     (),                                        //              (terminated)
		.av_lock                (),                                        //              (terminated)
		.av_chipselect          (),                                        //              (terminated)
		.av_clken               (),                                        //              (terminated)
		.uav_clken              (1'b0),                                    //              (terminated)
		.av_debugaccess         (),                                        //              (terminated)
		.av_outputenable        (),                                        //              (terminated)
		.uav_response           (),                                        //              (terminated)
		.av_response            (2'b00),                                   //              (terminated)
		.uav_writeresponsevalid (),                                        //              (terminated)
		.av_writeresponsevalid  (1'b0)                                     //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (7),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (1),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) cpu_1_bridge_0_s0_translator (
		.clk                    (clk_125_clk_clk),                          //                      clk.clk
		.reset                  (sysid_reset_reset_bridge_in_reset_reset),  //                    reset.reset
		.uav_address            (cpu_1_bridge_0_s0_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (cpu_1_bridge_0_s0_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (cpu_1_bridge_0_s0_agent_m0_read),          //                         .read
		.uav_write              (cpu_1_bridge_0_s0_agent_m0_write),         //                         .write
		.uav_waitrequest        (cpu_1_bridge_0_s0_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (cpu_1_bridge_0_s0_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (cpu_1_bridge_0_s0_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (cpu_1_bridge_0_s0_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (cpu_1_bridge_0_s0_agent_m0_writedata),     //                         .writedata
		.uav_lock               (cpu_1_bridge_0_s0_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (cpu_1_bridge_0_s0_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (cpu_1_bridge_0_s0_address),                //      avalon_anti_slave_0.address
		.av_write               (cpu_1_bridge_0_s0_write),                  //                         .write
		.av_read                (cpu_1_bridge_0_s0_read),                   //                         .read
		.av_readdata            (cpu_1_bridge_0_s0_readdata),               //                         .readdata
		.av_writedata           (cpu_1_bridge_0_s0_writedata),              //                         .writedata
		.av_burstcount          (cpu_1_bridge_0_s0_burstcount),             //                         .burstcount
		.av_byteenable          (cpu_1_bridge_0_s0_byteenable),             //                         .byteenable
		.av_readdatavalid       (cpu_1_bridge_0_s0_readdatavalid),          //                         .readdatavalid
		.av_waitrequest         (cpu_1_bridge_0_s0_waitrequest),            //                         .waitrequest
		.av_debugaccess         (cpu_1_bridge_0_s0_debugaccess),            //                         .debugaccess
		.av_begintransfer       (),                                         //              (terminated)
		.av_beginbursttransfer  (),                                         //              (terminated)
		.av_writebyteenable     (),                                         //              (terminated)
		.av_lock                (),                                         //              (terminated)
		.av_chipselect          (),                                         //              (terminated)
		.av_clken               (),                                         //              (terminated)
		.uav_clken              (1'b0),                                     //              (terminated)
		.av_outputenable        (),                                         //              (terminated)
		.uav_response           (),                                         //              (terminated)
		.av_response            (2'b00),                                    //              (terminated)
		.uav_writeresponsevalid (),                                         //              (terminated)
		.av_writeresponsevalid  (1'b0)                                      //              (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (116),
		.PKT_ORI_BURST_SIZE_L      (114),
		.PKT_RESPONSE_STATUS_H     (113),
		.PKT_RESPONSE_STATUS_L     (112),
		.PKT_QOS_H                 (95),
		.PKT_QOS_L                 (95),
		.PKT_DATA_SIDEBAND_H       (93),
		.PKT_DATA_SIDEBAND_L       (93),
		.PKT_ADDR_SIDEBAND_H       (92),
		.PKT_ADDR_SIDEBAND_L       (92),
		.PKT_BURST_TYPE_H          (91),
		.PKT_BURST_TYPE_L          (90),
		.PKT_CACHE_H               (111),
		.PKT_CACHE_L               (108),
		.PKT_THREAD_ID_H           (104),
		.PKT_THREAD_ID_L           (104),
		.PKT_BURST_SIZE_H          (89),
		.PKT_BURST_SIZE_L          (87),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (94),
		.PKT_PROTECTION_H          (107),
		.PKT_PROTECTION_L          (105),
		.PKT_BURSTWRAP_H           (86),
		.PKT_BURSTWRAP_L           (84),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (99),
		.PKT_SRC_ID_L              (96),
		.PKT_DEST_ID_H             (103),
		.PKT_DEST_ID_L             (100),
		.ST_DATA_W                 (117),
		.ST_CHANNEL_W              (10),
		.AV_BURSTCOUNT_W           (6),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (0),
		.BURSTWRAP_VALUE           (7),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) cpu_0_data_master_agent (
		.clk                   (clk_125_clk_clk),                                                      //       clk.clk
		.reset                 (cpu_0_reset_reset_bridge_in_reset_reset),                              // clk_reset.reset
		.av_address            (cpu_0_data_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (cpu_0_data_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (cpu_0_data_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (cpu_0_data_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (cpu_0_data_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (cpu_0_data_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (cpu_0_data_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (cpu_0_data_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (cpu_0_data_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (cpu_0_data_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (cpu_0_data_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (cpu_0_data_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (cpu_0_data_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (cpu_0_data_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (cpu_0_data_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (cpu_0_data_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (cpu_0_data_master_limiter_rsp_src_valid),                              //        rp.valid
		.rp_data               (cpu_0_data_master_limiter_rsp_src_data),                               //          .data
		.rp_channel            (cpu_0_data_master_limiter_rsp_src_channel),                            //          .channel
		.rp_startofpacket      (cpu_0_data_master_limiter_rsp_src_startofpacket),                      //          .startofpacket
		.rp_endofpacket        (cpu_0_data_master_limiter_rsp_src_endofpacket),                        //          .endofpacket
		.rp_ready              (cpu_0_data_master_limiter_rsp_src_ready),                              //          .ready
		.av_response           (),                                                                     // (terminated)
		.av_writeresponsevalid ()                                                                      // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (116),
		.PKT_ORI_BURST_SIZE_L      (114),
		.PKT_RESPONSE_STATUS_H     (113),
		.PKT_RESPONSE_STATUS_L     (112),
		.PKT_QOS_H                 (95),
		.PKT_QOS_L                 (95),
		.PKT_DATA_SIDEBAND_H       (93),
		.PKT_DATA_SIDEBAND_L       (93),
		.PKT_ADDR_SIDEBAND_H       (92),
		.PKT_ADDR_SIDEBAND_L       (92),
		.PKT_BURST_TYPE_H          (91),
		.PKT_BURST_TYPE_L          (90),
		.PKT_CACHE_H               (111),
		.PKT_CACHE_L               (108),
		.PKT_THREAD_ID_H           (104),
		.PKT_THREAD_ID_L           (104),
		.PKT_BURST_SIZE_H          (89),
		.PKT_BURST_SIZE_L          (87),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (94),
		.PKT_PROTECTION_H          (107),
		.PKT_PROTECTION_L          (105),
		.PKT_BURSTWRAP_H           (86),
		.PKT_BURSTWRAP_L           (84),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (99),
		.PKT_SRC_ID_L              (96),
		.PKT_DEST_ID_H             (103),
		.PKT_DEST_ID_L             (100),
		.ST_DATA_W                 (117),
		.ST_CHANNEL_W              (10),
		.AV_BURSTCOUNT_W           (6),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (2),
		.BURSTWRAP_VALUE           (7),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) cpu_1_data_master_agent (
		.clk                   (clk_125_clk_clk),                                                      //       clk.clk
		.reset                 (cpu_1_reset_reset_bridge_in_reset_reset),                              // clk_reset.reset
		.av_address            (cpu_1_data_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (cpu_1_data_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (cpu_1_data_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (cpu_1_data_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (cpu_1_data_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (cpu_1_data_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (cpu_1_data_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (cpu_1_data_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (cpu_1_data_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (cpu_1_data_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (cpu_1_data_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (cpu_1_data_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (cpu_1_data_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (cpu_1_data_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (cpu_1_data_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (cpu_1_data_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (cpu_1_data_master_limiter_rsp_src_valid),                              //        rp.valid
		.rp_data               (cpu_1_data_master_limiter_rsp_src_data),                               //          .data
		.rp_channel            (cpu_1_data_master_limiter_rsp_src_channel),                            //          .channel
		.rp_startofpacket      (cpu_1_data_master_limiter_rsp_src_startofpacket),                      //          .startofpacket
		.rp_endofpacket        (cpu_1_data_master_limiter_rsp_src_endofpacket),                        //          .endofpacket
		.rp_ready              (cpu_1_data_master_limiter_rsp_src_ready),                              //          .ready
		.av_response           (),                                                                     // (terminated)
		.av_writeresponsevalid ()                                                                      // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (116),
		.PKT_ORI_BURST_SIZE_L      (114),
		.PKT_RESPONSE_STATUS_H     (113),
		.PKT_RESPONSE_STATUS_L     (112),
		.PKT_QOS_H                 (95),
		.PKT_QOS_L                 (95),
		.PKT_DATA_SIDEBAND_H       (93),
		.PKT_DATA_SIDEBAND_L       (93),
		.PKT_ADDR_SIDEBAND_H       (92),
		.PKT_ADDR_SIDEBAND_L       (92),
		.PKT_BURST_TYPE_H          (91),
		.PKT_BURST_TYPE_L          (90),
		.PKT_CACHE_H               (111),
		.PKT_CACHE_L               (108),
		.PKT_THREAD_ID_H           (104),
		.PKT_THREAD_ID_L           (104),
		.PKT_BURST_SIZE_H          (89),
		.PKT_BURST_SIZE_L          (87),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (94),
		.PKT_PROTECTION_H          (107),
		.PKT_PROTECTION_L          (105),
		.PKT_BURSTWRAP_H           (86),
		.PKT_BURSTWRAP_L           (84),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (99),
		.PKT_SRC_ID_L              (96),
		.PKT_DEST_ID_H             (103),
		.PKT_DEST_ID_L             (100),
		.ST_DATA_W                 (117),
		.ST_CHANNEL_W              (10),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (1),
		.BURSTWRAP_VALUE           (3),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) cpu_0_instruction_master_agent (
		.clk                   (clk_125_clk_clk),                                                             //       clk.clk
		.reset                 (cpu_0_reset_reset_bridge_in_reset_reset),                                     // clk_reset.reset
		.av_address            (cpu_0_instruction_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (cpu_0_instruction_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (cpu_0_instruction_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (cpu_0_instruction_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (cpu_0_instruction_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (cpu_0_instruction_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (cpu_0_instruction_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (cpu_0_instruction_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (cpu_0_instruction_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (cpu_0_instruction_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (cpu_0_instruction_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (cpu_0_instruction_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (cpu_0_instruction_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (cpu_0_instruction_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (cpu_0_instruction_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (cpu_0_instruction_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (cpu_0_instruction_master_limiter_rsp_src_valid),                              //        rp.valid
		.rp_data               (cpu_0_instruction_master_limiter_rsp_src_data),                               //          .data
		.rp_channel            (cpu_0_instruction_master_limiter_rsp_src_channel),                            //          .channel
		.rp_startofpacket      (cpu_0_instruction_master_limiter_rsp_src_startofpacket),                      //          .startofpacket
		.rp_endofpacket        (cpu_0_instruction_master_limiter_rsp_src_endofpacket),                        //          .endofpacket
		.rp_ready              (cpu_0_instruction_master_limiter_rsp_src_ready),                              //          .ready
		.av_response           (),                                                                            // (terminated)
		.av_writeresponsevalid ()                                                                             // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (116),
		.PKT_ORI_BURST_SIZE_L      (114),
		.PKT_RESPONSE_STATUS_H     (113),
		.PKT_RESPONSE_STATUS_L     (112),
		.PKT_QOS_H                 (95),
		.PKT_QOS_L                 (95),
		.PKT_DATA_SIDEBAND_H       (93),
		.PKT_DATA_SIDEBAND_L       (93),
		.PKT_ADDR_SIDEBAND_H       (92),
		.PKT_ADDR_SIDEBAND_L       (92),
		.PKT_BURST_TYPE_H          (91),
		.PKT_BURST_TYPE_L          (90),
		.PKT_CACHE_H               (111),
		.PKT_CACHE_L               (108),
		.PKT_THREAD_ID_H           (104),
		.PKT_THREAD_ID_L           (104),
		.PKT_BURST_SIZE_H          (89),
		.PKT_BURST_SIZE_L          (87),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (94),
		.PKT_PROTECTION_H          (107),
		.PKT_PROTECTION_L          (105),
		.PKT_BURSTWRAP_H           (86),
		.PKT_BURSTWRAP_L           (84),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (99),
		.PKT_SRC_ID_L              (96),
		.PKT_DEST_ID_H             (103),
		.PKT_DEST_ID_L             (100),
		.ST_DATA_W                 (117),
		.ST_CHANNEL_W              (10),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (3),
		.BURSTWRAP_VALUE           (3),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) cpu_1_instruction_master_agent (
		.clk                   (clk_125_clk_clk),                                                             //       clk.clk
		.reset                 (cpu_1_reset_reset_bridge_in_reset_reset),                                     // clk_reset.reset
		.av_address            (cpu_1_instruction_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (cpu_1_instruction_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (cpu_1_instruction_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (cpu_1_instruction_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (cpu_1_instruction_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (cpu_1_instruction_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (cpu_1_instruction_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (cpu_1_instruction_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (cpu_1_instruction_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (cpu_1_instruction_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (cpu_1_instruction_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (cpu_1_instruction_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (cpu_1_instruction_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (cpu_1_instruction_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (cpu_1_instruction_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (cpu_1_instruction_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (cpu_1_instruction_master_limiter_rsp_src_valid),                              //        rp.valid
		.rp_data               (cpu_1_instruction_master_limiter_rsp_src_data),                               //          .data
		.rp_channel            (cpu_1_instruction_master_limiter_rsp_src_channel),                            //          .channel
		.rp_startofpacket      (cpu_1_instruction_master_limiter_rsp_src_startofpacket),                      //          .startofpacket
		.rp_endofpacket        (cpu_1_instruction_master_limiter_rsp_src_endofpacket),                        //          .endofpacket
		.rp_ready              (cpu_1_instruction_master_limiter_rsp_src_ready),                              //          .ready
		.av_response           (),                                                                            // (terminated)
		.av_writeresponsevalid ()                                                                             // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (116),
		.PKT_ORI_BURST_SIZE_L      (114),
		.PKT_RESPONSE_STATUS_H     (113),
		.PKT_RESPONSE_STATUS_L     (112),
		.PKT_QOS_H                 (95),
		.PKT_QOS_L                 (95),
		.PKT_DATA_SIDEBAND_H       (93),
		.PKT_DATA_SIDEBAND_L       (93),
		.PKT_ADDR_SIDEBAND_H       (92),
		.PKT_ADDR_SIDEBAND_L       (92),
		.PKT_BURST_TYPE_H          (91),
		.PKT_BURST_TYPE_L          (90),
		.PKT_CACHE_H               (111),
		.PKT_CACHE_L               (108),
		.PKT_THREAD_ID_H           (104),
		.PKT_THREAD_ID_L           (104),
		.PKT_BURST_SIZE_H          (89),
		.PKT_BURST_SIZE_L          (87),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (94),
		.PKT_PROTECTION_H          (107),
		.PKT_PROTECTION_L          (105),
		.PKT_BURSTWRAP_H           (86),
		.PKT_BURSTWRAP_L           (84),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (99),
		.PKT_SRC_ID_L              (96),
		.PKT_DEST_ID_H             (103),
		.PKT_DEST_ID_L             (100),
		.ST_DATA_W                 (117),
		.ST_CHANNEL_W              (10),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (4),
		.BURSTWRAP_VALUE           (7),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) sd_cont_master_agent (
		.clk                   (clk_50_out_clk_clk),                                                //       clk.clk
		.reset                 (sd_cont_reset_reset_bridge_in_reset_reset),                         // clk_reset.reset
		.av_address            (sd_cont_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (sd_cont_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (sd_cont_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (sd_cont_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (sd_cont_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (sd_cont_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (sd_cont_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (sd_cont_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (sd_cont_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (sd_cont_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (sd_cont_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (sd_cont_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (sd_cont_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (sd_cont_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (sd_cont_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (sd_cont_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_004_src_valid),                                             //        rp.valid
		.rp_data               (rsp_mux_004_src_data),                                              //          .data
		.rp_channel            (rsp_mux_004_src_channel),                                           //          .channel
		.rp_startofpacket      (rsp_mux_004_src_startofpacket),                                     //          .startofpacket
		.rp_endofpacket        (rsp_mux_004_src_endofpacket),                                       //          .endofpacket
		.rp_ready              (rsp_mux_004_src_ready),                                             //          .ready
		.av_response           (),                                                                  // (terminated)
		.av_writeresponsevalid ()                                                                   // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (116),
		.PKT_ORI_BURST_SIZE_L      (114),
		.PKT_RESPONSE_STATUS_H     (113),
		.PKT_RESPONSE_STATUS_L     (112),
		.PKT_BURST_SIZE_H          (89),
		.PKT_BURST_SIZE_L          (87),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (94),
		.PKT_PROTECTION_H          (107),
		.PKT_PROTECTION_L          (105),
		.PKT_BURSTWRAP_H           (86),
		.PKT_BURSTWRAP_L           (84),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (99),
		.PKT_SRC_ID_L              (96),
		.PKT_DEST_ID_H             (103),
		.PKT_DEST_ID_L             (100),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (10),
		.ST_DATA_W                 (117),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) jtag_uart_0_avalon_jtag_slave_agent (
		.clk                     (clk_125_clk_clk),                                                //             clk.clk
		.reset                   (cpu_0_reset_reset_bridge_in_reset_reset),                        //       clk_reset.reset
		.m0_address              (jtag_uart_0_avalon_jtag_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (jtag_uart_0_avalon_jtag_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (jtag_uart_0_avalon_jtag_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (jtag_uart_0_avalon_jtag_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (jtag_uart_0_avalon_jtag_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (jtag_uart_0_avalon_jtag_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (jtag_uart_0_avalon_jtag_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (jtag_uart_0_avalon_jtag_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (jtag_uart_0_avalon_jtag_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (jtag_uart_0_avalon_jtag_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (jtag_uart_0_avalon_jtag_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (jtag_uart_0_avalon_jtag_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (jtag_uart_0_avalon_jtag_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (jtag_uart_0_avalon_jtag_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (jtag_uart_0_avalon_jtag_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (jtag_uart_0_avalon_jtag_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (agent_pipeline_source0_ready),                                   //              cp.ready
		.cp_valid                (agent_pipeline_source0_valid),                                   //                .valid
		.cp_data                 (agent_pipeline_source0_data),                                    //                .data
		.cp_startofpacket        (agent_pipeline_source0_startofpacket),                           //                .startofpacket
		.cp_endofpacket          (agent_pipeline_source0_endofpacket),                             //                .endofpacket
		.cp_channel              (agent_pipeline_source0_channel),                                 //                .channel
		.rf_sink_ready           (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (jtag_uart_0_avalon_jtag_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (jtag_uart_0_avalon_jtag_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (jtag_uart_0_avalon_jtag_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (jtag_uart_0_avalon_jtag_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (jtag_uart_0_avalon_jtag_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_out_0_ready),                                  // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_out_0_valid),                                  //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_out_0_data),                                   //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_out_0_error),                                  //                .error
		.rdata_fifo_src_ready    (jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                          //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (118),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo (
		.clk               (clk_125_clk_clk),                                                //       clk.clk
		.reset             (cpu_0_reset_reset_bridge_in_reset_reset),                        // clk_reset.reset
		.in_data           (jtag_uart_0_avalon_jtag_slave_agent_rf_source_data),             //        in.data
		.in_valid          (jtag_uart_0_avalon_jtag_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (jtag_uart_0_avalon_jtag_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (jtag_uart_0_avalon_jtag_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (jtag_uart_0_avalon_jtag_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                          // (terminated)
		.csr_read          (1'b0),                                                           // (terminated)
		.csr_write         (1'b0),                                                           // (terminated)
		.csr_readdata      (),                                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                           // (terminated)
		.almost_full_data  (),                                                               // (terminated)
		.almost_empty_data (),                                                               // (terminated)
		.in_empty          (1'b0),                                                           // (terminated)
		.out_empty         (),                                                               // (terminated)
		.in_error          (1'b0),                                                           // (terminated)
		.out_error         (),                                                               // (terminated)
		.in_channel        (1'b0),                                                           // (terminated)
		.out_channel       ()                                                                // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo (
		.clk               (clk_125_clk_clk),                                          //       clk.clk
		.reset             (cpu_0_reset_reset_bridge_in_reset_reset),                  // clk_reset.reset
		.in_data           (jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                    // (terminated)
		.csr_read          (1'b0),                                                     // (terminated)
		.csr_write         (1'b0),                                                     // (terminated)
		.csr_readdata      (),                                                         // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                     // (terminated)
		.almost_full_data  (),                                                         // (terminated)
		.almost_empty_data (),                                                         // (terminated)
		.in_startofpacket  (1'b0),                                                     // (terminated)
		.in_endofpacket    (1'b0),                                                     // (terminated)
		.out_startofpacket (),                                                         // (terminated)
		.out_endofpacket   (),                                                         // (terminated)
		.in_empty          (1'b0),                                                     // (terminated)
		.out_empty         (),                                                         // (terminated)
		.in_error          (1'b0),                                                     // (terminated)
		.out_error         (),                                                         // (terminated)
		.in_channel        (1'b0),                                                     // (terminated)
		.out_channel       ()                                                          // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (116),
		.PKT_ORI_BURST_SIZE_L      (114),
		.PKT_RESPONSE_STATUS_H     (113),
		.PKT_RESPONSE_STATUS_L     (112),
		.PKT_BURST_SIZE_H          (89),
		.PKT_BURST_SIZE_L          (87),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (94),
		.PKT_PROTECTION_H          (107),
		.PKT_PROTECTION_L          (105),
		.PKT_BURSTWRAP_H           (86),
		.PKT_BURSTWRAP_L           (84),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (99),
		.PKT_SRC_ID_L              (96),
		.PKT_DEST_ID_H             (103),
		.PKT_DEST_ID_L             (100),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (10),
		.ST_DATA_W                 (117),
		.AVS_BURSTCOUNT_W          (10),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) lpddr2_avl_0_agent (
		.clk                     (clk_125_clk_clk),                               //             clk.clk
		.reset                   (sysid_reset_reset_bridge_in_reset_reset),       //       clk_reset.reset
		.m0_address              (lpddr2_avl_0_agent_m0_address),                 //              m0.address
		.m0_burstcount           (lpddr2_avl_0_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (lpddr2_avl_0_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (lpddr2_avl_0_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (lpddr2_avl_0_agent_m0_lock),                    //                .lock
		.m0_readdata             (lpddr2_avl_0_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (lpddr2_avl_0_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (lpddr2_avl_0_agent_m0_read),                    //                .read
		.m0_waitrequest          (lpddr2_avl_0_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (lpddr2_avl_0_agent_m0_writedata),               //                .writedata
		.m0_write                (lpddr2_avl_0_agent_m0_write),                   //                .write
		.rp_endofpacket          (lpddr2_avl_0_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (lpddr2_avl_0_agent_rp_ready),                   //                .ready
		.rp_valid                (lpddr2_avl_0_agent_rp_valid),                   //                .valid
		.rp_data                 (lpddr2_avl_0_agent_rp_data),                    //                .data
		.rp_startofpacket        (lpddr2_avl_0_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (agent_pipeline_002_source0_ready),              //              cp.ready
		.cp_valid                (agent_pipeline_002_source0_valid),              //                .valid
		.cp_data                 (agent_pipeline_002_source0_data),               //                .data
		.cp_startofpacket        (agent_pipeline_002_source0_startofpacket),      //                .startofpacket
		.cp_endofpacket          (agent_pipeline_002_source0_endofpacket),        //                .endofpacket
		.cp_channel              (agent_pipeline_002_source0_channel),            //                .channel
		.rf_sink_ready           (lpddr2_avl_0_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (lpddr2_avl_0_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (lpddr2_avl_0_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (lpddr2_avl_0_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (lpddr2_avl_0_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (lpddr2_avl_0_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (lpddr2_avl_0_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (lpddr2_avl_0_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (lpddr2_avl_0_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (lpddr2_avl_0_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_001_out_0_ready),             // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_001_out_0_valid),             //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_001_out_0_data),              //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_001_out_0_error),             //                .error
		.rdata_fifo_src_ready    (lpddr2_avl_0_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (lpddr2_avl_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (lpddr2_avl_0_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                         //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                           //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (118),
		.FIFO_DEPTH          (49),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) lpddr2_avl_0_agent_rsp_fifo (
		.clk               (clk_125_clk_clk),                               //       clk.clk
		.reset             (sysid_reset_reset_bridge_in_reset_reset),       // clk_reset.reset
		.in_data           (lpddr2_avl_0_agent_rf_source_data),             //        in.data
		.in_valid          (lpddr2_avl_0_agent_rf_source_valid),            //          .valid
		.in_ready          (lpddr2_avl_0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (lpddr2_avl_0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (lpddr2_avl_0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (lpddr2_avl_0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (lpddr2_avl_0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (lpddr2_avl_0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (lpddr2_avl_0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (lpddr2_avl_0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                         // (terminated)
		.csr_read          (1'b0),                                          // (terminated)
		.csr_write         (1'b0),                                          // (terminated)
		.csr_readdata      (),                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),          // (terminated)
		.almost_full_data  (),                                              // (terminated)
		.almost_empty_data (),                                              // (terminated)
		.in_empty          (1'b0),                                          // (terminated)
		.out_empty         (),                                              // (terminated)
		.in_error          (1'b0),                                          // (terminated)
		.out_error         (),                                              // (terminated)
		.in_channel        (1'b0),                                          // (terminated)
		.out_channel       ()                                               // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (512),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (3),
		.USE_MEMORY_BLOCKS   (1),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) lpddr2_avl_0_agent_rdata_fifo (
		.clk               (clk_125_clk_clk),                         //       clk.clk
		.reset             (sysid_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (lpddr2_avl_0_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (lpddr2_avl_0_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (lpddr2_avl_0_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (lpddr2_avl_0_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (lpddr2_avl_0_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (lpddr2_avl_0_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                   // (terminated)
		.csr_read          (1'b0),                                    // (terminated)
		.csr_write         (1'b0),                                    // (terminated)
		.csr_readdata      (),                                        // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),    // (terminated)
		.almost_full_data  (),                                        // (terminated)
		.almost_empty_data (),                                        // (terminated)
		.in_startofpacket  (1'b0),                                    // (terminated)
		.in_endofpacket    (1'b0),                                    // (terminated)
		.out_startofpacket (),                                        // (terminated)
		.out_endofpacket   (),                                        // (terminated)
		.in_empty          (1'b0),                                    // (terminated)
		.out_empty         (),                                        // (terminated)
		.in_error          (1'b0),                                    // (terminated)
		.out_error         (),                                        // (terminated)
		.in_channel        (1'b0),                                    // (terminated)
		.out_channel       ()                                         // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (116),
		.PKT_ORI_BURST_SIZE_L      (114),
		.PKT_RESPONSE_STATUS_H     (113),
		.PKT_RESPONSE_STATUS_L     (112),
		.PKT_BURST_SIZE_H          (89),
		.PKT_BURST_SIZE_L          (87),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (94),
		.PKT_PROTECTION_H          (107),
		.PKT_PROTECTION_L          (105),
		.PKT_BURSTWRAP_H           (86),
		.PKT_BURSTWRAP_L           (84),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (99),
		.PKT_SRC_ID_L              (96),
		.PKT_DEST_ID_H             (103),
		.PKT_DEST_ID_L             (100),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (10),
		.ST_DATA_W                 (117),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) sysid_control_slave_agent (
		.clk                     (clk_125_clk_clk),                                      //             clk.clk
		.reset                   (sysid_reset_reset_bridge_in_reset_reset),              //       clk_reset.reset
		.m0_address              (sysid_control_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (sysid_control_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (sysid_control_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (sysid_control_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (sysid_control_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (sysid_control_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (sysid_control_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (sysid_control_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (sysid_control_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (sysid_control_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (sysid_control_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (sysid_control_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (sysid_control_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (sysid_control_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (sysid_control_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (sysid_control_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (agent_pipeline_004_source0_ready),                     //              cp.ready
		.cp_valid                (agent_pipeline_004_source0_valid),                     //                .valid
		.cp_data                 (agent_pipeline_004_source0_data),                      //                .data
		.cp_startofpacket        (agent_pipeline_004_source0_startofpacket),             //                .startofpacket
		.cp_endofpacket          (agent_pipeline_004_source0_endofpacket),               //                .endofpacket
		.cp_channel              (agent_pipeline_004_source0_channel),                   //                .channel
		.rf_sink_ready           (sysid_control_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (sysid_control_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (sysid_control_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (sysid_control_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (sysid_control_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (sysid_control_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (sysid_control_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (sysid_control_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (sysid_control_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (sysid_control_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_002_out_0_ready),                    // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_002_out_0_valid),                    //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_002_out_0_data),                     //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_002_out_0_error),                    //                .error
		.rdata_fifo_src_ready    (sysid_control_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sysid_control_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (sysid_control_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                  //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (118),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sysid_control_slave_agent_rsp_fifo (
		.clk               (clk_125_clk_clk),                                      //       clk.clk
		.reset             (sysid_reset_reset_bridge_in_reset_reset),              // clk_reset.reset
		.in_data           (sysid_control_slave_agent_rf_source_data),             //        in.data
		.in_valid          (sysid_control_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (sysid_control_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (sysid_control_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (sysid_control_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (sysid_control_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (sysid_control_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (sysid_control_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (sysid_control_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (sysid_control_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                // (terminated)
		.csr_read          (1'b0),                                                 // (terminated)
		.csr_write         (1'b0),                                                 // (terminated)
		.csr_readdata      (),                                                     // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                 // (terminated)
		.almost_full_data  (),                                                     // (terminated)
		.almost_empty_data (),                                                     // (terminated)
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.in_error          (1'b0),                                                 // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_channel        (1'b0),                                                 // (terminated)
		.out_channel       ()                                                      // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sysid_control_slave_agent_rdata_fifo (
		.clk               (clk_125_clk_clk),                                //       clk.clk
		.reset             (sysid_reset_reset_bridge_in_reset_reset),        // clk_reset.reset
		.in_data           (sysid_control_slave_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (sysid_control_slave_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (sysid_control_slave_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (sysid_control_slave_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (sysid_control_slave_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (sysid_control_slave_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                          // (terminated)
		.csr_read          (1'b0),                                           // (terminated)
		.csr_write         (1'b0),                                           // (terminated)
		.csr_readdata      (),                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),           // (terminated)
		.almost_full_data  (),                                               // (terminated)
		.almost_empty_data (),                                               // (terminated)
		.in_startofpacket  (1'b0),                                           // (terminated)
		.in_endofpacket    (1'b0),                                           // (terminated)
		.out_startofpacket (),                                               // (terminated)
		.out_endofpacket   (),                                               // (terminated)
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.in_error          (1'b0),                                           // (terminated)
		.out_error         (),                                               // (terminated)
		.in_channel        (1'b0),                                           // (terminated)
		.out_channel       ()                                                // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (116),
		.PKT_ORI_BURST_SIZE_L      (114),
		.PKT_RESPONSE_STATUS_H     (113),
		.PKT_RESPONSE_STATUS_L     (112),
		.PKT_BURST_SIZE_H          (89),
		.PKT_BURST_SIZE_L          (87),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (94),
		.PKT_PROTECTION_H          (107),
		.PKT_PROTECTION_L          (105),
		.PKT_BURSTWRAP_H           (86),
		.PKT_BURSTWRAP_L           (84),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (99),
		.PKT_SRC_ID_L              (96),
		.PKT_DEST_ID_H             (103),
		.PKT_DEST_ID_L             (100),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (10),
		.ST_DATA_W                 (117),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) cpu_0_debug_mem_slave_agent (
		.clk                     (clk_125_clk_clk),                                        //             clk.clk
		.reset                   (cpu_0_reset_reset_bridge_in_reset_reset),                //       clk_reset.reset
		.m0_address              (cpu_0_debug_mem_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (cpu_0_debug_mem_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (cpu_0_debug_mem_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (cpu_0_debug_mem_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (cpu_0_debug_mem_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (cpu_0_debug_mem_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (cpu_0_debug_mem_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (cpu_0_debug_mem_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (cpu_0_debug_mem_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (cpu_0_debug_mem_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (cpu_0_debug_mem_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (cpu_0_debug_mem_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (cpu_0_debug_mem_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (cpu_0_debug_mem_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (cpu_0_debug_mem_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (cpu_0_debug_mem_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (agent_pipeline_006_source0_ready),                       //              cp.ready
		.cp_valid                (agent_pipeline_006_source0_valid),                       //                .valid
		.cp_data                 (agent_pipeline_006_source0_data),                        //                .data
		.cp_startofpacket        (agent_pipeline_006_source0_startofpacket),               //                .startofpacket
		.cp_endofpacket          (agent_pipeline_006_source0_endofpacket),                 //                .endofpacket
		.cp_channel              (agent_pipeline_006_source0_channel),                     //                .channel
		.rf_sink_ready           (cpu_0_debug_mem_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (cpu_0_debug_mem_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (cpu_0_debug_mem_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (cpu_0_debug_mem_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (cpu_0_debug_mem_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (cpu_0_debug_mem_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (cpu_0_debug_mem_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (cpu_0_debug_mem_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (cpu_0_debug_mem_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (cpu_0_debug_mem_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_003_out_0_ready),                      // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_003_out_0_valid),                      //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_003_out_0_data),                       //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_003_out_0_error),                      //                .error
		.rdata_fifo_src_ready    (cpu_0_debug_mem_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (cpu_0_debug_mem_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (cpu_0_debug_mem_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                  //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                    //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (118),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) cpu_0_debug_mem_slave_agent_rsp_fifo (
		.clk               (clk_125_clk_clk),                                        //       clk.clk
		.reset             (cpu_0_reset_reset_bridge_in_reset_reset),                // clk_reset.reset
		.in_data           (cpu_0_debug_mem_slave_agent_rf_source_data),             //        in.data
		.in_valid          (cpu_0_debug_mem_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (cpu_0_debug_mem_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (cpu_0_debug_mem_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (cpu_0_debug_mem_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (cpu_0_debug_mem_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (cpu_0_debug_mem_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (cpu_0_debug_mem_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (cpu_0_debug_mem_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (cpu_0_debug_mem_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                  // (terminated)
		.csr_read          (1'b0),                                                   // (terminated)
		.csr_write         (1'b0),                                                   // (terminated)
		.csr_readdata      (),                                                       // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                   // (terminated)
		.almost_full_data  (),                                                       // (terminated)
		.almost_empty_data (),                                                       // (terminated)
		.in_empty          (1'b0),                                                   // (terminated)
		.out_empty         (),                                                       // (terminated)
		.in_error          (1'b0),                                                   // (terminated)
		.out_error         (),                                                       // (terminated)
		.in_channel        (1'b0),                                                   // (terminated)
		.out_channel       ()                                                        // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) cpu_0_debug_mem_slave_agent_rdata_fifo (
		.clk               (clk_125_clk_clk),                                  //       clk.clk
		.reset             (cpu_0_reset_reset_bridge_in_reset_reset),          // clk_reset.reset
		.in_data           (cpu_0_debug_mem_slave_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (cpu_0_debug_mem_slave_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (cpu_0_debug_mem_slave_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (cpu_0_debug_mem_slave_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (cpu_0_debug_mem_slave_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (cpu_0_debug_mem_slave_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                            // (terminated)
		.csr_read          (1'b0),                                             // (terminated)
		.csr_write         (1'b0),                                             // (terminated)
		.csr_readdata      (),                                                 // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),             // (terminated)
		.almost_full_data  (),                                                 // (terminated)
		.almost_empty_data (),                                                 // (terminated)
		.in_startofpacket  (1'b0),                                             // (terminated)
		.in_endofpacket    (1'b0),                                             // (terminated)
		.out_startofpacket (),                                                 // (terminated)
		.out_endofpacket   (),                                                 // (terminated)
		.in_empty          (1'b0),                                             // (terminated)
		.out_empty         (),                                                 // (terminated)
		.in_error          (1'b0),                                             // (terminated)
		.out_error         (),                                                 // (terminated)
		.in_channel        (1'b0),                                             // (terminated)
		.out_channel       ()                                                  // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (116),
		.PKT_ORI_BURST_SIZE_L      (114),
		.PKT_RESPONSE_STATUS_H     (113),
		.PKT_RESPONSE_STATUS_L     (112),
		.PKT_BURST_SIZE_H          (89),
		.PKT_BURST_SIZE_L          (87),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (94),
		.PKT_PROTECTION_H          (107),
		.PKT_PROTECTION_L          (105),
		.PKT_BURSTWRAP_H           (86),
		.PKT_BURSTWRAP_L           (84),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (99),
		.PKT_SRC_ID_L              (96),
		.PKT_DEST_ID_H             (103),
		.PKT_DEST_ID_L             (100),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (10),
		.ST_DATA_W                 (117),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) cpu_0_bridge_s0_agent (
		.clk                     (clk_125_clk_clk),                                  //             clk.clk
		.reset                   (cpu_0_reset_reset_bridge_in_reset_reset),          //       clk_reset.reset
		.m0_address              (cpu_0_bridge_s0_agent_m0_address),                 //              m0.address
		.m0_burstcount           (cpu_0_bridge_s0_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (cpu_0_bridge_s0_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (cpu_0_bridge_s0_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (cpu_0_bridge_s0_agent_m0_lock),                    //                .lock
		.m0_readdata             (cpu_0_bridge_s0_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (cpu_0_bridge_s0_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (cpu_0_bridge_s0_agent_m0_read),                    //                .read
		.m0_waitrequest          (cpu_0_bridge_s0_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (cpu_0_bridge_s0_agent_m0_writedata),               //                .writedata
		.m0_write                (cpu_0_bridge_s0_agent_m0_write),                   //                .write
		.rp_endofpacket          (cpu_0_bridge_s0_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (cpu_0_bridge_s0_agent_rp_ready),                   //                .ready
		.rp_valid                (cpu_0_bridge_s0_agent_rp_valid),                   //                .valid
		.rp_data                 (cpu_0_bridge_s0_agent_rp_data),                    //                .data
		.rp_startofpacket        (cpu_0_bridge_s0_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (agent_pipeline_008_source0_ready),                 //              cp.ready
		.cp_valid                (agent_pipeline_008_source0_valid),                 //                .valid
		.cp_data                 (agent_pipeline_008_source0_data),                  //                .data
		.cp_startofpacket        (agent_pipeline_008_source0_startofpacket),         //                .startofpacket
		.cp_endofpacket          (agent_pipeline_008_source0_endofpacket),           //                .endofpacket
		.cp_channel              (agent_pipeline_008_source0_channel),               //                .channel
		.rf_sink_ready           (cpu_0_bridge_s0_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (cpu_0_bridge_s0_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (cpu_0_bridge_s0_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (cpu_0_bridge_s0_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (cpu_0_bridge_s0_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (cpu_0_bridge_s0_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (cpu_0_bridge_s0_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (cpu_0_bridge_s0_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (cpu_0_bridge_s0_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (cpu_0_bridge_s0_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_004_out_0_ready),                // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_004_out_0_valid),                //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_004_out_0_data),                 //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_004_out_0_error),                //                .error
		.rdata_fifo_src_ready    (cpu_0_bridge_s0_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (cpu_0_bridge_s0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (cpu_0_bridge_s0_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                            //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                              //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (118),
		.FIFO_DEPTH          (5),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) cpu_0_bridge_s0_agent_rsp_fifo (
		.clk               (clk_125_clk_clk),                                  //       clk.clk
		.reset             (cpu_0_reset_reset_bridge_in_reset_reset),          // clk_reset.reset
		.in_data           (cpu_0_bridge_s0_agent_rf_source_data),             //        in.data
		.in_valid          (cpu_0_bridge_s0_agent_rf_source_valid),            //          .valid
		.in_ready          (cpu_0_bridge_s0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (cpu_0_bridge_s0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (cpu_0_bridge_s0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (cpu_0_bridge_s0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (cpu_0_bridge_s0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (cpu_0_bridge_s0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (cpu_0_bridge_s0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (cpu_0_bridge_s0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                            // (terminated)
		.csr_read          (1'b0),                                             // (terminated)
		.csr_write         (1'b0),                                             // (terminated)
		.csr_readdata      (),                                                 // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),             // (terminated)
		.almost_full_data  (),                                                 // (terminated)
		.almost_empty_data (),                                                 // (terminated)
		.in_empty          (1'b0),                                             // (terminated)
		.out_empty         (),                                                 // (terminated)
		.in_error          (1'b0),                                             // (terminated)
		.out_error         (),                                                 // (terminated)
		.in_channel        (1'b0),                                             // (terminated)
		.out_channel       ()                                                  // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (8),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (3),
		.USE_MEMORY_BLOCKS   (1),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) cpu_0_bridge_s0_agent_rdata_fifo (
		.clk               (clk_125_clk_clk),                            //       clk.clk
		.reset             (cpu_0_reset_reset_bridge_in_reset_reset),    // clk_reset.reset
		.in_data           (cpu_0_bridge_s0_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (cpu_0_bridge_s0_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (cpu_0_bridge_s0_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (cpu_0_bridge_s0_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (cpu_0_bridge_s0_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (cpu_0_bridge_s0_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                      // (terminated)
		.csr_read          (1'b0),                                       // (terminated)
		.csr_write         (1'b0),                                       // (terminated)
		.csr_readdata      (),                                           // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),       // (terminated)
		.almost_full_data  (),                                           // (terminated)
		.almost_empty_data (),                                           // (terminated)
		.in_startofpacket  (1'b0),                                       // (terminated)
		.in_endofpacket    (1'b0),                                       // (terminated)
		.out_startofpacket (),                                           // (terminated)
		.out_endofpacket   (),                                           // (terminated)
		.in_empty          (1'b0),                                       // (terminated)
		.out_empty         (),                                           // (terminated)
		.in_error          (1'b0),                                       // (terminated)
		.out_error         (),                                           // (terminated)
		.in_channel        (1'b0),                                       // (terminated)
		.out_channel       ()                                            // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (98),
		.PKT_ORI_BURST_SIZE_L      (96),
		.PKT_RESPONSE_STATUS_H     (95),
		.PKT_RESPONSE_STATUS_L     (94),
		.PKT_BURST_SIZE_H          (71),
		.PKT_BURST_SIZE_L          (69),
		.PKT_TRANS_LOCK            (54),
		.PKT_BEGIN_BURST           (76),
		.PKT_PROTECTION_H          (89),
		.PKT_PROTECTION_L          (87),
		.PKT_BURSTWRAP_H           (68),
		.PKT_BURSTWRAP_L           (66),
		.PKT_BYTE_CNT_H            (65),
		.PKT_BYTE_CNT_L            (56),
		.PKT_ADDR_H                (49),
		.PKT_ADDR_L                (18),
		.PKT_TRANS_COMPRESSED_READ (50),
		.PKT_TRANS_POSTED          (51),
		.PKT_TRANS_WRITE           (52),
		.PKT_TRANS_READ            (53),
		.PKT_DATA_H                (15),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_SRC_ID_H              (81),
		.PKT_SRC_ID_L              (78),
		.PKT_DEST_ID_H             (85),
		.PKT_DEST_ID_L             (82),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (10),
		.ST_DATA_W                 (99),
		.AVS_BURSTCOUNT_W          (2),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) sram_uas_agent (
		.clk                     (clk_125_clk_clk),                           //             clk.clk
		.reset                   (cpu_0_reset_reset_bridge_in_reset_reset),   //       clk_reset.reset
		.m0_address              (sram_uas_agent_m0_address),                 //              m0.address
		.m0_burstcount           (sram_uas_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (sram_uas_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (sram_uas_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (sram_uas_agent_m0_lock),                    //                .lock
		.m0_readdata             (sram_uas_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (sram_uas_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (sram_uas_agent_m0_read),                    //                .read
		.m0_waitrequest          (sram_uas_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (sram_uas_agent_m0_writedata),               //                .writedata
		.m0_write                (sram_uas_agent_m0_write),                   //                .write
		.rp_endofpacket          (sram_uas_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (sram_uas_agent_rp_ready),                   //                .ready
		.rp_valid                (sram_uas_agent_rp_valid),                   //                .valid
		.rp_data                 (sram_uas_agent_rp_data),                    //                .data
		.rp_startofpacket        (sram_uas_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (agent_pipeline_010_source0_ready),          //              cp.ready
		.cp_valid                (agent_pipeline_010_source0_valid),          //                .valid
		.cp_data                 (agent_pipeline_010_source0_data),           //                .data
		.cp_startofpacket        (agent_pipeline_010_source0_startofpacket),  //                .startofpacket
		.cp_endofpacket          (agent_pipeline_010_source0_endofpacket),    //                .endofpacket
		.cp_channel              (agent_pipeline_010_source0_channel),        //                .channel
		.rf_sink_ready           (sram_uas_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (sram_uas_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (sram_uas_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (sram_uas_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (sram_uas_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (sram_uas_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (sram_uas_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (sram_uas_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (sram_uas_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (sram_uas_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_005_out_0_ready),         // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_005_out_0_valid),         //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_005_out_0_data),          //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_005_out_0_error),         //                .error
		.rdata_fifo_src_ready    (sram_uas_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sram_uas_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (sram_uas_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                     //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                       //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (100),
		.FIFO_DEPTH          (4),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sram_uas_agent_rsp_fifo (
		.clk               (clk_125_clk_clk),                           //       clk.clk
		.reset             (cpu_0_reset_reset_bridge_in_reset_reset),   // clk_reset.reset
		.in_data           (sram_uas_agent_rf_source_data),             //        in.data
		.in_valid          (sram_uas_agent_rf_source_valid),            //          .valid
		.in_ready          (sram_uas_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (sram_uas_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (sram_uas_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (sram_uas_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (sram_uas_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (sram_uas_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (sram_uas_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (sram_uas_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                     // (terminated)
		.csr_read          (1'b0),                                      // (terminated)
		.csr_write         (1'b0),                                      // (terminated)
		.csr_readdata      (),                                          // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),      // (terminated)
		.almost_full_data  (),                                          // (terminated)
		.almost_empty_data (),                                          // (terminated)
		.in_empty          (1'b0),                                      // (terminated)
		.out_empty         (),                                          // (terminated)
		.in_error          (1'b0),                                      // (terminated)
		.out_error         (),                                          // (terminated)
		.in_channel        (1'b0),                                      // (terminated)
		.out_channel       ()                                           // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (18),
		.FIFO_DEPTH          (4),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sram_uas_agent_rdata_fifo (
		.clk               (clk_125_clk_clk),                         //       clk.clk
		.reset             (cpu_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (sram_uas_agent_rdata_fifo_src_data),      //        in.data
		.in_valid          (sram_uas_agent_rdata_fifo_src_valid),     //          .valid
		.in_ready          (sram_uas_agent_rdata_fifo_src_ready),     //          .ready
		.out_data          (sram_uas_agent_rdata_fifo_out_data),      //       out.data
		.out_valid         (sram_uas_agent_rdata_fifo_out_valid),     //          .valid
		.out_ready         (sram_uas_agent_rdata_fifo_out_ready),     //          .ready
		.csr_address       (2'b00),                                   // (terminated)
		.csr_read          (1'b0),                                    // (terminated)
		.csr_write         (1'b0),                                    // (terminated)
		.csr_readdata      (),                                        // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),    // (terminated)
		.almost_full_data  (),                                        // (terminated)
		.almost_empty_data (),                                        // (terminated)
		.in_startofpacket  (1'b0),                                    // (terminated)
		.in_endofpacket    (1'b0),                                    // (terminated)
		.out_startofpacket (),                                        // (terminated)
		.out_endofpacket   (),                                        // (terminated)
		.in_empty          (1'b0),                                    // (terminated)
		.out_empty         (),                                        // (terminated)
		.in_error          (1'b0),                                    // (terminated)
		.out_error         (),                                        // (terminated)
		.in_channel        (1'b0),                                    // (terminated)
		.out_channel       ()                                         // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (116),
		.PKT_ORI_BURST_SIZE_L      (114),
		.PKT_RESPONSE_STATUS_H     (113),
		.PKT_RESPONSE_STATUS_L     (112),
		.PKT_BURST_SIZE_H          (89),
		.PKT_BURST_SIZE_L          (87),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (94),
		.PKT_PROTECTION_H          (107),
		.PKT_PROTECTION_L          (105),
		.PKT_BURSTWRAP_H           (86),
		.PKT_BURSTWRAP_L           (84),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (99),
		.PKT_SRC_ID_L              (96),
		.PKT_DEST_ID_H             (103),
		.PKT_DEST_ID_L             (100),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (10),
		.ST_DATA_W                 (117),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) cpu_1_debug_mem_slave_agent (
		.clk                     (clk_125_clk_clk),                                        //             clk.clk
		.reset                   (cpu_1_reset_reset_bridge_in_reset_reset),                //       clk_reset.reset
		.m0_address              (cpu_1_debug_mem_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (cpu_1_debug_mem_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (cpu_1_debug_mem_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (cpu_1_debug_mem_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (cpu_1_debug_mem_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (cpu_1_debug_mem_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (cpu_1_debug_mem_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (cpu_1_debug_mem_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (cpu_1_debug_mem_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (cpu_1_debug_mem_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (cpu_1_debug_mem_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (cpu_1_debug_mem_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (cpu_1_debug_mem_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (cpu_1_debug_mem_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (cpu_1_debug_mem_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (cpu_1_debug_mem_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (agent_pipeline_012_source0_ready),                       //              cp.ready
		.cp_valid                (agent_pipeline_012_source0_valid),                       //                .valid
		.cp_data                 (agent_pipeline_012_source0_data),                        //                .data
		.cp_startofpacket        (agent_pipeline_012_source0_startofpacket),               //                .startofpacket
		.cp_endofpacket          (agent_pipeline_012_source0_endofpacket),                 //                .endofpacket
		.cp_channel              (agent_pipeline_012_source0_channel),                     //                .channel
		.rf_sink_ready           (cpu_1_debug_mem_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (cpu_1_debug_mem_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (cpu_1_debug_mem_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (cpu_1_debug_mem_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (cpu_1_debug_mem_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (cpu_1_debug_mem_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (cpu_1_debug_mem_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (cpu_1_debug_mem_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (cpu_1_debug_mem_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (cpu_1_debug_mem_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_006_out_0_ready),                      // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_006_out_0_valid),                      //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_006_out_0_data),                       //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_006_out_0_error),                      //                .error
		.rdata_fifo_src_ready    (cpu_1_debug_mem_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (cpu_1_debug_mem_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (cpu_1_debug_mem_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                  //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                    //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (118),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) cpu_1_debug_mem_slave_agent_rsp_fifo (
		.clk               (clk_125_clk_clk),                                        //       clk.clk
		.reset             (cpu_1_reset_reset_bridge_in_reset_reset),                // clk_reset.reset
		.in_data           (cpu_1_debug_mem_slave_agent_rf_source_data),             //        in.data
		.in_valid          (cpu_1_debug_mem_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (cpu_1_debug_mem_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (cpu_1_debug_mem_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (cpu_1_debug_mem_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (cpu_1_debug_mem_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (cpu_1_debug_mem_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (cpu_1_debug_mem_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (cpu_1_debug_mem_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (cpu_1_debug_mem_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                  // (terminated)
		.csr_read          (1'b0),                                                   // (terminated)
		.csr_write         (1'b0),                                                   // (terminated)
		.csr_readdata      (),                                                       // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                   // (terminated)
		.almost_full_data  (),                                                       // (terminated)
		.almost_empty_data (),                                                       // (terminated)
		.in_empty          (1'b0),                                                   // (terminated)
		.out_empty         (),                                                       // (terminated)
		.in_error          (1'b0),                                                   // (terminated)
		.out_error         (),                                                       // (terminated)
		.in_channel        (1'b0),                                                   // (terminated)
		.out_channel       ()                                                        // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) cpu_1_debug_mem_slave_agent_rdata_fifo (
		.clk               (clk_125_clk_clk),                                  //       clk.clk
		.reset             (cpu_1_reset_reset_bridge_in_reset_reset),          // clk_reset.reset
		.in_data           (cpu_1_debug_mem_slave_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (cpu_1_debug_mem_slave_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (cpu_1_debug_mem_slave_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (cpu_1_debug_mem_slave_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (cpu_1_debug_mem_slave_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (cpu_1_debug_mem_slave_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                            // (terminated)
		.csr_read          (1'b0),                                             // (terminated)
		.csr_write         (1'b0),                                             // (terminated)
		.csr_readdata      (),                                                 // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),             // (terminated)
		.almost_full_data  (),                                                 // (terminated)
		.almost_empty_data (),                                                 // (terminated)
		.in_startofpacket  (1'b0),                                             // (terminated)
		.in_endofpacket    (1'b0),                                             // (terminated)
		.out_startofpacket (),                                                 // (terminated)
		.out_endofpacket   (),                                                 // (terminated)
		.in_empty          (1'b0),                                             // (terminated)
		.out_empty         (),                                                 // (terminated)
		.in_error          (1'b0),                                             // (terminated)
		.out_error         (),                                                 // (terminated)
		.in_channel        (1'b0),                                             // (terminated)
		.out_channel       ()                                                  // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (116),
		.PKT_ORI_BURST_SIZE_L      (114),
		.PKT_RESPONSE_STATUS_H     (113),
		.PKT_RESPONSE_STATUS_L     (112),
		.PKT_BURST_SIZE_H          (89),
		.PKT_BURST_SIZE_L          (87),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (94),
		.PKT_PROTECTION_H          (107),
		.PKT_PROTECTION_L          (105),
		.PKT_BURSTWRAP_H           (86),
		.PKT_BURSTWRAP_L           (84),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (99),
		.PKT_SRC_ID_L              (96),
		.PKT_DEST_ID_H             (103),
		.PKT_DEST_ID_L             (100),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (10),
		.ST_DATA_W                 (117),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) jtag_uart_1_avalon_jtag_slave_agent (
		.clk                     (clk_125_clk_clk),                                                //             clk.clk
		.reset                   (sysid_reset_reset_bridge_in_reset_reset),                        //       clk_reset.reset
		.m0_address              (jtag_uart_1_avalon_jtag_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (jtag_uart_1_avalon_jtag_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (jtag_uart_1_avalon_jtag_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (jtag_uart_1_avalon_jtag_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (jtag_uart_1_avalon_jtag_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (jtag_uart_1_avalon_jtag_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (jtag_uart_1_avalon_jtag_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (jtag_uart_1_avalon_jtag_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (jtag_uart_1_avalon_jtag_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (jtag_uart_1_avalon_jtag_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (jtag_uart_1_avalon_jtag_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (jtag_uart_1_avalon_jtag_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (jtag_uart_1_avalon_jtag_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (jtag_uart_1_avalon_jtag_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (jtag_uart_1_avalon_jtag_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (jtag_uart_1_avalon_jtag_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (agent_pipeline_014_source0_ready),                               //              cp.ready
		.cp_valid                (agent_pipeline_014_source0_valid),                               //                .valid
		.cp_data                 (agent_pipeline_014_source0_data),                                //                .data
		.cp_startofpacket        (agent_pipeline_014_source0_startofpacket),                       //                .startofpacket
		.cp_endofpacket          (agent_pipeline_014_source0_endofpacket),                         //                .endofpacket
		.cp_channel              (agent_pipeline_014_source0_channel),                             //                .channel
		.rf_sink_ready           (jtag_uart_1_avalon_jtag_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (jtag_uart_1_avalon_jtag_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (jtag_uart_1_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (jtag_uart_1_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (jtag_uart_1_avalon_jtag_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (jtag_uart_1_avalon_jtag_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (jtag_uart_1_avalon_jtag_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (jtag_uart_1_avalon_jtag_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (jtag_uart_1_avalon_jtag_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (jtag_uart_1_avalon_jtag_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_007_out_0_ready),                              // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_007_out_0_valid),                              //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_007_out_0_data),                               //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_007_out_0_error),                              //                .error
		.rdata_fifo_src_ready    (jtag_uart_1_avalon_jtag_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (jtag_uart_1_avalon_jtag_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (jtag_uart_1_avalon_jtag_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                          //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (118),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) jtag_uart_1_avalon_jtag_slave_agent_rsp_fifo (
		.clk               (clk_125_clk_clk),                                                //       clk.clk
		.reset             (sysid_reset_reset_bridge_in_reset_reset),                        // clk_reset.reset
		.in_data           (jtag_uart_1_avalon_jtag_slave_agent_rf_source_data),             //        in.data
		.in_valid          (jtag_uart_1_avalon_jtag_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (jtag_uart_1_avalon_jtag_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (jtag_uart_1_avalon_jtag_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (jtag_uart_1_avalon_jtag_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (jtag_uart_1_avalon_jtag_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (jtag_uart_1_avalon_jtag_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (jtag_uart_1_avalon_jtag_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (jtag_uart_1_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (jtag_uart_1_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                          // (terminated)
		.csr_read          (1'b0),                                                           // (terminated)
		.csr_write         (1'b0),                                                           // (terminated)
		.csr_readdata      (),                                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                           // (terminated)
		.almost_full_data  (),                                                               // (terminated)
		.almost_empty_data (),                                                               // (terminated)
		.in_empty          (1'b0),                                                           // (terminated)
		.out_empty         (),                                                               // (terminated)
		.in_error          (1'b0),                                                           // (terminated)
		.out_error         (),                                                               // (terminated)
		.in_channel        (1'b0),                                                           // (terminated)
		.out_channel       ()                                                                // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) jtag_uart_1_avalon_jtag_slave_agent_rdata_fifo (
		.clk               (clk_125_clk_clk),                                          //       clk.clk
		.reset             (sysid_reset_reset_bridge_in_reset_reset),                  // clk_reset.reset
		.in_data           (jtag_uart_1_avalon_jtag_slave_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (jtag_uart_1_avalon_jtag_slave_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (jtag_uart_1_avalon_jtag_slave_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (jtag_uart_1_avalon_jtag_slave_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (jtag_uart_1_avalon_jtag_slave_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (jtag_uart_1_avalon_jtag_slave_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                    // (terminated)
		.csr_read          (1'b0),                                                     // (terminated)
		.csr_write         (1'b0),                                                     // (terminated)
		.csr_readdata      (),                                                         // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                     // (terminated)
		.almost_full_data  (),                                                         // (terminated)
		.almost_empty_data (),                                                         // (terminated)
		.in_startofpacket  (1'b0),                                                     // (terminated)
		.in_endofpacket    (1'b0),                                                     // (terminated)
		.out_startofpacket (),                                                         // (terminated)
		.out_endofpacket   (),                                                         // (terminated)
		.in_empty          (1'b0),                                                     // (terminated)
		.out_empty         (),                                                         // (terminated)
		.in_error          (1'b0),                                                     // (terminated)
		.out_error         (),                                                         // (terminated)
		.in_channel        (1'b0),                                                     // (terminated)
		.out_channel       ()                                                          // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (116),
		.PKT_ORI_BURST_SIZE_L      (114),
		.PKT_RESPONSE_STATUS_H     (113),
		.PKT_RESPONSE_STATUS_L     (112),
		.PKT_BURST_SIZE_H          (89),
		.PKT_BURST_SIZE_L          (87),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (94),
		.PKT_PROTECTION_H          (107),
		.PKT_PROTECTION_L          (105),
		.PKT_BURSTWRAP_H           (86),
		.PKT_BURSTWRAP_L           (84),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (99),
		.PKT_SRC_ID_L              (96),
		.PKT_DEST_ID_H             (103),
		.PKT_DEST_ID_L             (100),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (10),
		.ST_DATA_W                 (117),
		.AVS_BURSTCOUNT_W          (10),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) lpddr2_avl_2_agent (
		.clk                     (clk_125_clk_clk),                               //             clk.clk
		.reset                   (sysid_reset_reset_bridge_in_reset_reset),       //       clk_reset.reset
		.m0_address              (lpddr2_avl_2_agent_m0_address),                 //              m0.address
		.m0_burstcount           (lpddr2_avl_2_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (lpddr2_avl_2_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (lpddr2_avl_2_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (lpddr2_avl_2_agent_m0_lock),                    //                .lock
		.m0_readdata             (lpddr2_avl_2_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (lpddr2_avl_2_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (lpddr2_avl_2_agent_m0_read),                    //                .read
		.m0_waitrequest          (lpddr2_avl_2_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (lpddr2_avl_2_agent_m0_writedata),               //                .writedata
		.m0_write                (lpddr2_avl_2_agent_m0_write),                   //                .write
		.rp_endofpacket          (lpddr2_avl_2_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (lpddr2_avl_2_agent_rp_ready),                   //                .ready
		.rp_valid                (lpddr2_avl_2_agent_rp_valid),                   //                .valid
		.rp_data                 (lpddr2_avl_2_agent_rp_data),                    //                .data
		.rp_startofpacket        (lpddr2_avl_2_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (agent_pipeline_016_source0_ready),              //              cp.ready
		.cp_valid                (agent_pipeline_016_source0_valid),              //                .valid
		.cp_data                 (agent_pipeline_016_source0_data),               //                .data
		.cp_startofpacket        (agent_pipeline_016_source0_startofpacket),      //                .startofpacket
		.cp_endofpacket          (agent_pipeline_016_source0_endofpacket),        //                .endofpacket
		.cp_channel              (agent_pipeline_016_source0_channel),            //                .channel
		.rf_sink_ready           (lpddr2_avl_2_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (lpddr2_avl_2_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (lpddr2_avl_2_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (lpddr2_avl_2_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (lpddr2_avl_2_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (lpddr2_avl_2_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (lpddr2_avl_2_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (lpddr2_avl_2_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (lpddr2_avl_2_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (lpddr2_avl_2_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_008_out_0_ready),             // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_008_out_0_valid),             //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_008_out_0_data),              //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_008_out_0_error),             //                .error
		.rdata_fifo_src_ready    (lpddr2_avl_2_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (lpddr2_avl_2_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (lpddr2_avl_2_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                         //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                           //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (118),
		.FIFO_DEPTH          (49),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) lpddr2_avl_2_agent_rsp_fifo (
		.clk               (clk_125_clk_clk),                               //       clk.clk
		.reset             (sysid_reset_reset_bridge_in_reset_reset),       // clk_reset.reset
		.in_data           (lpddr2_avl_2_agent_rf_source_data),             //        in.data
		.in_valid          (lpddr2_avl_2_agent_rf_source_valid),            //          .valid
		.in_ready          (lpddr2_avl_2_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (lpddr2_avl_2_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (lpddr2_avl_2_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (lpddr2_avl_2_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (lpddr2_avl_2_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (lpddr2_avl_2_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (lpddr2_avl_2_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (lpddr2_avl_2_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                         // (terminated)
		.csr_read          (1'b0),                                          // (terminated)
		.csr_write         (1'b0),                                          // (terminated)
		.csr_readdata      (),                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),          // (terminated)
		.almost_full_data  (),                                              // (terminated)
		.almost_empty_data (),                                              // (terminated)
		.in_empty          (1'b0),                                          // (terminated)
		.out_empty         (),                                              // (terminated)
		.in_error          (1'b0),                                          // (terminated)
		.out_error         (),                                              // (terminated)
		.in_channel        (1'b0),                                          // (terminated)
		.out_channel       ()                                               // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (512),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (3),
		.USE_MEMORY_BLOCKS   (1),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) lpddr2_avl_2_agent_rdata_fifo (
		.clk               (clk_125_clk_clk),                         //       clk.clk
		.reset             (sysid_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (lpddr2_avl_2_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (lpddr2_avl_2_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (lpddr2_avl_2_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (lpddr2_avl_2_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (lpddr2_avl_2_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (lpddr2_avl_2_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                   // (terminated)
		.csr_read          (1'b0),                                    // (terminated)
		.csr_write         (1'b0),                                    // (terminated)
		.csr_readdata      (),                                        // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),    // (terminated)
		.almost_full_data  (),                                        // (terminated)
		.almost_empty_data (),                                        // (terminated)
		.in_startofpacket  (1'b0),                                    // (terminated)
		.in_endofpacket    (1'b0),                                    // (terminated)
		.out_startofpacket (),                                        // (terminated)
		.out_endofpacket   (),                                        // (terminated)
		.in_empty          (1'b0),                                    // (terminated)
		.out_empty         (),                                        // (terminated)
		.in_error          (1'b0),                                    // (terminated)
		.out_error         (),                                        // (terminated)
		.in_channel        (1'b0),                                    // (terminated)
		.out_channel       ()                                         // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (116),
		.PKT_ORI_BURST_SIZE_L      (114),
		.PKT_RESPONSE_STATUS_H     (113),
		.PKT_RESPONSE_STATUS_L     (112),
		.PKT_BURST_SIZE_H          (89),
		.PKT_BURST_SIZE_L          (87),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (94),
		.PKT_PROTECTION_H          (107),
		.PKT_PROTECTION_L          (105),
		.PKT_BURSTWRAP_H           (86),
		.PKT_BURSTWRAP_L           (84),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (99),
		.PKT_SRC_ID_L              (96),
		.PKT_DEST_ID_H             (103),
		.PKT_DEST_ID_L             (100),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (10),
		.ST_DATA_W                 (117),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) cpu_1_bridge_0_s0_agent (
		.clk                     (clk_125_clk_clk),                                    //             clk.clk
		.reset                   (sysid_reset_reset_bridge_in_reset_reset),            //       clk_reset.reset
		.m0_address              (cpu_1_bridge_0_s0_agent_m0_address),                 //              m0.address
		.m0_burstcount           (cpu_1_bridge_0_s0_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (cpu_1_bridge_0_s0_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (cpu_1_bridge_0_s0_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (cpu_1_bridge_0_s0_agent_m0_lock),                    //                .lock
		.m0_readdata             (cpu_1_bridge_0_s0_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (cpu_1_bridge_0_s0_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (cpu_1_bridge_0_s0_agent_m0_read),                    //                .read
		.m0_waitrequest          (cpu_1_bridge_0_s0_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (cpu_1_bridge_0_s0_agent_m0_writedata),               //                .writedata
		.m0_write                (cpu_1_bridge_0_s0_agent_m0_write),                   //                .write
		.rp_endofpacket          (cpu_1_bridge_0_s0_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (cpu_1_bridge_0_s0_agent_rp_ready),                   //                .ready
		.rp_valid                (cpu_1_bridge_0_s0_agent_rp_valid),                   //                .valid
		.rp_data                 (cpu_1_bridge_0_s0_agent_rp_data),                    //                .data
		.rp_startofpacket        (cpu_1_bridge_0_s0_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (agent_pipeline_018_source0_ready),                   //              cp.ready
		.cp_valid                (agent_pipeline_018_source0_valid),                   //                .valid
		.cp_data                 (agent_pipeline_018_source0_data),                    //                .data
		.cp_startofpacket        (agent_pipeline_018_source0_startofpacket),           //                .startofpacket
		.cp_endofpacket          (agent_pipeline_018_source0_endofpacket),             //                .endofpacket
		.cp_channel              (agent_pipeline_018_source0_channel),                 //                .channel
		.rf_sink_ready           (cpu_1_bridge_0_s0_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (cpu_1_bridge_0_s0_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (cpu_1_bridge_0_s0_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (cpu_1_bridge_0_s0_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (cpu_1_bridge_0_s0_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (cpu_1_bridge_0_s0_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (cpu_1_bridge_0_s0_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (cpu_1_bridge_0_s0_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (cpu_1_bridge_0_s0_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (cpu_1_bridge_0_s0_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_009_out_0_ready),                  // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_009_out_0_valid),                  //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_009_out_0_data),                   //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_009_out_0_error),                  //                .error
		.rdata_fifo_src_ready    (cpu_1_bridge_0_s0_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (cpu_1_bridge_0_s0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (cpu_1_bridge_0_s0_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                              //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (118),
		.FIFO_DEPTH          (5),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) cpu_1_bridge_0_s0_agent_rsp_fifo (
		.clk               (clk_125_clk_clk),                                    //       clk.clk
		.reset             (sysid_reset_reset_bridge_in_reset_reset),            // clk_reset.reset
		.in_data           (cpu_1_bridge_0_s0_agent_rf_source_data),             //        in.data
		.in_valid          (cpu_1_bridge_0_s0_agent_rf_source_valid),            //          .valid
		.in_ready          (cpu_1_bridge_0_s0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (cpu_1_bridge_0_s0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (cpu_1_bridge_0_s0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (cpu_1_bridge_0_s0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (cpu_1_bridge_0_s0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (cpu_1_bridge_0_s0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (cpu_1_bridge_0_s0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (cpu_1_bridge_0_s0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                              // (terminated)
		.csr_read          (1'b0),                                               // (terminated)
		.csr_write         (1'b0),                                               // (terminated)
		.csr_readdata      (),                                                   // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),               // (terminated)
		.almost_full_data  (),                                                   // (terminated)
		.almost_empty_data (),                                                   // (terminated)
		.in_empty          (1'b0),                                               // (terminated)
		.out_empty         (),                                                   // (terminated)
		.in_error          (1'b0),                                               // (terminated)
		.out_error         (),                                                   // (terminated)
		.in_channel        (1'b0),                                               // (terminated)
		.out_channel       ()                                                    // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (8),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (3),
		.USE_MEMORY_BLOCKS   (1),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) cpu_1_bridge_0_s0_agent_rdata_fifo (
		.clk               (clk_125_clk_clk),                              //       clk.clk
		.reset             (sysid_reset_reset_bridge_in_reset_reset),      // clk_reset.reset
		.in_data           (cpu_1_bridge_0_s0_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (cpu_1_bridge_0_s0_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (cpu_1_bridge_0_s0_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (cpu_1_bridge_0_s0_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (cpu_1_bridge_0_s0_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (cpu_1_bridge_0_s0_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                        // (terminated)
		.csr_read          (1'b0),                                         // (terminated)
		.csr_write         (1'b0),                                         // (terminated)
		.csr_readdata      (),                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),         // (terminated)
		.almost_full_data  (),                                             // (terminated)
		.almost_empty_data (),                                             // (terminated)
		.in_startofpacket  (1'b0),                                         // (terminated)
		.in_endofpacket    (1'b0),                                         // (terminated)
		.out_startofpacket (),                                             // (terminated)
		.out_endofpacket   (),                                             // (terminated)
		.in_empty          (1'b0),                                         // (terminated)
		.out_empty         (),                                             // (terminated)
		.in_error          (1'b0),                                         // (terminated)
		.out_error         (),                                             // (terminated)
		.in_channel        (1'b0),                                         // (terminated)
		.out_channel       ()                                              // (terminated)
	);

	ECE423_QSYS_mm_interconnect_0_router router (
		.sink_ready         (cpu_0_data_master_agent_cp_ready),         //      sink.ready
		.sink_valid         (cpu_0_data_master_agent_cp_valid),         //          .valid
		.sink_data          (cpu_0_data_master_agent_cp_data),          //          .data
		.sink_startofpacket (cpu_0_data_master_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (cpu_0_data_master_agent_cp_endofpacket),   //          .endofpacket
		.clk                (clk_125_clk_clk),                          //       clk.clk
		.reset              (cpu_0_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.src_ready          (router_src_ready),                         //       src.ready
		.src_valid          (router_src_valid),                         //          .valid
		.src_data           (router_src_data),                          //          .data
		.src_channel        (router_src_channel),                       //          .channel
		.src_startofpacket  (router_src_startofpacket),                 //          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                    //          .endofpacket
	);

	ECE423_QSYS_mm_interconnect_0_router_001 router_001 (
		.sink_ready         (cpu_1_data_master_agent_cp_ready),         //      sink.ready
		.sink_valid         (cpu_1_data_master_agent_cp_valid),         //          .valid
		.sink_data          (cpu_1_data_master_agent_cp_data),          //          .data
		.sink_startofpacket (cpu_1_data_master_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (cpu_1_data_master_agent_cp_endofpacket),   //          .endofpacket
		.clk                (clk_125_clk_clk),                          //       clk.clk
		.reset              (cpu_1_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.src_ready          (router_001_src_ready),                     //       src.ready
		.src_valid          (router_001_src_valid),                     //          .valid
		.src_data           (router_001_src_data),                      //          .data
		.src_channel        (router_001_src_channel),                   //          .channel
		.src_startofpacket  (router_001_src_startofpacket),             //          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                //          .endofpacket
	);

	ECE423_QSYS_mm_interconnect_0_router_002 router_002 (
		.sink_ready         (cpu_0_instruction_master_agent_cp_ready),         //      sink.ready
		.sink_valid         (cpu_0_instruction_master_agent_cp_valid),         //          .valid
		.sink_data          (cpu_0_instruction_master_agent_cp_data),          //          .data
		.sink_startofpacket (cpu_0_instruction_master_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (cpu_0_instruction_master_agent_cp_endofpacket),   //          .endofpacket
		.clk                (clk_125_clk_clk),                                 //       clk.clk
		.reset              (cpu_0_reset_reset_bridge_in_reset_reset),         // clk_reset.reset
		.src_ready          (router_002_src_ready),                            //       src.ready
		.src_valid          (router_002_src_valid),                            //          .valid
		.src_data           (router_002_src_data),                             //          .data
		.src_channel        (router_002_src_channel),                          //          .channel
		.src_startofpacket  (router_002_src_startofpacket),                    //          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                       //          .endofpacket
	);

	ECE423_QSYS_mm_interconnect_0_router_003 router_003 (
		.sink_ready         (cpu_1_instruction_master_agent_cp_ready),         //      sink.ready
		.sink_valid         (cpu_1_instruction_master_agent_cp_valid),         //          .valid
		.sink_data          (cpu_1_instruction_master_agent_cp_data),          //          .data
		.sink_startofpacket (cpu_1_instruction_master_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (cpu_1_instruction_master_agent_cp_endofpacket),   //          .endofpacket
		.clk                (clk_125_clk_clk),                                 //       clk.clk
		.reset              (cpu_1_reset_reset_bridge_in_reset_reset),         // clk_reset.reset
		.src_ready          (router_003_src_ready),                            //       src.ready
		.src_valid          (router_003_src_valid),                            //          .valid
		.src_data           (router_003_src_data),                             //          .data
		.src_channel        (router_003_src_channel),                          //          .channel
		.src_startofpacket  (router_003_src_startofpacket),                    //          .startofpacket
		.src_endofpacket    (router_003_src_endofpacket)                       //          .endofpacket
	);

	ECE423_QSYS_mm_interconnect_0_router_004 router_004 (
		.sink_ready         (sd_cont_master_agent_cp_ready),             //      sink.ready
		.sink_valid         (sd_cont_master_agent_cp_valid),             //          .valid
		.sink_data          (sd_cont_master_agent_cp_data),              //          .data
		.sink_startofpacket (sd_cont_master_agent_cp_startofpacket),     //          .startofpacket
		.sink_endofpacket   (sd_cont_master_agent_cp_endofpacket),       //          .endofpacket
		.clk                (clk_50_out_clk_clk),                        //       clk.clk
		.reset              (sd_cont_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_004_src_ready),                      //       src.ready
		.src_valid          (router_004_src_valid),                      //          .valid
		.src_data           (router_004_src_data),                       //          .data
		.src_channel        (router_004_src_channel),                    //          .channel
		.src_startofpacket  (router_004_src_startofpacket),              //          .startofpacket
		.src_endofpacket    (router_004_src_endofpacket)                 //          .endofpacket
	);

	ECE423_QSYS_mm_interconnect_0_router_005 router_005 (
		.sink_ready         (agent_pipeline_001_source0_ready),         //      sink.ready
		.sink_valid         (agent_pipeline_001_source0_valid),         //          .valid
		.sink_data          (agent_pipeline_001_source0_data),          //          .data
		.sink_startofpacket (agent_pipeline_001_source0_startofpacket), //          .startofpacket
		.sink_endofpacket   (agent_pipeline_001_source0_endofpacket),   //          .endofpacket
		.clk                (clk_125_clk_clk),                          //       clk.clk
		.reset              (cpu_0_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.src_ready          (router_005_src_ready),                     //       src.ready
		.src_valid          (router_005_src_valid),                     //          .valid
		.src_data           (router_005_src_data),                      //          .data
		.src_channel        (router_005_src_channel),                   //          .channel
		.src_startofpacket  (router_005_src_startofpacket),             //          .startofpacket
		.src_endofpacket    (router_005_src_endofpacket)                //          .endofpacket
	);

	ECE423_QSYS_mm_interconnect_0_router_006 router_006 (
		.sink_ready         (agent_pipeline_003_source0_ready),         //      sink.ready
		.sink_valid         (agent_pipeline_003_source0_valid),         //          .valid
		.sink_data          (agent_pipeline_003_source0_data),          //          .data
		.sink_startofpacket (agent_pipeline_003_source0_startofpacket), //          .startofpacket
		.sink_endofpacket   (agent_pipeline_003_source0_endofpacket),   //          .endofpacket
		.clk                (clk_125_clk_clk),                          //       clk.clk
		.reset              (sysid_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.src_ready          (router_006_src_ready),                     //       src.ready
		.src_valid          (router_006_src_valid),                     //          .valid
		.src_data           (router_006_src_data),                      //          .data
		.src_channel        (router_006_src_channel),                   //          .channel
		.src_startofpacket  (router_006_src_startofpacket),             //          .startofpacket
		.src_endofpacket    (router_006_src_endofpacket)                //          .endofpacket
	);

	ECE423_QSYS_mm_interconnect_0_router_005 router_007 (
		.sink_ready         (agent_pipeline_005_source0_ready),         //      sink.ready
		.sink_valid         (agent_pipeline_005_source0_valid),         //          .valid
		.sink_data          (agent_pipeline_005_source0_data),          //          .data
		.sink_startofpacket (agent_pipeline_005_source0_startofpacket), //          .startofpacket
		.sink_endofpacket   (agent_pipeline_005_source0_endofpacket),   //          .endofpacket
		.clk                (clk_125_clk_clk),                          //       clk.clk
		.reset              (sysid_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.src_ready          (router_007_src_ready),                     //       src.ready
		.src_valid          (router_007_src_valid),                     //          .valid
		.src_data           (router_007_src_data),                      //          .data
		.src_channel        (router_007_src_channel),                   //          .channel
		.src_startofpacket  (router_007_src_startofpacket),             //          .startofpacket
		.src_endofpacket    (router_007_src_endofpacket)                //          .endofpacket
	);

	ECE423_QSYS_mm_interconnect_0_router_008 router_008 (
		.sink_ready         (agent_pipeline_007_source0_ready),         //      sink.ready
		.sink_valid         (agent_pipeline_007_source0_valid),         //          .valid
		.sink_data          (agent_pipeline_007_source0_data),          //          .data
		.sink_startofpacket (agent_pipeline_007_source0_startofpacket), //          .startofpacket
		.sink_endofpacket   (agent_pipeline_007_source0_endofpacket),   //          .endofpacket
		.clk                (clk_125_clk_clk),                          //       clk.clk
		.reset              (cpu_0_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.src_ready          (router_008_src_ready),                     //       src.ready
		.src_valid          (router_008_src_valid),                     //          .valid
		.src_data           (router_008_src_data),                      //          .data
		.src_channel        (router_008_src_channel),                   //          .channel
		.src_startofpacket  (router_008_src_startofpacket),             //          .startofpacket
		.src_endofpacket    (router_008_src_endofpacket)                //          .endofpacket
	);

	ECE423_QSYS_mm_interconnect_0_router_005 router_009 (
		.sink_ready         (agent_pipeline_009_source0_ready),         //      sink.ready
		.sink_valid         (agent_pipeline_009_source0_valid),         //          .valid
		.sink_data          (agent_pipeline_009_source0_data),          //          .data
		.sink_startofpacket (agent_pipeline_009_source0_startofpacket), //          .startofpacket
		.sink_endofpacket   (agent_pipeline_009_source0_endofpacket),   //          .endofpacket
		.clk                (clk_125_clk_clk),                          //       clk.clk
		.reset              (cpu_0_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.src_ready          (router_009_src_ready),                     //       src.ready
		.src_valid          (router_009_src_valid),                     //          .valid
		.src_data           (router_009_src_data),                      //          .data
		.src_channel        (router_009_src_channel),                   //          .channel
		.src_startofpacket  (router_009_src_startofpacket),             //          .startofpacket
		.src_endofpacket    (router_009_src_endofpacket)                //          .endofpacket
	);

	ECE423_QSYS_mm_interconnect_0_router_010 router_010 (
		.sink_ready         (agent_pipeline_011_source0_ready),         //      sink.ready
		.sink_valid         (agent_pipeline_011_source0_valid),         //          .valid
		.sink_data          (agent_pipeline_011_source0_data),          //          .data
		.sink_startofpacket (agent_pipeline_011_source0_startofpacket), //          .startofpacket
		.sink_endofpacket   (agent_pipeline_011_source0_endofpacket),   //          .endofpacket
		.clk                (clk_125_clk_clk),                          //       clk.clk
		.reset              (cpu_0_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.src_ready          (router_010_src_ready),                     //       src.ready
		.src_valid          (router_010_src_valid),                     //          .valid
		.src_data           (router_010_src_data),                      //          .data
		.src_channel        (router_010_src_channel),                   //          .channel
		.src_startofpacket  (router_010_src_startofpacket),             //          .startofpacket
		.src_endofpacket    (router_010_src_endofpacket)                //          .endofpacket
	);

	ECE423_QSYS_mm_interconnect_0_router_011 router_011 (
		.sink_ready         (agent_pipeline_013_source0_ready),         //      sink.ready
		.sink_valid         (agent_pipeline_013_source0_valid),         //          .valid
		.sink_data          (agent_pipeline_013_source0_data),          //          .data
		.sink_startofpacket (agent_pipeline_013_source0_startofpacket), //          .startofpacket
		.sink_endofpacket   (agent_pipeline_013_source0_endofpacket),   //          .endofpacket
		.clk                (clk_125_clk_clk),                          //       clk.clk
		.reset              (cpu_1_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.src_ready          (router_011_src_ready),                     //       src.ready
		.src_valid          (router_011_src_valid),                     //          .valid
		.src_data           (router_011_src_data),                      //          .data
		.src_channel        (router_011_src_channel),                   //          .channel
		.src_startofpacket  (router_011_src_startofpacket),             //          .startofpacket
		.src_endofpacket    (router_011_src_endofpacket)                //          .endofpacket
	);

	ECE423_QSYS_mm_interconnect_0_router_012 router_012 (
		.sink_ready         (agent_pipeline_015_source0_ready),         //      sink.ready
		.sink_valid         (agent_pipeline_015_source0_valid),         //          .valid
		.sink_data          (agent_pipeline_015_source0_data),          //          .data
		.sink_startofpacket (agent_pipeline_015_source0_startofpacket), //          .startofpacket
		.sink_endofpacket   (agent_pipeline_015_source0_endofpacket),   //          .endofpacket
		.clk                (clk_125_clk_clk),                          //       clk.clk
		.reset              (sysid_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.src_ready          (router_012_src_ready),                     //       src.ready
		.src_valid          (router_012_src_valid),                     //          .valid
		.src_data           (router_012_src_data),                      //          .data
		.src_channel        (router_012_src_channel),                   //          .channel
		.src_startofpacket  (router_012_src_startofpacket),             //          .startofpacket
		.src_endofpacket    (router_012_src_endofpacket)                //          .endofpacket
	);

	ECE423_QSYS_mm_interconnect_0_router_012 router_013 (
		.sink_ready         (agent_pipeline_017_source0_ready),         //      sink.ready
		.sink_valid         (agent_pipeline_017_source0_valid),         //          .valid
		.sink_data          (agent_pipeline_017_source0_data),          //          .data
		.sink_startofpacket (agent_pipeline_017_source0_startofpacket), //          .startofpacket
		.sink_endofpacket   (agent_pipeline_017_source0_endofpacket),   //          .endofpacket
		.clk                (clk_125_clk_clk),                          //       clk.clk
		.reset              (sysid_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.src_ready          (router_013_src_ready),                     //       src.ready
		.src_valid          (router_013_src_valid),                     //          .valid
		.src_data           (router_013_src_data),                      //          .data
		.src_channel        (router_013_src_channel),                   //          .channel
		.src_startofpacket  (router_013_src_startofpacket),             //          .startofpacket
		.src_endofpacket    (router_013_src_endofpacket)                //          .endofpacket
	);

	ECE423_QSYS_mm_interconnect_0_router_012 router_014 (
		.sink_ready         (agent_pipeline_019_source0_ready),         //      sink.ready
		.sink_valid         (agent_pipeline_019_source0_valid),         //          .valid
		.sink_data          (agent_pipeline_019_source0_data),          //          .data
		.sink_startofpacket (agent_pipeline_019_source0_startofpacket), //          .startofpacket
		.sink_endofpacket   (agent_pipeline_019_source0_endofpacket),   //          .endofpacket
		.clk                (clk_125_clk_clk),                          //       clk.clk
		.reset              (sysid_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.src_ready          (router_014_src_ready),                     //       src.ready
		.src_valid          (router_014_src_valid),                     //          .valid
		.src_data           (router_014_src_data),                      //          .data
		.src_channel        (router_014_src_channel),                   //          .channel
		.src_startofpacket  (router_014_src_startofpacket),             //          .startofpacket
		.src_endofpacket    (router_014_src_endofpacket)                //          .endofpacket
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (103),
		.PKT_DEST_ID_L             (100),
		.PKT_SRC_ID_H              (99),
		.PKT_SRC_ID_L              (96),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.MAX_OUTSTANDING_RESPONSES (60),
		.PIPELINED                 (0),
		.ST_DATA_W                 (117),
		.ST_CHANNEL_W              (10),
		.VALID_WIDTH               (1),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) cpu_0_data_master_limiter (
		.clk                    (clk_125_clk_clk),                                 //       clk.clk
		.reset                  (cpu_0_reset_reset_bridge_in_reset_reset),         // clk_reset.reset
		.cmd_sink_ready         (router_src_ready),                                //  cmd_sink.ready
		.cmd_sink_valid         (router_src_valid),                                //          .valid
		.cmd_sink_data          (router_src_data),                                 //          .data
		.cmd_sink_channel       (router_src_channel),                              //          .channel
		.cmd_sink_startofpacket (router_src_startofpacket),                        //          .startofpacket
		.cmd_sink_endofpacket   (router_src_endofpacket),                          //          .endofpacket
		.cmd_src_ready          (cpu_0_data_master_limiter_cmd_src_ready),         //   cmd_src.ready
		.cmd_src_data           (cpu_0_data_master_limiter_cmd_src_data),          //          .data
		.cmd_src_channel        (cpu_0_data_master_limiter_cmd_src_channel),       //          .channel
		.cmd_src_startofpacket  (cpu_0_data_master_limiter_cmd_src_startofpacket), //          .startofpacket
		.cmd_src_endofpacket    (cpu_0_data_master_limiter_cmd_src_endofpacket),   //          .endofpacket
		.cmd_src_valid          (cpu_0_data_master_limiter_cmd_src_valid),         //          .valid
		.rsp_sink_ready         (limiter_pipeline_001_source0_ready),              //  rsp_sink.ready
		.rsp_sink_valid         (limiter_pipeline_001_source0_valid),              //          .valid
		.rsp_sink_channel       (limiter_pipeline_001_source0_channel),            //          .channel
		.rsp_sink_data          (limiter_pipeline_001_source0_data),               //          .data
		.rsp_sink_startofpacket (limiter_pipeline_001_source0_startofpacket),      //          .startofpacket
		.rsp_sink_endofpacket   (limiter_pipeline_001_source0_endofpacket),        //          .endofpacket
		.rsp_src_ready          (cpu_0_data_master_limiter_rsp_src_ready),         //   rsp_src.ready
		.rsp_src_valid          (cpu_0_data_master_limiter_rsp_src_valid),         //          .valid
		.rsp_src_data           (cpu_0_data_master_limiter_rsp_src_data),          //          .data
		.rsp_src_channel        (cpu_0_data_master_limiter_rsp_src_channel),       //          .channel
		.rsp_src_startofpacket  (cpu_0_data_master_limiter_rsp_src_startofpacket), //          .startofpacket
		.rsp_src_endofpacket    (cpu_0_data_master_limiter_rsp_src_endofpacket)    //          .endofpacket
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (103),
		.PKT_DEST_ID_L             (100),
		.PKT_SRC_ID_H              (99),
		.PKT_SRC_ID_L              (96),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.MAX_OUTSTANDING_RESPONSES (60),
		.PIPELINED                 (0),
		.ST_DATA_W                 (117),
		.ST_CHANNEL_W              (10),
		.VALID_WIDTH               (1),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) cpu_1_data_master_limiter (
		.clk                    (clk_125_clk_clk),                                 //       clk.clk
		.reset                  (cpu_1_reset_reset_bridge_in_reset_reset),         // clk_reset.reset
		.cmd_sink_ready         (router_001_src_ready),                            //  cmd_sink.ready
		.cmd_sink_valid         (router_001_src_valid),                            //          .valid
		.cmd_sink_data          (router_001_src_data),                             //          .data
		.cmd_sink_channel       (router_001_src_channel),                          //          .channel
		.cmd_sink_startofpacket (router_001_src_startofpacket),                    //          .startofpacket
		.cmd_sink_endofpacket   (router_001_src_endofpacket),                      //          .endofpacket
		.cmd_src_ready          (cpu_1_data_master_limiter_cmd_src_ready),         //   cmd_src.ready
		.cmd_src_data           (cpu_1_data_master_limiter_cmd_src_data),          //          .data
		.cmd_src_channel        (cpu_1_data_master_limiter_cmd_src_channel),       //          .channel
		.cmd_src_startofpacket  (cpu_1_data_master_limiter_cmd_src_startofpacket), //          .startofpacket
		.cmd_src_endofpacket    (cpu_1_data_master_limiter_cmd_src_endofpacket),   //          .endofpacket
		.cmd_src_valid          (cpu_1_data_master_limiter_cmd_src_valid),         //          .valid
		.rsp_sink_ready         (limiter_pipeline_003_source0_ready),              //  rsp_sink.ready
		.rsp_sink_valid         (limiter_pipeline_003_source0_valid),              //          .valid
		.rsp_sink_channel       (limiter_pipeline_003_source0_channel),            //          .channel
		.rsp_sink_data          (limiter_pipeline_003_source0_data),               //          .data
		.rsp_sink_startofpacket (limiter_pipeline_003_source0_startofpacket),      //          .startofpacket
		.rsp_sink_endofpacket   (limiter_pipeline_003_source0_endofpacket),        //          .endofpacket
		.rsp_src_ready          (cpu_1_data_master_limiter_rsp_src_ready),         //   rsp_src.ready
		.rsp_src_valid          (cpu_1_data_master_limiter_rsp_src_valid),         //          .valid
		.rsp_src_data           (cpu_1_data_master_limiter_rsp_src_data),          //          .data
		.rsp_src_channel        (cpu_1_data_master_limiter_rsp_src_channel),       //          .channel
		.rsp_src_startofpacket  (cpu_1_data_master_limiter_rsp_src_startofpacket), //          .startofpacket
		.rsp_src_endofpacket    (cpu_1_data_master_limiter_rsp_src_endofpacket)    //          .endofpacket
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (103),
		.PKT_DEST_ID_L             (100),
		.PKT_SRC_ID_H              (99),
		.PKT_SRC_ID_L              (96),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.MAX_OUTSTANDING_RESPONSES (17),
		.PIPELINED                 (0),
		.ST_DATA_W                 (117),
		.ST_CHANNEL_W              (10),
		.VALID_WIDTH               (1),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) cpu_0_instruction_master_limiter (
		.clk                    (clk_125_clk_clk),                                        //       clk.clk
		.reset                  (cpu_0_reset_reset_bridge_in_reset_reset),                // clk_reset.reset
		.cmd_sink_ready         (router_002_src_ready),                                   //  cmd_sink.ready
		.cmd_sink_valid         (router_002_src_valid),                                   //          .valid
		.cmd_sink_data          (router_002_src_data),                                    //          .data
		.cmd_sink_channel       (router_002_src_channel),                                 //          .channel
		.cmd_sink_startofpacket (router_002_src_startofpacket),                           //          .startofpacket
		.cmd_sink_endofpacket   (router_002_src_endofpacket),                             //          .endofpacket
		.cmd_src_ready          (cpu_0_instruction_master_limiter_cmd_src_ready),         //   cmd_src.ready
		.cmd_src_data           (cpu_0_instruction_master_limiter_cmd_src_data),          //          .data
		.cmd_src_channel        (cpu_0_instruction_master_limiter_cmd_src_channel),       //          .channel
		.cmd_src_startofpacket  (cpu_0_instruction_master_limiter_cmd_src_startofpacket), //          .startofpacket
		.cmd_src_endofpacket    (cpu_0_instruction_master_limiter_cmd_src_endofpacket),   //          .endofpacket
		.cmd_src_valid          (cpu_0_instruction_master_limiter_cmd_src_valid),         //          .valid
		.rsp_sink_ready         (limiter_pipeline_005_source0_ready),                     //  rsp_sink.ready
		.rsp_sink_valid         (limiter_pipeline_005_source0_valid),                     //          .valid
		.rsp_sink_channel       (limiter_pipeline_005_source0_channel),                   //          .channel
		.rsp_sink_data          (limiter_pipeline_005_source0_data),                      //          .data
		.rsp_sink_startofpacket (limiter_pipeline_005_source0_startofpacket),             //          .startofpacket
		.rsp_sink_endofpacket   (limiter_pipeline_005_source0_endofpacket),               //          .endofpacket
		.rsp_src_ready          (cpu_0_instruction_master_limiter_rsp_src_ready),         //   rsp_src.ready
		.rsp_src_valid          (cpu_0_instruction_master_limiter_rsp_src_valid),         //          .valid
		.rsp_src_data           (cpu_0_instruction_master_limiter_rsp_src_data),          //          .data
		.rsp_src_channel        (cpu_0_instruction_master_limiter_rsp_src_channel),       //          .channel
		.rsp_src_startofpacket  (cpu_0_instruction_master_limiter_rsp_src_startofpacket), //          .startofpacket
		.rsp_src_endofpacket    (cpu_0_instruction_master_limiter_rsp_src_endofpacket)    //          .endofpacket
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (103),
		.PKT_DEST_ID_L             (100),
		.PKT_SRC_ID_H              (99),
		.PKT_SRC_ID_L              (96),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.MAX_OUTSTANDING_RESPONSES (17),
		.PIPELINED                 (0),
		.ST_DATA_W                 (117),
		.ST_CHANNEL_W              (10),
		.VALID_WIDTH               (1),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) cpu_1_instruction_master_limiter (
		.clk                    (clk_125_clk_clk),                                        //       clk.clk
		.reset                  (cpu_1_reset_reset_bridge_in_reset_reset),                // clk_reset.reset
		.cmd_sink_ready         (router_003_src_ready),                                   //  cmd_sink.ready
		.cmd_sink_valid         (router_003_src_valid),                                   //          .valid
		.cmd_sink_data          (router_003_src_data),                                    //          .data
		.cmd_sink_channel       (router_003_src_channel),                                 //          .channel
		.cmd_sink_startofpacket (router_003_src_startofpacket),                           //          .startofpacket
		.cmd_sink_endofpacket   (router_003_src_endofpacket),                             //          .endofpacket
		.cmd_src_ready          (cpu_1_instruction_master_limiter_cmd_src_ready),         //   cmd_src.ready
		.cmd_src_data           (cpu_1_instruction_master_limiter_cmd_src_data),          //          .data
		.cmd_src_channel        (cpu_1_instruction_master_limiter_cmd_src_channel),       //          .channel
		.cmd_src_startofpacket  (cpu_1_instruction_master_limiter_cmd_src_startofpacket), //          .startofpacket
		.cmd_src_endofpacket    (cpu_1_instruction_master_limiter_cmd_src_endofpacket),   //          .endofpacket
		.cmd_src_valid          (cpu_1_instruction_master_limiter_cmd_src_valid),         //          .valid
		.rsp_sink_ready         (limiter_pipeline_007_source0_ready),                     //  rsp_sink.ready
		.rsp_sink_valid         (limiter_pipeline_007_source0_valid),                     //          .valid
		.rsp_sink_channel       (limiter_pipeline_007_source0_channel),                   //          .channel
		.rsp_sink_data          (limiter_pipeline_007_source0_data),                      //          .data
		.rsp_sink_startofpacket (limiter_pipeline_007_source0_startofpacket),             //          .startofpacket
		.rsp_sink_endofpacket   (limiter_pipeline_007_source0_endofpacket),               //          .endofpacket
		.rsp_src_ready          (cpu_1_instruction_master_limiter_rsp_src_ready),         //   rsp_src.ready
		.rsp_src_valid          (cpu_1_instruction_master_limiter_rsp_src_valid),         //          .valid
		.rsp_src_data           (cpu_1_instruction_master_limiter_rsp_src_data),          //          .data
		.rsp_src_channel        (cpu_1_instruction_master_limiter_rsp_src_channel),       //          .channel
		.rsp_src_startofpacket  (cpu_1_instruction_master_limiter_rsp_src_startofpacket), //          .startofpacket
		.rsp_src_endofpacket    (cpu_1_instruction_master_limiter_rsp_src_endofpacket)    //          .endofpacket
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (94),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (89),
		.PKT_BURST_SIZE_L          (87),
		.PKT_BURST_TYPE_H          (91),
		.PKT_BURST_TYPE_L          (90),
		.PKT_BURSTWRAP_H           (86),
		.PKT_BURSTWRAP_L           (84),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (117),
		.ST_CHANNEL_W              (10),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (86),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (7),
		.BURSTWRAP_CONST_VALUE     (7),
		.ADAPTER_VERSION           ("13.1")
	) jtag_uart_0_avalon_jtag_slave_burst_adapter (
		.clk                   (clk_125_clk_clk),                                                   //       cr0.clk
		.reset                 (cpu_0_reset_reset_bridge_in_reset_reset),                           // cr0_reset.reset
		.sink0_valid           (cmd_mux_src_valid),                                                 //     sink0.valid
		.sink0_data            (cmd_mux_src_data),                                                  //          .data
		.sink0_channel         (cmd_mux_src_channel),                                               //          .channel
		.sink0_startofpacket   (cmd_mux_src_startofpacket),                                         //          .startofpacket
		.sink0_endofpacket     (cmd_mux_src_endofpacket),                                           //          .endofpacket
		.sink0_ready           (cmd_mux_src_ready),                                                 //          .ready
		.source0_valid         (jtag_uart_0_avalon_jtag_slave_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (jtag_uart_0_avalon_jtag_slave_burst_adapter_source0_data),          //          .data
		.source0_channel       (jtag_uart_0_avalon_jtag_slave_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (jtag_uart_0_avalon_jtag_slave_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (jtag_uart_0_avalon_jtag_slave_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (jtag_uart_0_avalon_jtag_slave_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (94),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (89),
		.PKT_BURST_SIZE_L          (87),
		.PKT_BURST_TYPE_H          (91),
		.PKT_BURST_TYPE_L          (90),
		.PKT_BURSTWRAP_H           (86),
		.PKT_BURSTWRAP_L           (84),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (117),
		.ST_CHANNEL_W              (10),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (86),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (7),
		.BURSTWRAP_CONST_VALUE     (7),
		.ADAPTER_VERSION           ("13.1")
	) sysid_control_slave_burst_adapter (
		.clk                   (clk_125_clk_clk),                                         //       cr0.clk
		.reset                 (sysid_reset_reset_bridge_in_reset_reset),                 // cr0_reset.reset
		.sink0_valid           (cmd_mux_002_src_valid),                                   //     sink0.valid
		.sink0_data            (cmd_mux_002_src_data),                                    //          .data
		.sink0_channel         (cmd_mux_002_src_channel),                                 //          .channel
		.sink0_startofpacket   (cmd_mux_002_src_startofpacket),                           //          .startofpacket
		.sink0_endofpacket     (cmd_mux_002_src_endofpacket),                             //          .endofpacket
		.sink0_ready           (cmd_mux_002_src_ready),                                   //          .ready
		.source0_valid         (sysid_control_slave_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (sysid_control_slave_burst_adapter_source0_data),          //          .data
		.source0_channel       (sysid_control_slave_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (sysid_control_slave_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (sysid_control_slave_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (sysid_control_slave_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (94),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (89),
		.PKT_BURST_SIZE_L          (87),
		.PKT_BURST_TYPE_H          (91),
		.PKT_BURST_TYPE_L          (90),
		.PKT_BURSTWRAP_H           (86),
		.PKT_BURSTWRAP_L           (84),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (117),
		.ST_CHANNEL_W              (10),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (86),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (3),
		.BURSTWRAP_CONST_VALUE     (3),
		.ADAPTER_VERSION           ("13.1")
	) cpu_0_debug_mem_slave_burst_adapter (
		.clk                   (clk_125_clk_clk),                                           //       cr0.clk
		.reset                 (cpu_0_reset_reset_bridge_in_reset_reset),                   // cr0_reset.reset
		.sink0_valid           (cmd_mux_003_src_valid),                                     //     sink0.valid
		.sink0_data            (cmd_mux_003_src_data),                                      //          .data
		.sink0_channel         (cmd_mux_003_src_channel),                                   //          .channel
		.sink0_startofpacket   (cmd_mux_003_src_startofpacket),                             //          .startofpacket
		.sink0_endofpacket     (cmd_mux_003_src_endofpacket),                               //          .endofpacket
		.sink0_ready           (cmd_mux_003_src_ready),                                     //          .ready
		.source0_valid         (cpu_0_debug_mem_slave_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (cpu_0_debug_mem_slave_burst_adapter_source0_data),          //          .data
		.source0_channel       (cpu_0_debug_mem_slave_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (cpu_0_debug_mem_slave_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (cpu_0_debug_mem_slave_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (cpu_0_debug_mem_slave_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (94),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (89),
		.PKT_BURST_SIZE_L          (87),
		.PKT_BURST_TYPE_H          (91),
		.PKT_BURST_TYPE_L          (90),
		.PKT_BURSTWRAP_H           (86),
		.PKT_BURSTWRAP_L           (84),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (117),
		.ST_CHANNEL_W              (10),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (86),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (7),
		.BURSTWRAP_CONST_VALUE     (7),
		.ADAPTER_VERSION           ("13.1")
	) cpu_0_bridge_s0_burst_adapter (
		.clk                   (clk_125_clk_clk),                                     //       cr0.clk
		.reset                 (cpu_0_reset_reset_bridge_in_reset_reset),             // cr0_reset.reset
		.sink0_valid           (cmd_mux_004_src_valid),                               //     sink0.valid
		.sink0_data            (cmd_mux_004_src_data),                                //          .data
		.sink0_channel         (cmd_mux_004_src_channel),                             //          .channel
		.sink0_startofpacket   (cmd_mux_004_src_startofpacket),                       //          .startofpacket
		.sink0_endofpacket     (cmd_mux_004_src_endofpacket),                         //          .endofpacket
		.sink0_ready           (cmd_mux_004_src_ready),                               //          .ready
		.source0_valid         (cpu_0_bridge_s0_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (cpu_0_bridge_s0_burst_adapter_source0_data),          //          .data
		.source0_channel       (cpu_0_bridge_s0_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (cpu_0_bridge_s0_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (cpu_0_bridge_s0_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (cpu_0_bridge_s0_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (49),
		.PKT_ADDR_L                (18),
		.PKT_BEGIN_BURST           (76),
		.PKT_BYTE_CNT_H            (65),
		.PKT_BYTE_CNT_L            (56),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_BURST_SIZE_H          (71),
		.PKT_BURST_SIZE_L          (69),
		.PKT_BURST_TYPE_H          (73),
		.PKT_BURST_TYPE_L          (72),
		.PKT_BURSTWRAP_H           (68),
		.PKT_BURSTWRAP_L           (66),
		.PKT_TRANS_COMPRESSED_READ (50),
		.PKT_TRANS_WRITE           (52),
		.PKT_TRANS_READ            (53),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (99),
		.ST_CHANNEL_W              (10),
		.OUT_BYTE_CNT_H            (57),
		.OUT_BURSTWRAP_H           (68),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (3),
		.BURSTWRAP_CONST_VALUE     (3),
		.ADAPTER_VERSION           ("13.1")
	) sram_uas_burst_adapter (
		.clk                   (clk_125_clk_clk),                              //       cr0.clk
		.reset                 (cpu_0_reset_reset_bridge_in_reset_reset),      // cr0_reset.reset
		.sink0_valid           (sram_uas_cmd_width_adapter_src_valid),         //     sink0.valid
		.sink0_data            (sram_uas_cmd_width_adapter_src_data),          //          .data
		.sink0_channel         (sram_uas_cmd_width_adapter_src_channel),       //          .channel
		.sink0_startofpacket   (sram_uas_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket     (sram_uas_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink0_ready           (sram_uas_cmd_width_adapter_src_ready),         //          .ready
		.source0_valid         (sram_uas_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (sram_uas_burst_adapter_source0_data),          //          .data
		.source0_channel       (sram_uas_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (sram_uas_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (sram_uas_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (sram_uas_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (94),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (89),
		.PKT_BURST_SIZE_L          (87),
		.PKT_BURST_TYPE_H          (91),
		.PKT_BURST_TYPE_L          (90),
		.PKT_BURSTWRAP_H           (86),
		.PKT_BURSTWRAP_L           (84),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (117),
		.ST_CHANNEL_W              (10),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (86),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (3),
		.BURSTWRAP_CONST_VALUE     (3),
		.ADAPTER_VERSION           ("13.1")
	) cpu_1_debug_mem_slave_burst_adapter (
		.clk                   (clk_125_clk_clk),                                           //       cr0.clk
		.reset                 (cpu_1_reset_reset_bridge_in_reset_reset),                   // cr0_reset.reset
		.sink0_valid           (cmd_mux_006_src_valid),                                     //     sink0.valid
		.sink0_data            (cmd_mux_006_src_data),                                      //          .data
		.sink0_channel         (cmd_mux_006_src_channel),                                   //          .channel
		.sink0_startofpacket   (cmd_mux_006_src_startofpacket),                             //          .startofpacket
		.sink0_endofpacket     (cmd_mux_006_src_endofpacket),                               //          .endofpacket
		.sink0_ready           (cmd_mux_006_src_ready),                                     //          .ready
		.source0_valid         (cpu_1_debug_mem_slave_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (cpu_1_debug_mem_slave_burst_adapter_source0_data),          //          .data
		.source0_channel       (cpu_1_debug_mem_slave_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (cpu_1_debug_mem_slave_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (cpu_1_debug_mem_slave_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (cpu_1_debug_mem_slave_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (94),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (89),
		.PKT_BURST_SIZE_L          (87),
		.PKT_BURST_TYPE_H          (91),
		.PKT_BURST_TYPE_L          (90),
		.PKT_BURSTWRAP_H           (86),
		.PKT_BURSTWRAP_L           (84),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (117),
		.ST_CHANNEL_W              (10),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (86),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (7),
		.BURSTWRAP_CONST_VALUE     (7),
		.ADAPTER_VERSION           ("13.1")
	) jtag_uart_1_avalon_jtag_slave_burst_adapter (
		.clk                   (clk_125_clk_clk),                                                   //       cr0.clk
		.reset                 (sysid_reset_reset_bridge_in_reset_reset),                           // cr0_reset.reset
		.sink0_valid           (cmd_mux_007_src_valid),                                             //     sink0.valid
		.sink0_data            (cmd_mux_007_src_data),                                              //          .data
		.sink0_channel         (cmd_mux_007_src_channel),                                           //          .channel
		.sink0_startofpacket   (cmd_mux_007_src_startofpacket),                                     //          .startofpacket
		.sink0_endofpacket     (cmd_mux_007_src_endofpacket),                                       //          .endofpacket
		.sink0_ready           (cmd_mux_007_src_ready),                                             //          .ready
		.source0_valid         (jtag_uart_1_avalon_jtag_slave_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (jtag_uart_1_avalon_jtag_slave_burst_adapter_source0_data),          //          .data
		.source0_channel       (jtag_uart_1_avalon_jtag_slave_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (jtag_uart_1_avalon_jtag_slave_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (jtag_uart_1_avalon_jtag_slave_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (jtag_uart_1_avalon_jtag_slave_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_BEGIN_BURST           (94),
		.PKT_BYTE_CNT_H            (83),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_BURST_SIZE_H          (89),
		.PKT_BURST_SIZE_L          (87),
		.PKT_BURST_TYPE_H          (91),
		.PKT_BURST_TYPE_L          (90),
		.PKT_BURSTWRAP_H           (86),
		.PKT_BURSTWRAP_L           (84),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (117),
		.ST_CHANNEL_W              (10),
		.OUT_BYTE_CNT_H            (76),
		.OUT_BURSTWRAP_H           (86),
		.COMPRESSED_READ_SUPPORT   (1),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (7),
		.BURSTWRAP_CONST_VALUE     (7),
		.ADAPTER_VERSION           ("13.1")
	) cpu_1_bridge_0_s0_burst_adapter (
		.clk                   (clk_125_clk_clk),                                       //       cr0.clk
		.reset                 (sysid_reset_reset_bridge_in_reset_reset),               // cr0_reset.reset
		.sink0_valid           (cmd_mux_009_src_valid),                                 //     sink0.valid
		.sink0_data            (cmd_mux_009_src_data),                                  //          .data
		.sink0_channel         (cmd_mux_009_src_channel),                               //          .channel
		.sink0_startofpacket   (cmd_mux_009_src_startofpacket),                         //          .startofpacket
		.sink0_endofpacket     (cmd_mux_009_src_endofpacket),                           //          .endofpacket
		.sink0_ready           (cmd_mux_009_src_ready),                                 //          .ready
		.source0_valid         (cpu_1_bridge_0_s0_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (cpu_1_bridge_0_s0_burst_adapter_source0_data),          //          .data
		.source0_channel       (cpu_1_bridge_0_s0_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (cpu_1_bridge_0_s0_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (cpu_1_bridge_0_s0_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (cpu_1_bridge_0_s0_burst_adapter_source0_ready)          //          .ready
	);

	ECE423_QSYS_mm_interconnect_0_cmd_demux cmd_demux (
		.clk                (clk_125_clk_clk),                         //       clk.clk
		.reset              (cpu_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (limiter_pipeline_source0_ready),          //      sink.ready
		.sink_channel       (limiter_pipeline_source0_channel),        //          .channel
		.sink_data          (limiter_pipeline_source0_data),           //          .data
		.sink_startofpacket (limiter_pipeline_source0_startofpacket),  //          .startofpacket
		.sink_endofpacket   (limiter_pipeline_source0_endofpacket),    //          .endofpacket
		.sink_valid         (limiter_pipeline_source0_valid),          //          .valid
		.src0_ready         (cmd_demux_src0_ready),                    //      src0.ready
		.src0_valid         (cmd_demux_src0_valid),                    //          .valid
		.src0_data          (cmd_demux_src0_data),                     //          .data
		.src0_channel       (cmd_demux_src0_channel),                  //          .channel
		.src0_startofpacket (cmd_demux_src0_startofpacket),            //          .startofpacket
		.src0_endofpacket   (cmd_demux_src0_endofpacket),              //          .endofpacket
		.src1_ready         (cmd_demux_src1_ready),                    //      src1.ready
		.src1_valid         (cmd_demux_src1_valid),                    //          .valid
		.src1_data          (cmd_demux_src1_data),                     //          .data
		.src1_channel       (cmd_demux_src1_channel),                  //          .channel
		.src1_startofpacket (cmd_demux_src1_startofpacket),            //          .startofpacket
		.src1_endofpacket   (cmd_demux_src1_endofpacket),              //          .endofpacket
		.src2_ready         (cmd_demux_src2_ready),                    //      src2.ready
		.src2_valid         (cmd_demux_src2_valid),                    //          .valid
		.src2_data          (cmd_demux_src2_data),                     //          .data
		.src2_channel       (cmd_demux_src2_channel),                  //          .channel
		.src2_startofpacket (cmd_demux_src2_startofpacket),            //          .startofpacket
		.src2_endofpacket   (cmd_demux_src2_endofpacket),              //          .endofpacket
		.src3_ready         (cmd_demux_src3_ready),                    //      src3.ready
		.src3_valid         (cmd_demux_src3_valid),                    //          .valid
		.src3_data          (cmd_demux_src3_data),                     //          .data
		.src3_channel       (cmd_demux_src3_channel),                  //          .channel
		.src3_startofpacket (cmd_demux_src3_startofpacket),            //          .startofpacket
		.src3_endofpacket   (cmd_demux_src3_endofpacket),              //          .endofpacket
		.src4_ready         (cmd_demux_src4_ready),                    //      src4.ready
		.src4_valid         (cmd_demux_src4_valid),                    //          .valid
		.src4_data          (cmd_demux_src4_data),                     //          .data
		.src4_channel       (cmd_demux_src4_channel),                  //          .channel
		.src4_startofpacket (cmd_demux_src4_startofpacket),            //          .startofpacket
		.src4_endofpacket   (cmd_demux_src4_endofpacket),              //          .endofpacket
		.src5_ready         (cmd_demux_src5_ready),                    //      src5.ready
		.src5_valid         (cmd_demux_src5_valid),                    //          .valid
		.src5_data          (cmd_demux_src5_data),                     //          .data
		.src5_channel       (cmd_demux_src5_channel),                  //          .channel
		.src5_startofpacket (cmd_demux_src5_startofpacket),            //          .startofpacket
		.src5_endofpacket   (cmd_demux_src5_endofpacket)               //          .endofpacket
	);

	ECE423_QSYS_mm_interconnect_0_cmd_demux_001 cmd_demux_001 (
		.clk                (clk_125_clk_clk),                            //       clk.clk
		.reset              (cpu_1_reset_reset_bridge_in_reset_reset),    // clk_reset.reset
		.sink_ready         (limiter_pipeline_002_source0_ready),         //      sink.ready
		.sink_channel       (limiter_pipeline_002_source0_channel),       //          .channel
		.sink_data          (limiter_pipeline_002_source0_data),          //          .data
		.sink_startofpacket (limiter_pipeline_002_source0_startofpacket), //          .startofpacket
		.sink_endofpacket   (limiter_pipeline_002_source0_endofpacket),   //          .endofpacket
		.sink_valid         (limiter_pipeline_002_source0_valid),         //          .valid
		.src0_ready         (cmd_demux_001_src0_ready),                   //      src0.ready
		.src0_valid         (cmd_demux_001_src0_valid),                   //          .valid
		.src0_data          (cmd_demux_001_src0_data),                    //          .data
		.src0_channel       (cmd_demux_001_src0_channel),                 //          .channel
		.src0_startofpacket (cmd_demux_001_src0_startofpacket),           //          .startofpacket
		.src0_endofpacket   (cmd_demux_001_src0_endofpacket),             //          .endofpacket
		.src1_ready         (cmd_demux_001_src1_ready),                   //      src1.ready
		.src1_valid         (cmd_demux_001_src1_valid),                   //          .valid
		.src1_data          (cmd_demux_001_src1_data),                    //          .data
		.src1_channel       (cmd_demux_001_src1_channel),                 //          .channel
		.src1_startofpacket (cmd_demux_001_src1_startofpacket),           //          .startofpacket
		.src1_endofpacket   (cmd_demux_001_src1_endofpacket),             //          .endofpacket
		.src2_ready         (cmd_demux_001_src2_ready),                   //      src2.ready
		.src2_valid         (cmd_demux_001_src2_valid),                   //          .valid
		.src2_data          (cmd_demux_001_src2_data),                    //          .data
		.src2_channel       (cmd_demux_001_src2_channel),                 //          .channel
		.src2_startofpacket (cmd_demux_001_src2_startofpacket),           //          .startofpacket
		.src2_endofpacket   (cmd_demux_001_src2_endofpacket),             //          .endofpacket
		.src3_ready         (cmd_demux_001_src3_ready),                   //      src3.ready
		.src3_valid         (cmd_demux_001_src3_valid),                   //          .valid
		.src3_data          (cmd_demux_001_src3_data),                    //          .data
		.src3_channel       (cmd_demux_001_src3_channel),                 //          .channel
		.src3_startofpacket (cmd_demux_001_src3_startofpacket),           //          .startofpacket
		.src3_endofpacket   (cmd_demux_001_src3_endofpacket),             //          .endofpacket
		.src4_ready         (cmd_demux_001_src4_ready),                   //      src4.ready
		.src4_valid         (cmd_demux_001_src4_valid),                   //          .valid
		.src4_data          (cmd_demux_001_src4_data),                    //          .data
		.src4_channel       (cmd_demux_001_src4_channel),                 //          .channel
		.src4_startofpacket (cmd_demux_001_src4_startofpacket),           //          .startofpacket
		.src4_endofpacket   (cmd_demux_001_src4_endofpacket)              //          .endofpacket
	);

	ECE423_QSYS_mm_interconnect_0_cmd_demux_002 cmd_demux_002 (
		.clk                (clk_125_clk_clk),                            //       clk.clk
		.reset              (cpu_0_reset_reset_bridge_in_reset_reset),    // clk_reset.reset
		.sink_ready         (limiter_pipeline_004_source0_ready),         //      sink.ready
		.sink_channel       (limiter_pipeline_004_source0_channel),       //          .channel
		.sink_data          (limiter_pipeline_004_source0_data),          //          .data
		.sink_startofpacket (limiter_pipeline_004_source0_startofpacket), //          .startofpacket
		.sink_endofpacket   (limiter_pipeline_004_source0_endofpacket),   //          .endofpacket
		.sink_valid         (limiter_pipeline_004_source0_valid),         //          .valid
		.src0_ready         (cmd_demux_002_src0_ready),                   //      src0.ready
		.src0_valid         (cmd_demux_002_src0_valid),                   //          .valid
		.src0_data          (cmd_demux_002_src0_data),                    //          .data
		.src0_channel       (cmd_demux_002_src0_channel),                 //          .channel
		.src0_startofpacket (cmd_demux_002_src0_startofpacket),           //          .startofpacket
		.src0_endofpacket   (cmd_demux_002_src0_endofpacket),             //          .endofpacket
		.src1_ready         (cmd_demux_002_src1_ready),                   //      src1.ready
		.src1_valid         (cmd_demux_002_src1_valid),                   //          .valid
		.src1_data          (cmd_demux_002_src1_data),                    //          .data
		.src1_channel       (cmd_demux_002_src1_channel),                 //          .channel
		.src1_startofpacket (cmd_demux_002_src1_startofpacket),           //          .startofpacket
		.src1_endofpacket   (cmd_demux_002_src1_endofpacket)              //          .endofpacket
	);

	ECE423_QSYS_mm_interconnect_0_cmd_demux_002 cmd_demux_003 (
		.clk                (clk_125_clk_clk),                            //       clk.clk
		.reset              (cpu_1_reset_reset_bridge_in_reset_reset),    // clk_reset.reset
		.sink_ready         (limiter_pipeline_006_source0_ready),         //      sink.ready
		.sink_channel       (limiter_pipeline_006_source0_channel),       //          .channel
		.sink_data          (limiter_pipeline_006_source0_data),          //          .data
		.sink_startofpacket (limiter_pipeline_006_source0_startofpacket), //          .startofpacket
		.sink_endofpacket   (limiter_pipeline_006_source0_endofpacket),   //          .endofpacket
		.sink_valid         (limiter_pipeline_006_source0_valid),         //          .valid
		.src0_ready         (cmd_demux_003_src0_ready),                   //      src0.ready
		.src0_valid         (cmd_demux_003_src0_valid),                   //          .valid
		.src0_data          (cmd_demux_003_src0_data),                    //          .data
		.src0_channel       (cmd_demux_003_src0_channel),                 //          .channel
		.src0_startofpacket (cmd_demux_003_src0_startofpacket),           //          .startofpacket
		.src0_endofpacket   (cmd_demux_003_src0_endofpacket),             //          .endofpacket
		.src1_ready         (cmd_demux_003_src1_ready),                   //      src1.ready
		.src1_valid         (cmd_demux_003_src1_valid),                   //          .valid
		.src1_data          (cmd_demux_003_src1_data),                    //          .data
		.src1_channel       (cmd_demux_003_src1_channel),                 //          .channel
		.src1_startofpacket (cmd_demux_003_src1_startofpacket),           //          .startofpacket
		.src1_endofpacket   (cmd_demux_003_src1_endofpacket)              //          .endofpacket
	);

	ECE423_QSYS_mm_interconnect_0_cmd_demux_004 cmd_demux_004 (
		.clk                (clk_50_out_clk_clk),                        //       clk.clk
		.reset              (sd_cont_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_004_src_ready),                      //      sink.ready
		.sink_channel       (router_004_src_channel),                    //          .channel
		.sink_data          (router_004_src_data),                       //          .data
		.sink_startofpacket (router_004_src_startofpacket),              //          .startofpacket
		.sink_endofpacket   (router_004_src_endofpacket),                //          .endofpacket
		.sink_valid         (router_004_src_valid),                      //          .valid
		.src0_ready         (cmd_demux_004_src0_ready),                  //      src0.ready
		.src0_valid         (cmd_demux_004_src0_valid),                  //          .valid
		.src0_data          (cmd_demux_004_src0_data),                   //          .data
		.src0_channel       (cmd_demux_004_src0_channel),                //          .channel
		.src0_startofpacket (cmd_demux_004_src0_startofpacket),          //          .startofpacket
		.src0_endofpacket   (cmd_demux_004_src0_endofpacket)             //          .endofpacket
	);

	ECE423_QSYS_mm_interconnect_0_cmd_mux cmd_mux (
		.clk                 (clk_125_clk_clk),                         //       clk.clk
		.reset               (cpu_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                       //       src.ready
		.src_valid           (cmd_mux_src_valid),                       //          .valid
		.src_data            (cmd_mux_src_data),                        //          .data
		.src_channel         (cmd_mux_src_channel),                     //          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),               //          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                 //          .endofpacket
		.sink0_ready         (mux_pipeline_source0_ready),              //     sink0.ready
		.sink0_valid         (mux_pipeline_source0_valid),              //          .valid
		.sink0_channel       (mux_pipeline_source0_channel),            //          .channel
		.sink0_data          (mux_pipeline_source0_data),               //          .data
		.sink0_startofpacket (mux_pipeline_source0_startofpacket),      //          .startofpacket
		.sink0_endofpacket   (mux_pipeline_source0_endofpacket)         //          .endofpacket
	);

	ECE423_QSYS_mm_interconnect_0_cmd_mux_001 cmd_mux_001 (
		.clk                 (clk_125_clk_clk),                         //       clk.clk
		.reset               (sysid_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_001_src_ready),                   //       src.ready
		.src_valid           (cmd_mux_001_src_valid),                   //          .valid
		.src_data            (cmd_mux_001_src_data),                    //          .data
		.src_channel         (cmd_mux_001_src_channel),                 //          .channel
		.src_startofpacket   (cmd_mux_001_src_startofpacket),           //          .startofpacket
		.src_endofpacket     (cmd_mux_001_src_endofpacket),             //          .endofpacket
		.sink0_ready         (mux_pipeline_001_source0_ready),          //     sink0.ready
		.sink0_valid         (mux_pipeline_001_source0_valid),          //          .valid
		.sink0_channel       (mux_pipeline_001_source0_channel),        //          .channel
		.sink0_data          (mux_pipeline_001_source0_data),           //          .data
		.sink0_startofpacket (mux_pipeline_001_source0_startofpacket),  //          .startofpacket
		.sink0_endofpacket   (mux_pipeline_001_source0_endofpacket),    //          .endofpacket
		.sink1_ready         (mux_pipeline_002_source0_ready),          //     sink1.ready
		.sink1_valid         (mux_pipeline_002_source0_valid),          //          .valid
		.sink1_channel       (mux_pipeline_002_source0_channel),        //          .channel
		.sink1_data          (mux_pipeline_002_source0_data),           //          .data
		.sink1_startofpacket (mux_pipeline_002_source0_startofpacket),  //          .startofpacket
		.sink1_endofpacket   (mux_pipeline_002_source0_endofpacket)     //          .endofpacket
	);

	ECE423_QSYS_mm_interconnect_0_cmd_mux cmd_mux_002 (
		.clk                 (clk_125_clk_clk),                         //       clk.clk
		.reset               (sysid_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_002_src_ready),                   //       src.ready
		.src_valid           (cmd_mux_002_src_valid),                   //          .valid
		.src_data            (cmd_mux_002_src_data),                    //          .data
		.src_channel         (cmd_mux_002_src_channel),                 //          .channel
		.src_startofpacket   (cmd_mux_002_src_startofpacket),           //          .startofpacket
		.src_endofpacket     (cmd_mux_002_src_endofpacket),             //          .endofpacket
		.sink0_ready         (mux_pipeline_003_source0_ready),          //     sink0.ready
		.sink0_valid         (mux_pipeline_003_source0_valid),          //          .valid
		.sink0_channel       (mux_pipeline_003_source0_channel),        //          .channel
		.sink0_data          (mux_pipeline_003_source0_data),           //          .data
		.sink0_startofpacket (mux_pipeline_003_source0_startofpacket),  //          .startofpacket
		.sink0_endofpacket   (mux_pipeline_003_source0_endofpacket)     //          .endofpacket
	);

	ECE423_QSYS_mm_interconnect_0_cmd_mux_001 cmd_mux_003 (
		.clk                 (clk_125_clk_clk),                         //       clk.clk
		.reset               (cpu_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_003_src_ready),                   //       src.ready
		.src_valid           (cmd_mux_003_src_valid),                   //          .valid
		.src_data            (cmd_mux_003_src_data),                    //          .data
		.src_channel         (cmd_mux_003_src_channel),                 //          .channel
		.src_startofpacket   (cmd_mux_003_src_startofpacket),           //          .startofpacket
		.src_endofpacket     (cmd_mux_003_src_endofpacket),             //          .endofpacket
		.sink0_ready         (mux_pipeline_004_source0_ready),          //     sink0.ready
		.sink0_valid         (mux_pipeline_004_source0_valid),          //          .valid
		.sink0_channel       (mux_pipeline_004_source0_channel),        //          .channel
		.sink0_data          (mux_pipeline_004_source0_data),           //          .data
		.sink0_startofpacket (mux_pipeline_004_source0_startofpacket),  //          .startofpacket
		.sink0_endofpacket   (mux_pipeline_004_source0_endofpacket),    //          .endofpacket
		.sink1_ready         (mux_pipeline_005_source0_ready),          //     sink1.ready
		.sink1_valid         (mux_pipeline_005_source0_valid),          //          .valid
		.sink1_channel       (mux_pipeline_005_source0_channel),        //          .channel
		.sink1_data          (mux_pipeline_005_source0_data),           //          .data
		.sink1_startofpacket (mux_pipeline_005_source0_startofpacket),  //          .startofpacket
		.sink1_endofpacket   (mux_pipeline_005_source0_endofpacket)     //          .endofpacket
	);

	ECE423_QSYS_mm_interconnect_0_cmd_mux cmd_mux_004 (
		.clk                 (clk_125_clk_clk),                         //       clk.clk
		.reset               (cpu_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_004_src_ready),                   //       src.ready
		.src_valid           (cmd_mux_004_src_valid),                   //          .valid
		.src_data            (cmd_mux_004_src_data),                    //          .data
		.src_channel         (cmd_mux_004_src_channel),                 //          .channel
		.src_startofpacket   (cmd_mux_004_src_startofpacket),           //          .startofpacket
		.src_endofpacket     (cmd_mux_004_src_endofpacket),             //          .endofpacket
		.sink0_ready         (mux_pipeline_006_source0_ready),          //     sink0.ready
		.sink0_valid         (mux_pipeline_006_source0_valid),          //          .valid
		.sink0_channel       (mux_pipeline_006_source0_channel),        //          .channel
		.sink0_data          (mux_pipeline_006_source0_data),           //          .data
		.sink0_startofpacket (mux_pipeline_006_source0_startofpacket),  //          .startofpacket
		.sink0_endofpacket   (mux_pipeline_006_source0_endofpacket)     //          .endofpacket
	);

	ECE423_QSYS_mm_interconnect_0_cmd_mux_005 cmd_mux_005 (
		.clk                 (clk_125_clk_clk),                         //       clk.clk
		.reset               (cpu_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_005_src_ready),                   //       src.ready
		.src_valid           (cmd_mux_005_src_valid),                   //          .valid
		.src_data            (cmd_mux_005_src_data),                    //          .data
		.src_channel         (cmd_mux_005_src_channel),                 //          .channel
		.src_startofpacket   (cmd_mux_005_src_startofpacket),           //          .startofpacket
		.src_endofpacket     (cmd_mux_005_src_endofpacket),             //          .endofpacket
		.sink0_ready         (mux_pipeline_007_source0_ready),          //     sink0.ready
		.sink0_valid         (mux_pipeline_007_source0_valid),          //          .valid
		.sink0_channel       (mux_pipeline_007_source0_channel),        //          .channel
		.sink0_data          (mux_pipeline_007_source0_data),           //          .data
		.sink0_startofpacket (mux_pipeline_007_source0_startofpacket),  //          .startofpacket
		.sink0_endofpacket   (mux_pipeline_007_source0_endofpacket),    //          .endofpacket
		.sink1_ready         (mux_pipeline_008_source0_ready),          //     sink1.ready
		.sink1_valid         (mux_pipeline_008_source0_valid),          //          .valid
		.sink1_channel       (mux_pipeline_008_source0_channel),        //          .channel
		.sink1_data          (mux_pipeline_008_source0_data),           //          .data
		.sink1_startofpacket (mux_pipeline_008_source0_startofpacket),  //          .startofpacket
		.sink1_endofpacket   (mux_pipeline_008_source0_endofpacket),    //          .endofpacket
		.sink2_ready         (mux_pipeline_009_source0_ready),          //     sink2.ready
		.sink2_valid         (mux_pipeline_009_source0_valid),          //          .valid
		.sink2_channel       (mux_pipeline_009_source0_channel),        //          .channel
		.sink2_data          (mux_pipeline_009_source0_data),           //          .data
		.sink2_startofpacket (mux_pipeline_009_source0_startofpacket),  //          .startofpacket
		.sink2_endofpacket   (mux_pipeline_009_source0_endofpacket),    //          .endofpacket
		.sink3_ready         (mux_pipeline_010_source0_ready),          //     sink3.ready
		.sink3_valid         (mux_pipeline_010_source0_valid),          //          .valid
		.sink3_channel       (mux_pipeline_010_source0_channel),        //          .channel
		.sink3_data          (mux_pipeline_010_source0_data),           //          .data
		.sink3_startofpacket (mux_pipeline_010_source0_startofpacket),  //          .startofpacket
		.sink3_endofpacket   (mux_pipeline_010_source0_endofpacket)     //          .endofpacket
	);

	ECE423_QSYS_mm_interconnect_0_cmd_mux_001 cmd_mux_006 (
		.clk                 (clk_125_clk_clk),                         //       clk.clk
		.reset               (cpu_1_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_006_src_ready),                   //       src.ready
		.src_valid           (cmd_mux_006_src_valid),                   //          .valid
		.src_data            (cmd_mux_006_src_data),                    //          .data
		.src_channel         (cmd_mux_006_src_channel),                 //          .channel
		.src_startofpacket   (cmd_mux_006_src_startofpacket),           //          .startofpacket
		.src_endofpacket     (cmd_mux_006_src_endofpacket),             //          .endofpacket
		.sink0_ready         (mux_pipeline_011_source0_ready),          //     sink0.ready
		.sink0_valid         (mux_pipeline_011_source0_valid),          //          .valid
		.sink0_channel       (mux_pipeline_011_source0_channel),        //          .channel
		.sink0_data          (mux_pipeline_011_source0_data),           //          .data
		.sink0_startofpacket (mux_pipeline_011_source0_startofpacket),  //          .startofpacket
		.sink0_endofpacket   (mux_pipeline_011_source0_endofpacket),    //          .endofpacket
		.sink1_ready         (mux_pipeline_012_source0_ready),          //     sink1.ready
		.sink1_valid         (mux_pipeline_012_source0_valid),          //          .valid
		.sink1_channel       (mux_pipeline_012_source0_channel),        //          .channel
		.sink1_data          (mux_pipeline_012_source0_data),           //          .data
		.sink1_startofpacket (mux_pipeline_012_source0_startofpacket),  //          .startofpacket
		.sink1_endofpacket   (mux_pipeline_012_source0_endofpacket)     //          .endofpacket
	);

	ECE423_QSYS_mm_interconnect_0_cmd_mux cmd_mux_007 (
		.clk                 (clk_125_clk_clk),                         //       clk.clk
		.reset               (sysid_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_007_src_ready),                   //       src.ready
		.src_valid           (cmd_mux_007_src_valid),                   //          .valid
		.src_data            (cmd_mux_007_src_data),                    //          .data
		.src_channel         (cmd_mux_007_src_channel),                 //          .channel
		.src_startofpacket   (cmd_mux_007_src_startofpacket),           //          .startofpacket
		.src_endofpacket     (cmd_mux_007_src_endofpacket),             //          .endofpacket
		.sink0_ready         (mux_pipeline_013_source0_ready),          //     sink0.ready
		.sink0_valid         (mux_pipeline_013_source0_valid),          //          .valid
		.sink0_channel       (mux_pipeline_013_source0_channel),        //          .channel
		.sink0_data          (mux_pipeline_013_source0_data),           //          .data
		.sink0_startofpacket (mux_pipeline_013_source0_startofpacket),  //          .startofpacket
		.sink0_endofpacket   (mux_pipeline_013_source0_endofpacket)     //          .endofpacket
	);

	ECE423_QSYS_mm_interconnect_0_cmd_mux cmd_mux_008 (
		.clk                 (clk_125_clk_clk),                         //       clk.clk
		.reset               (sysid_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_008_src_ready),                   //       src.ready
		.src_valid           (cmd_mux_008_src_valid),                   //          .valid
		.src_data            (cmd_mux_008_src_data),                    //          .data
		.src_channel         (cmd_mux_008_src_channel),                 //          .channel
		.src_startofpacket   (cmd_mux_008_src_startofpacket),           //          .startofpacket
		.src_endofpacket     (cmd_mux_008_src_endofpacket),             //          .endofpacket
		.sink0_ready         (mux_pipeline_014_source0_ready),          //     sink0.ready
		.sink0_valid         (mux_pipeline_014_source0_valid),          //          .valid
		.sink0_channel       (mux_pipeline_014_source0_channel),        //          .channel
		.sink0_data          (mux_pipeline_014_source0_data),           //          .data
		.sink0_startofpacket (mux_pipeline_014_source0_startofpacket),  //          .startofpacket
		.sink0_endofpacket   (mux_pipeline_014_source0_endofpacket)     //          .endofpacket
	);

	ECE423_QSYS_mm_interconnect_0_cmd_mux cmd_mux_009 (
		.clk                 (clk_125_clk_clk),                         //       clk.clk
		.reset               (sysid_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_009_src_ready),                   //       src.ready
		.src_valid           (cmd_mux_009_src_valid),                   //          .valid
		.src_data            (cmd_mux_009_src_data),                    //          .data
		.src_channel         (cmd_mux_009_src_channel),                 //          .channel
		.src_startofpacket   (cmd_mux_009_src_startofpacket),           //          .startofpacket
		.src_endofpacket     (cmd_mux_009_src_endofpacket),             //          .endofpacket
		.sink0_ready         (mux_pipeline_015_source0_ready),          //     sink0.ready
		.sink0_valid         (mux_pipeline_015_source0_valid),          //          .valid
		.sink0_channel       (mux_pipeline_015_source0_channel),        //          .channel
		.sink0_data          (mux_pipeline_015_source0_data),           //          .data
		.sink0_startofpacket (mux_pipeline_015_source0_startofpacket),  //          .startofpacket
		.sink0_endofpacket   (mux_pipeline_015_source0_endofpacket)     //          .endofpacket
	);

	ECE423_QSYS_mm_interconnect_0_rsp_demux rsp_demux (
		.clk                (clk_125_clk_clk),                         //       clk.clk
		.reset              (cpu_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_005_src_ready),                    //      sink.ready
		.sink_channel       (router_005_src_channel),                  //          .channel
		.sink_data          (router_005_src_data),                     //          .data
		.sink_startofpacket (router_005_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (router_005_src_endofpacket),              //          .endofpacket
		.sink_valid         (router_005_src_valid),                    //          .valid
		.src0_ready         (rsp_demux_src0_ready),                    //      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                    //          .valid
		.src0_data          (rsp_demux_src0_data),                     //          .data
		.src0_channel       (rsp_demux_src0_channel),                  //          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),            //          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket)               //          .endofpacket
	);

	ECE423_QSYS_mm_interconnect_0_cmd_demux_002 rsp_demux_001 (
		.clk                (clk_125_clk_clk),                         //       clk.clk
		.reset              (sysid_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_006_src_ready),                    //      sink.ready
		.sink_channel       (router_006_src_channel),                  //          .channel
		.sink_data          (router_006_src_data),                     //          .data
		.sink_startofpacket (router_006_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (router_006_src_endofpacket),              //          .endofpacket
		.sink_valid         (router_006_src_valid),                    //          .valid
		.src0_ready         (rsp_demux_001_src0_ready),                //      src0.ready
		.src0_valid         (rsp_demux_001_src0_valid),                //          .valid
		.src0_data          (rsp_demux_001_src0_data),                 //          .data
		.src0_channel       (rsp_demux_001_src0_channel),              //          .channel
		.src0_startofpacket (rsp_demux_001_src0_startofpacket),        //          .startofpacket
		.src0_endofpacket   (rsp_demux_001_src0_endofpacket),          //          .endofpacket
		.src1_ready         (rsp_demux_001_src1_ready),                //      src1.ready
		.src1_valid         (rsp_demux_001_src1_valid),                //          .valid
		.src1_data          (rsp_demux_001_src1_data),                 //          .data
		.src1_channel       (rsp_demux_001_src1_channel),              //          .channel
		.src1_startofpacket (rsp_demux_001_src1_startofpacket),        //          .startofpacket
		.src1_endofpacket   (rsp_demux_001_src1_endofpacket)           //          .endofpacket
	);

	ECE423_QSYS_mm_interconnect_0_rsp_demux rsp_demux_002 (
		.clk                (clk_125_clk_clk),                         //       clk.clk
		.reset              (sysid_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_007_src_ready),                    //      sink.ready
		.sink_channel       (router_007_src_channel),                  //          .channel
		.sink_data          (router_007_src_data),                     //          .data
		.sink_startofpacket (router_007_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (router_007_src_endofpacket),              //          .endofpacket
		.sink_valid         (router_007_src_valid),                    //          .valid
		.src0_ready         (rsp_demux_002_src0_ready),                //      src0.ready
		.src0_valid         (rsp_demux_002_src0_valid),                //          .valid
		.src0_data          (rsp_demux_002_src0_data),                 //          .data
		.src0_channel       (rsp_demux_002_src0_channel),              //          .channel
		.src0_startofpacket (rsp_demux_002_src0_startofpacket),        //          .startofpacket
		.src0_endofpacket   (rsp_demux_002_src0_endofpacket)           //          .endofpacket
	);

	ECE423_QSYS_mm_interconnect_0_cmd_demux_002 rsp_demux_003 (
		.clk                (clk_125_clk_clk),                         //       clk.clk
		.reset              (cpu_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_008_src_ready),                    //      sink.ready
		.sink_channel       (router_008_src_channel),                  //          .channel
		.sink_data          (router_008_src_data),                     //          .data
		.sink_startofpacket (router_008_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (router_008_src_endofpacket),              //          .endofpacket
		.sink_valid         (router_008_src_valid),                    //          .valid
		.src0_ready         (rsp_demux_003_src0_ready),                //      src0.ready
		.src0_valid         (rsp_demux_003_src0_valid),                //          .valid
		.src0_data          (rsp_demux_003_src0_data),                 //          .data
		.src0_channel       (rsp_demux_003_src0_channel),              //          .channel
		.src0_startofpacket (rsp_demux_003_src0_startofpacket),        //          .startofpacket
		.src0_endofpacket   (rsp_demux_003_src0_endofpacket),          //          .endofpacket
		.src1_ready         (rsp_demux_003_src1_ready),                //      src1.ready
		.src1_valid         (rsp_demux_003_src1_valid),                //          .valid
		.src1_data          (rsp_demux_003_src1_data),                 //          .data
		.src1_channel       (rsp_demux_003_src1_channel),              //          .channel
		.src1_startofpacket (rsp_demux_003_src1_startofpacket),        //          .startofpacket
		.src1_endofpacket   (rsp_demux_003_src1_endofpacket)           //          .endofpacket
	);

	ECE423_QSYS_mm_interconnect_0_rsp_demux rsp_demux_004 (
		.clk                (clk_125_clk_clk),                         //       clk.clk
		.reset              (cpu_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_009_src_ready),                    //      sink.ready
		.sink_channel       (router_009_src_channel),                  //          .channel
		.sink_data          (router_009_src_data),                     //          .data
		.sink_startofpacket (router_009_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (router_009_src_endofpacket),              //          .endofpacket
		.sink_valid         (router_009_src_valid),                    //          .valid
		.src0_ready         (rsp_demux_004_src0_ready),                //      src0.ready
		.src0_valid         (rsp_demux_004_src0_valid),                //          .valid
		.src0_data          (rsp_demux_004_src0_data),                 //          .data
		.src0_channel       (rsp_demux_004_src0_channel),              //          .channel
		.src0_startofpacket (rsp_demux_004_src0_startofpacket),        //          .startofpacket
		.src0_endofpacket   (rsp_demux_004_src0_endofpacket)           //          .endofpacket
	);

	ECE423_QSYS_mm_interconnect_0_rsp_demux_005 rsp_demux_005 (
		.clk                (clk_125_clk_clk),                              //       clk.clk
		.reset              (cpu_0_reset_reset_bridge_in_reset_reset),      // clk_reset.reset
		.sink_ready         (sram_uas_rsp_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (sram_uas_rsp_width_adapter_src_channel),       //          .channel
		.sink_data          (sram_uas_rsp_width_adapter_src_data),          //          .data
		.sink_startofpacket (sram_uas_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (sram_uas_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (sram_uas_rsp_width_adapter_src_valid),         //          .valid
		.src0_ready         (rsp_demux_005_src0_ready),                     //      src0.ready
		.src0_valid         (rsp_demux_005_src0_valid),                     //          .valid
		.src0_data          (rsp_demux_005_src0_data),                      //          .data
		.src0_channel       (rsp_demux_005_src0_channel),                   //          .channel
		.src0_startofpacket (rsp_demux_005_src0_startofpacket),             //          .startofpacket
		.src0_endofpacket   (rsp_demux_005_src0_endofpacket),               //          .endofpacket
		.src1_ready         (rsp_demux_005_src1_ready),                     //      src1.ready
		.src1_valid         (rsp_demux_005_src1_valid),                     //          .valid
		.src1_data          (rsp_demux_005_src1_data),                      //          .data
		.src1_channel       (rsp_demux_005_src1_channel),                   //          .channel
		.src1_startofpacket (rsp_demux_005_src1_startofpacket),             //          .startofpacket
		.src1_endofpacket   (rsp_demux_005_src1_endofpacket),               //          .endofpacket
		.src2_ready         (rsp_demux_005_src2_ready),                     //      src2.ready
		.src2_valid         (rsp_demux_005_src2_valid),                     //          .valid
		.src2_data          (rsp_demux_005_src2_data),                      //          .data
		.src2_channel       (rsp_demux_005_src2_channel),                   //          .channel
		.src2_startofpacket (rsp_demux_005_src2_startofpacket),             //          .startofpacket
		.src2_endofpacket   (rsp_demux_005_src2_endofpacket),               //          .endofpacket
		.src3_ready         (rsp_demux_005_src3_ready),                     //      src3.ready
		.src3_valid         (rsp_demux_005_src3_valid),                     //          .valid
		.src3_data          (rsp_demux_005_src3_data),                      //          .data
		.src3_channel       (rsp_demux_005_src3_channel),                   //          .channel
		.src3_startofpacket (rsp_demux_005_src3_startofpacket),             //          .startofpacket
		.src3_endofpacket   (rsp_demux_005_src3_endofpacket)                //          .endofpacket
	);

	ECE423_QSYS_mm_interconnect_0_cmd_demux_002 rsp_demux_006 (
		.clk                (clk_125_clk_clk),                         //       clk.clk
		.reset              (cpu_1_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_011_src_ready),                    //      sink.ready
		.sink_channel       (router_011_src_channel),                  //          .channel
		.sink_data          (router_011_src_data),                     //          .data
		.sink_startofpacket (router_011_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (router_011_src_endofpacket),              //          .endofpacket
		.sink_valid         (router_011_src_valid),                    //          .valid
		.src0_ready         (rsp_demux_006_src0_ready),                //      src0.ready
		.src0_valid         (rsp_demux_006_src0_valid),                //          .valid
		.src0_data          (rsp_demux_006_src0_data),                 //          .data
		.src0_channel       (rsp_demux_006_src0_channel),              //          .channel
		.src0_startofpacket (rsp_demux_006_src0_startofpacket),        //          .startofpacket
		.src0_endofpacket   (rsp_demux_006_src0_endofpacket),          //          .endofpacket
		.src1_ready         (rsp_demux_006_src1_ready),                //      src1.ready
		.src1_valid         (rsp_demux_006_src1_valid),                //          .valid
		.src1_data          (rsp_demux_006_src1_data),                 //          .data
		.src1_channel       (rsp_demux_006_src1_channel),              //          .channel
		.src1_startofpacket (rsp_demux_006_src1_startofpacket),        //          .startofpacket
		.src1_endofpacket   (rsp_demux_006_src1_endofpacket)           //          .endofpacket
	);

	ECE423_QSYS_mm_interconnect_0_rsp_demux rsp_demux_007 (
		.clk                (clk_125_clk_clk),                         //       clk.clk
		.reset              (sysid_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_012_src_ready),                    //      sink.ready
		.sink_channel       (router_012_src_channel),                  //          .channel
		.sink_data          (router_012_src_data),                     //          .data
		.sink_startofpacket (router_012_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (router_012_src_endofpacket),              //          .endofpacket
		.sink_valid         (router_012_src_valid),                    //          .valid
		.src0_ready         (rsp_demux_007_src0_ready),                //      src0.ready
		.src0_valid         (rsp_demux_007_src0_valid),                //          .valid
		.src0_data          (rsp_demux_007_src0_data),                 //          .data
		.src0_channel       (rsp_demux_007_src0_channel),              //          .channel
		.src0_startofpacket (rsp_demux_007_src0_startofpacket),        //          .startofpacket
		.src0_endofpacket   (rsp_demux_007_src0_endofpacket)           //          .endofpacket
	);

	ECE423_QSYS_mm_interconnect_0_rsp_demux rsp_demux_008 (
		.clk                (clk_125_clk_clk),                         //       clk.clk
		.reset              (sysid_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_013_src_ready),                    //      sink.ready
		.sink_channel       (router_013_src_channel),                  //          .channel
		.sink_data          (router_013_src_data),                     //          .data
		.sink_startofpacket (router_013_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (router_013_src_endofpacket),              //          .endofpacket
		.sink_valid         (router_013_src_valid),                    //          .valid
		.src0_ready         (rsp_demux_008_src0_ready),                //      src0.ready
		.src0_valid         (rsp_demux_008_src0_valid),                //          .valid
		.src0_data          (rsp_demux_008_src0_data),                 //          .data
		.src0_channel       (rsp_demux_008_src0_channel),              //          .channel
		.src0_startofpacket (rsp_demux_008_src0_startofpacket),        //          .startofpacket
		.src0_endofpacket   (rsp_demux_008_src0_endofpacket)           //          .endofpacket
	);

	ECE423_QSYS_mm_interconnect_0_rsp_demux rsp_demux_009 (
		.clk                (clk_125_clk_clk),                         //       clk.clk
		.reset              (sysid_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_014_src_ready),                    //      sink.ready
		.sink_channel       (router_014_src_channel),                  //          .channel
		.sink_data          (router_014_src_data),                     //          .data
		.sink_startofpacket (router_014_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (router_014_src_endofpacket),              //          .endofpacket
		.sink_valid         (router_014_src_valid),                    //          .valid
		.src0_ready         (rsp_demux_009_src0_ready),                //      src0.ready
		.src0_valid         (rsp_demux_009_src0_valid),                //          .valid
		.src0_data          (rsp_demux_009_src0_data),                 //          .data
		.src0_channel       (rsp_demux_009_src0_channel),              //          .channel
		.src0_startofpacket (rsp_demux_009_src0_startofpacket),        //          .startofpacket
		.src0_endofpacket   (rsp_demux_009_src0_endofpacket)           //          .endofpacket
	);

	ECE423_QSYS_mm_interconnect_0_rsp_mux rsp_mux (
		.clk                 (clk_125_clk_clk),                         //       clk.clk
		.reset               (cpu_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_src_ready),                       //       src.ready
		.src_valid           (rsp_mux_src_valid),                       //          .valid
		.src_data            (rsp_mux_src_data),                        //          .data
		.src_channel         (rsp_mux_src_channel),                     //          .channel
		.src_startofpacket   (rsp_mux_src_startofpacket),               //          .startofpacket
		.src_endofpacket     (rsp_mux_src_endofpacket),                 //          .endofpacket
		.sink0_ready         (mux_pipeline_016_source0_ready),          //     sink0.ready
		.sink0_valid         (mux_pipeline_016_source0_valid),          //          .valid
		.sink0_channel       (mux_pipeline_016_source0_channel),        //          .channel
		.sink0_data          (mux_pipeline_016_source0_data),           //          .data
		.sink0_startofpacket (mux_pipeline_016_source0_startofpacket),  //          .startofpacket
		.sink0_endofpacket   (mux_pipeline_016_source0_endofpacket),    //          .endofpacket
		.sink1_ready         (mux_pipeline_017_source0_ready),          //     sink1.ready
		.sink1_valid         (mux_pipeline_017_source0_valid),          //          .valid
		.sink1_channel       (mux_pipeline_017_source0_channel),        //          .channel
		.sink1_data          (mux_pipeline_017_source0_data),           //          .data
		.sink1_startofpacket (mux_pipeline_017_source0_startofpacket),  //          .startofpacket
		.sink1_endofpacket   (mux_pipeline_017_source0_endofpacket),    //          .endofpacket
		.sink2_ready         (mux_pipeline_018_source0_ready),          //     sink2.ready
		.sink2_valid         (mux_pipeline_018_source0_valid),          //          .valid
		.sink2_channel       (mux_pipeline_018_source0_channel),        //          .channel
		.sink2_data          (mux_pipeline_018_source0_data),           //          .data
		.sink2_startofpacket (mux_pipeline_018_source0_startofpacket),  //          .startofpacket
		.sink2_endofpacket   (mux_pipeline_018_source0_endofpacket),    //          .endofpacket
		.sink3_ready         (mux_pipeline_019_source0_ready),          //     sink3.ready
		.sink3_valid         (mux_pipeline_019_source0_valid),          //          .valid
		.sink3_channel       (mux_pipeline_019_source0_channel),        //          .channel
		.sink3_data          (mux_pipeline_019_source0_data),           //          .data
		.sink3_startofpacket (mux_pipeline_019_source0_startofpacket),  //          .startofpacket
		.sink3_endofpacket   (mux_pipeline_019_source0_endofpacket),    //          .endofpacket
		.sink4_ready         (mux_pipeline_020_source0_ready),          //     sink4.ready
		.sink4_valid         (mux_pipeline_020_source0_valid),          //          .valid
		.sink4_channel       (mux_pipeline_020_source0_channel),        //          .channel
		.sink4_data          (mux_pipeline_020_source0_data),           //          .data
		.sink4_startofpacket (mux_pipeline_020_source0_startofpacket),  //          .startofpacket
		.sink4_endofpacket   (mux_pipeline_020_source0_endofpacket),    //          .endofpacket
		.sink5_ready         (mux_pipeline_021_source0_ready),          //     sink5.ready
		.sink5_valid         (mux_pipeline_021_source0_valid),          //          .valid
		.sink5_channel       (mux_pipeline_021_source0_channel),        //          .channel
		.sink5_data          (mux_pipeline_021_source0_data),           //          .data
		.sink5_startofpacket (mux_pipeline_021_source0_startofpacket),  //          .startofpacket
		.sink5_endofpacket   (mux_pipeline_021_source0_endofpacket)     //          .endofpacket
	);

	ECE423_QSYS_mm_interconnect_0_rsp_mux_001 rsp_mux_001 (
		.clk                 (clk_125_clk_clk),                         //       clk.clk
		.reset               (cpu_1_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_001_src_ready),                   //       src.ready
		.src_valid           (rsp_mux_001_src_valid),                   //          .valid
		.src_data            (rsp_mux_001_src_data),                    //          .data
		.src_channel         (rsp_mux_001_src_channel),                 //          .channel
		.src_startofpacket   (rsp_mux_001_src_startofpacket),           //          .startofpacket
		.src_endofpacket     (rsp_mux_001_src_endofpacket),             //          .endofpacket
		.sink0_ready         (mux_pipeline_022_source0_ready),          //     sink0.ready
		.sink0_valid         (mux_pipeline_022_source0_valid),          //          .valid
		.sink0_channel       (mux_pipeline_022_source0_channel),        //          .channel
		.sink0_data          (mux_pipeline_022_source0_data),           //          .data
		.sink0_startofpacket (mux_pipeline_022_source0_startofpacket),  //          .startofpacket
		.sink0_endofpacket   (mux_pipeline_022_source0_endofpacket),    //          .endofpacket
		.sink1_ready         (mux_pipeline_023_source0_ready),          //     sink1.ready
		.sink1_valid         (mux_pipeline_023_source0_valid),          //          .valid
		.sink1_channel       (mux_pipeline_023_source0_channel),        //          .channel
		.sink1_data          (mux_pipeline_023_source0_data),           //          .data
		.sink1_startofpacket (mux_pipeline_023_source0_startofpacket),  //          .startofpacket
		.sink1_endofpacket   (mux_pipeline_023_source0_endofpacket),    //          .endofpacket
		.sink2_ready         (mux_pipeline_024_source0_ready),          //     sink2.ready
		.sink2_valid         (mux_pipeline_024_source0_valid),          //          .valid
		.sink2_channel       (mux_pipeline_024_source0_channel),        //          .channel
		.sink2_data          (mux_pipeline_024_source0_data),           //          .data
		.sink2_startofpacket (mux_pipeline_024_source0_startofpacket),  //          .startofpacket
		.sink2_endofpacket   (mux_pipeline_024_source0_endofpacket),    //          .endofpacket
		.sink3_ready         (mux_pipeline_025_source0_ready),          //     sink3.ready
		.sink3_valid         (mux_pipeline_025_source0_valid),          //          .valid
		.sink3_channel       (mux_pipeline_025_source0_channel),        //          .channel
		.sink3_data          (mux_pipeline_025_source0_data),           //          .data
		.sink3_startofpacket (mux_pipeline_025_source0_startofpacket),  //          .startofpacket
		.sink3_endofpacket   (mux_pipeline_025_source0_endofpacket),    //          .endofpacket
		.sink4_ready         (mux_pipeline_026_source0_ready),          //     sink4.ready
		.sink4_valid         (mux_pipeline_026_source0_valid),          //          .valid
		.sink4_channel       (mux_pipeline_026_source0_channel),        //          .channel
		.sink4_data          (mux_pipeline_026_source0_data),           //          .data
		.sink4_startofpacket (mux_pipeline_026_source0_startofpacket),  //          .startofpacket
		.sink4_endofpacket   (mux_pipeline_026_source0_endofpacket)     //          .endofpacket
	);

	ECE423_QSYS_mm_interconnect_0_rsp_mux_002 rsp_mux_002 (
		.clk                 (clk_125_clk_clk),                         //       clk.clk
		.reset               (cpu_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_002_src_ready),                   //       src.ready
		.src_valid           (rsp_mux_002_src_valid),                   //          .valid
		.src_data            (rsp_mux_002_src_data),                    //          .data
		.src_channel         (rsp_mux_002_src_channel),                 //          .channel
		.src_startofpacket   (rsp_mux_002_src_startofpacket),           //          .startofpacket
		.src_endofpacket     (rsp_mux_002_src_endofpacket),             //          .endofpacket
		.sink0_ready         (mux_pipeline_027_source0_ready),          //     sink0.ready
		.sink0_valid         (mux_pipeline_027_source0_valid),          //          .valid
		.sink0_channel       (mux_pipeline_027_source0_channel),        //          .channel
		.sink0_data          (mux_pipeline_027_source0_data),           //          .data
		.sink0_startofpacket (mux_pipeline_027_source0_startofpacket),  //          .startofpacket
		.sink0_endofpacket   (mux_pipeline_027_source0_endofpacket),    //          .endofpacket
		.sink1_ready         (mux_pipeline_028_source0_ready),          //     sink1.ready
		.sink1_valid         (mux_pipeline_028_source0_valid),          //          .valid
		.sink1_channel       (mux_pipeline_028_source0_channel),        //          .channel
		.sink1_data          (mux_pipeline_028_source0_data),           //          .data
		.sink1_startofpacket (mux_pipeline_028_source0_startofpacket),  //          .startofpacket
		.sink1_endofpacket   (mux_pipeline_028_source0_endofpacket)     //          .endofpacket
	);

	ECE423_QSYS_mm_interconnect_0_rsp_mux_002 rsp_mux_003 (
		.clk                 (clk_125_clk_clk),                         //       clk.clk
		.reset               (cpu_1_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_003_src_ready),                   //       src.ready
		.src_valid           (rsp_mux_003_src_valid),                   //          .valid
		.src_data            (rsp_mux_003_src_data),                    //          .data
		.src_channel         (rsp_mux_003_src_channel),                 //          .channel
		.src_startofpacket   (rsp_mux_003_src_startofpacket),           //          .startofpacket
		.src_endofpacket     (rsp_mux_003_src_endofpacket),             //          .endofpacket
		.sink0_ready         (mux_pipeline_029_source0_ready),          //     sink0.ready
		.sink0_valid         (mux_pipeline_029_source0_valid),          //          .valid
		.sink0_channel       (mux_pipeline_029_source0_channel),        //          .channel
		.sink0_data          (mux_pipeline_029_source0_data),           //          .data
		.sink0_startofpacket (mux_pipeline_029_source0_startofpacket),  //          .startofpacket
		.sink0_endofpacket   (mux_pipeline_029_source0_endofpacket),    //          .endofpacket
		.sink1_ready         (mux_pipeline_030_source0_ready),          //     sink1.ready
		.sink1_valid         (mux_pipeline_030_source0_valid),          //          .valid
		.sink1_channel       (mux_pipeline_030_source0_channel),        //          .channel
		.sink1_data          (mux_pipeline_030_source0_data),           //          .data
		.sink1_startofpacket (mux_pipeline_030_source0_startofpacket),  //          .startofpacket
		.sink1_endofpacket   (mux_pipeline_030_source0_endofpacket)     //          .endofpacket
	);

	ECE423_QSYS_mm_interconnect_0_rsp_mux_004 rsp_mux_004 (
		.clk                 (clk_50_out_clk_clk),                        //       clk.clk
		.reset               (sd_cont_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_004_src_ready),                     //       src.ready
		.src_valid           (rsp_mux_004_src_valid),                     //          .valid
		.src_data            (rsp_mux_004_src_data),                      //          .data
		.src_channel         (rsp_mux_004_src_channel),                   //          .channel
		.src_startofpacket   (rsp_mux_004_src_startofpacket),             //          .startofpacket
		.src_endofpacket     (rsp_mux_004_src_endofpacket),               //          .endofpacket
		.sink0_ready         (mux_pipeline_031_source0_ready),            //     sink0.ready
		.sink0_valid         (mux_pipeline_031_source0_valid),            //          .valid
		.sink0_channel       (mux_pipeline_031_source0_channel),          //          .channel
		.sink0_data          (mux_pipeline_031_source0_data),             //          .data
		.sink0_startofpacket (mux_pipeline_031_source0_startofpacket),    //          .startofpacket
		.sink0_endofpacket   (mux_pipeline_031_source0_endofpacket)       //          .endofpacket
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (49),
		.IN_PKT_ADDR_L                 (18),
		.IN_PKT_DATA_H                 (15),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (17),
		.IN_PKT_BYTEEN_L               (16),
		.IN_PKT_BYTE_CNT_H             (65),
		.IN_PKT_BYTE_CNT_L             (56),
		.IN_PKT_TRANS_COMPRESSED_READ  (50),
		.IN_PKT_TRANS_WRITE            (52),
		.IN_PKT_BURSTWRAP_H            (68),
		.IN_PKT_BURSTWRAP_L            (66),
		.IN_PKT_BURST_SIZE_H           (71),
		.IN_PKT_BURST_SIZE_L           (69),
		.IN_PKT_RESPONSE_STATUS_H      (95),
		.IN_PKT_RESPONSE_STATUS_L      (94),
		.IN_PKT_TRANS_EXCLUSIVE        (55),
		.IN_PKT_BURST_TYPE_H           (73),
		.IN_PKT_BURST_TYPE_L           (72),
		.IN_PKT_ORI_BURST_SIZE_L       (96),
		.IN_PKT_ORI_BURST_SIZE_H       (98),
		.IN_ST_DATA_W                  (99),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (83),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (89),
		.OUT_PKT_BURST_SIZE_L          (87),
		.OUT_PKT_RESPONSE_STATUS_H     (113),
		.OUT_PKT_RESPONSE_STATUS_L     (112),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (91),
		.OUT_PKT_BURST_TYPE_L          (90),
		.OUT_PKT_ORI_BURST_SIZE_L      (114),
		.OUT_PKT_ORI_BURST_SIZE_H      (116),
		.OUT_ST_DATA_W                 (117),
		.ST_CHANNEL_W                  (10),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) sram_uas_rsp_width_adapter (
		.clk                  (clk_125_clk_clk),                              //       clk.clk
		.reset                (cpu_0_reset_reset_bridge_in_reset_reset),      // clk_reset.reset
		.in_valid             (router_010_src_valid),                         //      sink.valid
		.in_channel           (router_010_src_channel),                       //          .channel
		.in_startofpacket     (router_010_src_startofpacket),                 //          .startofpacket
		.in_endofpacket       (router_010_src_endofpacket),                   //          .endofpacket
		.in_ready             (router_010_src_ready),                         //          .ready
		.in_data              (router_010_src_data),                          //          .data
		.out_endofpacket      (sram_uas_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (sram_uas_rsp_width_adapter_src_data),          //          .data
		.out_channel          (sram_uas_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (sram_uas_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (sram_uas_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (sram_uas_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                        // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (83),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_TRANS_WRITE            (70),
		.IN_PKT_BURSTWRAP_H            (86),
		.IN_PKT_BURSTWRAP_L            (84),
		.IN_PKT_BURST_SIZE_H           (89),
		.IN_PKT_BURST_SIZE_L           (87),
		.IN_PKT_RESPONSE_STATUS_H      (113),
		.IN_PKT_RESPONSE_STATUS_L      (112),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (91),
		.IN_PKT_BURST_TYPE_L           (90),
		.IN_PKT_ORI_BURST_SIZE_L       (114),
		.IN_PKT_ORI_BURST_SIZE_H       (116),
		.IN_ST_DATA_W                  (117),
		.OUT_PKT_ADDR_H                (49),
		.OUT_PKT_ADDR_L                (18),
		.OUT_PKT_DATA_H                (15),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (17),
		.OUT_PKT_BYTEEN_L              (16),
		.OUT_PKT_BYTE_CNT_H            (65),
		.OUT_PKT_BYTE_CNT_L            (56),
		.OUT_PKT_TRANS_COMPRESSED_READ (50),
		.OUT_PKT_BURST_SIZE_H          (71),
		.OUT_PKT_BURST_SIZE_L          (69),
		.OUT_PKT_RESPONSE_STATUS_H     (95),
		.OUT_PKT_RESPONSE_STATUS_L     (94),
		.OUT_PKT_TRANS_EXCLUSIVE       (55),
		.OUT_PKT_BURST_TYPE_H          (73),
		.OUT_PKT_BURST_TYPE_L          (72),
		.OUT_PKT_ORI_BURST_SIZE_L      (96),
		.OUT_PKT_ORI_BURST_SIZE_H      (98),
		.OUT_ST_DATA_W                 (99),
		.ST_CHANNEL_W                  (10),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) sram_uas_cmd_width_adapter (
		.clk                  (clk_125_clk_clk),                              //       clk.clk
		.reset                (cpu_0_reset_reset_bridge_in_reset_reset),      // clk_reset.reset
		.in_valid             (cmd_mux_005_src_valid),                        //      sink.valid
		.in_channel           (cmd_mux_005_src_channel),                      //          .channel
		.in_startofpacket     (cmd_mux_005_src_startofpacket),                //          .startofpacket
		.in_endofpacket       (cmd_mux_005_src_endofpacket),                  //          .endofpacket
		.in_ready             (cmd_mux_005_src_ready),                        //          .ready
		.in_data              (cmd_mux_005_src_data),                         //          .data
		.out_endofpacket      (sram_uas_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (sram_uas_cmd_width_adapter_src_data),          //          .data
		.out_channel          (sram_uas_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (sram_uas_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (sram_uas_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (sram_uas_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                        // (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (117),
		.BITS_PER_SYMBOL     (117),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (10),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser (
		.in_clk            (clk_50_out_clk_clk),                        //        in_clk.clk
		.in_reset          (sd_cont_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (clk_125_clk_clk),                           //       out_clk.clk
		.out_reset         (sysid_reset_reset_bridge_in_reset_reset),   // out_clk_reset.reset
		.in_ready          (cmd_demux_004_src0_ready),                  //            in.ready
		.in_valid          (cmd_demux_004_src0_valid),                  //              .valid
		.in_startofpacket  (cmd_demux_004_src0_startofpacket),          //              .startofpacket
		.in_endofpacket    (cmd_demux_004_src0_endofpacket),            //              .endofpacket
		.in_channel        (cmd_demux_004_src0_channel),                //              .channel
		.in_data           (cmd_demux_004_src0_data),                   //              .data
		.out_ready         (crosser_out_ready),                         //           out.ready
		.out_valid         (crosser_out_valid),                         //              .valid
		.out_startofpacket (crosser_out_startofpacket),                 //              .startofpacket
		.out_endofpacket   (crosser_out_endofpacket),                   //              .endofpacket
		.out_channel       (crosser_out_channel),                       //              .channel
		.out_data          (crosser_out_data),                          //              .data
		.in_empty          (1'b0),                                      //   (terminated)
		.in_error          (1'b0),                                      //   (terminated)
		.out_empty         (),                                          //   (terminated)
		.out_error         ()                                           //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (117),
		.BITS_PER_SYMBOL     (117),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (10),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_001 (
		.in_clk            (clk_125_clk_clk),                           //        in_clk.clk
		.in_reset          (sysid_reset_reset_bridge_in_reset_reset),   //  in_clk_reset.reset
		.out_clk           (clk_50_out_clk_clk),                        //       out_clk.clk
		.out_reset         (sd_cont_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_001_src1_ready),                  //            in.ready
		.in_valid          (rsp_demux_001_src1_valid),                  //              .valid
		.in_startofpacket  (rsp_demux_001_src1_startofpacket),          //              .startofpacket
		.in_endofpacket    (rsp_demux_001_src1_endofpacket),            //              .endofpacket
		.in_channel        (rsp_demux_001_src1_channel),                //              .channel
		.in_data           (rsp_demux_001_src1_data),                   //              .data
		.out_ready         (crosser_001_out_ready),                     //           out.ready
		.out_valid         (crosser_001_out_valid),                     //              .valid
		.out_startofpacket (crosser_001_out_startofpacket),             //              .startofpacket
		.out_endofpacket   (crosser_001_out_endofpacket),               //              .endofpacket
		.out_channel       (crosser_001_out_channel),                   //              .channel
		.out_data          (crosser_001_out_data),                      //              .data
		.in_empty          (1'b0),                                      //   (terminated)
		.in_error          (1'b0),                                      //   (terminated)
		.out_empty         (),                                          //   (terminated)
		.out_error         ()                                           //   (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (117),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (10),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) limiter_pipeline (
		.clk               (clk_125_clk_clk),                                 //       cr0.clk
		.reset             (cpu_0_reset_reset_bridge_in_reset_reset),         // cr0_reset.reset
		.in_ready          (cpu_0_data_master_limiter_cmd_src_ready),         //     sink0.ready
		.in_valid          (cpu_0_data_master_limiter_cmd_src_valid),         //          .valid
		.in_startofpacket  (cpu_0_data_master_limiter_cmd_src_startofpacket), //          .startofpacket
		.in_endofpacket    (cpu_0_data_master_limiter_cmd_src_endofpacket),   //          .endofpacket
		.in_data           (cpu_0_data_master_limiter_cmd_src_data),          //          .data
		.in_channel        (cpu_0_data_master_limiter_cmd_src_channel),       //          .channel
		.out_ready         (limiter_pipeline_source0_ready),                  //   source0.ready
		.out_valid         (limiter_pipeline_source0_valid),                  //          .valid
		.out_startofpacket (limiter_pipeline_source0_startofpacket),          //          .startofpacket
		.out_endofpacket   (limiter_pipeline_source0_endofpacket),            //          .endofpacket
		.out_data          (limiter_pipeline_source0_data),                   //          .data
		.out_channel       (limiter_pipeline_source0_channel),                //          .channel
		.in_empty          (1'b0),                                            // (terminated)
		.out_empty         (),                                                // (terminated)
		.out_error         (),                                                // (terminated)
		.in_error          (1'b0)                                             // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (117),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (10),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) limiter_pipeline_001 (
		.clk               (clk_125_clk_clk),                            //       cr0.clk
		.reset             (cpu_0_reset_reset_bridge_in_reset_reset),    // cr0_reset.reset
		.in_ready          (rsp_mux_src_ready),                          //     sink0.ready
		.in_valid          (rsp_mux_src_valid),                          //          .valid
		.in_startofpacket  (rsp_mux_src_startofpacket),                  //          .startofpacket
		.in_endofpacket    (rsp_mux_src_endofpacket),                    //          .endofpacket
		.in_data           (rsp_mux_src_data),                           //          .data
		.in_channel        (rsp_mux_src_channel),                        //          .channel
		.out_ready         (limiter_pipeline_001_source0_ready),         //   source0.ready
		.out_valid         (limiter_pipeline_001_source0_valid),         //          .valid
		.out_startofpacket (limiter_pipeline_001_source0_startofpacket), //          .startofpacket
		.out_endofpacket   (limiter_pipeline_001_source0_endofpacket),   //          .endofpacket
		.out_data          (limiter_pipeline_001_source0_data),          //          .data
		.out_channel       (limiter_pipeline_001_source0_channel),       //          .channel
		.in_empty          (1'b0),                                       // (terminated)
		.out_empty         (),                                           // (terminated)
		.out_error         (),                                           // (terminated)
		.in_error          (1'b0)                                        // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (117),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (10),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) limiter_pipeline_002 (
		.clk               (clk_125_clk_clk),                                 //       cr0.clk
		.reset             (cpu_1_reset_reset_bridge_in_reset_reset),         // cr0_reset.reset
		.in_ready          (cpu_1_data_master_limiter_cmd_src_ready),         //     sink0.ready
		.in_valid          (cpu_1_data_master_limiter_cmd_src_valid),         //          .valid
		.in_startofpacket  (cpu_1_data_master_limiter_cmd_src_startofpacket), //          .startofpacket
		.in_endofpacket    (cpu_1_data_master_limiter_cmd_src_endofpacket),   //          .endofpacket
		.in_data           (cpu_1_data_master_limiter_cmd_src_data),          //          .data
		.in_channel        (cpu_1_data_master_limiter_cmd_src_channel),       //          .channel
		.out_ready         (limiter_pipeline_002_source0_ready),              //   source0.ready
		.out_valid         (limiter_pipeline_002_source0_valid),              //          .valid
		.out_startofpacket (limiter_pipeline_002_source0_startofpacket),      //          .startofpacket
		.out_endofpacket   (limiter_pipeline_002_source0_endofpacket),        //          .endofpacket
		.out_data          (limiter_pipeline_002_source0_data),               //          .data
		.out_channel       (limiter_pipeline_002_source0_channel),            //          .channel
		.in_empty          (1'b0),                                            // (terminated)
		.out_empty         (),                                                // (terminated)
		.out_error         (),                                                // (terminated)
		.in_error          (1'b0)                                             // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (117),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (10),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) limiter_pipeline_003 (
		.clk               (clk_125_clk_clk),                            //       cr0.clk
		.reset             (cpu_1_reset_reset_bridge_in_reset_reset),    // cr0_reset.reset
		.in_ready          (rsp_mux_001_src_ready),                      //     sink0.ready
		.in_valid          (rsp_mux_001_src_valid),                      //          .valid
		.in_startofpacket  (rsp_mux_001_src_startofpacket),              //          .startofpacket
		.in_endofpacket    (rsp_mux_001_src_endofpacket),                //          .endofpacket
		.in_data           (rsp_mux_001_src_data),                       //          .data
		.in_channel        (rsp_mux_001_src_channel),                    //          .channel
		.out_ready         (limiter_pipeline_003_source0_ready),         //   source0.ready
		.out_valid         (limiter_pipeline_003_source0_valid),         //          .valid
		.out_startofpacket (limiter_pipeline_003_source0_startofpacket), //          .startofpacket
		.out_endofpacket   (limiter_pipeline_003_source0_endofpacket),   //          .endofpacket
		.out_data          (limiter_pipeline_003_source0_data),          //          .data
		.out_channel       (limiter_pipeline_003_source0_channel),       //          .channel
		.in_empty          (1'b0),                                       // (terminated)
		.out_empty         (),                                           // (terminated)
		.out_error         (),                                           // (terminated)
		.in_error          (1'b0)                                        // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (117),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (10),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) limiter_pipeline_004 (
		.clk               (clk_125_clk_clk),                                        //       cr0.clk
		.reset             (cpu_0_reset_reset_bridge_in_reset_reset),                // cr0_reset.reset
		.in_ready          (cpu_0_instruction_master_limiter_cmd_src_ready),         //     sink0.ready
		.in_valid          (cpu_0_instruction_master_limiter_cmd_src_valid),         //          .valid
		.in_startofpacket  (cpu_0_instruction_master_limiter_cmd_src_startofpacket), //          .startofpacket
		.in_endofpacket    (cpu_0_instruction_master_limiter_cmd_src_endofpacket),   //          .endofpacket
		.in_data           (cpu_0_instruction_master_limiter_cmd_src_data),          //          .data
		.in_channel        (cpu_0_instruction_master_limiter_cmd_src_channel),       //          .channel
		.out_ready         (limiter_pipeline_004_source0_ready),                     //   source0.ready
		.out_valid         (limiter_pipeline_004_source0_valid),                     //          .valid
		.out_startofpacket (limiter_pipeline_004_source0_startofpacket),             //          .startofpacket
		.out_endofpacket   (limiter_pipeline_004_source0_endofpacket),               //          .endofpacket
		.out_data          (limiter_pipeline_004_source0_data),                      //          .data
		.out_channel       (limiter_pipeline_004_source0_channel),                   //          .channel
		.in_empty          (1'b0),                                                   // (terminated)
		.out_empty         (),                                                       // (terminated)
		.out_error         (),                                                       // (terminated)
		.in_error          (1'b0)                                                    // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (117),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (10),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) limiter_pipeline_005 (
		.clk               (clk_125_clk_clk),                            //       cr0.clk
		.reset             (cpu_0_reset_reset_bridge_in_reset_reset),    // cr0_reset.reset
		.in_ready          (rsp_mux_002_src_ready),                      //     sink0.ready
		.in_valid          (rsp_mux_002_src_valid),                      //          .valid
		.in_startofpacket  (rsp_mux_002_src_startofpacket),              //          .startofpacket
		.in_endofpacket    (rsp_mux_002_src_endofpacket),                //          .endofpacket
		.in_data           (rsp_mux_002_src_data),                       //          .data
		.in_channel        (rsp_mux_002_src_channel),                    //          .channel
		.out_ready         (limiter_pipeline_005_source0_ready),         //   source0.ready
		.out_valid         (limiter_pipeline_005_source0_valid),         //          .valid
		.out_startofpacket (limiter_pipeline_005_source0_startofpacket), //          .startofpacket
		.out_endofpacket   (limiter_pipeline_005_source0_endofpacket),   //          .endofpacket
		.out_data          (limiter_pipeline_005_source0_data),          //          .data
		.out_channel       (limiter_pipeline_005_source0_channel),       //          .channel
		.in_empty          (1'b0),                                       // (terminated)
		.out_empty         (),                                           // (terminated)
		.out_error         (),                                           // (terminated)
		.in_error          (1'b0)                                        // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (117),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (10),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) limiter_pipeline_006 (
		.clk               (clk_125_clk_clk),                                        //       cr0.clk
		.reset             (cpu_1_reset_reset_bridge_in_reset_reset),                // cr0_reset.reset
		.in_ready          (cpu_1_instruction_master_limiter_cmd_src_ready),         //     sink0.ready
		.in_valid          (cpu_1_instruction_master_limiter_cmd_src_valid),         //          .valid
		.in_startofpacket  (cpu_1_instruction_master_limiter_cmd_src_startofpacket), //          .startofpacket
		.in_endofpacket    (cpu_1_instruction_master_limiter_cmd_src_endofpacket),   //          .endofpacket
		.in_data           (cpu_1_instruction_master_limiter_cmd_src_data),          //          .data
		.in_channel        (cpu_1_instruction_master_limiter_cmd_src_channel),       //          .channel
		.out_ready         (limiter_pipeline_006_source0_ready),                     //   source0.ready
		.out_valid         (limiter_pipeline_006_source0_valid),                     //          .valid
		.out_startofpacket (limiter_pipeline_006_source0_startofpacket),             //          .startofpacket
		.out_endofpacket   (limiter_pipeline_006_source0_endofpacket),               //          .endofpacket
		.out_data          (limiter_pipeline_006_source0_data),                      //          .data
		.out_channel       (limiter_pipeline_006_source0_channel),                   //          .channel
		.in_empty          (1'b0),                                                   // (terminated)
		.out_empty         (),                                                       // (terminated)
		.out_error         (),                                                       // (terminated)
		.in_error          (1'b0)                                                    // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (117),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (10),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) limiter_pipeline_007 (
		.clk               (clk_125_clk_clk),                            //       cr0.clk
		.reset             (cpu_1_reset_reset_bridge_in_reset_reset),    // cr0_reset.reset
		.in_ready          (rsp_mux_003_src_ready),                      //     sink0.ready
		.in_valid          (rsp_mux_003_src_valid),                      //          .valid
		.in_startofpacket  (rsp_mux_003_src_startofpacket),              //          .startofpacket
		.in_endofpacket    (rsp_mux_003_src_endofpacket),                //          .endofpacket
		.in_data           (rsp_mux_003_src_data),                       //          .data
		.in_channel        (rsp_mux_003_src_channel),                    //          .channel
		.out_ready         (limiter_pipeline_007_source0_ready),         //   source0.ready
		.out_valid         (limiter_pipeline_007_source0_valid),         //          .valid
		.out_startofpacket (limiter_pipeline_007_source0_startofpacket), //          .startofpacket
		.out_endofpacket   (limiter_pipeline_007_source0_endofpacket),   //          .endofpacket
		.out_data          (limiter_pipeline_007_source0_data),          //          .data
		.out_channel       (limiter_pipeline_007_source0_channel),       //          .channel
		.in_empty          (1'b0),                                       // (terminated)
		.out_empty         (),                                           // (terminated)
		.out_error         (),                                           // (terminated)
		.in_error          (1'b0)                                        // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (117),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (10),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline (
		.clk               (clk_125_clk_clk),                                                   //       cr0.clk
		.reset             (cpu_0_reset_reset_bridge_in_reset_reset),                           // cr0_reset.reset
		.in_ready          (jtag_uart_0_avalon_jtag_slave_burst_adapter_source0_ready),         //     sink0.ready
		.in_valid          (jtag_uart_0_avalon_jtag_slave_burst_adapter_source0_valid),         //          .valid
		.in_startofpacket  (jtag_uart_0_avalon_jtag_slave_burst_adapter_source0_startofpacket), //          .startofpacket
		.in_endofpacket    (jtag_uart_0_avalon_jtag_slave_burst_adapter_source0_endofpacket),   //          .endofpacket
		.in_data           (jtag_uart_0_avalon_jtag_slave_burst_adapter_source0_data),          //          .data
		.in_channel        (jtag_uart_0_avalon_jtag_slave_burst_adapter_source0_channel),       //          .channel
		.out_ready         (agent_pipeline_source0_ready),                                      //   source0.ready
		.out_valid         (agent_pipeline_source0_valid),                                      //          .valid
		.out_startofpacket (agent_pipeline_source0_startofpacket),                              //          .startofpacket
		.out_endofpacket   (agent_pipeline_source0_endofpacket),                                //          .endofpacket
		.out_data          (agent_pipeline_source0_data),                                       //          .data
		.out_channel       (agent_pipeline_source0_channel),                                    //          .channel
		.in_empty          (1'b0),                                                              // (terminated)
		.out_empty         (),                                                                  // (terminated)
		.out_error         (),                                                                  // (terminated)
		.in_error          (1'b0)                                                               // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (117),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (0),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_001 (
		.clk               (clk_125_clk_clk),                                      //       cr0.clk
		.reset             (cpu_0_reset_reset_bridge_in_reset_reset),              // cr0_reset.reset
		.in_ready          (jtag_uart_0_avalon_jtag_slave_agent_rp_ready),         //     sink0.ready
		.in_valid          (jtag_uart_0_avalon_jtag_slave_agent_rp_valid),         //          .valid
		.in_startofpacket  (jtag_uart_0_avalon_jtag_slave_agent_rp_startofpacket), //          .startofpacket
		.in_endofpacket    (jtag_uart_0_avalon_jtag_slave_agent_rp_endofpacket),   //          .endofpacket
		.in_data           (jtag_uart_0_avalon_jtag_slave_agent_rp_data),          //          .data
		.out_ready         (agent_pipeline_001_source0_ready),                     //   source0.ready
		.out_valid         (agent_pipeline_001_source0_valid),                     //          .valid
		.out_startofpacket (agent_pipeline_001_source0_startofpacket),             //          .startofpacket
		.out_endofpacket   (agent_pipeline_001_source0_endofpacket),               //          .endofpacket
		.out_data          (agent_pipeline_001_source0_data),                      //          .data
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_error          (1'b0),                                                 // (terminated)
		.out_channel       (),                                                     // (terminated)
		.in_channel        (1'b0)                                                  // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (117),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (10),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_002 (
		.clk               (clk_125_clk_clk),                          //       cr0.clk
		.reset             (sysid_reset_reset_bridge_in_reset_reset),  // cr0_reset.reset
		.in_ready          (cmd_mux_001_src_ready),                    //     sink0.ready
		.in_valid          (cmd_mux_001_src_valid),                    //          .valid
		.in_startofpacket  (cmd_mux_001_src_startofpacket),            //          .startofpacket
		.in_endofpacket    (cmd_mux_001_src_endofpacket),              //          .endofpacket
		.in_data           (cmd_mux_001_src_data),                     //          .data
		.in_channel        (cmd_mux_001_src_channel),                  //          .channel
		.out_ready         (agent_pipeline_002_source0_ready),         //   source0.ready
		.out_valid         (agent_pipeline_002_source0_valid),         //          .valid
		.out_startofpacket (agent_pipeline_002_source0_startofpacket), //          .startofpacket
		.out_endofpacket   (agent_pipeline_002_source0_endofpacket),   //          .endofpacket
		.out_data          (agent_pipeline_002_source0_data),          //          .data
		.out_channel       (agent_pipeline_002_source0_channel),       //          .channel
		.in_empty          (1'b0),                                     // (terminated)
		.out_empty         (),                                         // (terminated)
		.out_error         (),                                         // (terminated)
		.in_error          (1'b0)                                      // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (117),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (0),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_003 (
		.clk               (clk_125_clk_clk),                          //       cr0.clk
		.reset             (sysid_reset_reset_bridge_in_reset_reset),  // cr0_reset.reset
		.in_ready          (lpddr2_avl_0_agent_rp_ready),              //     sink0.ready
		.in_valid          (lpddr2_avl_0_agent_rp_valid),              //          .valid
		.in_startofpacket  (lpddr2_avl_0_agent_rp_startofpacket),      //          .startofpacket
		.in_endofpacket    (lpddr2_avl_0_agent_rp_endofpacket),        //          .endofpacket
		.in_data           (lpddr2_avl_0_agent_rp_data),               //          .data
		.out_ready         (agent_pipeline_003_source0_ready),         //   source0.ready
		.out_valid         (agent_pipeline_003_source0_valid),         //          .valid
		.out_startofpacket (agent_pipeline_003_source0_startofpacket), //          .startofpacket
		.out_endofpacket   (agent_pipeline_003_source0_endofpacket),   //          .endofpacket
		.out_data          (agent_pipeline_003_source0_data),          //          .data
		.in_empty          (1'b0),                                     // (terminated)
		.out_empty         (),                                         // (terminated)
		.out_error         (),                                         // (terminated)
		.in_error          (1'b0),                                     // (terminated)
		.out_channel       (),                                         // (terminated)
		.in_channel        (1'b0)                                      // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (117),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (10),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_004 (
		.clk               (clk_125_clk_clk),                                         //       cr0.clk
		.reset             (sysid_reset_reset_bridge_in_reset_reset),                 // cr0_reset.reset
		.in_ready          (sysid_control_slave_burst_adapter_source0_ready),         //     sink0.ready
		.in_valid          (sysid_control_slave_burst_adapter_source0_valid),         //          .valid
		.in_startofpacket  (sysid_control_slave_burst_adapter_source0_startofpacket), //          .startofpacket
		.in_endofpacket    (sysid_control_slave_burst_adapter_source0_endofpacket),   //          .endofpacket
		.in_data           (sysid_control_slave_burst_adapter_source0_data),          //          .data
		.in_channel        (sysid_control_slave_burst_adapter_source0_channel),       //          .channel
		.out_ready         (agent_pipeline_004_source0_ready),                        //   source0.ready
		.out_valid         (agent_pipeline_004_source0_valid),                        //          .valid
		.out_startofpacket (agent_pipeline_004_source0_startofpacket),                //          .startofpacket
		.out_endofpacket   (agent_pipeline_004_source0_endofpacket),                  //          .endofpacket
		.out_data          (agent_pipeline_004_source0_data),                         //          .data
		.out_channel       (agent_pipeline_004_source0_channel),                      //          .channel
		.in_empty          (1'b0),                                                    // (terminated)
		.out_empty         (),                                                        // (terminated)
		.out_error         (),                                                        // (terminated)
		.in_error          (1'b0)                                                     // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (117),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (0),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_005 (
		.clk               (clk_125_clk_clk),                            //       cr0.clk
		.reset             (sysid_reset_reset_bridge_in_reset_reset),    // cr0_reset.reset
		.in_ready          (sysid_control_slave_agent_rp_ready),         //     sink0.ready
		.in_valid          (sysid_control_slave_agent_rp_valid),         //          .valid
		.in_startofpacket  (sysid_control_slave_agent_rp_startofpacket), //          .startofpacket
		.in_endofpacket    (sysid_control_slave_agent_rp_endofpacket),   //          .endofpacket
		.in_data           (sysid_control_slave_agent_rp_data),          //          .data
		.out_ready         (agent_pipeline_005_source0_ready),           //   source0.ready
		.out_valid         (agent_pipeline_005_source0_valid),           //          .valid
		.out_startofpacket (agent_pipeline_005_source0_startofpacket),   //          .startofpacket
		.out_endofpacket   (agent_pipeline_005_source0_endofpacket),     //          .endofpacket
		.out_data          (agent_pipeline_005_source0_data),            //          .data
		.in_empty          (1'b0),                                       // (terminated)
		.out_empty         (),                                           // (terminated)
		.out_error         (),                                           // (terminated)
		.in_error          (1'b0),                                       // (terminated)
		.out_channel       (),                                           // (terminated)
		.in_channel        (1'b0)                                        // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (117),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (10),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_006 (
		.clk               (clk_125_clk_clk),                                           //       cr0.clk
		.reset             (cpu_0_reset_reset_bridge_in_reset_reset),                   // cr0_reset.reset
		.in_ready          (cpu_0_debug_mem_slave_burst_adapter_source0_ready),         //     sink0.ready
		.in_valid          (cpu_0_debug_mem_slave_burst_adapter_source0_valid),         //          .valid
		.in_startofpacket  (cpu_0_debug_mem_slave_burst_adapter_source0_startofpacket), //          .startofpacket
		.in_endofpacket    (cpu_0_debug_mem_slave_burst_adapter_source0_endofpacket),   //          .endofpacket
		.in_data           (cpu_0_debug_mem_slave_burst_adapter_source0_data),          //          .data
		.in_channel        (cpu_0_debug_mem_slave_burst_adapter_source0_channel),       //          .channel
		.out_ready         (agent_pipeline_006_source0_ready),                          //   source0.ready
		.out_valid         (agent_pipeline_006_source0_valid),                          //          .valid
		.out_startofpacket (agent_pipeline_006_source0_startofpacket),                  //          .startofpacket
		.out_endofpacket   (agent_pipeline_006_source0_endofpacket),                    //          .endofpacket
		.out_data          (agent_pipeline_006_source0_data),                           //          .data
		.out_channel       (agent_pipeline_006_source0_channel),                        //          .channel
		.in_empty          (1'b0),                                                      // (terminated)
		.out_empty         (),                                                          // (terminated)
		.out_error         (),                                                          // (terminated)
		.in_error          (1'b0)                                                       // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (117),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (0),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_007 (
		.clk               (clk_125_clk_clk),                              //       cr0.clk
		.reset             (cpu_0_reset_reset_bridge_in_reset_reset),      // cr0_reset.reset
		.in_ready          (cpu_0_debug_mem_slave_agent_rp_ready),         //     sink0.ready
		.in_valid          (cpu_0_debug_mem_slave_agent_rp_valid),         //          .valid
		.in_startofpacket  (cpu_0_debug_mem_slave_agent_rp_startofpacket), //          .startofpacket
		.in_endofpacket    (cpu_0_debug_mem_slave_agent_rp_endofpacket),   //          .endofpacket
		.in_data           (cpu_0_debug_mem_slave_agent_rp_data),          //          .data
		.out_ready         (agent_pipeline_007_source0_ready),             //   source0.ready
		.out_valid         (agent_pipeline_007_source0_valid),             //          .valid
		.out_startofpacket (agent_pipeline_007_source0_startofpacket),     //          .startofpacket
		.out_endofpacket   (agent_pipeline_007_source0_endofpacket),       //          .endofpacket
		.out_data          (agent_pipeline_007_source0_data),              //          .data
		.in_empty          (1'b0),                                         // (terminated)
		.out_empty         (),                                             // (terminated)
		.out_error         (),                                             // (terminated)
		.in_error          (1'b0),                                         // (terminated)
		.out_channel       (),                                             // (terminated)
		.in_channel        (1'b0)                                          // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (117),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (10),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_008 (
		.clk               (clk_125_clk_clk),                                     //       cr0.clk
		.reset             (cpu_0_reset_reset_bridge_in_reset_reset),             // cr0_reset.reset
		.in_ready          (cpu_0_bridge_s0_burst_adapter_source0_ready),         //     sink0.ready
		.in_valid          (cpu_0_bridge_s0_burst_adapter_source0_valid),         //          .valid
		.in_startofpacket  (cpu_0_bridge_s0_burst_adapter_source0_startofpacket), //          .startofpacket
		.in_endofpacket    (cpu_0_bridge_s0_burst_adapter_source0_endofpacket),   //          .endofpacket
		.in_data           (cpu_0_bridge_s0_burst_adapter_source0_data),          //          .data
		.in_channel        (cpu_0_bridge_s0_burst_adapter_source0_channel),       //          .channel
		.out_ready         (agent_pipeline_008_source0_ready),                    //   source0.ready
		.out_valid         (agent_pipeline_008_source0_valid),                    //          .valid
		.out_startofpacket (agent_pipeline_008_source0_startofpacket),            //          .startofpacket
		.out_endofpacket   (agent_pipeline_008_source0_endofpacket),              //          .endofpacket
		.out_data          (agent_pipeline_008_source0_data),                     //          .data
		.out_channel       (agent_pipeline_008_source0_channel),                  //          .channel
		.in_empty          (1'b0),                                                // (terminated)
		.out_empty         (),                                                    // (terminated)
		.out_error         (),                                                    // (terminated)
		.in_error          (1'b0)                                                 // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (117),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (0),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_009 (
		.clk               (clk_125_clk_clk),                          //       cr0.clk
		.reset             (cpu_0_reset_reset_bridge_in_reset_reset),  // cr0_reset.reset
		.in_ready          (cpu_0_bridge_s0_agent_rp_ready),           //     sink0.ready
		.in_valid          (cpu_0_bridge_s0_agent_rp_valid),           //          .valid
		.in_startofpacket  (cpu_0_bridge_s0_agent_rp_startofpacket),   //          .startofpacket
		.in_endofpacket    (cpu_0_bridge_s0_agent_rp_endofpacket),     //          .endofpacket
		.in_data           (cpu_0_bridge_s0_agent_rp_data),            //          .data
		.out_ready         (agent_pipeline_009_source0_ready),         //   source0.ready
		.out_valid         (agent_pipeline_009_source0_valid),         //          .valid
		.out_startofpacket (agent_pipeline_009_source0_startofpacket), //          .startofpacket
		.out_endofpacket   (agent_pipeline_009_source0_endofpacket),   //          .endofpacket
		.out_data          (agent_pipeline_009_source0_data),          //          .data
		.in_empty          (1'b0),                                     // (terminated)
		.out_empty         (),                                         // (terminated)
		.out_error         (),                                         // (terminated)
		.in_error          (1'b0),                                     // (terminated)
		.out_channel       (),                                         // (terminated)
		.in_channel        (1'b0)                                      // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (99),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (10),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_010 (
		.clk               (clk_125_clk_clk),                              //       cr0.clk
		.reset             (cpu_0_reset_reset_bridge_in_reset_reset),      // cr0_reset.reset
		.in_ready          (sram_uas_burst_adapter_source0_ready),         //     sink0.ready
		.in_valid          (sram_uas_burst_adapter_source0_valid),         //          .valid
		.in_startofpacket  (sram_uas_burst_adapter_source0_startofpacket), //          .startofpacket
		.in_endofpacket    (sram_uas_burst_adapter_source0_endofpacket),   //          .endofpacket
		.in_data           (sram_uas_burst_adapter_source0_data),          //          .data
		.in_channel        (sram_uas_burst_adapter_source0_channel),       //          .channel
		.out_ready         (agent_pipeline_010_source0_ready),             //   source0.ready
		.out_valid         (agent_pipeline_010_source0_valid),             //          .valid
		.out_startofpacket (agent_pipeline_010_source0_startofpacket),     //          .startofpacket
		.out_endofpacket   (agent_pipeline_010_source0_endofpacket),       //          .endofpacket
		.out_data          (agent_pipeline_010_source0_data),              //          .data
		.out_channel       (agent_pipeline_010_source0_channel),           //          .channel
		.in_empty          (1'b0),                                         // (terminated)
		.out_empty         (),                                             // (terminated)
		.out_error         (),                                             // (terminated)
		.in_error          (1'b0)                                          // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (99),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (0),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_011 (
		.clk               (clk_125_clk_clk),                          //       cr0.clk
		.reset             (cpu_0_reset_reset_bridge_in_reset_reset),  // cr0_reset.reset
		.in_ready          (sram_uas_agent_rp_ready),                  //     sink0.ready
		.in_valid          (sram_uas_agent_rp_valid),                  //          .valid
		.in_startofpacket  (sram_uas_agent_rp_startofpacket),          //          .startofpacket
		.in_endofpacket    (sram_uas_agent_rp_endofpacket),            //          .endofpacket
		.in_data           (sram_uas_agent_rp_data),                   //          .data
		.out_ready         (agent_pipeline_011_source0_ready),         //   source0.ready
		.out_valid         (agent_pipeline_011_source0_valid),         //          .valid
		.out_startofpacket (agent_pipeline_011_source0_startofpacket), //          .startofpacket
		.out_endofpacket   (agent_pipeline_011_source0_endofpacket),   //          .endofpacket
		.out_data          (agent_pipeline_011_source0_data),          //          .data
		.in_empty          (1'b0),                                     // (terminated)
		.out_empty         (),                                         // (terminated)
		.out_error         (),                                         // (terminated)
		.in_error          (1'b0),                                     // (terminated)
		.out_channel       (),                                         // (terminated)
		.in_channel        (1'b0)                                      // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (117),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (10),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_012 (
		.clk               (clk_125_clk_clk),                                           //       cr0.clk
		.reset             (cpu_1_reset_reset_bridge_in_reset_reset),                   // cr0_reset.reset
		.in_ready          (cpu_1_debug_mem_slave_burst_adapter_source0_ready),         //     sink0.ready
		.in_valid          (cpu_1_debug_mem_slave_burst_adapter_source0_valid),         //          .valid
		.in_startofpacket  (cpu_1_debug_mem_slave_burst_adapter_source0_startofpacket), //          .startofpacket
		.in_endofpacket    (cpu_1_debug_mem_slave_burst_adapter_source0_endofpacket),   //          .endofpacket
		.in_data           (cpu_1_debug_mem_slave_burst_adapter_source0_data),          //          .data
		.in_channel        (cpu_1_debug_mem_slave_burst_adapter_source0_channel),       //          .channel
		.out_ready         (agent_pipeline_012_source0_ready),                          //   source0.ready
		.out_valid         (agent_pipeline_012_source0_valid),                          //          .valid
		.out_startofpacket (agent_pipeline_012_source0_startofpacket),                  //          .startofpacket
		.out_endofpacket   (agent_pipeline_012_source0_endofpacket),                    //          .endofpacket
		.out_data          (agent_pipeline_012_source0_data),                           //          .data
		.out_channel       (agent_pipeline_012_source0_channel),                        //          .channel
		.in_empty          (1'b0),                                                      // (terminated)
		.out_empty         (),                                                          // (terminated)
		.out_error         (),                                                          // (terminated)
		.in_error          (1'b0)                                                       // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (117),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (0),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_013 (
		.clk               (clk_125_clk_clk),                              //       cr0.clk
		.reset             (cpu_1_reset_reset_bridge_in_reset_reset),      // cr0_reset.reset
		.in_ready          (cpu_1_debug_mem_slave_agent_rp_ready),         //     sink0.ready
		.in_valid          (cpu_1_debug_mem_slave_agent_rp_valid),         //          .valid
		.in_startofpacket  (cpu_1_debug_mem_slave_agent_rp_startofpacket), //          .startofpacket
		.in_endofpacket    (cpu_1_debug_mem_slave_agent_rp_endofpacket),   //          .endofpacket
		.in_data           (cpu_1_debug_mem_slave_agent_rp_data),          //          .data
		.out_ready         (agent_pipeline_013_source0_ready),             //   source0.ready
		.out_valid         (agent_pipeline_013_source0_valid),             //          .valid
		.out_startofpacket (agent_pipeline_013_source0_startofpacket),     //          .startofpacket
		.out_endofpacket   (agent_pipeline_013_source0_endofpacket),       //          .endofpacket
		.out_data          (agent_pipeline_013_source0_data),              //          .data
		.in_empty          (1'b0),                                         // (terminated)
		.out_empty         (),                                             // (terminated)
		.out_error         (),                                             // (terminated)
		.in_error          (1'b0),                                         // (terminated)
		.out_channel       (),                                             // (terminated)
		.in_channel        (1'b0)                                          // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (117),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (10),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_014 (
		.clk               (clk_125_clk_clk),                                                   //       cr0.clk
		.reset             (sysid_reset_reset_bridge_in_reset_reset),                           // cr0_reset.reset
		.in_ready          (jtag_uart_1_avalon_jtag_slave_burst_adapter_source0_ready),         //     sink0.ready
		.in_valid          (jtag_uart_1_avalon_jtag_slave_burst_adapter_source0_valid),         //          .valid
		.in_startofpacket  (jtag_uart_1_avalon_jtag_slave_burst_adapter_source0_startofpacket), //          .startofpacket
		.in_endofpacket    (jtag_uart_1_avalon_jtag_slave_burst_adapter_source0_endofpacket),   //          .endofpacket
		.in_data           (jtag_uart_1_avalon_jtag_slave_burst_adapter_source0_data),          //          .data
		.in_channel        (jtag_uart_1_avalon_jtag_slave_burst_adapter_source0_channel),       //          .channel
		.out_ready         (agent_pipeline_014_source0_ready),                                  //   source0.ready
		.out_valid         (agent_pipeline_014_source0_valid),                                  //          .valid
		.out_startofpacket (agent_pipeline_014_source0_startofpacket),                          //          .startofpacket
		.out_endofpacket   (agent_pipeline_014_source0_endofpacket),                            //          .endofpacket
		.out_data          (agent_pipeline_014_source0_data),                                   //          .data
		.out_channel       (agent_pipeline_014_source0_channel),                                //          .channel
		.in_empty          (1'b0),                                                              // (terminated)
		.out_empty         (),                                                                  // (terminated)
		.out_error         (),                                                                  // (terminated)
		.in_error          (1'b0)                                                               // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (117),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (0),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_015 (
		.clk               (clk_125_clk_clk),                                      //       cr0.clk
		.reset             (sysid_reset_reset_bridge_in_reset_reset),              // cr0_reset.reset
		.in_ready          (jtag_uart_1_avalon_jtag_slave_agent_rp_ready),         //     sink0.ready
		.in_valid          (jtag_uart_1_avalon_jtag_slave_agent_rp_valid),         //          .valid
		.in_startofpacket  (jtag_uart_1_avalon_jtag_slave_agent_rp_startofpacket), //          .startofpacket
		.in_endofpacket    (jtag_uart_1_avalon_jtag_slave_agent_rp_endofpacket),   //          .endofpacket
		.in_data           (jtag_uart_1_avalon_jtag_slave_agent_rp_data),          //          .data
		.out_ready         (agent_pipeline_015_source0_ready),                     //   source0.ready
		.out_valid         (agent_pipeline_015_source0_valid),                     //          .valid
		.out_startofpacket (agent_pipeline_015_source0_startofpacket),             //          .startofpacket
		.out_endofpacket   (agent_pipeline_015_source0_endofpacket),               //          .endofpacket
		.out_data          (agent_pipeline_015_source0_data),                      //          .data
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_error          (1'b0),                                                 // (terminated)
		.out_channel       (),                                                     // (terminated)
		.in_channel        (1'b0)                                                  // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (117),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (10),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_016 (
		.clk               (clk_125_clk_clk),                          //       cr0.clk
		.reset             (sysid_reset_reset_bridge_in_reset_reset),  // cr0_reset.reset
		.in_ready          (cmd_mux_008_src_ready),                    //     sink0.ready
		.in_valid          (cmd_mux_008_src_valid),                    //          .valid
		.in_startofpacket  (cmd_mux_008_src_startofpacket),            //          .startofpacket
		.in_endofpacket    (cmd_mux_008_src_endofpacket),              //          .endofpacket
		.in_data           (cmd_mux_008_src_data),                     //          .data
		.in_channel        (cmd_mux_008_src_channel),                  //          .channel
		.out_ready         (agent_pipeline_016_source0_ready),         //   source0.ready
		.out_valid         (agent_pipeline_016_source0_valid),         //          .valid
		.out_startofpacket (agent_pipeline_016_source0_startofpacket), //          .startofpacket
		.out_endofpacket   (agent_pipeline_016_source0_endofpacket),   //          .endofpacket
		.out_data          (agent_pipeline_016_source0_data),          //          .data
		.out_channel       (agent_pipeline_016_source0_channel),       //          .channel
		.in_empty          (1'b0),                                     // (terminated)
		.out_empty         (),                                         // (terminated)
		.out_error         (),                                         // (terminated)
		.in_error          (1'b0)                                      // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (117),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (0),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_017 (
		.clk               (clk_125_clk_clk),                          //       cr0.clk
		.reset             (sysid_reset_reset_bridge_in_reset_reset),  // cr0_reset.reset
		.in_ready          (lpddr2_avl_2_agent_rp_ready),              //     sink0.ready
		.in_valid          (lpddr2_avl_2_agent_rp_valid),              //          .valid
		.in_startofpacket  (lpddr2_avl_2_agent_rp_startofpacket),      //          .startofpacket
		.in_endofpacket    (lpddr2_avl_2_agent_rp_endofpacket),        //          .endofpacket
		.in_data           (lpddr2_avl_2_agent_rp_data),               //          .data
		.out_ready         (agent_pipeline_017_source0_ready),         //   source0.ready
		.out_valid         (agent_pipeline_017_source0_valid),         //          .valid
		.out_startofpacket (agent_pipeline_017_source0_startofpacket), //          .startofpacket
		.out_endofpacket   (agent_pipeline_017_source0_endofpacket),   //          .endofpacket
		.out_data          (agent_pipeline_017_source0_data),          //          .data
		.in_empty          (1'b0),                                     // (terminated)
		.out_empty         (),                                         // (terminated)
		.out_error         (),                                         // (terminated)
		.in_error          (1'b0),                                     // (terminated)
		.out_channel       (),                                         // (terminated)
		.in_channel        (1'b0)                                      // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (117),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (10),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_018 (
		.clk               (clk_125_clk_clk),                                       //       cr0.clk
		.reset             (sysid_reset_reset_bridge_in_reset_reset),               // cr0_reset.reset
		.in_ready          (cpu_1_bridge_0_s0_burst_adapter_source0_ready),         //     sink0.ready
		.in_valid          (cpu_1_bridge_0_s0_burst_adapter_source0_valid),         //          .valid
		.in_startofpacket  (cpu_1_bridge_0_s0_burst_adapter_source0_startofpacket), //          .startofpacket
		.in_endofpacket    (cpu_1_bridge_0_s0_burst_adapter_source0_endofpacket),   //          .endofpacket
		.in_data           (cpu_1_bridge_0_s0_burst_adapter_source0_data),          //          .data
		.in_channel        (cpu_1_bridge_0_s0_burst_adapter_source0_channel),       //          .channel
		.out_ready         (agent_pipeline_018_source0_ready),                      //   source0.ready
		.out_valid         (agent_pipeline_018_source0_valid),                      //          .valid
		.out_startofpacket (agent_pipeline_018_source0_startofpacket),              //          .startofpacket
		.out_endofpacket   (agent_pipeline_018_source0_endofpacket),                //          .endofpacket
		.out_data          (agent_pipeline_018_source0_data),                       //          .data
		.out_channel       (agent_pipeline_018_source0_channel),                    //          .channel
		.in_empty          (1'b0),                                                  // (terminated)
		.out_empty         (),                                                      // (terminated)
		.out_error         (),                                                      // (terminated)
		.in_error          (1'b0)                                                   // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (117),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (0),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_019 (
		.clk               (clk_125_clk_clk),                          //       cr0.clk
		.reset             (sysid_reset_reset_bridge_in_reset_reset),  // cr0_reset.reset
		.in_ready          (cpu_1_bridge_0_s0_agent_rp_ready),         //     sink0.ready
		.in_valid          (cpu_1_bridge_0_s0_agent_rp_valid),         //          .valid
		.in_startofpacket  (cpu_1_bridge_0_s0_agent_rp_startofpacket), //          .startofpacket
		.in_endofpacket    (cpu_1_bridge_0_s0_agent_rp_endofpacket),   //          .endofpacket
		.in_data           (cpu_1_bridge_0_s0_agent_rp_data),          //          .data
		.out_ready         (agent_pipeline_019_source0_ready),         //   source0.ready
		.out_valid         (agent_pipeline_019_source0_valid),         //          .valid
		.out_startofpacket (agent_pipeline_019_source0_startofpacket), //          .startofpacket
		.out_endofpacket   (agent_pipeline_019_source0_endofpacket),   //          .endofpacket
		.out_data          (agent_pipeline_019_source0_data),          //          .data
		.in_empty          (1'b0),                                     // (terminated)
		.out_empty         (),                                         // (terminated)
		.out_error         (),                                         // (terminated)
		.in_error          (1'b0),                                     // (terminated)
		.out_channel       (),                                         // (terminated)
		.in_channel        (1'b0)                                      // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (117),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (10),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline (
		.clk               (clk_125_clk_clk),                         //       cr0.clk
		.reset             (cpu_0_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_demux_src0_ready),                    //     sink0.ready
		.in_valid          (cmd_demux_src0_valid),                    //          .valid
		.in_startofpacket  (cmd_demux_src0_startofpacket),            //          .startofpacket
		.in_endofpacket    (cmd_demux_src0_endofpacket),              //          .endofpacket
		.in_data           (cmd_demux_src0_data),                     //          .data
		.in_channel        (cmd_demux_src0_channel),                  //          .channel
		.out_ready         (mux_pipeline_source0_ready),              //   source0.ready
		.out_valid         (mux_pipeline_source0_valid),              //          .valid
		.out_startofpacket (mux_pipeline_source0_startofpacket),      //          .startofpacket
		.out_endofpacket   (mux_pipeline_source0_endofpacket),        //          .endofpacket
		.out_data          (mux_pipeline_source0_data),               //          .data
		.out_channel       (mux_pipeline_source0_channel),            //          .channel
		.in_empty          (1'b0),                                    // (terminated)
		.out_empty         (),                                        // (terminated)
		.out_error         (),                                        // (terminated)
		.in_error          (1'b0)                                     // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (117),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (10),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_001 (
		.clk               (clk_125_clk_clk),                         //       cr0.clk
		.reset             (sysid_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_demux_src1_ready),                    //     sink0.ready
		.in_valid          (cmd_demux_src1_valid),                    //          .valid
		.in_startofpacket  (cmd_demux_src1_startofpacket),            //          .startofpacket
		.in_endofpacket    (cmd_demux_src1_endofpacket),              //          .endofpacket
		.in_data           (cmd_demux_src1_data),                     //          .data
		.in_channel        (cmd_demux_src1_channel),                  //          .channel
		.out_ready         (mux_pipeline_001_source0_ready),          //   source0.ready
		.out_valid         (mux_pipeline_001_source0_valid),          //          .valid
		.out_startofpacket (mux_pipeline_001_source0_startofpacket),  //          .startofpacket
		.out_endofpacket   (mux_pipeline_001_source0_endofpacket),    //          .endofpacket
		.out_data          (mux_pipeline_001_source0_data),           //          .data
		.out_channel       (mux_pipeline_001_source0_channel),        //          .channel
		.in_empty          (1'b0),                                    // (terminated)
		.out_empty         (),                                        // (terminated)
		.out_error         (),                                        // (terminated)
		.in_error          (1'b0)                                     // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (117),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (10),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_002 (
		.clk               (clk_125_clk_clk),                         //       cr0.clk
		.reset             (sysid_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (crosser_out_ready),                       //     sink0.ready
		.in_valid          (crosser_out_valid),                       //          .valid
		.in_startofpacket  (crosser_out_startofpacket),               //          .startofpacket
		.in_endofpacket    (crosser_out_endofpacket),                 //          .endofpacket
		.in_data           (crosser_out_data),                        //          .data
		.in_channel        (crosser_out_channel),                     //          .channel
		.out_ready         (mux_pipeline_002_source0_ready),          //   source0.ready
		.out_valid         (mux_pipeline_002_source0_valid),          //          .valid
		.out_startofpacket (mux_pipeline_002_source0_startofpacket),  //          .startofpacket
		.out_endofpacket   (mux_pipeline_002_source0_endofpacket),    //          .endofpacket
		.out_data          (mux_pipeline_002_source0_data),           //          .data
		.out_channel       (mux_pipeline_002_source0_channel),        //          .channel
		.in_empty          (1'b0),                                    // (terminated)
		.out_empty         (),                                        // (terminated)
		.out_error         (),                                        // (terminated)
		.in_error          (1'b0)                                     // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (117),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (10),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_003 (
		.clk               (clk_125_clk_clk),                         //       cr0.clk
		.reset             (sysid_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_demux_src2_ready),                    //     sink0.ready
		.in_valid          (cmd_demux_src2_valid),                    //          .valid
		.in_startofpacket  (cmd_demux_src2_startofpacket),            //          .startofpacket
		.in_endofpacket    (cmd_demux_src2_endofpacket),              //          .endofpacket
		.in_data           (cmd_demux_src2_data),                     //          .data
		.in_channel        (cmd_demux_src2_channel),                  //          .channel
		.out_ready         (mux_pipeline_003_source0_ready),          //   source0.ready
		.out_valid         (mux_pipeline_003_source0_valid),          //          .valid
		.out_startofpacket (mux_pipeline_003_source0_startofpacket),  //          .startofpacket
		.out_endofpacket   (mux_pipeline_003_source0_endofpacket),    //          .endofpacket
		.out_data          (mux_pipeline_003_source0_data),           //          .data
		.out_channel       (mux_pipeline_003_source0_channel),        //          .channel
		.in_empty          (1'b0),                                    // (terminated)
		.out_empty         (),                                        // (terminated)
		.out_error         (),                                        // (terminated)
		.in_error          (1'b0)                                     // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (117),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (10),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_004 (
		.clk               (clk_125_clk_clk),                         //       cr0.clk
		.reset             (cpu_0_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_demux_src3_ready),                    //     sink0.ready
		.in_valid          (cmd_demux_src3_valid),                    //          .valid
		.in_startofpacket  (cmd_demux_src3_startofpacket),            //          .startofpacket
		.in_endofpacket    (cmd_demux_src3_endofpacket),              //          .endofpacket
		.in_data           (cmd_demux_src3_data),                     //          .data
		.in_channel        (cmd_demux_src3_channel),                  //          .channel
		.out_ready         (mux_pipeline_004_source0_ready),          //   source0.ready
		.out_valid         (mux_pipeline_004_source0_valid),          //          .valid
		.out_startofpacket (mux_pipeline_004_source0_startofpacket),  //          .startofpacket
		.out_endofpacket   (mux_pipeline_004_source0_endofpacket),    //          .endofpacket
		.out_data          (mux_pipeline_004_source0_data),           //          .data
		.out_channel       (mux_pipeline_004_source0_channel),        //          .channel
		.in_empty          (1'b0),                                    // (terminated)
		.out_empty         (),                                        // (terminated)
		.out_error         (),                                        // (terminated)
		.in_error          (1'b0)                                     // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (117),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (10),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_005 (
		.clk               (clk_125_clk_clk),                         //       cr0.clk
		.reset             (cpu_0_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_demux_002_src0_ready),                //     sink0.ready
		.in_valid          (cmd_demux_002_src0_valid),                //          .valid
		.in_startofpacket  (cmd_demux_002_src0_startofpacket),        //          .startofpacket
		.in_endofpacket    (cmd_demux_002_src0_endofpacket),          //          .endofpacket
		.in_data           (cmd_demux_002_src0_data),                 //          .data
		.in_channel        (cmd_demux_002_src0_channel),              //          .channel
		.out_ready         (mux_pipeline_005_source0_ready),          //   source0.ready
		.out_valid         (mux_pipeline_005_source0_valid),          //          .valid
		.out_startofpacket (mux_pipeline_005_source0_startofpacket),  //          .startofpacket
		.out_endofpacket   (mux_pipeline_005_source0_endofpacket),    //          .endofpacket
		.out_data          (mux_pipeline_005_source0_data),           //          .data
		.out_channel       (mux_pipeline_005_source0_channel),        //          .channel
		.in_empty          (1'b0),                                    // (terminated)
		.out_empty         (),                                        // (terminated)
		.out_error         (),                                        // (terminated)
		.in_error          (1'b0)                                     // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (117),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (10),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_006 (
		.clk               (clk_125_clk_clk),                         //       cr0.clk
		.reset             (cpu_0_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_demux_src4_ready),                    //     sink0.ready
		.in_valid          (cmd_demux_src4_valid),                    //          .valid
		.in_startofpacket  (cmd_demux_src4_startofpacket),            //          .startofpacket
		.in_endofpacket    (cmd_demux_src4_endofpacket),              //          .endofpacket
		.in_data           (cmd_demux_src4_data),                     //          .data
		.in_channel        (cmd_demux_src4_channel),                  //          .channel
		.out_ready         (mux_pipeline_006_source0_ready),          //   source0.ready
		.out_valid         (mux_pipeline_006_source0_valid),          //          .valid
		.out_startofpacket (mux_pipeline_006_source0_startofpacket),  //          .startofpacket
		.out_endofpacket   (mux_pipeline_006_source0_endofpacket),    //          .endofpacket
		.out_data          (mux_pipeline_006_source0_data),           //          .data
		.out_channel       (mux_pipeline_006_source0_channel),        //          .channel
		.in_empty          (1'b0),                                    // (terminated)
		.out_empty         (),                                        // (terminated)
		.out_error         (),                                        // (terminated)
		.in_error          (1'b0)                                     // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (117),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (10),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_007 (
		.clk               (clk_125_clk_clk),                         //       cr0.clk
		.reset             (cpu_0_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_demux_src5_ready),                    //     sink0.ready
		.in_valid          (cmd_demux_src5_valid),                    //          .valid
		.in_startofpacket  (cmd_demux_src5_startofpacket),            //          .startofpacket
		.in_endofpacket    (cmd_demux_src5_endofpacket),              //          .endofpacket
		.in_data           (cmd_demux_src5_data),                     //          .data
		.in_channel        (cmd_demux_src5_channel),                  //          .channel
		.out_ready         (mux_pipeline_007_source0_ready),          //   source0.ready
		.out_valid         (mux_pipeline_007_source0_valid),          //          .valid
		.out_startofpacket (mux_pipeline_007_source0_startofpacket),  //          .startofpacket
		.out_endofpacket   (mux_pipeline_007_source0_endofpacket),    //          .endofpacket
		.out_data          (mux_pipeline_007_source0_data),           //          .data
		.out_channel       (mux_pipeline_007_source0_channel),        //          .channel
		.in_empty          (1'b0),                                    // (terminated)
		.out_empty         (),                                        // (terminated)
		.out_error         (),                                        // (terminated)
		.in_error          (1'b0)                                     // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (117),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (10),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_008 (
		.clk               (clk_125_clk_clk),                         //       cr0.clk
		.reset             (cpu_0_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_demux_001_src0_ready),                //     sink0.ready
		.in_valid          (cmd_demux_001_src0_valid),                //          .valid
		.in_startofpacket  (cmd_demux_001_src0_startofpacket),        //          .startofpacket
		.in_endofpacket    (cmd_demux_001_src0_endofpacket),          //          .endofpacket
		.in_data           (cmd_demux_001_src0_data),                 //          .data
		.in_channel        (cmd_demux_001_src0_channel),              //          .channel
		.out_ready         (mux_pipeline_008_source0_ready),          //   source0.ready
		.out_valid         (mux_pipeline_008_source0_valid),          //          .valid
		.out_startofpacket (mux_pipeline_008_source0_startofpacket),  //          .startofpacket
		.out_endofpacket   (mux_pipeline_008_source0_endofpacket),    //          .endofpacket
		.out_data          (mux_pipeline_008_source0_data),           //          .data
		.out_channel       (mux_pipeline_008_source0_channel),        //          .channel
		.in_empty          (1'b0),                                    // (terminated)
		.out_empty         (),                                        // (terminated)
		.out_error         (),                                        // (terminated)
		.in_error          (1'b0)                                     // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (117),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (10),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_009 (
		.clk               (clk_125_clk_clk),                         //       cr0.clk
		.reset             (cpu_0_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_demux_002_src1_ready),                //     sink0.ready
		.in_valid          (cmd_demux_002_src1_valid),                //          .valid
		.in_startofpacket  (cmd_demux_002_src1_startofpacket),        //          .startofpacket
		.in_endofpacket    (cmd_demux_002_src1_endofpacket),          //          .endofpacket
		.in_data           (cmd_demux_002_src1_data),                 //          .data
		.in_channel        (cmd_demux_002_src1_channel),              //          .channel
		.out_ready         (mux_pipeline_009_source0_ready),          //   source0.ready
		.out_valid         (mux_pipeline_009_source0_valid),          //          .valid
		.out_startofpacket (mux_pipeline_009_source0_startofpacket),  //          .startofpacket
		.out_endofpacket   (mux_pipeline_009_source0_endofpacket),    //          .endofpacket
		.out_data          (mux_pipeline_009_source0_data),           //          .data
		.out_channel       (mux_pipeline_009_source0_channel),        //          .channel
		.in_empty          (1'b0),                                    // (terminated)
		.out_empty         (),                                        // (terminated)
		.out_error         (),                                        // (terminated)
		.in_error          (1'b0)                                     // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (117),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (10),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_010 (
		.clk               (clk_125_clk_clk),                         //       cr0.clk
		.reset             (cpu_0_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_demux_003_src0_ready),                //     sink0.ready
		.in_valid          (cmd_demux_003_src0_valid),                //          .valid
		.in_startofpacket  (cmd_demux_003_src0_startofpacket),        //          .startofpacket
		.in_endofpacket    (cmd_demux_003_src0_endofpacket),          //          .endofpacket
		.in_data           (cmd_demux_003_src0_data),                 //          .data
		.in_channel        (cmd_demux_003_src0_channel),              //          .channel
		.out_ready         (mux_pipeline_010_source0_ready),          //   source0.ready
		.out_valid         (mux_pipeline_010_source0_valid),          //          .valid
		.out_startofpacket (mux_pipeline_010_source0_startofpacket),  //          .startofpacket
		.out_endofpacket   (mux_pipeline_010_source0_endofpacket),    //          .endofpacket
		.out_data          (mux_pipeline_010_source0_data),           //          .data
		.out_channel       (mux_pipeline_010_source0_channel),        //          .channel
		.in_empty          (1'b0),                                    // (terminated)
		.out_empty         (),                                        // (terminated)
		.out_error         (),                                        // (terminated)
		.in_error          (1'b0)                                     // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (117),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (10),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_011 (
		.clk               (clk_125_clk_clk),                         //       cr0.clk
		.reset             (cpu_1_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_demux_001_src1_ready),                //     sink0.ready
		.in_valid          (cmd_demux_001_src1_valid),                //          .valid
		.in_startofpacket  (cmd_demux_001_src1_startofpacket),        //          .startofpacket
		.in_endofpacket    (cmd_demux_001_src1_endofpacket),          //          .endofpacket
		.in_data           (cmd_demux_001_src1_data),                 //          .data
		.in_channel        (cmd_demux_001_src1_channel),              //          .channel
		.out_ready         (mux_pipeline_011_source0_ready),          //   source0.ready
		.out_valid         (mux_pipeline_011_source0_valid),          //          .valid
		.out_startofpacket (mux_pipeline_011_source0_startofpacket),  //          .startofpacket
		.out_endofpacket   (mux_pipeline_011_source0_endofpacket),    //          .endofpacket
		.out_data          (mux_pipeline_011_source0_data),           //          .data
		.out_channel       (mux_pipeline_011_source0_channel),        //          .channel
		.in_empty          (1'b0),                                    // (terminated)
		.out_empty         (),                                        // (terminated)
		.out_error         (),                                        // (terminated)
		.in_error          (1'b0)                                     // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (117),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (10),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_012 (
		.clk               (clk_125_clk_clk),                         //       cr0.clk
		.reset             (cpu_1_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_demux_003_src1_ready),                //     sink0.ready
		.in_valid          (cmd_demux_003_src1_valid),                //          .valid
		.in_startofpacket  (cmd_demux_003_src1_startofpacket),        //          .startofpacket
		.in_endofpacket    (cmd_demux_003_src1_endofpacket),          //          .endofpacket
		.in_data           (cmd_demux_003_src1_data),                 //          .data
		.in_channel        (cmd_demux_003_src1_channel),              //          .channel
		.out_ready         (mux_pipeline_012_source0_ready),          //   source0.ready
		.out_valid         (mux_pipeline_012_source0_valid),          //          .valid
		.out_startofpacket (mux_pipeline_012_source0_startofpacket),  //          .startofpacket
		.out_endofpacket   (mux_pipeline_012_source0_endofpacket),    //          .endofpacket
		.out_data          (mux_pipeline_012_source0_data),           //          .data
		.out_channel       (mux_pipeline_012_source0_channel),        //          .channel
		.in_empty          (1'b0),                                    // (terminated)
		.out_empty         (),                                        // (terminated)
		.out_error         (),                                        // (terminated)
		.in_error          (1'b0)                                     // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (117),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (10),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_013 (
		.clk               (clk_125_clk_clk),                         //       cr0.clk
		.reset             (sysid_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_demux_001_src2_ready),                //     sink0.ready
		.in_valid          (cmd_demux_001_src2_valid),                //          .valid
		.in_startofpacket  (cmd_demux_001_src2_startofpacket),        //          .startofpacket
		.in_endofpacket    (cmd_demux_001_src2_endofpacket),          //          .endofpacket
		.in_data           (cmd_demux_001_src2_data),                 //          .data
		.in_channel        (cmd_demux_001_src2_channel),              //          .channel
		.out_ready         (mux_pipeline_013_source0_ready),          //   source0.ready
		.out_valid         (mux_pipeline_013_source0_valid),          //          .valid
		.out_startofpacket (mux_pipeline_013_source0_startofpacket),  //          .startofpacket
		.out_endofpacket   (mux_pipeline_013_source0_endofpacket),    //          .endofpacket
		.out_data          (mux_pipeline_013_source0_data),           //          .data
		.out_channel       (mux_pipeline_013_source0_channel),        //          .channel
		.in_empty          (1'b0),                                    // (terminated)
		.out_empty         (),                                        // (terminated)
		.out_error         (),                                        // (terminated)
		.in_error          (1'b0)                                     // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (117),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (10),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_014 (
		.clk               (clk_125_clk_clk),                         //       cr0.clk
		.reset             (sysid_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_demux_001_src3_ready),                //     sink0.ready
		.in_valid          (cmd_demux_001_src3_valid),                //          .valid
		.in_startofpacket  (cmd_demux_001_src3_startofpacket),        //          .startofpacket
		.in_endofpacket    (cmd_demux_001_src3_endofpacket),          //          .endofpacket
		.in_data           (cmd_demux_001_src3_data),                 //          .data
		.in_channel        (cmd_demux_001_src3_channel),              //          .channel
		.out_ready         (mux_pipeline_014_source0_ready),          //   source0.ready
		.out_valid         (mux_pipeline_014_source0_valid),          //          .valid
		.out_startofpacket (mux_pipeline_014_source0_startofpacket),  //          .startofpacket
		.out_endofpacket   (mux_pipeline_014_source0_endofpacket),    //          .endofpacket
		.out_data          (mux_pipeline_014_source0_data),           //          .data
		.out_channel       (mux_pipeline_014_source0_channel),        //          .channel
		.in_empty          (1'b0),                                    // (terminated)
		.out_empty         (),                                        // (terminated)
		.out_error         (),                                        // (terminated)
		.in_error          (1'b0)                                     // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (117),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (10),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_015 (
		.clk               (clk_125_clk_clk),                         //       cr0.clk
		.reset             (sysid_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_demux_001_src4_ready),                //     sink0.ready
		.in_valid          (cmd_demux_001_src4_valid),                //          .valid
		.in_startofpacket  (cmd_demux_001_src4_startofpacket),        //          .startofpacket
		.in_endofpacket    (cmd_demux_001_src4_endofpacket),          //          .endofpacket
		.in_data           (cmd_demux_001_src4_data),                 //          .data
		.in_channel        (cmd_demux_001_src4_channel),              //          .channel
		.out_ready         (mux_pipeline_015_source0_ready),          //   source0.ready
		.out_valid         (mux_pipeline_015_source0_valid),          //          .valid
		.out_startofpacket (mux_pipeline_015_source0_startofpacket),  //          .startofpacket
		.out_endofpacket   (mux_pipeline_015_source0_endofpacket),    //          .endofpacket
		.out_data          (mux_pipeline_015_source0_data),           //          .data
		.out_channel       (mux_pipeline_015_source0_channel),        //          .channel
		.in_empty          (1'b0),                                    // (terminated)
		.out_empty         (),                                        // (terminated)
		.out_error         (),                                        // (terminated)
		.in_error          (1'b0)                                     // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (117),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (10),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_016 (
		.clk               (clk_125_clk_clk),                         //       cr0.clk
		.reset             (cpu_0_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (rsp_demux_src0_ready),                    //     sink0.ready
		.in_valid          (rsp_demux_src0_valid),                    //          .valid
		.in_startofpacket  (rsp_demux_src0_startofpacket),            //          .startofpacket
		.in_endofpacket    (rsp_demux_src0_endofpacket),              //          .endofpacket
		.in_data           (rsp_demux_src0_data),                     //          .data
		.in_channel        (rsp_demux_src0_channel),                  //          .channel
		.out_ready         (mux_pipeline_016_source0_ready),          //   source0.ready
		.out_valid         (mux_pipeline_016_source0_valid),          //          .valid
		.out_startofpacket (mux_pipeline_016_source0_startofpacket),  //          .startofpacket
		.out_endofpacket   (mux_pipeline_016_source0_endofpacket),    //          .endofpacket
		.out_data          (mux_pipeline_016_source0_data),           //          .data
		.out_channel       (mux_pipeline_016_source0_channel),        //          .channel
		.in_empty          (1'b0),                                    // (terminated)
		.out_empty         (),                                        // (terminated)
		.out_error         (),                                        // (terminated)
		.in_error          (1'b0)                                     // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (117),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (10),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_017 (
		.clk               (clk_125_clk_clk),                         //       cr0.clk
		.reset             (cpu_0_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (rsp_demux_001_src0_ready),                //     sink0.ready
		.in_valid          (rsp_demux_001_src0_valid),                //          .valid
		.in_startofpacket  (rsp_demux_001_src0_startofpacket),        //          .startofpacket
		.in_endofpacket    (rsp_demux_001_src0_endofpacket),          //          .endofpacket
		.in_data           (rsp_demux_001_src0_data),                 //          .data
		.in_channel        (rsp_demux_001_src0_channel),              //          .channel
		.out_ready         (mux_pipeline_017_source0_ready),          //   source0.ready
		.out_valid         (mux_pipeline_017_source0_valid),          //          .valid
		.out_startofpacket (mux_pipeline_017_source0_startofpacket),  //          .startofpacket
		.out_endofpacket   (mux_pipeline_017_source0_endofpacket),    //          .endofpacket
		.out_data          (mux_pipeline_017_source0_data),           //          .data
		.out_channel       (mux_pipeline_017_source0_channel),        //          .channel
		.in_empty          (1'b0),                                    // (terminated)
		.out_empty         (),                                        // (terminated)
		.out_error         (),                                        // (terminated)
		.in_error          (1'b0)                                     // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (117),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (10),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_018 (
		.clk               (clk_125_clk_clk),                         //       cr0.clk
		.reset             (cpu_0_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (rsp_demux_002_src0_ready),                //     sink0.ready
		.in_valid          (rsp_demux_002_src0_valid),                //          .valid
		.in_startofpacket  (rsp_demux_002_src0_startofpacket),        //          .startofpacket
		.in_endofpacket    (rsp_demux_002_src0_endofpacket),          //          .endofpacket
		.in_data           (rsp_demux_002_src0_data),                 //          .data
		.in_channel        (rsp_demux_002_src0_channel),              //          .channel
		.out_ready         (mux_pipeline_018_source0_ready),          //   source0.ready
		.out_valid         (mux_pipeline_018_source0_valid),          //          .valid
		.out_startofpacket (mux_pipeline_018_source0_startofpacket),  //          .startofpacket
		.out_endofpacket   (mux_pipeline_018_source0_endofpacket),    //          .endofpacket
		.out_data          (mux_pipeline_018_source0_data),           //          .data
		.out_channel       (mux_pipeline_018_source0_channel),        //          .channel
		.in_empty          (1'b0),                                    // (terminated)
		.out_empty         (),                                        // (terminated)
		.out_error         (),                                        // (terminated)
		.in_error          (1'b0)                                     // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (117),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (10),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_019 (
		.clk               (clk_125_clk_clk),                         //       cr0.clk
		.reset             (cpu_0_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (rsp_demux_003_src0_ready),                //     sink0.ready
		.in_valid          (rsp_demux_003_src0_valid),                //          .valid
		.in_startofpacket  (rsp_demux_003_src0_startofpacket),        //          .startofpacket
		.in_endofpacket    (rsp_demux_003_src0_endofpacket),          //          .endofpacket
		.in_data           (rsp_demux_003_src0_data),                 //          .data
		.in_channel        (rsp_demux_003_src0_channel),              //          .channel
		.out_ready         (mux_pipeline_019_source0_ready),          //   source0.ready
		.out_valid         (mux_pipeline_019_source0_valid),          //          .valid
		.out_startofpacket (mux_pipeline_019_source0_startofpacket),  //          .startofpacket
		.out_endofpacket   (mux_pipeline_019_source0_endofpacket),    //          .endofpacket
		.out_data          (mux_pipeline_019_source0_data),           //          .data
		.out_channel       (mux_pipeline_019_source0_channel),        //          .channel
		.in_empty          (1'b0),                                    // (terminated)
		.out_empty         (),                                        // (terminated)
		.out_error         (),                                        // (terminated)
		.in_error          (1'b0)                                     // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (117),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (10),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_020 (
		.clk               (clk_125_clk_clk),                         //       cr0.clk
		.reset             (cpu_0_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (rsp_demux_004_src0_ready),                //     sink0.ready
		.in_valid          (rsp_demux_004_src0_valid),                //          .valid
		.in_startofpacket  (rsp_demux_004_src0_startofpacket),        //          .startofpacket
		.in_endofpacket    (rsp_demux_004_src0_endofpacket),          //          .endofpacket
		.in_data           (rsp_demux_004_src0_data),                 //          .data
		.in_channel        (rsp_demux_004_src0_channel),              //          .channel
		.out_ready         (mux_pipeline_020_source0_ready),          //   source0.ready
		.out_valid         (mux_pipeline_020_source0_valid),          //          .valid
		.out_startofpacket (mux_pipeline_020_source0_startofpacket),  //          .startofpacket
		.out_endofpacket   (mux_pipeline_020_source0_endofpacket),    //          .endofpacket
		.out_data          (mux_pipeline_020_source0_data),           //          .data
		.out_channel       (mux_pipeline_020_source0_channel),        //          .channel
		.in_empty          (1'b0),                                    // (terminated)
		.out_empty         (),                                        // (terminated)
		.out_error         (),                                        // (terminated)
		.in_error          (1'b0)                                     // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (117),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (10),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_021 (
		.clk               (clk_125_clk_clk),                         //       cr0.clk
		.reset             (cpu_0_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (rsp_demux_005_src0_ready),                //     sink0.ready
		.in_valid          (rsp_demux_005_src0_valid),                //          .valid
		.in_startofpacket  (rsp_demux_005_src0_startofpacket),        //          .startofpacket
		.in_endofpacket    (rsp_demux_005_src0_endofpacket),          //          .endofpacket
		.in_data           (rsp_demux_005_src0_data),                 //          .data
		.in_channel        (rsp_demux_005_src0_channel),              //          .channel
		.out_ready         (mux_pipeline_021_source0_ready),          //   source0.ready
		.out_valid         (mux_pipeline_021_source0_valid),          //          .valid
		.out_startofpacket (mux_pipeline_021_source0_startofpacket),  //          .startofpacket
		.out_endofpacket   (mux_pipeline_021_source0_endofpacket),    //          .endofpacket
		.out_data          (mux_pipeline_021_source0_data),           //          .data
		.out_channel       (mux_pipeline_021_source0_channel),        //          .channel
		.in_empty          (1'b0),                                    // (terminated)
		.out_empty         (),                                        // (terminated)
		.out_error         (),                                        // (terminated)
		.in_error          (1'b0)                                     // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (117),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (10),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_022 (
		.clk               (clk_125_clk_clk),                         //       cr0.clk
		.reset             (cpu_1_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (rsp_demux_005_src1_ready),                //     sink0.ready
		.in_valid          (rsp_demux_005_src1_valid),                //          .valid
		.in_startofpacket  (rsp_demux_005_src1_startofpacket),        //          .startofpacket
		.in_endofpacket    (rsp_demux_005_src1_endofpacket),          //          .endofpacket
		.in_data           (rsp_demux_005_src1_data),                 //          .data
		.in_channel        (rsp_demux_005_src1_channel),              //          .channel
		.out_ready         (mux_pipeline_022_source0_ready),          //   source0.ready
		.out_valid         (mux_pipeline_022_source0_valid),          //          .valid
		.out_startofpacket (mux_pipeline_022_source0_startofpacket),  //          .startofpacket
		.out_endofpacket   (mux_pipeline_022_source0_endofpacket),    //          .endofpacket
		.out_data          (mux_pipeline_022_source0_data),           //          .data
		.out_channel       (mux_pipeline_022_source0_channel),        //          .channel
		.in_empty          (1'b0),                                    // (terminated)
		.out_empty         (),                                        // (terminated)
		.out_error         (),                                        // (terminated)
		.in_error          (1'b0)                                     // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (117),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (10),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_023 (
		.clk               (clk_125_clk_clk),                         //       cr0.clk
		.reset             (cpu_1_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (rsp_demux_006_src0_ready),                //     sink0.ready
		.in_valid          (rsp_demux_006_src0_valid),                //          .valid
		.in_startofpacket  (rsp_demux_006_src0_startofpacket),        //          .startofpacket
		.in_endofpacket    (rsp_demux_006_src0_endofpacket),          //          .endofpacket
		.in_data           (rsp_demux_006_src0_data),                 //          .data
		.in_channel        (rsp_demux_006_src0_channel),              //          .channel
		.out_ready         (mux_pipeline_023_source0_ready),          //   source0.ready
		.out_valid         (mux_pipeline_023_source0_valid),          //          .valid
		.out_startofpacket (mux_pipeline_023_source0_startofpacket),  //          .startofpacket
		.out_endofpacket   (mux_pipeline_023_source0_endofpacket),    //          .endofpacket
		.out_data          (mux_pipeline_023_source0_data),           //          .data
		.out_channel       (mux_pipeline_023_source0_channel),        //          .channel
		.in_empty          (1'b0),                                    // (terminated)
		.out_empty         (),                                        // (terminated)
		.out_error         (),                                        // (terminated)
		.in_error          (1'b0)                                     // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (117),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (10),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_024 (
		.clk               (clk_125_clk_clk),                         //       cr0.clk
		.reset             (cpu_1_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (rsp_demux_007_src0_ready),                //     sink0.ready
		.in_valid          (rsp_demux_007_src0_valid),                //          .valid
		.in_startofpacket  (rsp_demux_007_src0_startofpacket),        //          .startofpacket
		.in_endofpacket    (rsp_demux_007_src0_endofpacket),          //          .endofpacket
		.in_data           (rsp_demux_007_src0_data),                 //          .data
		.in_channel        (rsp_demux_007_src0_channel),              //          .channel
		.out_ready         (mux_pipeline_024_source0_ready),          //   source0.ready
		.out_valid         (mux_pipeline_024_source0_valid),          //          .valid
		.out_startofpacket (mux_pipeline_024_source0_startofpacket),  //          .startofpacket
		.out_endofpacket   (mux_pipeline_024_source0_endofpacket),    //          .endofpacket
		.out_data          (mux_pipeline_024_source0_data),           //          .data
		.out_channel       (mux_pipeline_024_source0_channel),        //          .channel
		.in_empty          (1'b0),                                    // (terminated)
		.out_empty         (),                                        // (terminated)
		.out_error         (),                                        // (terminated)
		.in_error          (1'b0)                                     // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (117),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (10),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_025 (
		.clk               (clk_125_clk_clk),                         //       cr0.clk
		.reset             (cpu_1_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (rsp_demux_008_src0_ready),                //     sink0.ready
		.in_valid          (rsp_demux_008_src0_valid),                //          .valid
		.in_startofpacket  (rsp_demux_008_src0_startofpacket),        //          .startofpacket
		.in_endofpacket    (rsp_demux_008_src0_endofpacket),          //          .endofpacket
		.in_data           (rsp_demux_008_src0_data),                 //          .data
		.in_channel        (rsp_demux_008_src0_channel),              //          .channel
		.out_ready         (mux_pipeline_025_source0_ready),          //   source0.ready
		.out_valid         (mux_pipeline_025_source0_valid),          //          .valid
		.out_startofpacket (mux_pipeline_025_source0_startofpacket),  //          .startofpacket
		.out_endofpacket   (mux_pipeline_025_source0_endofpacket),    //          .endofpacket
		.out_data          (mux_pipeline_025_source0_data),           //          .data
		.out_channel       (mux_pipeline_025_source0_channel),        //          .channel
		.in_empty          (1'b0),                                    // (terminated)
		.out_empty         (),                                        // (terminated)
		.out_error         (),                                        // (terminated)
		.in_error          (1'b0)                                     // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (117),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (10),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_026 (
		.clk               (clk_125_clk_clk),                         //       cr0.clk
		.reset             (cpu_1_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (rsp_demux_009_src0_ready),                //     sink0.ready
		.in_valid          (rsp_demux_009_src0_valid),                //          .valid
		.in_startofpacket  (rsp_demux_009_src0_startofpacket),        //          .startofpacket
		.in_endofpacket    (rsp_demux_009_src0_endofpacket),          //          .endofpacket
		.in_data           (rsp_demux_009_src0_data),                 //          .data
		.in_channel        (rsp_demux_009_src0_channel),              //          .channel
		.out_ready         (mux_pipeline_026_source0_ready),          //   source0.ready
		.out_valid         (mux_pipeline_026_source0_valid),          //          .valid
		.out_startofpacket (mux_pipeline_026_source0_startofpacket),  //          .startofpacket
		.out_endofpacket   (mux_pipeline_026_source0_endofpacket),    //          .endofpacket
		.out_data          (mux_pipeline_026_source0_data),           //          .data
		.out_channel       (mux_pipeline_026_source0_channel),        //          .channel
		.in_empty          (1'b0),                                    // (terminated)
		.out_empty         (),                                        // (terminated)
		.out_error         (),                                        // (terminated)
		.in_error          (1'b0)                                     // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (117),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (10),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_027 (
		.clk               (clk_125_clk_clk),                         //       cr0.clk
		.reset             (cpu_0_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (rsp_demux_003_src1_ready),                //     sink0.ready
		.in_valid          (rsp_demux_003_src1_valid),                //          .valid
		.in_startofpacket  (rsp_demux_003_src1_startofpacket),        //          .startofpacket
		.in_endofpacket    (rsp_demux_003_src1_endofpacket),          //          .endofpacket
		.in_data           (rsp_demux_003_src1_data),                 //          .data
		.in_channel        (rsp_demux_003_src1_channel),              //          .channel
		.out_ready         (mux_pipeline_027_source0_ready),          //   source0.ready
		.out_valid         (mux_pipeline_027_source0_valid),          //          .valid
		.out_startofpacket (mux_pipeline_027_source0_startofpacket),  //          .startofpacket
		.out_endofpacket   (mux_pipeline_027_source0_endofpacket),    //          .endofpacket
		.out_data          (mux_pipeline_027_source0_data),           //          .data
		.out_channel       (mux_pipeline_027_source0_channel),        //          .channel
		.in_empty          (1'b0),                                    // (terminated)
		.out_empty         (),                                        // (terminated)
		.out_error         (),                                        // (terminated)
		.in_error          (1'b0)                                     // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (117),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (10),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_028 (
		.clk               (clk_125_clk_clk),                         //       cr0.clk
		.reset             (cpu_0_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (rsp_demux_005_src2_ready),                //     sink0.ready
		.in_valid          (rsp_demux_005_src2_valid),                //          .valid
		.in_startofpacket  (rsp_demux_005_src2_startofpacket),        //          .startofpacket
		.in_endofpacket    (rsp_demux_005_src2_endofpacket),          //          .endofpacket
		.in_data           (rsp_demux_005_src2_data),                 //          .data
		.in_channel        (rsp_demux_005_src2_channel),              //          .channel
		.out_ready         (mux_pipeline_028_source0_ready),          //   source0.ready
		.out_valid         (mux_pipeline_028_source0_valid),          //          .valid
		.out_startofpacket (mux_pipeline_028_source0_startofpacket),  //          .startofpacket
		.out_endofpacket   (mux_pipeline_028_source0_endofpacket),    //          .endofpacket
		.out_data          (mux_pipeline_028_source0_data),           //          .data
		.out_channel       (mux_pipeline_028_source0_channel),        //          .channel
		.in_empty          (1'b0),                                    // (terminated)
		.out_empty         (),                                        // (terminated)
		.out_error         (),                                        // (terminated)
		.in_error          (1'b0)                                     // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (117),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (10),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_029 (
		.clk               (clk_125_clk_clk),                         //       cr0.clk
		.reset             (cpu_1_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (rsp_demux_005_src3_ready),                //     sink0.ready
		.in_valid          (rsp_demux_005_src3_valid),                //          .valid
		.in_startofpacket  (rsp_demux_005_src3_startofpacket),        //          .startofpacket
		.in_endofpacket    (rsp_demux_005_src3_endofpacket),          //          .endofpacket
		.in_data           (rsp_demux_005_src3_data),                 //          .data
		.in_channel        (rsp_demux_005_src3_channel),              //          .channel
		.out_ready         (mux_pipeline_029_source0_ready),          //   source0.ready
		.out_valid         (mux_pipeline_029_source0_valid),          //          .valid
		.out_startofpacket (mux_pipeline_029_source0_startofpacket),  //          .startofpacket
		.out_endofpacket   (mux_pipeline_029_source0_endofpacket),    //          .endofpacket
		.out_data          (mux_pipeline_029_source0_data),           //          .data
		.out_channel       (mux_pipeline_029_source0_channel),        //          .channel
		.in_empty          (1'b0),                                    // (terminated)
		.out_empty         (),                                        // (terminated)
		.out_error         (),                                        // (terminated)
		.in_error          (1'b0)                                     // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (117),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (10),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_030 (
		.clk               (clk_125_clk_clk),                         //       cr0.clk
		.reset             (cpu_1_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (rsp_demux_006_src1_ready),                //     sink0.ready
		.in_valid          (rsp_demux_006_src1_valid),                //          .valid
		.in_startofpacket  (rsp_demux_006_src1_startofpacket),        //          .startofpacket
		.in_endofpacket    (rsp_demux_006_src1_endofpacket),          //          .endofpacket
		.in_data           (rsp_demux_006_src1_data),                 //          .data
		.in_channel        (rsp_demux_006_src1_channel),              //          .channel
		.out_ready         (mux_pipeline_030_source0_ready),          //   source0.ready
		.out_valid         (mux_pipeline_030_source0_valid),          //          .valid
		.out_startofpacket (mux_pipeline_030_source0_startofpacket),  //          .startofpacket
		.out_endofpacket   (mux_pipeline_030_source0_endofpacket),    //          .endofpacket
		.out_data          (mux_pipeline_030_source0_data),           //          .data
		.out_channel       (mux_pipeline_030_source0_channel),        //          .channel
		.in_empty          (1'b0),                                    // (terminated)
		.out_empty         (),                                        // (terminated)
		.out_error         (),                                        // (terminated)
		.in_error          (1'b0)                                     // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (117),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (10),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_031 (
		.clk               (clk_50_out_clk_clk),                        //       cr0.clk
		.reset             (sd_cont_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (crosser_001_out_ready),                     //     sink0.ready
		.in_valid          (crosser_001_out_valid),                     //          .valid
		.in_startofpacket  (crosser_001_out_startofpacket),             //          .startofpacket
		.in_endofpacket    (crosser_001_out_endofpacket),               //          .endofpacket
		.in_data           (crosser_001_out_data),                      //          .data
		.in_channel        (crosser_001_out_channel),                   //          .channel
		.out_ready         (mux_pipeline_031_source0_ready),            //   source0.ready
		.out_valid         (mux_pipeline_031_source0_valid),            //          .valid
		.out_startofpacket (mux_pipeline_031_source0_startofpacket),    //          .startofpacket
		.out_endofpacket   (mux_pipeline_031_source0_endofpacket),      //          .endofpacket
		.out_data          (mux_pipeline_031_source0_data),             //          .data
		.out_channel       (mux_pipeline_031_source0_channel),          //          .channel
		.in_empty          (1'b0),                                      // (terminated)
		.out_empty         (),                                          // (terminated)
		.out_error         (),                                          // (terminated)
		.in_error          (1'b0)                                       // (terminated)
	);

	ECE423_QSYS_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter (
		.in_clk_0_clk   (clk_125_clk_clk),                                          // in_clk_0.clk
		.in_rst_0_reset (cpu_0_reset_reset_bridge_in_reset_reset),                  // in_rst_0.reset
		.in_0_data      (jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_out_0_data),                             //    out_0.data
		.out_0_valid    (avalon_st_adapter_out_0_valid),                            //         .valid
		.out_0_ready    (avalon_st_adapter_out_0_ready),                            //         .ready
		.out_0_error    (avalon_st_adapter_out_0_error)                             //         .error
	);

	ECE423_QSYS_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_001 (
		.in_clk_0_clk   (clk_125_clk_clk),                         // in_clk_0.clk
		.in_rst_0_reset (sysid_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (lpddr2_avl_0_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (lpddr2_avl_0_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (lpddr2_avl_0_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_001_out_0_data),        //    out_0.data
		.out_0_valid    (avalon_st_adapter_001_out_0_valid),       //         .valid
		.out_0_ready    (avalon_st_adapter_001_out_0_ready),       //         .ready
		.out_0_error    (avalon_st_adapter_001_out_0_error)        //         .error
	);

	ECE423_QSYS_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_002 (
		.in_clk_0_clk   (clk_125_clk_clk),                                // in_clk_0.clk
		.in_rst_0_reset (sysid_reset_reset_bridge_in_reset_reset),        // in_rst_0.reset
		.in_0_data      (sysid_control_slave_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (sysid_control_slave_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (sysid_control_slave_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_002_out_0_data),               //    out_0.data
		.out_0_valid    (avalon_st_adapter_002_out_0_valid),              //         .valid
		.out_0_ready    (avalon_st_adapter_002_out_0_ready),              //         .ready
		.out_0_error    (avalon_st_adapter_002_out_0_error)               //         .error
	);

	ECE423_QSYS_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_003 (
		.in_clk_0_clk   (clk_125_clk_clk),                                  // in_clk_0.clk
		.in_rst_0_reset (cpu_0_reset_reset_bridge_in_reset_reset),          // in_rst_0.reset
		.in_0_data      (cpu_0_debug_mem_slave_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (cpu_0_debug_mem_slave_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (cpu_0_debug_mem_slave_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_003_out_0_data),                 //    out_0.data
		.out_0_valid    (avalon_st_adapter_003_out_0_valid),                //         .valid
		.out_0_ready    (avalon_st_adapter_003_out_0_ready),                //         .ready
		.out_0_error    (avalon_st_adapter_003_out_0_error)                 //         .error
	);

	ECE423_QSYS_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_004 (
		.in_clk_0_clk   (clk_125_clk_clk),                            // in_clk_0.clk
		.in_rst_0_reset (cpu_0_reset_reset_bridge_in_reset_reset),    // in_rst_0.reset
		.in_0_data      (cpu_0_bridge_s0_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (cpu_0_bridge_s0_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (cpu_0_bridge_s0_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_004_out_0_data),           //    out_0.data
		.out_0_valid    (avalon_st_adapter_004_out_0_valid),          //         .valid
		.out_0_ready    (avalon_st_adapter_004_out_0_ready),          //         .ready
		.out_0_error    (avalon_st_adapter_004_out_0_error)           //         .error
	);

	ECE423_QSYS_mm_interconnect_0_avalon_st_adapter_005 #(
		.inBitsPerSymbol (18),
		.inUsePackets    (0),
		.inDataWidth     (18),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (18),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_005 (
		.in_clk_0_clk   (clk_125_clk_clk),                         // in_clk_0.clk
		.in_rst_0_reset (cpu_0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (sram_uas_agent_rdata_fifo_out_data),      //     in_0.data
		.in_0_valid     (sram_uas_agent_rdata_fifo_out_valid),     //         .valid
		.in_0_ready     (sram_uas_agent_rdata_fifo_out_ready),     //         .ready
		.out_0_data     (avalon_st_adapter_005_out_0_data),        //    out_0.data
		.out_0_valid    (avalon_st_adapter_005_out_0_valid),       //         .valid
		.out_0_ready    (avalon_st_adapter_005_out_0_ready),       //         .ready
		.out_0_error    (avalon_st_adapter_005_out_0_error)        //         .error
	);

	ECE423_QSYS_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_006 (
		.in_clk_0_clk   (clk_125_clk_clk),                                  // in_clk_0.clk
		.in_rst_0_reset (cpu_1_reset_reset_bridge_in_reset_reset),          // in_rst_0.reset
		.in_0_data      (cpu_1_debug_mem_slave_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (cpu_1_debug_mem_slave_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (cpu_1_debug_mem_slave_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_006_out_0_data),                 //    out_0.data
		.out_0_valid    (avalon_st_adapter_006_out_0_valid),                //         .valid
		.out_0_ready    (avalon_st_adapter_006_out_0_ready),                //         .ready
		.out_0_error    (avalon_st_adapter_006_out_0_error)                 //         .error
	);

	ECE423_QSYS_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_007 (
		.in_clk_0_clk   (clk_125_clk_clk),                                          // in_clk_0.clk
		.in_rst_0_reset (sysid_reset_reset_bridge_in_reset_reset),                  // in_rst_0.reset
		.in_0_data      (jtag_uart_1_avalon_jtag_slave_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (jtag_uart_1_avalon_jtag_slave_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (jtag_uart_1_avalon_jtag_slave_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_007_out_0_data),                         //    out_0.data
		.out_0_valid    (avalon_st_adapter_007_out_0_valid),                        //         .valid
		.out_0_ready    (avalon_st_adapter_007_out_0_ready),                        //         .ready
		.out_0_error    (avalon_st_adapter_007_out_0_error)                         //         .error
	);

	ECE423_QSYS_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_008 (
		.in_clk_0_clk   (clk_125_clk_clk),                         // in_clk_0.clk
		.in_rst_0_reset (sysid_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (lpddr2_avl_2_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (lpddr2_avl_2_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (lpddr2_avl_2_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_008_out_0_data),        //    out_0.data
		.out_0_valid    (avalon_st_adapter_008_out_0_valid),       //         .valid
		.out_0_ready    (avalon_st_adapter_008_out_0_ready),       //         .ready
		.out_0_error    (avalon_st_adapter_008_out_0_error)        //         .error
	);

	ECE423_QSYS_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_009 (
		.in_clk_0_clk   (clk_125_clk_clk),                              // in_clk_0.clk
		.in_rst_0_reset (sysid_reset_reset_bridge_in_reset_reset),      // in_rst_0.reset
		.in_0_data      (cpu_1_bridge_0_s0_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (cpu_1_bridge_0_s0_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (cpu_1_bridge_0_s0_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_009_out_0_data),             //    out_0.data
		.out_0_valid    (avalon_st_adapter_009_out_0_valid),            //         .valid
		.out_0_ready    (avalon_st_adapter_009_out_0_ready),            //         .ready
		.out_0_error    (avalon_st_adapter_009_out_0_error)             //         .error
	);

endmodule
