// ECE423_QSYS_mm_interconnect_2.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 15.1 185

`timescale 1 ps / 1 ps
module ECE423_QSYS_mm_interconnect_2 (
		input  wire         clk_125_clk_clk,                                  //                                clk_125_clk.clk
		input  wire         cpu_1_bridge_0_reset_reset_bridge_in_reset_reset, // cpu_1_bridge_0_reset_reset_bridge_in_reset.reset
		input  wire         read_dma_cr_reset_n_reset_bridge_in_reset_reset,  //  read_dma_cr_reset_n_reset_bridge_in_reset.reset
		input  wire [6:0]   cpu_1_bridge_0_m0_address,                        //                          cpu_1_bridge_0_m0.address
		output wire         cpu_1_bridge_0_m0_waitrequest,                    //                                           .waitrequest
		input  wire [0:0]   cpu_1_bridge_0_m0_burstcount,                     //                                           .burstcount
		input  wire [3:0]   cpu_1_bridge_0_m0_byteenable,                     //                                           .byteenable
		input  wire         cpu_1_bridge_0_m0_read,                           //                                           .read
		output wire [31:0]  cpu_1_bridge_0_m0_readdata,                       //                                           .readdata
		output wire         cpu_1_bridge_0_m0_readdatavalid,                  //                                           .readdatavalid
		input  wire         cpu_1_bridge_0_m0_write,                          //                                           .write
		input  wire [31:0]  cpu_1_bridge_0_m0_writedata,                      //                                           .writedata
		input  wire         cpu_1_bridge_0_m0_debugaccess,                    //                                           .debugaccess
		output wire [1:0]   mailbox_simple_0_1_avmm_msg_receiver_address,     //       mailbox_simple_0_1_avmm_msg_receiver.address
		output wire         mailbox_simple_0_1_avmm_msg_receiver_write,       //                                           .write
		output wire         mailbox_simple_0_1_avmm_msg_receiver_read,        //                                           .read
		input  wire [31:0]  mailbox_simple_0_1_avmm_msg_receiver_readdata,    //                                           .readdata
		output wire [31:0]  mailbox_simple_0_1_avmm_msg_receiver_writedata,   //                                           .writedata
		output wire [1:0]   mailbox_simple_1_0_avmm_msg_sender_address,       //         mailbox_simple_1_0_avmm_msg_sender.address
		output wire         mailbox_simple_1_0_avmm_msg_sender_write,         //                                           .write
		output wire         mailbox_simple_1_0_avmm_msg_sender_read,          //                                           .read
		input  wire [31:0]  mailbox_simple_1_0_avmm_msg_sender_readdata,      //                                           .readdata
		output wire [31:0]  mailbox_simple_1_0_avmm_msg_sender_writedata,     //                                           .writedata
		input  wire         mailbox_simple_1_0_avmm_msg_sender_waitrequest,   //                                           .waitrequest
		output wire [2:0]   read_dma_cb_csr_address,                          //                            read_dma_cb_csr.address
		output wire         read_dma_cb_csr_write,                            //                                           .write
		output wire         read_dma_cb_csr_read,                             //                                           .read
		input  wire [31:0]  read_dma_cb_csr_readdata,                         //                                           .readdata
		output wire [31:0]  read_dma_cb_csr_writedata,                        //                                           .writedata
		output wire [3:0]   read_dma_cb_csr_byteenable,                       //                                           .byteenable
		output wire         read_dma_cb_descriptor_slave_write,               //               read_dma_cb_descriptor_slave.write
		output wire [127:0] read_dma_cb_descriptor_slave_writedata,           //                                           .writedata
		output wire [15:0]  read_dma_cb_descriptor_slave_byteenable,          //                                           .byteenable
		input  wire         read_dma_cb_descriptor_slave_waitrequest,         //                                           .waitrequest
		output wire [2:0]   read_dma_cr_csr_address,                          //                            read_dma_cr_csr.address
		output wire         read_dma_cr_csr_write,                            //                                           .write
		output wire         read_dma_cr_csr_read,                             //                                           .read
		input  wire [31:0]  read_dma_cr_csr_readdata,                         //                                           .readdata
		output wire [31:0]  read_dma_cr_csr_writedata,                        //                                           .writedata
		output wire [3:0]   read_dma_cr_csr_byteenable,                       //                                           .byteenable
		output wire         read_dma_cr_descriptor_slave_write,               //               read_dma_cr_descriptor_slave.write
		output wire [127:0] read_dma_cr_descriptor_slave_writedata,           //                                           .writedata
		output wire [15:0]  read_dma_cr_descriptor_slave_byteenable,          //                                           .byteenable
		input  wire         read_dma_cr_descriptor_slave_waitrequest          //                                           .waitrequest
	);

	wire          cpu_1_bridge_0_m0_translator_avalon_universal_master_0_waitrequest;    // cpu_1_bridge_0_m0_agent:av_waitrequest -> cpu_1_bridge_0_m0_translator:uav_waitrequest
	wire   [31:0] cpu_1_bridge_0_m0_translator_avalon_universal_master_0_readdata;       // cpu_1_bridge_0_m0_agent:av_readdata -> cpu_1_bridge_0_m0_translator:uav_readdata
	wire          cpu_1_bridge_0_m0_translator_avalon_universal_master_0_debugaccess;    // cpu_1_bridge_0_m0_translator:uav_debugaccess -> cpu_1_bridge_0_m0_agent:av_debugaccess
	wire    [6:0] cpu_1_bridge_0_m0_translator_avalon_universal_master_0_address;        // cpu_1_bridge_0_m0_translator:uav_address -> cpu_1_bridge_0_m0_agent:av_address
	wire          cpu_1_bridge_0_m0_translator_avalon_universal_master_0_read;           // cpu_1_bridge_0_m0_translator:uav_read -> cpu_1_bridge_0_m0_agent:av_read
	wire    [3:0] cpu_1_bridge_0_m0_translator_avalon_universal_master_0_byteenable;     // cpu_1_bridge_0_m0_translator:uav_byteenable -> cpu_1_bridge_0_m0_agent:av_byteenable
	wire          cpu_1_bridge_0_m0_translator_avalon_universal_master_0_readdatavalid;  // cpu_1_bridge_0_m0_agent:av_readdatavalid -> cpu_1_bridge_0_m0_translator:uav_readdatavalid
	wire          cpu_1_bridge_0_m0_translator_avalon_universal_master_0_lock;           // cpu_1_bridge_0_m0_translator:uav_lock -> cpu_1_bridge_0_m0_agent:av_lock
	wire          cpu_1_bridge_0_m0_translator_avalon_universal_master_0_write;          // cpu_1_bridge_0_m0_translator:uav_write -> cpu_1_bridge_0_m0_agent:av_write
	wire   [31:0] cpu_1_bridge_0_m0_translator_avalon_universal_master_0_writedata;      // cpu_1_bridge_0_m0_translator:uav_writedata -> cpu_1_bridge_0_m0_agent:av_writedata
	wire    [2:0] cpu_1_bridge_0_m0_translator_avalon_universal_master_0_burstcount;     // cpu_1_bridge_0_m0_translator:uav_burstcount -> cpu_1_bridge_0_m0_agent:av_burstcount
	wire   [31:0] mailbox_simple_0_1_avmm_msg_receiver_agent_m0_readdata;                // mailbox_simple_0_1_avmm_msg_receiver_translator:uav_readdata -> mailbox_simple_0_1_avmm_msg_receiver_agent:m0_readdata
	wire          mailbox_simple_0_1_avmm_msg_receiver_agent_m0_waitrequest;             // mailbox_simple_0_1_avmm_msg_receiver_translator:uav_waitrequest -> mailbox_simple_0_1_avmm_msg_receiver_agent:m0_waitrequest
	wire          mailbox_simple_0_1_avmm_msg_receiver_agent_m0_debugaccess;             // mailbox_simple_0_1_avmm_msg_receiver_agent:m0_debugaccess -> mailbox_simple_0_1_avmm_msg_receiver_translator:uav_debugaccess
	wire    [6:0] mailbox_simple_0_1_avmm_msg_receiver_agent_m0_address;                 // mailbox_simple_0_1_avmm_msg_receiver_agent:m0_address -> mailbox_simple_0_1_avmm_msg_receiver_translator:uav_address
	wire    [3:0] mailbox_simple_0_1_avmm_msg_receiver_agent_m0_byteenable;              // mailbox_simple_0_1_avmm_msg_receiver_agent:m0_byteenable -> mailbox_simple_0_1_avmm_msg_receiver_translator:uav_byteenable
	wire          mailbox_simple_0_1_avmm_msg_receiver_agent_m0_read;                    // mailbox_simple_0_1_avmm_msg_receiver_agent:m0_read -> mailbox_simple_0_1_avmm_msg_receiver_translator:uav_read
	wire          mailbox_simple_0_1_avmm_msg_receiver_agent_m0_readdatavalid;           // mailbox_simple_0_1_avmm_msg_receiver_translator:uav_readdatavalid -> mailbox_simple_0_1_avmm_msg_receiver_agent:m0_readdatavalid
	wire          mailbox_simple_0_1_avmm_msg_receiver_agent_m0_lock;                    // mailbox_simple_0_1_avmm_msg_receiver_agent:m0_lock -> mailbox_simple_0_1_avmm_msg_receiver_translator:uav_lock
	wire   [31:0] mailbox_simple_0_1_avmm_msg_receiver_agent_m0_writedata;               // mailbox_simple_0_1_avmm_msg_receiver_agent:m0_writedata -> mailbox_simple_0_1_avmm_msg_receiver_translator:uav_writedata
	wire          mailbox_simple_0_1_avmm_msg_receiver_agent_m0_write;                   // mailbox_simple_0_1_avmm_msg_receiver_agent:m0_write -> mailbox_simple_0_1_avmm_msg_receiver_translator:uav_write
	wire    [2:0] mailbox_simple_0_1_avmm_msg_receiver_agent_m0_burstcount;              // mailbox_simple_0_1_avmm_msg_receiver_agent:m0_burstcount -> mailbox_simple_0_1_avmm_msg_receiver_translator:uav_burstcount
	wire          mailbox_simple_0_1_avmm_msg_receiver_agent_rf_source_valid;            // mailbox_simple_0_1_avmm_msg_receiver_agent:rf_source_valid -> mailbox_simple_0_1_avmm_msg_receiver_agent_rsp_fifo:in_valid
	wire   [83:0] mailbox_simple_0_1_avmm_msg_receiver_agent_rf_source_data;             // mailbox_simple_0_1_avmm_msg_receiver_agent:rf_source_data -> mailbox_simple_0_1_avmm_msg_receiver_agent_rsp_fifo:in_data
	wire          mailbox_simple_0_1_avmm_msg_receiver_agent_rf_source_ready;            // mailbox_simple_0_1_avmm_msg_receiver_agent_rsp_fifo:in_ready -> mailbox_simple_0_1_avmm_msg_receiver_agent:rf_source_ready
	wire          mailbox_simple_0_1_avmm_msg_receiver_agent_rf_source_startofpacket;    // mailbox_simple_0_1_avmm_msg_receiver_agent:rf_source_startofpacket -> mailbox_simple_0_1_avmm_msg_receiver_agent_rsp_fifo:in_startofpacket
	wire          mailbox_simple_0_1_avmm_msg_receiver_agent_rf_source_endofpacket;      // mailbox_simple_0_1_avmm_msg_receiver_agent:rf_source_endofpacket -> mailbox_simple_0_1_avmm_msg_receiver_agent_rsp_fifo:in_endofpacket
	wire          mailbox_simple_0_1_avmm_msg_receiver_agent_rsp_fifo_out_valid;         // mailbox_simple_0_1_avmm_msg_receiver_agent_rsp_fifo:out_valid -> mailbox_simple_0_1_avmm_msg_receiver_agent:rf_sink_valid
	wire   [83:0] mailbox_simple_0_1_avmm_msg_receiver_agent_rsp_fifo_out_data;          // mailbox_simple_0_1_avmm_msg_receiver_agent_rsp_fifo:out_data -> mailbox_simple_0_1_avmm_msg_receiver_agent:rf_sink_data
	wire          mailbox_simple_0_1_avmm_msg_receiver_agent_rsp_fifo_out_ready;         // mailbox_simple_0_1_avmm_msg_receiver_agent:rf_sink_ready -> mailbox_simple_0_1_avmm_msg_receiver_agent_rsp_fifo:out_ready
	wire          mailbox_simple_0_1_avmm_msg_receiver_agent_rsp_fifo_out_startofpacket; // mailbox_simple_0_1_avmm_msg_receiver_agent_rsp_fifo:out_startofpacket -> mailbox_simple_0_1_avmm_msg_receiver_agent:rf_sink_startofpacket
	wire          mailbox_simple_0_1_avmm_msg_receiver_agent_rsp_fifo_out_endofpacket;   // mailbox_simple_0_1_avmm_msg_receiver_agent_rsp_fifo:out_endofpacket -> mailbox_simple_0_1_avmm_msg_receiver_agent:rf_sink_endofpacket
	wire   [31:0] mailbox_simple_1_0_avmm_msg_sender_agent_m0_readdata;                  // mailbox_simple_1_0_avmm_msg_sender_translator:uav_readdata -> mailbox_simple_1_0_avmm_msg_sender_agent:m0_readdata
	wire          mailbox_simple_1_0_avmm_msg_sender_agent_m0_waitrequest;               // mailbox_simple_1_0_avmm_msg_sender_translator:uav_waitrequest -> mailbox_simple_1_0_avmm_msg_sender_agent:m0_waitrequest
	wire          mailbox_simple_1_0_avmm_msg_sender_agent_m0_debugaccess;               // mailbox_simple_1_0_avmm_msg_sender_agent:m0_debugaccess -> mailbox_simple_1_0_avmm_msg_sender_translator:uav_debugaccess
	wire    [6:0] mailbox_simple_1_0_avmm_msg_sender_agent_m0_address;                   // mailbox_simple_1_0_avmm_msg_sender_agent:m0_address -> mailbox_simple_1_0_avmm_msg_sender_translator:uav_address
	wire    [3:0] mailbox_simple_1_0_avmm_msg_sender_agent_m0_byteenable;                // mailbox_simple_1_0_avmm_msg_sender_agent:m0_byteenable -> mailbox_simple_1_0_avmm_msg_sender_translator:uav_byteenable
	wire          mailbox_simple_1_0_avmm_msg_sender_agent_m0_read;                      // mailbox_simple_1_0_avmm_msg_sender_agent:m0_read -> mailbox_simple_1_0_avmm_msg_sender_translator:uav_read
	wire          mailbox_simple_1_0_avmm_msg_sender_agent_m0_readdatavalid;             // mailbox_simple_1_0_avmm_msg_sender_translator:uav_readdatavalid -> mailbox_simple_1_0_avmm_msg_sender_agent:m0_readdatavalid
	wire          mailbox_simple_1_0_avmm_msg_sender_agent_m0_lock;                      // mailbox_simple_1_0_avmm_msg_sender_agent:m0_lock -> mailbox_simple_1_0_avmm_msg_sender_translator:uav_lock
	wire   [31:0] mailbox_simple_1_0_avmm_msg_sender_agent_m0_writedata;                 // mailbox_simple_1_0_avmm_msg_sender_agent:m0_writedata -> mailbox_simple_1_0_avmm_msg_sender_translator:uav_writedata
	wire          mailbox_simple_1_0_avmm_msg_sender_agent_m0_write;                     // mailbox_simple_1_0_avmm_msg_sender_agent:m0_write -> mailbox_simple_1_0_avmm_msg_sender_translator:uav_write
	wire    [2:0] mailbox_simple_1_0_avmm_msg_sender_agent_m0_burstcount;                // mailbox_simple_1_0_avmm_msg_sender_agent:m0_burstcount -> mailbox_simple_1_0_avmm_msg_sender_translator:uav_burstcount
	wire          mailbox_simple_1_0_avmm_msg_sender_agent_rf_source_valid;              // mailbox_simple_1_0_avmm_msg_sender_agent:rf_source_valid -> mailbox_simple_1_0_avmm_msg_sender_agent_rsp_fifo:in_valid
	wire   [83:0] mailbox_simple_1_0_avmm_msg_sender_agent_rf_source_data;               // mailbox_simple_1_0_avmm_msg_sender_agent:rf_source_data -> mailbox_simple_1_0_avmm_msg_sender_agent_rsp_fifo:in_data
	wire          mailbox_simple_1_0_avmm_msg_sender_agent_rf_source_ready;              // mailbox_simple_1_0_avmm_msg_sender_agent_rsp_fifo:in_ready -> mailbox_simple_1_0_avmm_msg_sender_agent:rf_source_ready
	wire          mailbox_simple_1_0_avmm_msg_sender_agent_rf_source_startofpacket;      // mailbox_simple_1_0_avmm_msg_sender_agent:rf_source_startofpacket -> mailbox_simple_1_0_avmm_msg_sender_agent_rsp_fifo:in_startofpacket
	wire          mailbox_simple_1_0_avmm_msg_sender_agent_rf_source_endofpacket;        // mailbox_simple_1_0_avmm_msg_sender_agent:rf_source_endofpacket -> mailbox_simple_1_0_avmm_msg_sender_agent_rsp_fifo:in_endofpacket
	wire          mailbox_simple_1_0_avmm_msg_sender_agent_rsp_fifo_out_valid;           // mailbox_simple_1_0_avmm_msg_sender_agent_rsp_fifo:out_valid -> mailbox_simple_1_0_avmm_msg_sender_agent:rf_sink_valid
	wire   [83:0] mailbox_simple_1_0_avmm_msg_sender_agent_rsp_fifo_out_data;            // mailbox_simple_1_0_avmm_msg_sender_agent_rsp_fifo:out_data -> mailbox_simple_1_0_avmm_msg_sender_agent:rf_sink_data
	wire          mailbox_simple_1_0_avmm_msg_sender_agent_rsp_fifo_out_ready;           // mailbox_simple_1_0_avmm_msg_sender_agent:rf_sink_ready -> mailbox_simple_1_0_avmm_msg_sender_agent_rsp_fifo:out_ready
	wire          mailbox_simple_1_0_avmm_msg_sender_agent_rsp_fifo_out_startofpacket;   // mailbox_simple_1_0_avmm_msg_sender_agent_rsp_fifo:out_startofpacket -> mailbox_simple_1_0_avmm_msg_sender_agent:rf_sink_startofpacket
	wire          mailbox_simple_1_0_avmm_msg_sender_agent_rsp_fifo_out_endofpacket;     // mailbox_simple_1_0_avmm_msg_sender_agent_rsp_fifo:out_endofpacket -> mailbox_simple_1_0_avmm_msg_sender_agent:rf_sink_endofpacket
	wire   [31:0] read_dma_cr_csr_agent_m0_readdata;                                     // read_dma_cr_csr_translator:uav_readdata -> read_dma_cr_csr_agent:m0_readdata
	wire          read_dma_cr_csr_agent_m0_waitrequest;                                  // read_dma_cr_csr_translator:uav_waitrequest -> read_dma_cr_csr_agent:m0_waitrequest
	wire          read_dma_cr_csr_agent_m0_debugaccess;                                  // read_dma_cr_csr_agent:m0_debugaccess -> read_dma_cr_csr_translator:uav_debugaccess
	wire    [6:0] read_dma_cr_csr_agent_m0_address;                                      // read_dma_cr_csr_agent:m0_address -> read_dma_cr_csr_translator:uav_address
	wire    [3:0] read_dma_cr_csr_agent_m0_byteenable;                                   // read_dma_cr_csr_agent:m0_byteenable -> read_dma_cr_csr_translator:uav_byteenable
	wire          read_dma_cr_csr_agent_m0_read;                                         // read_dma_cr_csr_agent:m0_read -> read_dma_cr_csr_translator:uav_read
	wire          read_dma_cr_csr_agent_m0_readdatavalid;                                // read_dma_cr_csr_translator:uav_readdatavalid -> read_dma_cr_csr_agent:m0_readdatavalid
	wire          read_dma_cr_csr_agent_m0_lock;                                         // read_dma_cr_csr_agent:m0_lock -> read_dma_cr_csr_translator:uav_lock
	wire   [31:0] read_dma_cr_csr_agent_m0_writedata;                                    // read_dma_cr_csr_agent:m0_writedata -> read_dma_cr_csr_translator:uav_writedata
	wire          read_dma_cr_csr_agent_m0_write;                                        // read_dma_cr_csr_agent:m0_write -> read_dma_cr_csr_translator:uav_write
	wire    [2:0] read_dma_cr_csr_agent_m0_burstcount;                                   // read_dma_cr_csr_agent:m0_burstcount -> read_dma_cr_csr_translator:uav_burstcount
	wire          read_dma_cr_csr_agent_rf_source_valid;                                 // read_dma_cr_csr_agent:rf_source_valid -> read_dma_cr_csr_agent_rsp_fifo:in_valid
	wire   [83:0] read_dma_cr_csr_agent_rf_source_data;                                  // read_dma_cr_csr_agent:rf_source_data -> read_dma_cr_csr_agent_rsp_fifo:in_data
	wire          read_dma_cr_csr_agent_rf_source_ready;                                 // read_dma_cr_csr_agent_rsp_fifo:in_ready -> read_dma_cr_csr_agent:rf_source_ready
	wire          read_dma_cr_csr_agent_rf_source_startofpacket;                         // read_dma_cr_csr_agent:rf_source_startofpacket -> read_dma_cr_csr_agent_rsp_fifo:in_startofpacket
	wire          read_dma_cr_csr_agent_rf_source_endofpacket;                           // read_dma_cr_csr_agent:rf_source_endofpacket -> read_dma_cr_csr_agent_rsp_fifo:in_endofpacket
	wire          read_dma_cr_csr_agent_rsp_fifo_out_valid;                              // read_dma_cr_csr_agent_rsp_fifo:out_valid -> read_dma_cr_csr_agent:rf_sink_valid
	wire   [83:0] read_dma_cr_csr_agent_rsp_fifo_out_data;                               // read_dma_cr_csr_agent_rsp_fifo:out_data -> read_dma_cr_csr_agent:rf_sink_data
	wire          read_dma_cr_csr_agent_rsp_fifo_out_ready;                              // read_dma_cr_csr_agent:rf_sink_ready -> read_dma_cr_csr_agent_rsp_fifo:out_ready
	wire          read_dma_cr_csr_agent_rsp_fifo_out_startofpacket;                      // read_dma_cr_csr_agent_rsp_fifo:out_startofpacket -> read_dma_cr_csr_agent:rf_sink_startofpacket
	wire          read_dma_cr_csr_agent_rsp_fifo_out_endofpacket;                        // read_dma_cr_csr_agent_rsp_fifo:out_endofpacket -> read_dma_cr_csr_agent:rf_sink_endofpacket
	wire   [31:0] read_dma_cb_csr_agent_m0_readdata;                                     // read_dma_cb_csr_translator:uav_readdata -> read_dma_cb_csr_agent:m0_readdata
	wire          read_dma_cb_csr_agent_m0_waitrequest;                                  // read_dma_cb_csr_translator:uav_waitrequest -> read_dma_cb_csr_agent:m0_waitrequest
	wire          read_dma_cb_csr_agent_m0_debugaccess;                                  // read_dma_cb_csr_agent:m0_debugaccess -> read_dma_cb_csr_translator:uav_debugaccess
	wire    [6:0] read_dma_cb_csr_agent_m0_address;                                      // read_dma_cb_csr_agent:m0_address -> read_dma_cb_csr_translator:uav_address
	wire    [3:0] read_dma_cb_csr_agent_m0_byteenable;                                   // read_dma_cb_csr_agent:m0_byteenable -> read_dma_cb_csr_translator:uav_byteenable
	wire          read_dma_cb_csr_agent_m0_read;                                         // read_dma_cb_csr_agent:m0_read -> read_dma_cb_csr_translator:uav_read
	wire          read_dma_cb_csr_agent_m0_readdatavalid;                                // read_dma_cb_csr_translator:uav_readdatavalid -> read_dma_cb_csr_agent:m0_readdatavalid
	wire          read_dma_cb_csr_agent_m0_lock;                                         // read_dma_cb_csr_agent:m0_lock -> read_dma_cb_csr_translator:uav_lock
	wire   [31:0] read_dma_cb_csr_agent_m0_writedata;                                    // read_dma_cb_csr_agent:m0_writedata -> read_dma_cb_csr_translator:uav_writedata
	wire          read_dma_cb_csr_agent_m0_write;                                        // read_dma_cb_csr_agent:m0_write -> read_dma_cb_csr_translator:uav_write
	wire    [2:0] read_dma_cb_csr_agent_m0_burstcount;                                   // read_dma_cb_csr_agent:m0_burstcount -> read_dma_cb_csr_translator:uav_burstcount
	wire          read_dma_cb_csr_agent_rf_source_valid;                                 // read_dma_cb_csr_agent:rf_source_valid -> read_dma_cb_csr_agent_rsp_fifo:in_valid
	wire   [83:0] read_dma_cb_csr_agent_rf_source_data;                                  // read_dma_cb_csr_agent:rf_source_data -> read_dma_cb_csr_agent_rsp_fifo:in_data
	wire          read_dma_cb_csr_agent_rf_source_ready;                                 // read_dma_cb_csr_agent_rsp_fifo:in_ready -> read_dma_cb_csr_agent:rf_source_ready
	wire          read_dma_cb_csr_agent_rf_source_startofpacket;                         // read_dma_cb_csr_agent:rf_source_startofpacket -> read_dma_cb_csr_agent_rsp_fifo:in_startofpacket
	wire          read_dma_cb_csr_agent_rf_source_endofpacket;                           // read_dma_cb_csr_agent:rf_source_endofpacket -> read_dma_cb_csr_agent_rsp_fifo:in_endofpacket
	wire          read_dma_cb_csr_agent_rsp_fifo_out_valid;                              // read_dma_cb_csr_agent_rsp_fifo:out_valid -> read_dma_cb_csr_agent:rf_sink_valid
	wire   [83:0] read_dma_cb_csr_agent_rsp_fifo_out_data;                               // read_dma_cb_csr_agent_rsp_fifo:out_data -> read_dma_cb_csr_agent:rf_sink_data
	wire          read_dma_cb_csr_agent_rsp_fifo_out_ready;                              // read_dma_cb_csr_agent:rf_sink_ready -> read_dma_cb_csr_agent_rsp_fifo:out_ready
	wire          read_dma_cb_csr_agent_rsp_fifo_out_startofpacket;                      // read_dma_cb_csr_agent_rsp_fifo:out_startofpacket -> read_dma_cb_csr_agent:rf_sink_startofpacket
	wire          read_dma_cb_csr_agent_rsp_fifo_out_endofpacket;                        // read_dma_cb_csr_agent_rsp_fifo:out_endofpacket -> read_dma_cb_csr_agent:rf_sink_endofpacket
	wire  [127:0] read_dma_cr_descriptor_slave_agent_m0_readdata;                        // read_dma_cr_descriptor_slave_translator:uav_readdata -> read_dma_cr_descriptor_slave_agent:m0_readdata
	wire          read_dma_cr_descriptor_slave_agent_m0_waitrequest;                     // read_dma_cr_descriptor_slave_translator:uav_waitrequest -> read_dma_cr_descriptor_slave_agent:m0_waitrequest
	wire          read_dma_cr_descriptor_slave_agent_m0_debugaccess;                     // read_dma_cr_descriptor_slave_agent:m0_debugaccess -> read_dma_cr_descriptor_slave_translator:uav_debugaccess
	wire    [6:0] read_dma_cr_descriptor_slave_agent_m0_address;                         // read_dma_cr_descriptor_slave_agent:m0_address -> read_dma_cr_descriptor_slave_translator:uav_address
	wire   [15:0] read_dma_cr_descriptor_slave_agent_m0_byteenable;                      // read_dma_cr_descriptor_slave_agent:m0_byteenable -> read_dma_cr_descriptor_slave_translator:uav_byteenable
	wire          read_dma_cr_descriptor_slave_agent_m0_read;                            // read_dma_cr_descriptor_slave_agent:m0_read -> read_dma_cr_descriptor_slave_translator:uav_read
	wire          read_dma_cr_descriptor_slave_agent_m0_readdatavalid;                   // read_dma_cr_descriptor_slave_translator:uav_readdatavalid -> read_dma_cr_descriptor_slave_agent:m0_readdatavalid
	wire          read_dma_cr_descriptor_slave_agent_m0_lock;                            // read_dma_cr_descriptor_slave_agent:m0_lock -> read_dma_cr_descriptor_slave_translator:uav_lock
	wire  [127:0] read_dma_cr_descriptor_slave_agent_m0_writedata;                       // read_dma_cr_descriptor_slave_agent:m0_writedata -> read_dma_cr_descriptor_slave_translator:uav_writedata
	wire          read_dma_cr_descriptor_slave_agent_m0_write;                           // read_dma_cr_descriptor_slave_agent:m0_write -> read_dma_cr_descriptor_slave_translator:uav_write
	wire    [4:0] read_dma_cr_descriptor_slave_agent_m0_burstcount;                      // read_dma_cr_descriptor_slave_agent:m0_burstcount -> read_dma_cr_descriptor_slave_translator:uav_burstcount
	wire          read_dma_cr_descriptor_slave_agent_rf_source_valid;                    // read_dma_cr_descriptor_slave_agent:rf_source_valid -> read_dma_cr_descriptor_slave_agent_rsp_fifo:in_valid
	wire  [191:0] read_dma_cr_descriptor_slave_agent_rf_source_data;                     // read_dma_cr_descriptor_slave_agent:rf_source_data -> read_dma_cr_descriptor_slave_agent_rsp_fifo:in_data
	wire          read_dma_cr_descriptor_slave_agent_rf_source_ready;                    // read_dma_cr_descriptor_slave_agent_rsp_fifo:in_ready -> read_dma_cr_descriptor_slave_agent:rf_source_ready
	wire          read_dma_cr_descriptor_slave_agent_rf_source_startofpacket;            // read_dma_cr_descriptor_slave_agent:rf_source_startofpacket -> read_dma_cr_descriptor_slave_agent_rsp_fifo:in_startofpacket
	wire          read_dma_cr_descriptor_slave_agent_rf_source_endofpacket;              // read_dma_cr_descriptor_slave_agent:rf_source_endofpacket -> read_dma_cr_descriptor_slave_agent_rsp_fifo:in_endofpacket
	wire          read_dma_cr_descriptor_slave_agent_rsp_fifo_out_valid;                 // read_dma_cr_descriptor_slave_agent_rsp_fifo:out_valid -> read_dma_cr_descriptor_slave_agent:rf_sink_valid
	wire  [191:0] read_dma_cr_descriptor_slave_agent_rsp_fifo_out_data;                  // read_dma_cr_descriptor_slave_agent_rsp_fifo:out_data -> read_dma_cr_descriptor_slave_agent:rf_sink_data
	wire          read_dma_cr_descriptor_slave_agent_rsp_fifo_out_ready;                 // read_dma_cr_descriptor_slave_agent:rf_sink_ready -> read_dma_cr_descriptor_slave_agent_rsp_fifo:out_ready
	wire          read_dma_cr_descriptor_slave_agent_rsp_fifo_out_startofpacket;         // read_dma_cr_descriptor_slave_agent_rsp_fifo:out_startofpacket -> read_dma_cr_descriptor_slave_agent:rf_sink_startofpacket
	wire          read_dma_cr_descriptor_slave_agent_rsp_fifo_out_endofpacket;           // read_dma_cr_descriptor_slave_agent_rsp_fifo:out_endofpacket -> read_dma_cr_descriptor_slave_agent:rf_sink_endofpacket
	wire  [127:0] read_dma_cb_descriptor_slave_agent_m0_readdata;                        // read_dma_cb_descriptor_slave_translator:uav_readdata -> read_dma_cb_descriptor_slave_agent:m0_readdata
	wire          read_dma_cb_descriptor_slave_agent_m0_waitrequest;                     // read_dma_cb_descriptor_slave_translator:uav_waitrequest -> read_dma_cb_descriptor_slave_agent:m0_waitrequest
	wire          read_dma_cb_descriptor_slave_agent_m0_debugaccess;                     // read_dma_cb_descriptor_slave_agent:m0_debugaccess -> read_dma_cb_descriptor_slave_translator:uav_debugaccess
	wire    [6:0] read_dma_cb_descriptor_slave_agent_m0_address;                         // read_dma_cb_descriptor_slave_agent:m0_address -> read_dma_cb_descriptor_slave_translator:uav_address
	wire   [15:0] read_dma_cb_descriptor_slave_agent_m0_byteenable;                      // read_dma_cb_descriptor_slave_agent:m0_byteenable -> read_dma_cb_descriptor_slave_translator:uav_byteenable
	wire          read_dma_cb_descriptor_slave_agent_m0_read;                            // read_dma_cb_descriptor_slave_agent:m0_read -> read_dma_cb_descriptor_slave_translator:uav_read
	wire          read_dma_cb_descriptor_slave_agent_m0_readdatavalid;                   // read_dma_cb_descriptor_slave_translator:uav_readdatavalid -> read_dma_cb_descriptor_slave_agent:m0_readdatavalid
	wire          read_dma_cb_descriptor_slave_agent_m0_lock;                            // read_dma_cb_descriptor_slave_agent:m0_lock -> read_dma_cb_descriptor_slave_translator:uav_lock
	wire  [127:0] read_dma_cb_descriptor_slave_agent_m0_writedata;                       // read_dma_cb_descriptor_slave_agent:m0_writedata -> read_dma_cb_descriptor_slave_translator:uav_writedata
	wire          read_dma_cb_descriptor_slave_agent_m0_write;                           // read_dma_cb_descriptor_slave_agent:m0_write -> read_dma_cb_descriptor_slave_translator:uav_write
	wire    [4:0] read_dma_cb_descriptor_slave_agent_m0_burstcount;                      // read_dma_cb_descriptor_slave_agent:m0_burstcount -> read_dma_cb_descriptor_slave_translator:uav_burstcount
	wire          read_dma_cb_descriptor_slave_agent_rf_source_valid;                    // read_dma_cb_descriptor_slave_agent:rf_source_valid -> read_dma_cb_descriptor_slave_agent_rsp_fifo:in_valid
	wire  [191:0] read_dma_cb_descriptor_slave_agent_rf_source_data;                     // read_dma_cb_descriptor_slave_agent:rf_source_data -> read_dma_cb_descriptor_slave_agent_rsp_fifo:in_data
	wire          read_dma_cb_descriptor_slave_agent_rf_source_ready;                    // read_dma_cb_descriptor_slave_agent_rsp_fifo:in_ready -> read_dma_cb_descriptor_slave_agent:rf_source_ready
	wire          read_dma_cb_descriptor_slave_agent_rf_source_startofpacket;            // read_dma_cb_descriptor_slave_agent:rf_source_startofpacket -> read_dma_cb_descriptor_slave_agent_rsp_fifo:in_startofpacket
	wire          read_dma_cb_descriptor_slave_agent_rf_source_endofpacket;              // read_dma_cb_descriptor_slave_agent:rf_source_endofpacket -> read_dma_cb_descriptor_slave_agent_rsp_fifo:in_endofpacket
	wire          read_dma_cb_descriptor_slave_agent_rsp_fifo_out_valid;                 // read_dma_cb_descriptor_slave_agent_rsp_fifo:out_valid -> read_dma_cb_descriptor_slave_agent:rf_sink_valid
	wire  [191:0] read_dma_cb_descriptor_slave_agent_rsp_fifo_out_data;                  // read_dma_cb_descriptor_slave_agent_rsp_fifo:out_data -> read_dma_cb_descriptor_slave_agent:rf_sink_data
	wire          read_dma_cb_descriptor_slave_agent_rsp_fifo_out_ready;                 // read_dma_cb_descriptor_slave_agent:rf_sink_ready -> read_dma_cb_descriptor_slave_agent_rsp_fifo:out_ready
	wire          read_dma_cb_descriptor_slave_agent_rsp_fifo_out_startofpacket;         // read_dma_cb_descriptor_slave_agent_rsp_fifo:out_startofpacket -> read_dma_cb_descriptor_slave_agent:rf_sink_startofpacket
	wire          read_dma_cb_descriptor_slave_agent_rsp_fifo_out_endofpacket;           // read_dma_cb_descriptor_slave_agent_rsp_fifo:out_endofpacket -> read_dma_cb_descriptor_slave_agent:rf_sink_endofpacket
	wire          cpu_1_bridge_0_m0_agent_cp_valid;                                      // cpu_1_bridge_0_m0_agent:cp_valid -> router:sink_valid
	wire   [82:0] cpu_1_bridge_0_m0_agent_cp_data;                                       // cpu_1_bridge_0_m0_agent:cp_data -> router:sink_data
	wire          cpu_1_bridge_0_m0_agent_cp_ready;                                      // router:sink_ready -> cpu_1_bridge_0_m0_agent:cp_ready
	wire          cpu_1_bridge_0_m0_agent_cp_startofpacket;                              // cpu_1_bridge_0_m0_agent:cp_startofpacket -> router:sink_startofpacket
	wire          cpu_1_bridge_0_m0_agent_cp_endofpacket;                                // cpu_1_bridge_0_m0_agent:cp_endofpacket -> router:sink_endofpacket
	wire          router_001_src_valid;                                                  // router_001:src_valid -> rsp_demux:sink_valid
	wire   [82:0] router_001_src_data;                                                   // router_001:src_data -> rsp_demux:sink_data
	wire          router_001_src_ready;                                                  // rsp_demux:sink_ready -> router_001:src_ready
	wire    [5:0] router_001_src_channel;                                                // router_001:src_channel -> rsp_demux:sink_channel
	wire          router_001_src_startofpacket;                                          // router_001:src_startofpacket -> rsp_demux:sink_startofpacket
	wire          router_001_src_endofpacket;                                            // router_001:src_endofpacket -> rsp_demux:sink_endofpacket
	wire          router_002_src_valid;                                                  // router_002:src_valid -> rsp_demux_001:sink_valid
	wire   [82:0] router_002_src_data;                                                   // router_002:src_data -> rsp_demux_001:sink_data
	wire          router_002_src_ready;                                                  // rsp_demux_001:sink_ready -> router_002:src_ready
	wire    [5:0] router_002_src_channel;                                                // router_002:src_channel -> rsp_demux_001:sink_channel
	wire          router_002_src_startofpacket;                                          // router_002:src_startofpacket -> rsp_demux_001:sink_startofpacket
	wire          router_002_src_endofpacket;                                            // router_002:src_endofpacket -> rsp_demux_001:sink_endofpacket
	wire          router_003_src_valid;                                                  // router_003:src_valid -> rsp_demux_002:sink_valid
	wire   [82:0] router_003_src_data;                                                   // router_003:src_data -> rsp_demux_002:sink_data
	wire          router_003_src_ready;                                                  // rsp_demux_002:sink_ready -> router_003:src_ready
	wire    [5:0] router_003_src_channel;                                                // router_003:src_channel -> rsp_demux_002:sink_channel
	wire          router_003_src_startofpacket;                                          // router_003:src_startofpacket -> rsp_demux_002:sink_startofpacket
	wire          router_003_src_endofpacket;                                            // router_003:src_endofpacket -> rsp_demux_002:sink_endofpacket
	wire          router_004_src_valid;                                                  // router_004:src_valid -> rsp_demux_003:sink_valid
	wire   [82:0] router_004_src_data;                                                   // router_004:src_data -> rsp_demux_003:sink_data
	wire          router_004_src_ready;                                                  // rsp_demux_003:sink_ready -> router_004:src_ready
	wire    [5:0] router_004_src_channel;                                                // router_004:src_channel -> rsp_demux_003:sink_channel
	wire          router_004_src_startofpacket;                                          // router_004:src_startofpacket -> rsp_demux_003:sink_startofpacket
	wire          router_004_src_endofpacket;                                            // router_004:src_endofpacket -> rsp_demux_003:sink_endofpacket
	wire          router_src_valid;                                                      // router:src_valid -> cpu_1_bridge_0_m0_limiter:cmd_sink_valid
	wire   [82:0] router_src_data;                                                       // router:src_data -> cpu_1_bridge_0_m0_limiter:cmd_sink_data
	wire          router_src_ready;                                                      // cpu_1_bridge_0_m0_limiter:cmd_sink_ready -> router:src_ready
	wire    [5:0] router_src_channel;                                                    // router:src_channel -> cpu_1_bridge_0_m0_limiter:cmd_sink_channel
	wire          router_src_startofpacket;                                              // router:src_startofpacket -> cpu_1_bridge_0_m0_limiter:cmd_sink_startofpacket
	wire          router_src_endofpacket;                                                // router:src_endofpacket -> cpu_1_bridge_0_m0_limiter:cmd_sink_endofpacket
	wire          cpu_1_bridge_0_m0_limiter_rsp_src_valid;                               // cpu_1_bridge_0_m0_limiter:rsp_src_valid -> cpu_1_bridge_0_m0_agent:rp_valid
	wire   [82:0] cpu_1_bridge_0_m0_limiter_rsp_src_data;                                // cpu_1_bridge_0_m0_limiter:rsp_src_data -> cpu_1_bridge_0_m0_agent:rp_data
	wire          cpu_1_bridge_0_m0_limiter_rsp_src_ready;                               // cpu_1_bridge_0_m0_agent:rp_ready -> cpu_1_bridge_0_m0_limiter:rsp_src_ready
	wire    [5:0] cpu_1_bridge_0_m0_limiter_rsp_src_channel;                             // cpu_1_bridge_0_m0_limiter:rsp_src_channel -> cpu_1_bridge_0_m0_agent:rp_channel
	wire          cpu_1_bridge_0_m0_limiter_rsp_src_startofpacket;                       // cpu_1_bridge_0_m0_limiter:rsp_src_startofpacket -> cpu_1_bridge_0_m0_agent:rp_startofpacket
	wire          cpu_1_bridge_0_m0_limiter_rsp_src_endofpacket;                         // cpu_1_bridge_0_m0_limiter:rsp_src_endofpacket -> cpu_1_bridge_0_m0_agent:rp_endofpacket
	wire          cmd_mux_004_src_valid;                                                 // cmd_mux_004:src_valid -> read_dma_cr_descriptor_slave_cmd_width_adapter:in_valid
	wire   [82:0] cmd_mux_004_src_data;                                                  // cmd_mux_004:src_data -> read_dma_cr_descriptor_slave_cmd_width_adapter:in_data
	wire          cmd_mux_004_src_ready;                                                 // read_dma_cr_descriptor_slave_cmd_width_adapter:in_ready -> cmd_mux_004:src_ready
	wire    [5:0] cmd_mux_004_src_channel;                                               // cmd_mux_004:src_channel -> read_dma_cr_descriptor_slave_cmd_width_adapter:in_channel
	wire          cmd_mux_004_src_startofpacket;                                         // cmd_mux_004:src_startofpacket -> read_dma_cr_descriptor_slave_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_004_src_endofpacket;                                           // cmd_mux_004:src_endofpacket -> read_dma_cr_descriptor_slave_cmd_width_adapter:in_endofpacket
	wire          cmd_mux_005_src_valid;                                                 // cmd_mux_005:src_valid -> read_dma_cb_descriptor_slave_cmd_width_adapter:in_valid
	wire   [82:0] cmd_mux_005_src_data;                                                  // cmd_mux_005:src_data -> read_dma_cb_descriptor_slave_cmd_width_adapter:in_data
	wire          cmd_mux_005_src_ready;                                                 // read_dma_cb_descriptor_slave_cmd_width_adapter:in_ready -> cmd_mux_005:src_ready
	wire    [5:0] cmd_mux_005_src_channel;                                               // cmd_mux_005:src_channel -> read_dma_cb_descriptor_slave_cmd_width_adapter:in_channel
	wire          cmd_mux_005_src_startofpacket;                                         // cmd_mux_005:src_startofpacket -> read_dma_cb_descriptor_slave_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_005_src_endofpacket;                                           // cmd_mux_005:src_endofpacket -> read_dma_cb_descriptor_slave_cmd_width_adapter:in_endofpacket
	wire          router_005_src_valid;                                                  // router_005:src_valid -> read_dma_cr_descriptor_slave_rsp_width_adapter:in_valid
	wire  [190:0] router_005_src_data;                                                   // router_005:src_data -> read_dma_cr_descriptor_slave_rsp_width_adapter:in_data
	wire          router_005_src_ready;                                                  // read_dma_cr_descriptor_slave_rsp_width_adapter:in_ready -> router_005:src_ready
	wire    [5:0] router_005_src_channel;                                                // router_005:src_channel -> read_dma_cr_descriptor_slave_rsp_width_adapter:in_channel
	wire          router_005_src_startofpacket;                                          // router_005:src_startofpacket -> read_dma_cr_descriptor_slave_rsp_width_adapter:in_startofpacket
	wire          router_005_src_endofpacket;                                            // router_005:src_endofpacket -> read_dma_cr_descriptor_slave_rsp_width_adapter:in_endofpacket
	wire          read_dma_cr_descriptor_slave_rsp_width_adapter_src_valid;              // read_dma_cr_descriptor_slave_rsp_width_adapter:out_valid -> rsp_demux_004:sink_valid
	wire   [82:0] read_dma_cr_descriptor_slave_rsp_width_adapter_src_data;               // read_dma_cr_descriptor_slave_rsp_width_adapter:out_data -> rsp_demux_004:sink_data
	wire          read_dma_cr_descriptor_slave_rsp_width_adapter_src_ready;              // rsp_demux_004:sink_ready -> read_dma_cr_descriptor_slave_rsp_width_adapter:out_ready
	wire    [5:0] read_dma_cr_descriptor_slave_rsp_width_adapter_src_channel;            // read_dma_cr_descriptor_slave_rsp_width_adapter:out_channel -> rsp_demux_004:sink_channel
	wire          read_dma_cr_descriptor_slave_rsp_width_adapter_src_startofpacket;      // read_dma_cr_descriptor_slave_rsp_width_adapter:out_startofpacket -> rsp_demux_004:sink_startofpacket
	wire          read_dma_cr_descriptor_slave_rsp_width_adapter_src_endofpacket;        // read_dma_cr_descriptor_slave_rsp_width_adapter:out_endofpacket -> rsp_demux_004:sink_endofpacket
	wire          router_006_src_valid;                                                  // router_006:src_valid -> read_dma_cb_descriptor_slave_rsp_width_adapter:in_valid
	wire  [190:0] router_006_src_data;                                                   // router_006:src_data -> read_dma_cb_descriptor_slave_rsp_width_adapter:in_data
	wire          router_006_src_ready;                                                  // read_dma_cb_descriptor_slave_rsp_width_adapter:in_ready -> router_006:src_ready
	wire    [5:0] router_006_src_channel;                                                // router_006:src_channel -> read_dma_cb_descriptor_slave_rsp_width_adapter:in_channel
	wire          router_006_src_startofpacket;                                          // router_006:src_startofpacket -> read_dma_cb_descriptor_slave_rsp_width_adapter:in_startofpacket
	wire          router_006_src_endofpacket;                                            // router_006:src_endofpacket -> read_dma_cb_descriptor_slave_rsp_width_adapter:in_endofpacket
	wire          read_dma_cb_descriptor_slave_rsp_width_adapter_src_valid;              // read_dma_cb_descriptor_slave_rsp_width_adapter:out_valid -> rsp_demux_005:sink_valid
	wire   [82:0] read_dma_cb_descriptor_slave_rsp_width_adapter_src_data;               // read_dma_cb_descriptor_slave_rsp_width_adapter:out_data -> rsp_demux_005:sink_data
	wire          read_dma_cb_descriptor_slave_rsp_width_adapter_src_ready;              // rsp_demux_005:sink_ready -> read_dma_cb_descriptor_slave_rsp_width_adapter:out_ready
	wire    [5:0] read_dma_cb_descriptor_slave_rsp_width_adapter_src_channel;            // read_dma_cb_descriptor_slave_rsp_width_adapter:out_channel -> rsp_demux_005:sink_channel
	wire          read_dma_cb_descriptor_slave_rsp_width_adapter_src_startofpacket;      // read_dma_cb_descriptor_slave_rsp_width_adapter:out_startofpacket -> rsp_demux_005:sink_startofpacket
	wire          read_dma_cb_descriptor_slave_rsp_width_adapter_src_endofpacket;        // read_dma_cb_descriptor_slave_rsp_width_adapter:out_endofpacket -> rsp_demux_005:sink_endofpacket
	wire    [0:0] cpu_1_bridge_0_m0_limiter_cmd_src_valid;                               // cpu_1_bridge_0_m0_limiter:cmd_src_valid -> limiter_pipeline:in_valid
	wire   [82:0] cpu_1_bridge_0_m0_limiter_cmd_src_data;                                // cpu_1_bridge_0_m0_limiter:cmd_src_data -> limiter_pipeline:in_data
	wire          cpu_1_bridge_0_m0_limiter_cmd_src_ready;                               // limiter_pipeline:in_ready -> cpu_1_bridge_0_m0_limiter:cmd_src_ready
	wire    [5:0] cpu_1_bridge_0_m0_limiter_cmd_src_channel;                             // cpu_1_bridge_0_m0_limiter:cmd_src_channel -> limiter_pipeline:in_channel
	wire          cpu_1_bridge_0_m0_limiter_cmd_src_startofpacket;                       // cpu_1_bridge_0_m0_limiter:cmd_src_startofpacket -> limiter_pipeline:in_startofpacket
	wire          cpu_1_bridge_0_m0_limiter_cmd_src_endofpacket;                         // cpu_1_bridge_0_m0_limiter:cmd_src_endofpacket -> limiter_pipeline:in_endofpacket
	wire          limiter_pipeline_source0_valid;                                        // limiter_pipeline:out_valid -> cmd_demux:sink_valid
	wire   [82:0] limiter_pipeline_source0_data;                                         // limiter_pipeline:out_data -> cmd_demux:sink_data
	wire          limiter_pipeline_source0_ready;                                        // cmd_demux:sink_ready -> limiter_pipeline:out_ready
	wire    [5:0] limiter_pipeline_source0_channel;                                      // limiter_pipeline:out_channel -> cmd_demux:sink_channel
	wire          limiter_pipeline_source0_startofpacket;                                // limiter_pipeline:out_startofpacket -> cmd_demux:sink_startofpacket
	wire          limiter_pipeline_source0_endofpacket;                                  // limiter_pipeline:out_endofpacket -> cmd_demux:sink_endofpacket
	wire          rsp_mux_src_valid;                                                     // rsp_mux:src_valid -> limiter_pipeline_001:in_valid
	wire   [82:0] rsp_mux_src_data;                                                      // rsp_mux:src_data -> limiter_pipeline_001:in_data
	wire          rsp_mux_src_ready;                                                     // limiter_pipeline_001:in_ready -> rsp_mux:src_ready
	wire    [5:0] rsp_mux_src_channel;                                                   // rsp_mux:src_channel -> limiter_pipeline_001:in_channel
	wire          rsp_mux_src_startofpacket;                                             // rsp_mux:src_startofpacket -> limiter_pipeline_001:in_startofpacket
	wire          rsp_mux_src_endofpacket;                                               // rsp_mux:src_endofpacket -> limiter_pipeline_001:in_endofpacket
	wire          limiter_pipeline_001_source0_valid;                                    // limiter_pipeline_001:out_valid -> cpu_1_bridge_0_m0_limiter:rsp_sink_valid
	wire   [82:0] limiter_pipeline_001_source0_data;                                     // limiter_pipeline_001:out_data -> cpu_1_bridge_0_m0_limiter:rsp_sink_data
	wire          limiter_pipeline_001_source0_ready;                                    // cpu_1_bridge_0_m0_limiter:rsp_sink_ready -> limiter_pipeline_001:out_ready
	wire    [5:0] limiter_pipeline_001_source0_channel;                                  // limiter_pipeline_001:out_channel -> cpu_1_bridge_0_m0_limiter:rsp_sink_channel
	wire          limiter_pipeline_001_source0_startofpacket;                            // limiter_pipeline_001:out_startofpacket -> cpu_1_bridge_0_m0_limiter:rsp_sink_startofpacket
	wire          limiter_pipeline_001_source0_endofpacket;                              // limiter_pipeline_001:out_endofpacket -> cpu_1_bridge_0_m0_limiter:rsp_sink_endofpacket
	wire          cmd_mux_src_valid;                                                     // cmd_mux:src_valid -> agent_pipeline:in_valid
	wire   [82:0] cmd_mux_src_data;                                                      // cmd_mux:src_data -> agent_pipeline:in_data
	wire          cmd_mux_src_ready;                                                     // agent_pipeline:in_ready -> cmd_mux:src_ready
	wire    [5:0] cmd_mux_src_channel;                                                   // cmd_mux:src_channel -> agent_pipeline:in_channel
	wire          cmd_mux_src_startofpacket;                                             // cmd_mux:src_startofpacket -> agent_pipeline:in_startofpacket
	wire          cmd_mux_src_endofpacket;                                               // cmd_mux:src_endofpacket -> agent_pipeline:in_endofpacket
	wire          agent_pipeline_source0_valid;                                          // agent_pipeline:out_valid -> mailbox_simple_0_1_avmm_msg_receiver_agent:cp_valid
	wire   [82:0] agent_pipeline_source0_data;                                           // agent_pipeline:out_data -> mailbox_simple_0_1_avmm_msg_receiver_agent:cp_data
	wire          agent_pipeline_source0_ready;                                          // mailbox_simple_0_1_avmm_msg_receiver_agent:cp_ready -> agent_pipeline:out_ready
	wire    [5:0] agent_pipeline_source0_channel;                                        // agent_pipeline:out_channel -> mailbox_simple_0_1_avmm_msg_receiver_agent:cp_channel
	wire          agent_pipeline_source0_startofpacket;                                  // agent_pipeline:out_startofpacket -> mailbox_simple_0_1_avmm_msg_receiver_agent:cp_startofpacket
	wire          agent_pipeline_source0_endofpacket;                                    // agent_pipeline:out_endofpacket -> mailbox_simple_0_1_avmm_msg_receiver_agent:cp_endofpacket
	wire          mailbox_simple_0_1_avmm_msg_receiver_agent_rp_valid;                   // mailbox_simple_0_1_avmm_msg_receiver_agent:rp_valid -> agent_pipeline_001:in_valid
	wire   [82:0] mailbox_simple_0_1_avmm_msg_receiver_agent_rp_data;                    // mailbox_simple_0_1_avmm_msg_receiver_agent:rp_data -> agent_pipeline_001:in_data
	wire          mailbox_simple_0_1_avmm_msg_receiver_agent_rp_ready;                   // agent_pipeline_001:in_ready -> mailbox_simple_0_1_avmm_msg_receiver_agent:rp_ready
	wire          mailbox_simple_0_1_avmm_msg_receiver_agent_rp_startofpacket;           // mailbox_simple_0_1_avmm_msg_receiver_agent:rp_startofpacket -> agent_pipeline_001:in_startofpacket
	wire          mailbox_simple_0_1_avmm_msg_receiver_agent_rp_endofpacket;             // mailbox_simple_0_1_avmm_msg_receiver_agent:rp_endofpacket -> agent_pipeline_001:in_endofpacket
	wire          agent_pipeline_001_source0_valid;                                      // agent_pipeline_001:out_valid -> router_001:sink_valid
	wire   [82:0] agent_pipeline_001_source0_data;                                       // agent_pipeline_001:out_data -> router_001:sink_data
	wire          agent_pipeline_001_source0_ready;                                      // router_001:sink_ready -> agent_pipeline_001:out_ready
	wire          agent_pipeline_001_source0_startofpacket;                              // agent_pipeline_001:out_startofpacket -> router_001:sink_startofpacket
	wire          agent_pipeline_001_source0_endofpacket;                                // agent_pipeline_001:out_endofpacket -> router_001:sink_endofpacket
	wire          cmd_mux_001_src_valid;                                                 // cmd_mux_001:src_valid -> agent_pipeline_002:in_valid
	wire   [82:0] cmd_mux_001_src_data;                                                  // cmd_mux_001:src_data -> agent_pipeline_002:in_data
	wire          cmd_mux_001_src_ready;                                                 // agent_pipeline_002:in_ready -> cmd_mux_001:src_ready
	wire    [5:0] cmd_mux_001_src_channel;                                               // cmd_mux_001:src_channel -> agent_pipeline_002:in_channel
	wire          cmd_mux_001_src_startofpacket;                                         // cmd_mux_001:src_startofpacket -> agent_pipeline_002:in_startofpacket
	wire          cmd_mux_001_src_endofpacket;                                           // cmd_mux_001:src_endofpacket -> agent_pipeline_002:in_endofpacket
	wire          agent_pipeline_002_source0_valid;                                      // agent_pipeline_002:out_valid -> mailbox_simple_1_0_avmm_msg_sender_agent:cp_valid
	wire   [82:0] agent_pipeline_002_source0_data;                                       // agent_pipeline_002:out_data -> mailbox_simple_1_0_avmm_msg_sender_agent:cp_data
	wire          agent_pipeline_002_source0_ready;                                      // mailbox_simple_1_0_avmm_msg_sender_agent:cp_ready -> agent_pipeline_002:out_ready
	wire    [5:0] agent_pipeline_002_source0_channel;                                    // agent_pipeline_002:out_channel -> mailbox_simple_1_0_avmm_msg_sender_agent:cp_channel
	wire          agent_pipeline_002_source0_startofpacket;                              // agent_pipeline_002:out_startofpacket -> mailbox_simple_1_0_avmm_msg_sender_agent:cp_startofpacket
	wire          agent_pipeline_002_source0_endofpacket;                                // agent_pipeline_002:out_endofpacket -> mailbox_simple_1_0_avmm_msg_sender_agent:cp_endofpacket
	wire          mailbox_simple_1_0_avmm_msg_sender_agent_rp_valid;                     // mailbox_simple_1_0_avmm_msg_sender_agent:rp_valid -> agent_pipeline_003:in_valid
	wire   [82:0] mailbox_simple_1_0_avmm_msg_sender_agent_rp_data;                      // mailbox_simple_1_0_avmm_msg_sender_agent:rp_data -> agent_pipeline_003:in_data
	wire          mailbox_simple_1_0_avmm_msg_sender_agent_rp_ready;                     // agent_pipeline_003:in_ready -> mailbox_simple_1_0_avmm_msg_sender_agent:rp_ready
	wire          mailbox_simple_1_0_avmm_msg_sender_agent_rp_startofpacket;             // mailbox_simple_1_0_avmm_msg_sender_agent:rp_startofpacket -> agent_pipeline_003:in_startofpacket
	wire          mailbox_simple_1_0_avmm_msg_sender_agent_rp_endofpacket;               // mailbox_simple_1_0_avmm_msg_sender_agent:rp_endofpacket -> agent_pipeline_003:in_endofpacket
	wire          agent_pipeline_003_source0_valid;                                      // agent_pipeline_003:out_valid -> router_002:sink_valid
	wire   [82:0] agent_pipeline_003_source0_data;                                       // agent_pipeline_003:out_data -> router_002:sink_data
	wire          agent_pipeline_003_source0_ready;                                      // router_002:sink_ready -> agent_pipeline_003:out_ready
	wire          agent_pipeline_003_source0_startofpacket;                              // agent_pipeline_003:out_startofpacket -> router_002:sink_startofpacket
	wire          agent_pipeline_003_source0_endofpacket;                                // agent_pipeline_003:out_endofpacket -> router_002:sink_endofpacket
	wire          cmd_mux_002_src_valid;                                                 // cmd_mux_002:src_valid -> agent_pipeline_004:in_valid
	wire   [82:0] cmd_mux_002_src_data;                                                  // cmd_mux_002:src_data -> agent_pipeline_004:in_data
	wire          cmd_mux_002_src_ready;                                                 // agent_pipeline_004:in_ready -> cmd_mux_002:src_ready
	wire    [5:0] cmd_mux_002_src_channel;                                               // cmd_mux_002:src_channel -> agent_pipeline_004:in_channel
	wire          cmd_mux_002_src_startofpacket;                                         // cmd_mux_002:src_startofpacket -> agent_pipeline_004:in_startofpacket
	wire          cmd_mux_002_src_endofpacket;                                           // cmd_mux_002:src_endofpacket -> agent_pipeline_004:in_endofpacket
	wire          agent_pipeline_004_source0_valid;                                      // agent_pipeline_004:out_valid -> read_dma_cr_csr_agent:cp_valid
	wire   [82:0] agent_pipeline_004_source0_data;                                       // agent_pipeline_004:out_data -> read_dma_cr_csr_agent:cp_data
	wire          agent_pipeline_004_source0_ready;                                      // read_dma_cr_csr_agent:cp_ready -> agent_pipeline_004:out_ready
	wire    [5:0] agent_pipeline_004_source0_channel;                                    // agent_pipeline_004:out_channel -> read_dma_cr_csr_agent:cp_channel
	wire          agent_pipeline_004_source0_startofpacket;                              // agent_pipeline_004:out_startofpacket -> read_dma_cr_csr_agent:cp_startofpacket
	wire          agent_pipeline_004_source0_endofpacket;                                // agent_pipeline_004:out_endofpacket -> read_dma_cr_csr_agent:cp_endofpacket
	wire          read_dma_cr_csr_agent_rp_valid;                                        // read_dma_cr_csr_agent:rp_valid -> agent_pipeline_005:in_valid
	wire   [82:0] read_dma_cr_csr_agent_rp_data;                                         // read_dma_cr_csr_agent:rp_data -> agent_pipeline_005:in_data
	wire          read_dma_cr_csr_agent_rp_ready;                                        // agent_pipeline_005:in_ready -> read_dma_cr_csr_agent:rp_ready
	wire          read_dma_cr_csr_agent_rp_startofpacket;                                // read_dma_cr_csr_agent:rp_startofpacket -> agent_pipeline_005:in_startofpacket
	wire          read_dma_cr_csr_agent_rp_endofpacket;                                  // read_dma_cr_csr_agent:rp_endofpacket -> agent_pipeline_005:in_endofpacket
	wire          agent_pipeline_005_source0_valid;                                      // agent_pipeline_005:out_valid -> router_003:sink_valid
	wire   [82:0] agent_pipeline_005_source0_data;                                       // agent_pipeline_005:out_data -> router_003:sink_data
	wire          agent_pipeline_005_source0_ready;                                      // router_003:sink_ready -> agent_pipeline_005:out_ready
	wire          agent_pipeline_005_source0_startofpacket;                              // agent_pipeline_005:out_startofpacket -> router_003:sink_startofpacket
	wire          agent_pipeline_005_source0_endofpacket;                                // agent_pipeline_005:out_endofpacket -> router_003:sink_endofpacket
	wire          cmd_mux_003_src_valid;                                                 // cmd_mux_003:src_valid -> agent_pipeline_006:in_valid
	wire   [82:0] cmd_mux_003_src_data;                                                  // cmd_mux_003:src_data -> agent_pipeline_006:in_data
	wire          cmd_mux_003_src_ready;                                                 // agent_pipeline_006:in_ready -> cmd_mux_003:src_ready
	wire    [5:0] cmd_mux_003_src_channel;                                               // cmd_mux_003:src_channel -> agent_pipeline_006:in_channel
	wire          cmd_mux_003_src_startofpacket;                                         // cmd_mux_003:src_startofpacket -> agent_pipeline_006:in_startofpacket
	wire          cmd_mux_003_src_endofpacket;                                           // cmd_mux_003:src_endofpacket -> agent_pipeline_006:in_endofpacket
	wire          agent_pipeline_006_source0_valid;                                      // agent_pipeline_006:out_valid -> read_dma_cb_csr_agent:cp_valid
	wire   [82:0] agent_pipeline_006_source0_data;                                       // agent_pipeline_006:out_data -> read_dma_cb_csr_agent:cp_data
	wire          agent_pipeline_006_source0_ready;                                      // read_dma_cb_csr_agent:cp_ready -> agent_pipeline_006:out_ready
	wire    [5:0] agent_pipeline_006_source0_channel;                                    // agent_pipeline_006:out_channel -> read_dma_cb_csr_agent:cp_channel
	wire          agent_pipeline_006_source0_startofpacket;                              // agent_pipeline_006:out_startofpacket -> read_dma_cb_csr_agent:cp_startofpacket
	wire          agent_pipeline_006_source0_endofpacket;                                // agent_pipeline_006:out_endofpacket -> read_dma_cb_csr_agent:cp_endofpacket
	wire          read_dma_cb_csr_agent_rp_valid;                                        // read_dma_cb_csr_agent:rp_valid -> agent_pipeline_007:in_valid
	wire   [82:0] read_dma_cb_csr_agent_rp_data;                                         // read_dma_cb_csr_agent:rp_data -> agent_pipeline_007:in_data
	wire          read_dma_cb_csr_agent_rp_ready;                                        // agent_pipeline_007:in_ready -> read_dma_cb_csr_agent:rp_ready
	wire          read_dma_cb_csr_agent_rp_startofpacket;                                // read_dma_cb_csr_agent:rp_startofpacket -> agent_pipeline_007:in_startofpacket
	wire          read_dma_cb_csr_agent_rp_endofpacket;                                  // read_dma_cb_csr_agent:rp_endofpacket -> agent_pipeline_007:in_endofpacket
	wire          agent_pipeline_007_source0_valid;                                      // agent_pipeline_007:out_valid -> router_004:sink_valid
	wire   [82:0] agent_pipeline_007_source0_data;                                       // agent_pipeline_007:out_data -> router_004:sink_data
	wire          agent_pipeline_007_source0_ready;                                      // router_004:sink_ready -> agent_pipeline_007:out_ready
	wire          agent_pipeline_007_source0_startofpacket;                              // agent_pipeline_007:out_startofpacket -> router_004:sink_startofpacket
	wire          agent_pipeline_007_source0_endofpacket;                                // agent_pipeline_007:out_endofpacket -> router_004:sink_endofpacket
	wire          read_dma_cr_descriptor_slave_cmd_width_adapter_src_valid;              // read_dma_cr_descriptor_slave_cmd_width_adapter:out_valid -> agent_pipeline_008:in_valid
	wire  [190:0] read_dma_cr_descriptor_slave_cmd_width_adapter_src_data;               // read_dma_cr_descriptor_slave_cmd_width_adapter:out_data -> agent_pipeline_008:in_data
	wire          read_dma_cr_descriptor_slave_cmd_width_adapter_src_ready;              // agent_pipeline_008:in_ready -> read_dma_cr_descriptor_slave_cmd_width_adapter:out_ready
	wire    [5:0] read_dma_cr_descriptor_slave_cmd_width_adapter_src_channel;            // read_dma_cr_descriptor_slave_cmd_width_adapter:out_channel -> agent_pipeline_008:in_channel
	wire          read_dma_cr_descriptor_slave_cmd_width_adapter_src_startofpacket;      // read_dma_cr_descriptor_slave_cmd_width_adapter:out_startofpacket -> agent_pipeline_008:in_startofpacket
	wire          read_dma_cr_descriptor_slave_cmd_width_adapter_src_endofpacket;        // read_dma_cr_descriptor_slave_cmd_width_adapter:out_endofpacket -> agent_pipeline_008:in_endofpacket
	wire          agent_pipeline_008_source0_valid;                                      // agent_pipeline_008:out_valid -> read_dma_cr_descriptor_slave_agent:cp_valid
	wire  [190:0] agent_pipeline_008_source0_data;                                       // agent_pipeline_008:out_data -> read_dma_cr_descriptor_slave_agent:cp_data
	wire          agent_pipeline_008_source0_ready;                                      // read_dma_cr_descriptor_slave_agent:cp_ready -> agent_pipeline_008:out_ready
	wire    [5:0] agent_pipeline_008_source0_channel;                                    // agent_pipeline_008:out_channel -> read_dma_cr_descriptor_slave_agent:cp_channel
	wire          agent_pipeline_008_source0_startofpacket;                              // agent_pipeline_008:out_startofpacket -> read_dma_cr_descriptor_slave_agent:cp_startofpacket
	wire          agent_pipeline_008_source0_endofpacket;                                // agent_pipeline_008:out_endofpacket -> read_dma_cr_descriptor_slave_agent:cp_endofpacket
	wire          read_dma_cr_descriptor_slave_agent_rp_valid;                           // read_dma_cr_descriptor_slave_agent:rp_valid -> agent_pipeline_009:in_valid
	wire  [190:0] read_dma_cr_descriptor_slave_agent_rp_data;                            // read_dma_cr_descriptor_slave_agent:rp_data -> agent_pipeline_009:in_data
	wire          read_dma_cr_descriptor_slave_agent_rp_ready;                           // agent_pipeline_009:in_ready -> read_dma_cr_descriptor_slave_agent:rp_ready
	wire          read_dma_cr_descriptor_slave_agent_rp_startofpacket;                   // read_dma_cr_descriptor_slave_agent:rp_startofpacket -> agent_pipeline_009:in_startofpacket
	wire          read_dma_cr_descriptor_slave_agent_rp_endofpacket;                     // read_dma_cr_descriptor_slave_agent:rp_endofpacket -> agent_pipeline_009:in_endofpacket
	wire          agent_pipeline_009_source0_valid;                                      // agent_pipeline_009:out_valid -> router_005:sink_valid
	wire  [190:0] agent_pipeline_009_source0_data;                                       // agent_pipeline_009:out_data -> router_005:sink_data
	wire          agent_pipeline_009_source0_ready;                                      // router_005:sink_ready -> agent_pipeline_009:out_ready
	wire          agent_pipeline_009_source0_startofpacket;                              // agent_pipeline_009:out_startofpacket -> router_005:sink_startofpacket
	wire          agent_pipeline_009_source0_endofpacket;                                // agent_pipeline_009:out_endofpacket -> router_005:sink_endofpacket
	wire          read_dma_cb_descriptor_slave_cmd_width_adapter_src_valid;              // read_dma_cb_descriptor_slave_cmd_width_adapter:out_valid -> agent_pipeline_010:in_valid
	wire  [190:0] read_dma_cb_descriptor_slave_cmd_width_adapter_src_data;               // read_dma_cb_descriptor_slave_cmd_width_adapter:out_data -> agent_pipeline_010:in_data
	wire          read_dma_cb_descriptor_slave_cmd_width_adapter_src_ready;              // agent_pipeline_010:in_ready -> read_dma_cb_descriptor_slave_cmd_width_adapter:out_ready
	wire    [5:0] read_dma_cb_descriptor_slave_cmd_width_adapter_src_channel;            // read_dma_cb_descriptor_slave_cmd_width_adapter:out_channel -> agent_pipeline_010:in_channel
	wire          read_dma_cb_descriptor_slave_cmd_width_adapter_src_startofpacket;      // read_dma_cb_descriptor_slave_cmd_width_adapter:out_startofpacket -> agent_pipeline_010:in_startofpacket
	wire          read_dma_cb_descriptor_slave_cmd_width_adapter_src_endofpacket;        // read_dma_cb_descriptor_slave_cmd_width_adapter:out_endofpacket -> agent_pipeline_010:in_endofpacket
	wire          agent_pipeline_010_source0_valid;                                      // agent_pipeline_010:out_valid -> read_dma_cb_descriptor_slave_agent:cp_valid
	wire  [190:0] agent_pipeline_010_source0_data;                                       // agent_pipeline_010:out_data -> read_dma_cb_descriptor_slave_agent:cp_data
	wire          agent_pipeline_010_source0_ready;                                      // read_dma_cb_descriptor_slave_agent:cp_ready -> agent_pipeline_010:out_ready
	wire    [5:0] agent_pipeline_010_source0_channel;                                    // agent_pipeline_010:out_channel -> read_dma_cb_descriptor_slave_agent:cp_channel
	wire          agent_pipeline_010_source0_startofpacket;                              // agent_pipeline_010:out_startofpacket -> read_dma_cb_descriptor_slave_agent:cp_startofpacket
	wire          agent_pipeline_010_source0_endofpacket;                                // agent_pipeline_010:out_endofpacket -> read_dma_cb_descriptor_slave_agent:cp_endofpacket
	wire          read_dma_cb_descriptor_slave_agent_rp_valid;                           // read_dma_cb_descriptor_slave_agent:rp_valid -> agent_pipeline_011:in_valid
	wire  [190:0] read_dma_cb_descriptor_slave_agent_rp_data;                            // read_dma_cb_descriptor_slave_agent:rp_data -> agent_pipeline_011:in_data
	wire          read_dma_cb_descriptor_slave_agent_rp_ready;                           // agent_pipeline_011:in_ready -> read_dma_cb_descriptor_slave_agent:rp_ready
	wire          read_dma_cb_descriptor_slave_agent_rp_startofpacket;                   // read_dma_cb_descriptor_slave_agent:rp_startofpacket -> agent_pipeline_011:in_startofpacket
	wire          read_dma_cb_descriptor_slave_agent_rp_endofpacket;                     // read_dma_cb_descriptor_slave_agent:rp_endofpacket -> agent_pipeline_011:in_endofpacket
	wire          agent_pipeline_011_source0_valid;                                      // agent_pipeline_011:out_valid -> router_006:sink_valid
	wire  [190:0] agent_pipeline_011_source0_data;                                       // agent_pipeline_011:out_data -> router_006:sink_data
	wire          agent_pipeline_011_source0_ready;                                      // router_006:sink_ready -> agent_pipeline_011:out_ready
	wire          agent_pipeline_011_source0_startofpacket;                              // agent_pipeline_011:out_startofpacket -> router_006:sink_startofpacket
	wire          agent_pipeline_011_source0_endofpacket;                                // agent_pipeline_011:out_endofpacket -> router_006:sink_endofpacket
	wire          cmd_demux_src0_valid;                                                  // cmd_demux:src0_valid -> mux_pipeline:in_valid
	wire   [82:0] cmd_demux_src0_data;                                                   // cmd_demux:src0_data -> mux_pipeline:in_data
	wire          cmd_demux_src0_ready;                                                  // mux_pipeline:in_ready -> cmd_demux:src0_ready
	wire    [5:0] cmd_demux_src0_channel;                                                // cmd_demux:src0_channel -> mux_pipeline:in_channel
	wire          cmd_demux_src0_startofpacket;                                          // cmd_demux:src0_startofpacket -> mux_pipeline:in_startofpacket
	wire          cmd_demux_src0_endofpacket;                                            // cmd_demux:src0_endofpacket -> mux_pipeline:in_endofpacket
	wire          mux_pipeline_source0_valid;                                            // mux_pipeline:out_valid -> cmd_mux:sink0_valid
	wire   [82:0] mux_pipeline_source0_data;                                             // mux_pipeline:out_data -> cmd_mux:sink0_data
	wire          mux_pipeline_source0_ready;                                            // cmd_mux:sink0_ready -> mux_pipeline:out_ready
	wire    [5:0] mux_pipeline_source0_channel;                                          // mux_pipeline:out_channel -> cmd_mux:sink0_channel
	wire          mux_pipeline_source0_startofpacket;                                    // mux_pipeline:out_startofpacket -> cmd_mux:sink0_startofpacket
	wire          mux_pipeline_source0_endofpacket;                                      // mux_pipeline:out_endofpacket -> cmd_mux:sink0_endofpacket
	wire          cmd_demux_src1_valid;                                                  // cmd_demux:src1_valid -> mux_pipeline_001:in_valid
	wire   [82:0] cmd_demux_src1_data;                                                   // cmd_demux:src1_data -> mux_pipeline_001:in_data
	wire          cmd_demux_src1_ready;                                                  // mux_pipeline_001:in_ready -> cmd_demux:src1_ready
	wire    [5:0] cmd_demux_src1_channel;                                                // cmd_demux:src1_channel -> mux_pipeline_001:in_channel
	wire          cmd_demux_src1_startofpacket;                                          // cmd_demux:src1_startofpacket -> mux_pipeline_001:in_startofpacket
	wire          cmd_demux_src1_endofpacket;                                            // cmd_demux:src1_endofpacket -> mux_pipeline_001:in_endofpacket
	wire          mux_pipeline_001_source0_valid;                                        // mux_pipeline_001:out_valid -> cmd_mux_001:sink0_valid
	wire   [82:0] mux_pipeline_001_source0_data;                                         // mux_pipeline_001:out_data -> cmd_mux_001:sink0_data
	wire          mux_pipeline_001_source0_ready;                                        // cmd_mux_001:sink0_ready -> mux_pipeline_001:out_ready
	wire    [5:0] mux_pipeline_001_source0_channel;                                      // mux_pipeline_001:out_channel -> cmd_mux_001:sink0_channel
	wire          mux_pipeline_001_source0_startofpacket;                                // mux_pipeline_001:out_startofpacket -> cmd_mux_001:sink0_startofpacket
	wire          mux_pipeline_001_source0_endofpacket;                                  // mux_pipeline_001:out_endofpacket -> cmd_mux_001:sink0_endofpacket
	wire          cmd_demux_src2_valid;                                                  // cmd_demux:src2_valid -> mux_pipeline_002:in_valid
	wire   [82:0] cmd_demux_src2_data;                                                   // cmd_demux:src2_data -> mux_pipeline_002:in_data
	wire          cmd_demux_src2_ready;                                                  // mux_pipeline_002:in_ready -> cmd_demux:src2_ready
	wire    [5:0] cmd_demux_src2_channel;                                                // cmd_demux:src2_channel -> mux_pipeline_002:in_channel
	wire          cmd_demux_src2_startofpacket;                                          // cmd_demux:src2_startofpacket -> mux_pipeline_002:in_startofpacket
	wire          cmd_demux_src2_endofpacket;                                            // cmd_demux:src2_endofpacket -> mux_pipeline_002:in_endofpacket
	wire          mux_pipeline_002_source0_valid;                                        // mux_pipeline_002:out_valid -> cmd_mux_002:sink0_valid
	wire   [82:0] mux_pipeline_002_source0_data;                                         // mux_pipeline_002:out_data -> cmd_mux_002:sink0_data
	wire          mux_pipeline_002_source0_ready;                                        // cmd_mux_002:sink0_ready -> mux_pipeline_002:out_ready
	wire    [5:0] mux_pipeline_002_source0_channel;                                      // mux_pipeline_002:out_channel -> cmd_mux_002:sink0_channel
	wire          mux_pipeline_002_source0_startofpacket;                                // mux_pipeline_002:out_startofpacket -> cmd_mux_002:sink0_startofpacket
	wire          mux_pipeline_002_source0_endofpacket;                                  // mux_pipeline_002:out_endofpacket -> cmd_mux_002:sink0_endofpacket
	wire          cmd_demux_src3_valid;                                                  // cmd_demux:src3_valid -> mux_pipeline_003:in_valid
	wire   [82:0] cmd_demux_src3_data;                                                   // cmd_demux:src3_data -> mux_pipeline_003:in_data
	wire          cmd_demux_src3_ready;                                                  // mux_pipeline_003:in_ready -> cmd_demux:src3_ready
	wire    [5:0] cmd_demux_src3_channel;                                                // cmd_demux:src3_channel -> mux_pipeline_003:in_channel
	wire          cmd_demux_src3_startofpacket;                                          // cmd_demux:src3_startofpacket -> mux_pipeline_003:in_startofpacket
	wire          cmd_demux_src3_endofpacket;                                            // cmd_demux:src3_endofpacket -> mux_pipeline_003:in_endofpacket
	wire          mux_pipeline_003_source0_valid;                                        // mux_pipeline_003:out_valid -> cmd_mux_003:sink0_valid
	wire   [82:0] mux_pipeline_003_source0_data;                                         // mux_pipeline_003:out_data -> cmd_mux_003:sink0_data
	wire          mux_pipeline_003_source0_ready;                                        // cmd_mux_003:sink0_ready -> mux_pipeline_003:out_ready
	wire    [5:0] mux_pipeline_003_source0_channel;                                      // mux_pipeline_003:out_channel -> cmd_mux_003:sink0_channel
	wire          mux_pipeline_003_source0_startofpacket;                                // mux_pipeline_003:out_startofpacket -> cmd_mux_003:sink0_startofpacket
	wire          mux_pipeline_003_source0_endofpacket;                                  // mux_pipeline_003:out_endofpacket -> cmd_mux_003:sink0_endofpacket
	wire          cmd_demux_src4_valid;                                                  // cmd_demux:src4_valid -> mux_pipeline_004:in_valid
	wire   [82:0] cmd_demux_src4_data;                                                   // cmd_demux:src4_data -> mux_pipeline_004:in_data
	wire          cmd_demux_src4_ready;                                                  // mux_pipeline_004:in_ready -> cmd_demux:src4_ready
	wire    [5:0] cmd_demux_src4_channel;                                                // cmd_demux:src4_channel -> mux_pipeline_004:in_channel
	wire          cmd_demux_src4_startofpacket;                                          // cmd_demux:src4_startofpacket -> mux_pipeline_004:in_startofpacket
	wire          cmd_demux_src4_endofpacket;                                            // cmd_demux:src4_endofpacket -> mux_pipeline_004:in_endofpacket
	wire          mux_pipeline_004_source0_valid;                                        // mux_pipeline_004:out_valid -> cmd_mux_004:sink0_valid
	wire   [82:0] mux_pipeline_004_source0_data;                                         // mux_pipeline_004:out_data -> cmd_mux_004:sink0_data
	wire          mux_pipeline_004_source0_ready;                                        // cmd_mux_004:sink0_ready -> mux_pipeline_004:out_ready
	wire    [5:0] mux_pipeline_004_source0_channel;                                      // mux_pipeline_004:out_channel -> cmd_mux_004:sink0_channel
	wire          mux_pipeline_004_source0_startofpacket;                                // mux_pipeline_004:out_startofpacket -> cmd_mux_004:sink0_startofpacket
	wire          mux_pipeline_004_source0_endofpacket;                                  // mux_pipeline_004:out_endofpacket -> cmd_mux_004:sink0_endofpacket
	wire          cmd_demux_src5_valid;                                                  // cmd_demux:src5_valid -> mux_pipeline_005:in_valid
	wire   [82:0] cmd_demux_src5_data;                                                   // cmd_demux:src5_data -> mux_pipeline_005:in_data
	wire          cmd_demux_src5_ready;                                                  // mux_pipeline_005:in_ready -> cmd_demux:src5_ready
	wire    [5:0] cmd_demux_src5_channel;                                                // cmd_demux:src5_channel -> mux_pipeline_005:in_channel
	wire          cmd_demux_src5_startofpacket;                                          // cmd_demux:src5_startofpacket -> mux_pipeline_005:in_startofpacket
	wire          cmd_demux_src5_endofpacket;                                            // cmd_demux:src5_endofpacket -> mux_pipeline_005:in_endofpacket
	wire          mux_pipeline_005_source0_valid;                                        // mux_pipeline_005:out_valid -> cmd_mux_005:sink0_valid
	wire   [82:0] mux_pipeline_005_source0_data;                                         // mux_pipeline_005:out_data -> cmd_mux_005:sink0_data
	wire          mux_pipeline_005_source0_ready;                                        // cmd_mux_005:sink0_ready -> mux_pipeline_005:out_ready
	wire    [5:0] mux_pipeline_005_source0_channel;                                      // mux_pipeline_005:out_channel -> cmd_mux_005:sink0_channel
	wire          mux_pipeline_005_source0_startofpacket;                                // mux_pipeline_005:out_startofpacket -> cmd_mux_005:sink0_startofpacket
	wire          mux_pipeline_005_source0_endofpacket;                                  // mux_pipeline_005:out_endofpacket -> cmd_mux_005:sink0_endofpacket
	wire          rsp_demux_src0_valid;                                                  // rsp_demux:src0_valid -> mux_pipeline_006:in_valid
	wire   [82:0] rsp_demux_src0_data;                                                   // rsp_demux:src0_data -> mux_pipeline_006:in_data
	wire          rsp_demux_src0_ready;                                                  // mux_pipeline_006:in_ready -> rsp_demux:src0_ready
	wire    [5:0] rsp_demux_src0_channel;                                                // rsp_demux:src0_channel -> mux_pipeline_006:in_channel
	wire          rsp_demux_src0_startofpacket;                                          // rsp_demux:src0_startofpacket -> mux_pipeline_006:in_startofpacket
	wire          rsp_demux_src0_endofpacket;                                            // rsp_demux:src0_endofpacket -> mux_pipeline_006:in_endofpacket
	wire          mux_pipeline_006_source0_valid;                                        // mux_pipeline_006:out_valid -> rsp_mux:sink0_valid
	wire   [82:0] mux_pipeline_006_source0_data;                                         // mux_pipeline_006:out_data -> rsp_mux:sink0_data
	wire          mux_pipeline_006_source0_ready;                                        // rsp_mux:sink0_ready -> mux_pipeline_006:out_ready
	wire    [5:0] mux_pipeline_006_source0_channel;                                      // mux_pipeline_006:out_channel -> rsp_mux:sink0_channel
	wire          mux_pipeline_006_source0_startofpacket;                                // mux_pipeline_006:out_startofpacket -> rsp_mux:sink0_startofpacket
	wire          mux_pipeline_006_source0_endofpacket;                                  // mux_pipeline_006:out_endofpacket -> rsp_mux:sink0_endofpacket
	wire          rsp_demux_001_src0_valid;                                              // rsp_demux_001:src0_valid -> mux_pipeline_007:in_valid
	wire   [82:0] rsp_demux_001_src0_data;                                               // rsp_demux_001:src0_data -> mux_pipeline_007:in_data
	wire          rsp_demux_001_src0_ready;                                              // mux_pipeline_007:in_ready -> rsp_demux_001:src0_ready
	wire    [5:0] rsp_demux_001_src0_channel;                                            // rsp_demux_001:src0_channel -> mux_pipeline_007:in_channel
	wire          rsp_demux_001_src0_startofpacket;                                      // rsp_demux_001:src0_startofpacket -> mux_pipeline_007:in_startofpacket
	wire          rsp_demux_001_src0_endofpacket;                                        // rsp_demux_001:src0_endofpacket -> mux_pipeline_007:in_endofpacket
	wire          mux_pipeline_007_source0_valid;                                        // mux_pipeline_007:out_valid -> rsp_mux:sink1_valid
	wire   [82:0] mux_pipeline_007_source0_data;                                         // mux_pipeline_007:out_data -> rsp_mux:sink1_data
	wire          mux_pipeline_007_source0_ready;                                        // rsp_mux:sink1_ready -> mux_pipeline_007:out_ready
	wire    [5:0] mux_pipeline_007_source0_channel;                                      // mux_pipeline_007:out_channel -> rsp_mux:sink1_channel
	wire          mux_pipeline_007_source0_startofpacket;                                // mux_pipeline_007:out_startofpacket -> rsp_mux:sink1_startofpacket
	wire          mux_pipeline_007_source0_endofpacket;                                  // mux_pipeline_007:out_endofpacket -> rsp_mux:sink1_endofpacket
	wire          rsp_demux_002_src0_valid;                                              // rsp_demux_002:src0_valid -> mux_pipeline_008:in_valid
	wire   [82:0] rsp_demux_002_src0_data;                                               // rsp_demux_002:src0_data -> mux_pipeline_008:in_data
	wire          rsp_demux_002_src0_ready;                                              // mux_pipeline_008:in_ready -> rsp_demux_002:src0_ready
	wire    [5:0] rsp_demux_002_src0_channel;                                            // rsp_demux_002:src0_channel -> mux_pipeline_008:in_channel
	wire          rsp_demux_002_src0_startofpacket;                                      // rsp_demux_002:src0_startofpacket -> mux_pipeline_008:in_startofpacket
	wire          rsp_demux_002_src0_endofpacket;                                        // rsp_demux_002:src0_endofpacket -> mux_pipeline_008:in_endofpacket
	wire          mux_pipeline_008_source0_valid;                                        // mux_pipeline_008:out_valid -> rsp_mux:sink2_valid
	wire   [82:0] mux_pipeline_008_source0_data;                                         // mux_pipeline_008:out_data -> rsp_mux:sink2_data
	wire          mux_pipeline_008_source0_ready;                                        // rsp_mux:sink2_ready -> mux_pipeline_008:out_ready
	wire    [5:0] mux_pipeline_008_source0_channel;                                      // mux_pipeline_008:out_channel -> rsp_mux:sink2_channel
	wire          mux_pipeline_008_source0_startofpacket;                                // mux_pipeline_008:out_startofpacket -> rsp_mux:sink2_startofpacket
	wire          mux_pipeline_008_source0_endofpacket;                                  // mux_pipeline_008:out_endofpacket -> rsp_mux:sink2_endofpacket
	wire          rsp_demux_003_src0_valid;                                              // rsp_demux_003:src0_valid -> mux_pipeline_009:in_valid
	wire   [82:0] rsp_demux_003_src0_data;                                               // rsp_demux_003:src0_data -> mux_pipeline_009:in_data
	wire          rsp_demux_003_src0_ready;                                              // mux_pipeline_009:in_ready -> rsp_demux_003:src0_ready
	wire    [5:0] rsp_demux_003_src0_channel;                                            // rsp_demux_003:src0_channel -> mux_pipeline_009:in_channel
	wire          rsp_demux_003_src0_startofpacket;                                      // rsp_demux_003:src0_startofpacket -> mux_pipeline_009:in_startofpacket
	wire          rsp_demux_003_src0_endofpacket;                                        // rsp_demux_003:src0_endofpacket -> mux_pipeline_009:in_endofpacket
	wire          mux_pipeline_009_source0_valid;                                        // mux_pipeline_009:out_valid -> rsp_mux:sink3_valid
	wire   [82:0] mux_pipeline_009_source0_data;                                         // mux_pipeline_009:out_data -> rsp_mux:sink3_data
	wire          mux_pipeline_009_source0_ready;                                        // rsp_mux:sink3_ready -> mux_pipeline_009:out_ready
	wire    [5:0] mux_pipeline_009_source0_channel;                                      // mux_pipeline_009:out_channel -> rsp_mux:sink3_channel
	wire          mux_pipeline_009_source0_startofpacket;                                // mux_pipeline_009:out_startofpacket -> rsp_mux:sink3_startofpacket
	wire          mux_pipeline_009_source0_endofpacket;                                  // mux_pipeline_009:out_endofpacket -> rsp_mux:sink3_endofpacket
	wire          rsp_demux_004_src0_valid;                                              // rsp_demux_004:src0_valid -> mux_pipeline_010:in_valid
	wire   [82:0] rsp_demux_004_src0_data;                                               // rsp_demux_004:src0_data -> mux_pipeline_010:in_data
	wire          rsp_demux_004_src0_ready;                                              // mux_pipeline_010:in_ready -> rsp_demux_004:src0_ready
	wire    [5:0] rsp_demux_004_src0_channel;                                            // rsp_demux_004:src0_channel -> mux_pipeline_010:in_channel
	wire          rsp_demux_004_src0_startofpacket;                                      // rsp_demux_004:src0_startofpacket -> mux_pipeline_010:in_startofpacket
	wire          rsp_demux_004_src0_endofpacket;                                        // rsp_demux_004:src0_endofpacket -> mux_pipeline_010:in_endofpacket
	wire          mux_pipeline_010_source0_valid;                                        // mux_pipeline_010:out_valid -> rsp_mux:sink4_valid
	wire   [82:0] mux_pipeline_010_source0_data;                                         // mux_pipeline_010:out_data -> rsp_mux:sink4_data
	wire          mux_pipeline_010_source0_ready;                                        // rsp_mux:sink4_ready -> mux_pipeline_010:out_ready
	wire    [5:0] mux_pipeline_010_source0_channel;                                      // mux_pipeline_010:out_channel -> rsp_mux:sink4_channel
	wire          mux_pipeline_010_source0_startofpacket;                                // mux_pipeline_010:out_startofpacket -> rsp_mux:sink4_startofpacket
	wire          mux_pipeline_010_source0_endofpacket;                                  // mux_pipeline_010:out_endofpacket -> rsp_mux:sink4_endofpacket
	wire          rsp_demux_005_src0_valid;                                              // rsp_demux_005:src0_valid -> mux_pipeline_011:in_valid
	wire   [82:0] rsp_demux_005_src0_data;                                               // rsp_demux_005:src0_data -> mux_pipeline_011:in_data
	wire          rsp_demux_005_src0_ready;                                              // mux_pipeline_011:in_ready -> rsp_demux_005:src0_ready
	wire    [5:0] rsp_demux_005_src0_channel;                                            // rsp_demux_005:src0_channel -> mux_pipeline_011:in_channel
	wire          rsp_demux_005_src0_startofpacket;                                      // rsp_demux_005:src0_startofpacket -> mux_pipeline_011:in_startofpacket
	wire          rsp_demux_005_src0_endofpacket;                                        // rsp_demux_005:src0_endofpacket -> mux_pipeline_011:in_endofpacket
	wire          mux_pipeline_011_source0_valid;                                        // mux_pipeline_011:out_valid -> rsp_mux:sink5_valid
	wire   [82:0] mux_pipeline_011_source0_data;                                         // mux_pipeline_011:out_data -> rsp_mux:sink5_data
	wire          mux_pipeline_011_source0_ready;                                        // rsp_mux:sink5_ready -> mux_pipeline_011:out_ready
	wire    [5:0] mux_pipeline_011_source0_channel;                                      // mux_pipeline_011:out_channel -> rsp_mux:sink5_channel
	wire          mux_pipeline_011_source0_startofpacket;                                // mux_pipeline_011:out_startofpacket -> rsp_mux:sink5_startofpacket
	wire          mux_pipeline_011_source0_endofpacket;                                  // mux_pipeline_011:out_endofpacket -> rsp_mux:sink5_endofpacket
	wire          mailbox_simple_0_1_avmm_msg_receiver_agent_rdata_fifo_src_valid;       // mailbox_simple_0_1_avmm_msg_receiver_agent:rdata_fifo_src_valid -> avalon_st_adapter:in_0_valid
	wire   [33:0] mailbox_simple_0_1_avmm_msg_receiver_agent_rdata_fifo_src_data;        // mailbox_simple_0_1_avmm_msg_receiver_agent:rdata_fifo_src_data -> avalon_st_adapter:in_0_data
	wire          mailbox_simple_0_1_avmm_msg_receiver_agent_rdata_fifo_src_ready;       // avalon_st_adapter:in_0_ready -> mailbox_simple_0_1_avmm_msg_receiver_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_out_0_valid;                                         // avalon_st_adapter:out_0_valid -> mailbox_simple_0_1_avmm_msg_receiver_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_out_0_data;                                          // avalon_st_adapter:out_0_data -> mailbox_simple_0_1_avmm_msg_receiver_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_out_0_ready;                                         // mailbox_simple_0_1_avmm_msg_receiver_agent:rdata_fifo_sink_ready -> avalon_st_adapter:out_0_ready
	wire    [0:0] avalon_st_adapter_out_0_error;                                         // avalon_st_adapter:out_0_error -> mailbox_simple_0_1_avmm_msg_receiver_agent:rdata_fifo_sink_error
	wire          mailbox_simple_1_0_avmm_msg_sender_agent_rdata_fifo_src_valid;         // mailbox_simple_1_0_avmm_msg_sender_agent:rdata_fifo_src_valid -> avalon_st_adapter_001:in_0_valid
	wire   [33:0] mailbox_simple_1_0_avmm_msg_sender_agent_rdata_fifo_src_data;          // mailbox_simple_1_0_avmm_msg_sender_agent:rdata_fifo_src_data -> avalon_st_adapter_001:in_0_data
	wire          mailbox_simple_1_0_avmm_msg_sender_agent_rdata_fifo_src_ready;         // avalon_st_adapter_001:in_0_ready -> mailbox_simple_1_0_avmm_msg_sender_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_001_out_0_valid;                                     // avalon_st_adapter_001:out_0_valid -> mailbox_simple_1_0_avmm_msg_sender_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_001_out_0_data;                                      // avalon_st_adapter_001:out_0_data -> mailbox_simple_1_0_avmm_msg_sender_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_001_out_0_ready;                                     // mailbox_simple_1_0_avmm_msg_sender_agent:rdata_fifo_sink_ready -> avalon_st_adapter_001:out_0_ready
	wire    [0:0] avalon_st_adapter_001_out_0_error;                                     // avalon_st_adapter_001:out_0_error -> mailbox_simple_1_0_avmm_msg_sender_agent:rdata_fifo_sink_error
	wire          read_dma_cr_csr_agent_rdata_fifo_src_valid;                            // read_dma_cr_csr_agent:rdata_fifo_src_valid -> avalon_st_adapter_002:in_0_valid
	wire   [33:0] read_dma_cr_csr_agent_rdata_fifo_src_data;                             // read_dma_cr_csr_agent:rdata_fifo_src_data -> avalon_st_adapter_002:in_0_data
	wire          read_dma_cr_csr_agent_rdata_fifo_src_ready;                            // avalon_st_adapter_002:in_0_ready -> read_dma_cr_csr_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_002_out_0_valid;                                     // avalon_st_adapter_002:out_0_valid -> read_dma_cr_csr_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_002_out_0_data;                                      // avalon_st_adapter_002:out_0_data -> read_dma_cr_csr_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_002_out_0_ready;                                     // read_dma_cr_csr_agent:rdata_fifo_sink_ready -> avalon_st_adapter_002:out_0_ready
	wire    [0:0] avalon_st_adapter_002_out_0_error;                                     // avalon_st_adapter_002:out_0_error -> read_dma_cr_csr_agent:rdata_fifo_sink_error
	wire          read_dma_cb_csr_agent_rdata_fifo_src_valid;                            // read_dma_cb_csr_agent:rdata_fifo_src_valid -> avalon_st_adapter_003:in_0_valid
	wire   [33:0] read_dma_cb_csr_agent_rdata_fifo_src_data;                             // read_dma_cb_csr_agent:rdata_fifo_src_data -> avalon_st_adapter_003:in_0_data
	wire          read_dma_cb_csr_agent_rdata_fifo_src_ready;                            // avalon_st_adapter_003:in_0_ready -> read_dma_cb_csr_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_003_out_0_valid;                                     // avalon_st_adapter_003:out_0_valid -> read_dma_cb_csr_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_003_out_0_data;                                      // avalon_st_adapter_003:out_0_data -> read_dma_cb_csr_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_003_out_0_ready;                                     // read_dma_cb_csr_agent:rdata_fifo_sink_ready -> avalon_st_adapter_003:out_0_ready
	wire    [0:0] avalon_st_adapter_003_out_0_error;                                     // avalon_st_adapter_003:out_0_error -> read_dma_cb_csr_agent:rdata_fifo_sink_error
	wire          read_dma_cr_descriptor_slave_agent_rdata_fifo_src_valid;               // read_dma_cr_descriptor_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter_004:in_0_valid
	wire  [129:0] read_dma_cr_descriptor_slave_agent_rdata_fifo_src_data;                // read_dma_cr_descriptor_slave_agent:rdata_fifo_src_data -> avalon_st_adapter_004:in_0_data
	wire          read_dma_cr_descriptor_slave_agent_rdata_fifo_src_ready;               // avalon_st_adapter_004:in_0_ready -> read_dma_cr_descriptor_slave_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_004_out_0_valid;                                     // avalon_st_adapter_004:out_0_valid -> read_dma_cr_descriptor_slave_agent:rdata_fifo_sink_valid
	wire  [129:0] avalon_st_adapter_004_out_0_data;                                      // avalon_st_adapter_004:out_0_data -> read_dma_cr_descriptor_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_004_out_0_ready;                                     // read_dma_cr_descriptor_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_004:out_0_ready
	wire    [0:0] avalon_st_adapter_004_out_0_error;                                     // avalon_st_adapter_004:out_0_error -> read_dma_cr_descriptor_slave_agent:rdata_fifo_sink_error
	wire          read_dma_cb_descriptor_slave_agent_rdata_fifo_src_valid;               // read_dma_cb_descriptor_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter_005:in_0_valid
	wire  [129:0] read_dma_cb_descriptor_slave_agent_rdata_fifo_src_data;                // read_dma_cb_descriptor_slave_agent:rdata_fifo_src_data -> avalon_st_adapter_005:in_0_data
	wire          read_dma_cb_descriptor_slave_agent_rdata_fifo_src_ready;               // avalon_st_adapter_005:in_0_ready -> read_dma_cb_descriptor_slave_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_005_out_0_valid;                                     // avalon_st_adapter_005:out_0_valid -> read_dma_cb_descriptor_slave_agent:rdata_fifo_sink_valid
	wire  [129:0] avalon_st_adapter_005_out_0_data;                                      // avalon_st_adapter_005:out_0_data -> read_dma_cb_descriptor_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_005_out_0_ready;                                     // read_dma_cb_descriptor_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_005:out_0_ready
	wire    [0:0] avalon_st_adapter_005_out_0_error;                                     // avalon_st_adapter_005:out_0_error -> read_dma_cb_descriptor_slave_agent:rdata_fifo_sink_error

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (7),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (7),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (1),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) cpu_1_bridge_0_m0_translator (
		.clk                    (clk_125_clk_clk),                                                      //                       clk.clk
		.reset                  (cpu_1_bridge_0_reset_reset_bridge_in_reset_reset),                     //                     reset.reset
		.uav_address            (cpu_1_bridge_0_m0_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (cpu_1_bridge_0_m0_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (cpu_1_bridge_0_m0_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (cpu_1_bridge_0_m0_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (cpu_1_bridge_0_m0_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (cpu_1_bridge_0_m0_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (cpu_1_bridge_0_m0_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (cpu_1_bridge_0_m0_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (cpu_1_bridge_0_m0_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (cpu_1_bridge_0_m0_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (cpu_1_bridge_0_m0_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (cpu_1_bridge_0_m0_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (cpu_1_bridge_0_m0_waitrequest),                                        //                          .waitrequest
		.av_burstcount          (cpu_1_bridge_0_m0_burstcount),                                         //                          .burstcount
		.av_byteenable          (cpu_1_bridge_0_m0_byteenable),                                         //                          .byteenable
		.av_read                (cpu_1_bridge_0_m0_read),                                               //                          .read
		.av_readdata            (cpu_1_bridge_0_m0_readdata),                                           //                          .readdata
		.av_readdatavalid       (cpu_1_bridge_0_m0_readdatavalid),                                      //                          .readdatavalid
		.av_write               (cpu_1_bridge_0_m0_write),                                              //                          .write
		.av_writedata           (cpu_1_bridge_0_m0_writedata),                                          //                          .writedata
		.av_debugaccess         (cpu_1_bridge_0_m0_debugaccess),                                        //                          .debugaccess
		.av_beginbursttransfer  (1'b0),                                                                 //               (terminated)
		.av_begintransfer       (1'b0),                                                                 //               (terminated)
		.av_chipselect          (1'b0),                                                                 //               (terminated)
		.av_lock                (1'b0),                                                                 //               (terminated)
		.uav_clken              (),                                                                     //               (terminated)
		.av_clken               (1'b1),                                                                 //               (terminated)
		.uav_response           (2'b00),                                                                //               (terminated)
		.av_response            (),                                                                     //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                 //               (terminated)
		.av_writeresponsevalid  ()                                                                      //               (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (7),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) mailbox_simple_0_1_avmm_msg_receiver_translator (
		.clk                    (clk_125_clk_clk),                                             //                      clk.clk
		.reset                  (cpu_1_bridge_0_reset_reset_bridge_in_reset_reset),            //                    reset.reset
		.uav_address            (mailbox_simple_0_1_avmm_msg_receiver_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (mailbox_simple_0_1_avmm_msg_receiver_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (mailbox_simple_0_1_avmm_msg_receiver_agent_m0_read),          //                         .read
		.uav_write              (mailbox_simple_0_1_avmm_msg_receiver_agent_m0_write),         //                         .write
		.uav_waitrequest        (mailbox_simple_0_1_avmm_msg_receiver_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (mailbox_simple_0_1_avmm_msg_receiver_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (mailbox_simple_0_1_avmm_msg_receiver_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (mailbox_simple_0_1_avmm_msg_receiver_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (mailbox_simple_0_1_avmm_msg_receiver_agent_m0_writedata),     //                         .writedata
		.uav_lock               (mailbox_simple_0_1_avmm_msg_receiver_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (mailbox_simple_0_1_avmm_msg_receiver_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (mailbox_simple_0_1_avmm_msg_receiver_address),                //      avalon_anti_slave_0.address
		.av_write               (mailbox_simple_0_1_avmm_msg_receiver_write),                  //                         .write
		.av_read                (mailbox_simple_0_1_avmm_msg_receiver_read),                   //                         .read
		.av_readdata            (mailbox_simple_0_1_avmm_msg_receiver_readdata),               //                         .readdata
		.av_writedata           (mailbox_simple_0_1_avmm_msg_receiver_writedata),              //                         .writedata
		.av_begintransfer       (),                                                            //              (terminated)
		.av_beginbursttransfer  (),                                                            //              (terminated)
		.av_burstcount          (),                                                            //              (terminated)
		.av_byteenable          (),                                                            //              (terminated)
		.av_readdatavalid       (1'b0),                                                        //              (terminated)
		.av_waitrequest         (1'b0),                                                        //              (terminated)
		.av_writebyteenable     (),                                                            //              (terminated)
		.av_lock                (),                                                            //              (terminated)
		.av_chipselect          (),                                                            //              (terminated)
		.av_clken               (),                                                            //              (terminated)
		.uav_clken              (1'b0),                                                        //              (terminated)
		.av_debugaccess         (),                                                            //              (terminated)
		.av_outputenable        (),                                                            //              (terminated)
		.uav_response           (),                                                            //              (terminated)
		.av_response            (2'b00),                                                       //              (terminated)
		.uav_writeresponsevalid (),                                                            //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                         //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (7),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) mailbox_simple_1_0_avmm_msg_sender_translator (
		.clk                    (clk_125_clk_clk),                                           //                      clk.clk
		.reset                  (cpu_1_bridge_0_reset_reset_bridge_in_reset_reset),          //                    reset.reset
		.uav_address            (mailbox_simple_1_0_avmm_msg_sender_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (mailbox_simple_1_0_avmm_msg_sender_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (mailbox_simple_1_0_avmm_msg_sender_agent_m0_read),          //                         .read
		.uav_write              (mailbox_simple_1_0_avmm_msg_sender_agent_m0_write),         //                         .write
		.uav_waitrequest        (mailbox_simple_1_0_avmm_msg_sender_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (mailbox_simple_1_0_avmm_msg_sender_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (mailbox_simple_1_0_avmm_msg_sender_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (mailbox_simple_1_0_avmm_msg_sender_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (mailbox_simple_1_0_avmm_msg_sender_agent_m0_writedata),     //                         .writedata
		.uav_lock               (mailbox_simple_1_0_avmm_msg_sender_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (mailbox_simple_1_0_avmm_msg_sender_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (mailbox_simple_1_0_avmm_msg_sender_address),                //      avalon_anti_slave_0.address
		.av_write               (mailbox_simple_1_0_avmm_msg_sender_write),                  //                         .write
		.av_read                (mailbox_simple_1_0_avmm_msg_sender_read),                   //                         .read
		.av_readdata            (mailbox_simple_1_0_avmm_msg_sender_readdata),               //                         .readdata
		.av_writedata           (mailbox_simple_1_0_avmm_msg_sender_writedata),              //                         .writedata
		.av_waitrequest         (mailbox_simple_1_0_avmm_msg_sender_waitrequest),            //                         .waitrequest
		.av_begintransfer       (),                                                          //              (terminated)
		.av_beginbursttransfer  (),                                                          //              (terminated)
		.av_burstcount          (),                                                          //              (terminated)
		.av_byteenable          (),                                                          //              (terminated)
		.av_readdatavalid       (1'b0),                                                      //              (terminated)
		.av_writebyteenable     (),                                                          //              (terminated)
		.av_lock                (),                                                          //              (terminated)
		.av_chipselect          (),                                                          //              (terminated)
		.av_clken               (),                                                          //              (terminated)
		.uav_clken              (1'b0),                                                      //              (terminated)
		.av_debugaccess         (),                                                          //              (terminated)
		.av_outputenable        (),                                                          //              (terminated)
		.uav_response           (),                                                          //              (terminated)
		.av_response            (2'b00),                                                     //              (terminated)
		.uav_writeresponsevalid (),                                                          //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                       //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (7),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) read_dma_cr_csr_translator (
		.clk                    (clk_125_clk_clk),                                 //                      clk.clk
		.reset                  (read_dma_cr_reset_n_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (read_dma_cr_csr_agent_m0_address),                // avalon_universal_slave_0.address
		.uav_burstcount         (read_dma_cr_csr_agent_m0_burstcount),             //                         .burstcount
		.uav_read               (read_dma_cr_csr_agent_m0_read),                   //                         .read
		.uav_write              (read_dma_cr_csr_agent_m0_write),                  //                         .write
		.uav_waitrequest        (read_dma_cr_csr_agent_m0_waitrequest),            //                         .waitrequest
		.uav_readdatavalid      (read_dma_cr_csr_agent_m0_readdatavalid),          //                         .readdatavalid
		.uav_byteenable         (read_dma_cr_csr_agent_m0_byteenable),             //                         .byteenable
		.uav_readdata           (read_dma_cr_csr_agent_m0_readdata),               //                         .readdata
		.uav_writedata          (read_dma_cr_csr_agent_m0_writedata),              //                         .writedata
		.uav_lock               (read_dma_cr_csr_agent_m0_lock),                   //                         .lock
		.uav_debugaccess        (read_dma_cr_csr_agent_m0_debugaccess),            //                         .debugaccess
		.av_address             (read_dma_cr_csr_address),                         //      avalon_anti_slave_0.address
		.av_write               (read_dma_cr_csr_write),                           //                         .write
		.av_read                (read_dma_cr_csr_read),                            //                         .read
		.av_readdata            (read_dma_cr_csr_readdata),                        //                         .readdata
		.av_writedata           (read_dma_cr_csr_writedata),                       //                         .writedata
		.av_byteenable          (read_dma_cr_csr_byteenable),                      //                         .byteenable
		.av_begintransfer       (),                                                //              (terminated)
		.av_beginbursttransfer  (),                                                //              (terminated)
		.av_burstcount          (),                                                //              (terminated)
		.av_readdatavalid       (1'b0),                                            //              (terminated)
		.av_waitrequest         (1'b0),                                            //              (terminated)
		.av_writebyteenable     (),                                                //              (terminated)
		.av_lock                (),                                                //              (terminated)
		.av_chipselect          (),                                                //              (terminated)
		.av_clken               (),                                                //              (terminated)
		.uav_clken              (1'b0),                                            //              (terminated)
		.av_debugaccess         (),                                                //              (terminated)
		.av_outputenable        (),                                                //              (terminated)
		.uav_response           (),                                                //              (terminated)
		.av_response            (2'b00),                                           //              (terminated)
		.uav_writeresponsevalid (),                                                //              (terminated)
		.av_writeresponsevalid  (1'b0)                                             //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (7),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) read_dma_cb_csr_translator (
		.clk                    (clk_125_clk_clk),                                 //                      clk.clk
		.reset                  (read_dma_cr_reset_n_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (read_dma_cb_csr_agent_m0_address),                // avalon_universal_slave_0.address
		.uav_burstcount         (read_dma_cb_csr_agent_m0_burstcount),             //                         .burstcount
		.uav_read               (read_dma_cb_csr_agent_m0_read),                   //                         .read
		.uav_write              (read_dma_cb_csr_agent_m0_write),                  //                         .write
		.uav_waitrequest        (read_dma_cb_csr_agent_m0_waitrequest),            //                         .waitrequest
		.uav_readdatavalid      (read_dma_cb_csr_agent_m0_readdatavalid),          //                         .readdatavalid
		.uav_byteenable         (read_dma_cb_csr_agent_m0_byteenable),             //                         .byteenable
		.uav_readdata           (read_dma_cb_csr_agent_m0_readdata),               //                         .readdata
		.uav_writedata          (read_dma_cb_csr_agent_m0_writedata),              //                         .writedata
		.uav_lock               (read_dma_cb_csr_agent_m0_lock),                   //                         .lock
		.uav_debugaccess        (read_dma_cb_csr_agent_m0_debugaccess),            //                         .debugaccess
		.av_address             (read_dma_cb_csr_address),                         //      avalon_anti_slave_0.address
		.av_write               (read_dma_cb_csr_write),                           //                         .write
		.av_read                (read_dma_cb_csr_read),                            //                         .read
		.av_readdata            (read_dma_cb_csr_readdata),                        //                         .readdata
		.av_writedata           (read_dma_cb_csr_writedata),                       //                         .writedata
		.av_byteenable          (read_dma_cb_csr_byteenable),                      //                         .byteenable
		.av_begintransfer       (),                                                //              (terminated)
		.av_beginbursttransfer  (),                                                //              (terminated)
		.av_burstcount          (),                                                //              (terminated)
		.av_readdatavalid       (1'b0),                                            //              (terminated)
		.av_waitrequest         (1'b0),                                            //              (terminated)
		.av_writebyteenable     (),                                                //              (terminated)
		.av_lock                (),                                                //              (terminated)
		.av_chipselect          (),                                                //              (terminated)
		.av_clken               (),                                                //              (terminated)
		.uav_clken              (1'b0),                                            //              (terminated)
		.av_debugaccess         (),                                                //              (terminated)
		.av_outputenable        (),                                                //              (terminated)
		.uav_response           (),                                                //              (terminated)
		.av_response            (2'b00),                                           //              (terminated)
		.uav_writeresponsevalid (),                                                //              (terminated)
		.av_writeresponsevalid  (1'b0)                                             //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (128),
		.UAV_DATA_W                     (128),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (16),
		.UAV_BYTEENABLE_W               (16),
		.UAV_ADDRESS_W                  (7),
		.UAV_BURSTCOUNT_W               (5),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (16),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) read_dma_cr_descriptor_slave_translator (
		.clk                    (clk_125_clk_clk),                                                                                                                       //                      clk.clk
		.reset                  (read_dma_cr_reset_n_reset_bridge_in_reset_reset),                                                                                       //                    reset.reset
		.uav_address            (read_dma_cr_descriptor_slave_agent_m0_address),                                                                                         // avalon_universal_slave_0.address
		.uav_burstcount         (read_dma_cr_descriptor_slave_agent_m0_burstcount),                                                                                      //                         .burstcount
		.uav_read               (read_dma_cr_descriptor_slave_agent_m0_read),                                                                                            //                         .read
		.uav_write              (read_dma_cr_descriptor_slave_agent_m0_write),                                                                                           //                         .write
		.uav_waitrequest        (read_dma_cr_descriptor_slave_agent_m0_waitrequest),                                                                                     //                         .waitrequest
		.uav_readdatavalid      (read_dma_cr_descriptor_slave_agent_m0_readdatavalid),                                                                                   //                         .readdatavalid
		.uav_byteenable         (read_dma_cr_descriptor_slave_agent_m0_byteenable),                                                                                      //                         .byteenable
		.uav_readdata           (read_dma_cr_descriptor_slave_agent_m0_readdata),                                                                                        //                         .readdata
		.uav_writedata          (read_dma_cr_descriptor_slave_agent_m0_writedata),                                                                                       //                         .writedata
		.uav_lock               (read_dma_cr_descriptor_slave_agent_m0_lock),                                                                                            //                         .lock
		.uav_debugaccess        (read_dma_cr_descriptor_slave_agent_m0_debugaccess),                                                                                     //                         .debugaccess
		.av_write               (read_dma_cr_descriptor_slave_write),                                                                                                    //      avalon_anti_slave_0.write
		.av_writedata           (read_dma_cr_descriptor_slave_writedata),                                                                                                //                         .writedata
		.av_byteenable          (read_dma_cr_descriptor_slave_byteenable),                                                                                               //                         .byteenable
		.av_waitrequest         (read_dma_cr_descriptor_slave_waitrequest),                                                                                              //                         .waitrequest
		.av_address             (),                                                                                                                                      //              (terminated)
		.av_read                (),                                                                                                                                      //              (terminated)
		.av_readdata            (128'b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011011110101011011101111010101101), //              (terminated)
		.av_begintransfer       (),                                                                                                                                      //              (terminated)
		.av_beginbursttransfer  (),                                                                                                                                      //              (terminated)
		.av_burstcount          (),                                                                                                                                      //              (terminated)
		.av_readdatavalid       (1'b0),                                                                                                                                  //              (terminated)
		.av_writebyteenable     (),                                                                                                                                      //              (terminated)
		.av_lock                (),                                                                                                                                      //              (terminated)
		.av_chipselect          (),                                                                                                                                      //              (terminated)
		.av_clken               (),                                                                                                                                      //              (terminated)
		.uav_clken              (1'b0),                                                                                                                                  //              (terminated)
		.av_debugaccess         (),                                                                                                                                      //              (terminated)
		.av_outputenable        (),                                                                                                                                      //              (terminated)
		.uav_response           (),                                                                                                                                      //              (terminated)
		.av_response            (2'b00),                                                                                                                                 //              (terminated)
		.uav_writeresponsevalid (),                                                                                                                                      //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                                                                                                   //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (128),
		.UAV_DATA_W                     (128),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (16),
		.UAV_BYTEENABLE_W               (16),
		.UAV_ADDRESS_W                  (7),
		.UAV_BURSTCOUNT_W               (5),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (16),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) read_dma_cb_descriptor_slave_translator (
		.clk                    (clk_125_clk_clk),                                                                                                                       //                      clk.clk
		.reset                  (read_dma_cr_reset_n_reset_bridge_in_reset_reset),                                                                                       //                    reset.reset
		.uav_address            (read_dma_cb_descriptor_slave_agent_m0_address),                                                                                         // avalon_universal_slave_0.address
		.uav_burstcount         (read_dma_cb_descriptor_slave_agent_m0_burstcount),                                                                                      //                         .burstcount
		.uav_read               (read_dma_cb_descriptor_slave_agent_m0_read),                                                                                            //                         .read
		.uav_write              (read_dma_cb_descriptor_slave_agent_m0_write),                                                                                           //                         .write
		.uav_waitrequest        (read_dma_cb_descriptor_slave_agent_m0_waitrequest),                                                                                     //                         .waitrequest
		.uav_readdatavalid      (read_dma_cb_descriptor_slave_agent_m0_readdatavalid),                                                                                   //                         .readdatavalid
		.uav_byteenable         (read_dma_cb_descriptor_slave_agent_m0_byteenable),                                                                                      //                         .byteenable
		.uav_readdata           (read_dma_cb_descriptor_slave_agent_m0_readdata),                                                                                        //                         .readdata
		.uav_writedata          (read_dma_cb_descriptor_slave_agent_m0_writedata),                                                                                       //                         .writedata
		.uav_lock               (read_dma_cb_descriptor_slave_agent_m0_lock),                                                                                            //                         .lock
		.uav_debugaccess        (read_dma_cb_descriptor_slave_agent_m0_debugaccess),                                                                                     //                         .debugaccess
		.av_write               (read_dma_cb_descriptor_slave_write),                                                                                                    //      avalon_anti_slave_0.write
		.av_writedata           (read_dma_cb_descriptor_slave_writedata),                                                                                                //                         .writedata
		.av_byteenable          (read_dma_cb_descriptor_slave_byteenable),                                                                                               //                         .byteenable
		.av_waitrequest         (read_dma_cb_descriptor_slave_waitrequest),                                                                                              //                         .waitrequest
		.av_address             (),                                                                                                                                      //              (terminated)
		.av_read                (),                                                                                                                                      //              (terminated)
		.av_readdata            (128'b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011011110101011011101111010101101), //              (terminated)
		.av_begintransfer       (),                                                                                                                                      //              (terminated)
		.av_beginbursttransfer  (),                                                                                                                                      //              (terminated)
		.av_burstcount          (),                                                                                                                                      //              (terminated)
		.av_readdatavalid       (1'b0),                                                                                                                                  //              (terminated)
		.av_writebyteenable     (),                                                                                                                                      //              (terminated)
		.av_lock                (),                                                                                                                                      //              (terminated)
		.av_chipselect          (),                                                                                                                                      //              (terminated)
		.av_clken               (),                                                                                                                                      //              (terminated)
		.uav_clken              (1'b0),                                                                                                                                  //              (terminated)
		.av_debugaccess         (),                                                                                                                                      //              (terminated)
		.av_outputenable        (),                                                                                                                                      //              (terminated)
		.uav_response           (),                                                                                                                                      //              (terminated)
		.av_response            (2'b00),                                                                                                                                 //              (terminated)
		.uav_writeresponsevalid (),                                                                                                                                      //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                                                                                                   //              (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (82),
		.PKT_ORI_BURST_SIZE_L      (80),
		.PKT_RESPONSE_STATUS_H     (79),
		.PKT_RESPONSE_STATUS_L     (78),
		.PKT_QOS_H                 (63),
		.PKT_QOS_L                 (63),
		.PKT_DATA_SIDEBAND_H       (61),
		.PKT_DATA_SIDEBAND_L       (61),
		.PKT_ADDR_SIDEBAND_H       (60),
		.PKT_ADDR_SIDEBAND_L       (60),
		.PKT_BURST_TYPE_H          (59),
		.PKT_BURST_TYPE_L          (58),
		.PKT_CACHE_H               (77),
		.PKT_CACHE_L               (74),
		.PKT_THREAD_ID_H           (70),
		.PKT_THREAD_ID_L           (70),
		.PKT_BURST_SIZE_H          (57),
		.PKT_BURST_SIZE_L          (55),
		.PKT_TRANS_EXCLUSIVE       (48),
		.PKT_TRANS_LOCK            (47),
		.PKT_BEGIN_BURST           (62),
		.PKT_PROTECTION_H          (73),
		.PKT_PROTECTION_L          (71),
		.PKT_BURSTWRAP_H           (54),
		.PKT_BURSTWRAP_L           (54),
		.PKT_BYTE_CNT_H            (53),
		.PKT_BYTE_CNT_L            (49),
		.PKT_ADDR_H                (42),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (43),
		.PKT_TRANS_POSTED          (44),
		.PKT_TRANS_WRITE           (45),
		.PKT_TRANS_READ            (46),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (66),
		.PKT_SRC_ID_L              (64),
		.PKT_DEST_ID_H             (69),
		.PKT_DEST_ID_L             (67),
		.ST_DATA_W                 (83),
		.ST_CHANNEL_W              (6),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (1),
		.ID                        (0),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) cpu_1_bridge_0_m0_agent (
		.clk                   (clk_125_clk_clk),                                                      //       clk.clk
		.reset                 (cpu_1_bridge_0_reset_reset_bridge_in_reset_reset),                     // clk_reset.reset
		.av_address            (cpu_1_bridge_0_m0_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (cpu_1_bridge_0_m0_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (cpu_1_bridge_0_m0_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (cpu_1_bridge_0_m0_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (cpu_1_bridge_0_m0_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (cpu_1_bridge_0_m0_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (cpu_1_bridge_0_m0_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (cpu_1_bridge_0_m0_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (cpu_1_bridge_0_m0_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (cpu_1_bridge_0_m0_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (cpu_1_bridge_0_m0_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (cpu_1_bridge_0_m0_agent_cp_valid),                                     //        cp.valid
		.cp_data               (cpu_1_bridge_0_m0_agent_cp_data),                                      //          .data
		.cp_startofpacket      (cpu_1_bridge_0_m0_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (cpu_1_bridge_0_m0_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (cpu_1_bridge_0_m0_agent_cp_ready),                                     //          .ready
		.rp_valid              (cpu_1_bridge_0_m0_limiter_rsp_src_valid),                              //        rp.valid
		.rp_data               (cpu_1_bridge_0_m0_limiter_rsp_src_data),                               //          .data
		.rp_channel            (cpu_1_bridge_0_m0_limiter_rsp_src_channel),                            //          .channel
		.rp_startofpacket      (cpu_1_bridge_0_m0_limiter_rsp_src_startofpacket),                      //          .startofpacket
		.rp_endofpacket        (cpu_1_bridge_0_m0_limiter_rsp_src_endofpacket),                        //          .endofpacket
		.rp_ready              (cpu_1_bridge_0_m0_limiter_rsp_src_ready),                              //          .ready
		.av_response           (),                                                                     // (terminated)
		.av_writeresponsevalid ()                                                                      // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (82),
		.PKT_ORI_BURST_SIZE_L      (80),
		.PKT_RESPONSE_STATUS_H     (79),
		.PKT_RESPONSE_STATUS_L     (78),
		.PKT_BURST_SIZE_H          (57),
		.PKT_BURST_SIZE_L          (55),
		.PKT_TRANS_LOCK            (47),
		.PKT_BEGIN_BURST           (62),
		.PKT_PROTECTION_H          (73),
		.PKT_PROTECTION_L          (71),
		.PKT_BURSTWRAP_H           (54),
		.PKT_BURSTWRAP_L           (54),
		.PKT_BYTE_CNT_H            (53),
		.PKT_BYTE_CNT_L            (49),
		.PKT_ADDR_H                (42),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (43),
		.PKT_TRANS_POSTED          (44),
		.PKT_TRANS_WRITE           (45),
		.PKT_TRANS_READ            (46),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (66),
		.PKT_SRC_ID_L              (64),
		.PKT_DEST_ID_H             (69),
		.PKT_DEST_ID_L             (67),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (6),
		.ST_DATA_W                 (83),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) mailbox_simple_0_1_avmm_msg_receiver_agent (
		.clk                     (clk_125_clk_clk),                                                       //             clk.clk
		.reset                   (cpu_1_bridge_0_reset_reset_bridge_in_reset_reset),                      //       clk_reset.reset
		.m0_address              (mailbox_simple_0_1_avmm_msg_receiver_agent_m0_address),                 //              m0.address
		.m0_burstcount           (mailbox_simple_0_1_avmm_msg_receiver_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (mailbox_simple_0_1_avmm_msg_receiver_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (mailbox_simple_0_1_avmm_msg_receiver_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (mailbox_simple_0_1_avmm_msg_receiver_agent_m0_lock),                    //                .lock
		.m0_readdata             (mailbox_simple_0_1_avmm_msg_receiver_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (mailbox_simple_0_1_avmm_msg_receiver_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (mailbox_simple_0_1_avmm_msg_receiver_agent_m0_read),                    //                .read
		.m0_waitrequest          (mailbox_simple_0_1_avmm_msg_receiver_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (mailbox_simple_0_1_avmm_msg_receiver_agent_m0_writedata),               //                .writedata
		.m0_write                (mailbox_simple_0_1_avmm_msg_receiver_agent_m0_write),                   //                .write
		.rp_endofpacket          (mailbox_simple_0_1_avmm_msg_receiver_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (mailbox_simple_0_1_avmm_msg_receiver_agent_rp_ready),                   //                .ready
		.rp_valid                (mailbox_simple_0_1_avmm_msg_receiver_agent_rp_valid),                   //                .valid
		.rp_data                 (mailbox_simple_0_1_avmm_msg_receiver_agent_rp_data),                    //                .data
		.rp_startofpacket        (mailbox_simple_0_1_avmm_msg_receiver_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (agent_pipeline_source0_ready),                                          //              cp.ready
		.cp_valid                (agent_pipeline_source0_valid),                                          //                .valid
		.cp_data                 (agent_pipeline_source0_data),                                           //                .data
		.cp_startofpacket        (agent_pipeline_source0_startofpacket),                                  //                .startofpacket
		.cp_endofpacket          (agent_pipeline_source0_endofpacket),                                    //                .endofpacket
		.cp_channel              (agent_pipeline_source0_channel),                                        //                .channel
		.rf_sink_ready           (mailbox_simple_0_1_avmm_msg_receiver_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (mailbox_simple_0_1_avmm_msg_receiver_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (mailbox_simple_0_1_avmm_msg_receiver_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (mailbox_simple_0_1_avmm_msg_receiver_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (mailbox_simple_0_1_avmm_msg_receiver_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (mailbox_simple_0_1_avmm_msg_receiver_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (mailbox_simple_0_1_avmm_msg_receiver_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (mailbox_simple_0_1_avmm_msg_receiver_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (mailbox_simple_0_1_avmm_msg_receiver_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (mailbox_simple_0_1_avmm_msg_receiver_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_out_0_ready),                                         // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_out_0_valid),                                         //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_out_0_data),                                          //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_out_0_error),                                         //                .error
		.rdata_fifo_src_ready    (mailbox_simple_0_1_avmm_msg_receiver_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (mailbox_simple_0_1_avmm_msg_receiver_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (mailbox_simple_0_1_avmm_msg_receiver_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                 //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                   //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (84),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) mailbox_simple_0_1_avmm_msg_receiver_agent_rsp_fifo (
		.clk               (clk_125_clk_clk),                                                       //       clk.clk
		.reset             (cpu_1_bridge_0_reset_reset_bridge_in_reset_reset),                      // clk_reset.reset
		.in_data           (mailbox_simple_0_1_avmm_msg_receiver_agent_rf_source_data),             //        in.data
		.in_valid          (mailbox_simple_0_1_avmm_msg_receiver_agent_rf_source_valid),            //          .valid
		.in_ready          (mailbox_simple_0_1_avmm_msg_receiver_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (mailbox_simple_0_1_avmm_msg_receiver_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (mailbox_simple_0_1_avmm_msg_receiver_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (mailbox_simple_0_1_avmm_msg_receiver_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (mailbox_simple_0_1_avmm_msg_receiver_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (mailbox_simple_0_1_avmm_msg_receiver_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (mailbox_simple_0_1_avmm_msg_receiver_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (mailbox_simple_0_1_avmm_msg_receiver_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                 // (terminated)
		.csr_read          (1'b0),                                                                  // (terminated)
		.csr_write         (1'b0),                                                                  // (terminated)
		.csr_readdata      (),                                                                      // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                  // (terminated)
		.almost_full_data  (),                                                                      // (terminated)
		.almost_empty_data (),                                                                      // (terminated)
		.in_empty          (1'b0),                                                                  // (terminated)
		.out_empty         (),                                                                      // (terminated)
		.in_error          (1'b0),                                                                  // (terminated)
		.out_error         (),                                                                      // (terminated)
		.in_channel        (1'b0),                                                                  // (terminated)
		.out_channel       ()                                                                       // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (82),
		.PKT_ORI_BURST_SIZE_L      (80),
		.PKT_RESPONSE_STATUS_H     (79),
		.PKT_RESPONSE_STATUS_L     (78),
		.PKT_BURST_SIZE_H          (57),
		.PKT_BURST_SIZE_L          (55),
		.PKT_TRANS_LOCK            (47),
		.PKT_BEGIN_BURST           (62),
		.PKT_PROTECTION_H          (73),
		.PKT_PROTECTION_L          (71),
		.PKT_BURSTWRAP_H           (54),
		.PKT_BURSTWRAP_L           (54),
		.PKT_BYTE_CNT_H            (53),
		.PKT_BYTE_CNT_L            (49),
		.PKT_ADDR_H                (42),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (43),
		.PKT_TRANS_POSTED          (44),
		.PKT_TRANS_WRITE           (45),
		.PKT_TRANS_READ            (46),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (66),
		.PKT_SRC_ID_L              (64),
		.PKT_DEST_ID_H             (69),
		.PKT_DEST_ID_L             (67),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (6),
		.ST_DATA_W                 (83),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) mailbox_simple_1_0_avmm_msg_sender_agent (
		.clk                     (clk_125_clk_clk),                                                     //             clk.clk
		.reset                   (cpu_1_bridge_0_reset_reset_bridge_in_reset_reset),                    //       clk_reset.reset
		.m0_address              (mailbox_simple_1_0_avmm_msg_sender_agent_m0_address),                 //              m0.address
		.m0_burstcount           (mailbox_simple_1_0_avmm_msg_sender_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (mailbox_simple_1_0_avmm_msg_sender_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (mailbox_simple_1_0_avmm_msg_sender_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (mailbox_simple_1_0_avmm_msg_sender_agent_m0_lock),                    //                .lock
		.m0_readdata             (mailbox_simple_1_0_avmm_msg_sender_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (mailbox_simple_1_0_avmm_msg_sender_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (mailbox_simple_1_0_avmm_msg_sender_agent_m0_read),                    //                .read
		.m0_waitrequest          (mailbox_simple_1_0_avmm_msg_sender_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (mailbox_simple_1_0_avmm_msg_sender_agent_m0_writedata),               //                .writedata
		.m0_write                (mailbox_simple_1_0_avmm_msg_sender_agent_m0_write),                   //                .write
		.rp_endofpacket          (mailbox_simple_1_0_avmm_msg_sender_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (mailbox_simple_1_0_avmm_msg_sender_agent_rp_ready),                   //                .ready
		.rp_valid                (mailbox_simple_1_0_avmm_msg_sender_agent_rp_valid),                   //                .valid
		.rp_data                 (mailbox_simple_1_0_avmm_msg_sender_agent_rp_data),                    //                .data
		.rp_startofpacket        (mailbox_simple_1_0_avmm_msg_sender_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (agent_pipeline_002_source0_ready),                                    //              cp.ready
		.cp_valid                (agent_pipeline_002_source0_valid),                                    //                .valid
		.cp_data                 (agent_pipeline_002_source0_data),                                     //                .data
		.cp_startofpacket        (agent_pipeline_002_source0_startofpacket),                            //                .startofpacket
		.cp_endofpacket          (agent_pipeline_002_source0_endofpacket),                              //                .endofpacket
		.cp_channel              (agent_pipeline_002_source0_channel),                                  //                .channel
		.rf_sink_ready           (mailbox_simple_1_0_avmm_msg_sender_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (mailbox_simple_1_0_avmm_msg_sender_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (mailbox_simple_1_0_avmm_msg_sender_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (mailbox_simple_1_0_avmm_msg_sender_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (mailbox_simple_1_0_avmm_msg_sender_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (mailbox_simple_1_0_avmm_msg_sender_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (mailbox_simple_1_0_avmm_msg_sender_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (mailbox_simple_1_0_avmm_msg_sender_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (mailbox_simple_1_0_avmm_msg_sender_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (mailbox_simple_1_0_avmm_msg_sender_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_001_out_0_ready),                                   // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_001_out_0_valid),                                   //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_001_out_0_data),                                    //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_001_out_0_error),                                   //                .error
		.rdata_fifo_src_ready    (mailbox_simple_1_0_avmm_msg_sender_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (mailbox_simple_1_0_avmm_msg_sender_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (mailbox_simple_1_0_avmm_msg_sender_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                               //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                 //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (84),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) mailbox_simple_1_0_avmm_msg_sender_agent_rsp_fifo (
		.clk               (clk_125_clk_clk),                                                     //       clk.clk
		.reset             (cpu_1_bridge_0_reset_reset_bridge_in_reset_reset),                    // clk_reset.reset
		.in_data           (mailbox_simple_1_0_avmm_msg_sender_agent_rf_source_data),             //        in.data
		.in_valid          (mailbox_simple_1_0_avmm_msg_sender_agent_rf_source_valid),            //          .valid
		.in_ready          (mailbox_simple_1_0_avmm_msg_sender_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (mailbox_simple_1_0_avmm_msg_sender_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (mailbox_simple_1_0_avmm_msg_sender_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (mailbox_simple_1_0_avmm_msg_sender_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (mailbox_simple_1_0_avmm_msg_sender_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (mailbox_simple_1_0_avmm_msg_sender_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (mailbox_simple_1_0_avmm_msg_sender_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (mailbox_simple_1_0_avmm_msg_sender_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                               // (terminated)
		.csr_read          (1'b0),                                                                // (terminated)
		.csr_write         (1'b0),                                                                // (terminated)
		.csr_readdata      (),                                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                // (terminated)
		.almost_full_data  (),                                                                    // (terminated)
		.almost_empty_data (),                                                                    // (terminated)
		.in_empty          (1'b0),                                                                // (terminated)
		.out_empty         (),                                                                    // (terminated)
		.in_error          (1'b0),                                                                // (terminated)
		.out_error         (),                                                                    // (terminated)
		.in_channel        (1'b0),                                                                // (terminated)
		.out_channel       ()                                                                     // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (82),
		.PKT_ORI_BURST_SIZE_L      (80),
		.PKT_RESPONSE_STATUS_H     (79),
		.PKT_RESPONSE_STATUS_L     (78),
		.PKT_BURST_SIZE_H          (57),
		.PKT_BURST_SIZE_L          (55),
		.PKT_TRANS_LOCK            (47),
		.PKT_BEGIN_BURST           (62),
		.PKT_PROTECTION_H          (73),
		.PKT_PROTECTION_L          (71),
		.PKT_BURSTWRAP_H           (54),
		.PKT_BURSTWRAP_L           (54),
		.PKT_BYTE_CNT_H            (53),
		.PKT_BYTE_CNT_L            (49),
		.PKT_ADDR_H                (42),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (43),
		.PKT_TRANS_POSTED          (44),
		.PKT_TRANS_WRITE           (45),
		.PKT_TRANS_READ            (46),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (66),
		.PKT_SRC_ID_L              (64),
		.PKT_DEST_ID_H             (69),
		.PKT_DEST_ID_L             (67),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (6),
		.ST_DATA_W                 (83),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) read_dma_cr_csr_agent (
		.clk                     (clk_125_clk_clk),                                  //             clk.clk
		.reset                   (read_dma_cr_reset_n_reset_bridge_in_reset_reset),  //       clk_reset.reset
		.m0_address              (read_dma_cr_csr_agent_m0_address),                 //              m0.address
		.m0_burstcount           (read_dma_cr_csr_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (read_dma_cr_csr_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (read_dma_cr_csr_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (read_dma_cr_csr_agent_m0_lock),                    //                .lock
		.m0_readdata             (read_dma_cr_csr_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (read_dma_cr_csr_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (read_dma_cr_csr_agent_m0_read),                    //                .read
		.m0_waitrequest          (read_dma_cr_csr_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (read_dma_cr_csr_agent_m0_writedata),               //                .writedata
		.m0_write                (read_dma_cr_csr_agent_m0_write),                   //                .write
		.rp_endofpacket          (read_dma_cr_csr_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (read_dma_cr_csr_agent_rp_ready),                   //                .ready
		.rp_valid                (read_dma_cr_csr_agent_rp_valid),                   //                .valid
		.rp_data                 (read_dma_cr_csr_agent_rp_data),                    //                .data
		.rp_startofpacket        (read_dma_cr_csr_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (agent_pipeline_004_source0_ready),                 //              cp.ready
		.cp_valid                (agent_pipeline_004_source0_valid),                 //                .valid
		.cp_data                 (agent_pipeline_004_source0_data),                  //                .data
		.cp_startofpacket        (agent_pipeline_004_source0_startofpacket),         //                .startofpacket
		.cp_endofpacket          (agent_pipeline_004_source0_endofpacket),           //                .endofpacket
		.cp_channel              (agent_pipeline_004_source0_channel),               //                .channel
		.rf_sink_ready           (read_dma_cr_csr_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (read_dma_cr_csr_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (read_dma_cr_csr_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (read_dma_cr_csr_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (read_dma_cr_csr_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (read_dma_cr_csr_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (read_dma_cr_csr_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (read_dma_cr_csr_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (read_dma_cr_csr_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (read_dma_cr_csr_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_002_out_0_ready),                // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_002_out_0_valid),                //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_002_out_0_data),                 //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_002_out_0_error),                //                .error
		.rdata_fifo_src_ready    (read_dma_cr_csr_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (read_dma_cr_csr_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (read_dma_cr_csr_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                            //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                              //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (84),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) read_dma_cr_csr_agent_rsp_fifo (
		.clk               (clk_125_clk_clk),                                  //       clk.clk
		.reset             (read_dma_cr_reset_n_reset_bridge_in_reset_reset),  // clk_reset.reset
		.in_data           (read_dma_cr_csr_agent_rf_source_data),             //        in.data
		.in_valid          (read_dma_cr_csr_agent_rf_source_valid),            //          .valid
		.in_ready          (read_dma_cr_csr_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (read_dma_cr_csr_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (read_dma_cr_csr_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (read_dma_cr_csr_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (read_dma_cr_csr_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (read_dma_cr_csr_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (read_dma_cr_csr_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (read_dma_cr_csr_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                            // (terminated)
		.csr_read          (1'b0),                                             // (terminated)
		.csr_write         (1'b0),                                             // (terminated)
		.csr_readdata      (),                                                 // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),             // (terminated)
		.almost_full_data  (),                                                 // (terminated)
		.almost_empty_data (),                                                 // (terminated)
		.in_empty          (1'b0),                                             // (terminated)
		.out_empty         (),                                                 // (terminated)
		.in_error          (1'b0),                                             // (terminated)
		.out_error         (),                                                 // (terminated)
		.in_channel        (1'b0),                                             // (terminated)
		.out_channel       ()                                                  // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (82),
		.PKT_ORI_BURST_SIZE_L      (80),
		.PKT_RESPONSE_STATUS_H     (79),
		.PKT_RESPONSE_STATUS_L     (78),
		.PKT_BURST_SIZE_H          (57),
		.PKT_BURST_SIZE_L          (55),
		.PKT_TRANS_LOCK            (47),
		.PKT_BEGIN_BURST           (62),
		.PKT_PROTECTION_H          (73),
		.PKT_PROTECTION_L          (71),
		.PKT_BURSTWRAP_H           (54),
		.PKT_BURSTWRAP_L           (54),
		.PKT_BYTE_CNT_H            (53),
		.PKT_BYTE_CNT_L            (49),
		.PKT_ADDR_H                (42),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (43),
		.PKT_TRANS_POSTED          (44),
		.PKT_TRANS_WRITE           (45),
		.PKT_TRANS_READ            (46),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (66),
		.PKT_SRC_ID_L              (64),
		.PKT_DEST_ID_H             (69),
		.PKT_DEST_ID_L             (67),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (6),
		.ST_DATA_W                 (83),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) read_dma_cb_csr_agent (
		.clk                     (clk_125_clk_clk),                                  //             clk.clk
		.reset                   (read_dma_cr_reset_n_reset_bridge_in_reset_reset),  //       clk_reset.reset
		.m0_address              (read_dma_cb_csr_agent_m0_address),                 //              m0.address
		.m0_burstcount           (read_dma_cb_csr_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (read_dma_cb_csr_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (read_dma_cb_csr_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (read_dma_cb_csr_agent_m0_lock),                    //                .lock
		.m0_readdata             (read_dma_cb_csr_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (read_dma_cb_csr_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (read_dma_cb_csr_agent_m0_read),                    //                .read
		.m0_waitrequest          (read_dma_cb_csr_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (read_dma_cb_csr_agent_m0_writedata),               //                .writedata
		.m0_write                (read_dma_cb_csr_agent_m0_write),                   //                .write
		.rp_endofpacket          (read_dma_cb_csr_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (read_dma_cb_csr_agent_rp_ready),                   //                .ready
		.rp_valid                (read_dma_cb_csr_agent_rp_valid),                   //                .valid
		.rp_data                 (read_dma_cb_csr_agent_rp_data),                    //                .data
		.rp_startofpacket        (read_dma_cb_csr_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (agent_pipeline_006_source0_ready),                 //              cp.ready
		.cp_valid                (agent_pipeline_006_source0_valid),                 //                .valid
		.cp_data                 (agent_pipeline_006_source0_data),                  //                .data
		.cp_startofpacket        (agent_pipeline_006_source0_startofpacket),         //                .startofpacket
		.cp_endofpacket          (agent_pipeline_006_source0_endofpacket),           //                .endofpacket
		.cp_channel              (agent_pipeline_006_source0_channel),               //                .channel
		.rf_sink_ready           (read_dma_cb_csr_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (read_dma_cb_csr_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (read_dma_cb_csr_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (read_dma_cb_csr_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (read_dma_cb_csr_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (read_dma_cb_csr_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (read_dma_cb_csr_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (read_dma_cb_csr_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (read_dma_cb_csr_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (read_dma_cb_csr_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_003_out_0_ready),                // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_003_out_0_valid),                //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_003_out_0_data),                 //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_003_out_0_error),                //                .error
		.rdata_fifo_src_ready    (read_dma_cb_csr_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (read_dma_cb_csr_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (read_dma_cb_csr_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                            //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                              //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (84),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) read_dma_cb_csr_agent_rsp_fifo (
		.clk               (clk_125_clk_clk),                                  //       clk.clk
		.reset             (read_dma_cr_reset_n_reset_bridge_in_reset_reset),  // clk_reset.reset
		.in_data           (read_dma_cb_csr_agent_rf_source_data),             //        in.data
		.in_valid          (read_dma_cb_csr_agent_rf_source_valid),            //          .valid
		.in_ready          (read_dma_cb_csr_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (read_dma_cb_csr_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (read_dma_cb_csr_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (read_dma_cb_csr_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (read_dma_cb_csr_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (read_dma_cb_csr_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (read_dma_cb_csr_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (read_dma_cb_csr_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                            // (terminated)
		.csr_read          (1'b0),                                             // (terminated)
		.csr_write         (1'b0),                                             // (terminated)
		.csr_readdata      (),                                                 // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),             // (terminated)
		.almost_full_data  (),                                                 // (terminated)
		.almost_empty_data (),                                                 // (terminated)
		.in_empty          (1'b0),                                             // (terminated)
		.out_empty         (),                                                 // (terminated)
		.in_error          (1'b0),                                             // (terminated)
		.out_error         (),                                                 // (terminated)
		.in_channel        (1'b0),                                             // (terminated)
		.out_channel       ()                                                  // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (190),
		.PKT_ORI_BURST_SIZE_L      (188),
		.PKT_RESPONSE_STATUS_H     (187),
		.PKT_RESPONSE_STATUS_L     (186),
		.PKT_BURST_SIZE_H          (165),
		.PKT_BURST_SIZE_L          (163),
		.PKT_TRANS_LOCK            (155),
		.PKT_BEGIN_BURST           (170),
		.PKT_PROTECTION_H          (181),
		.PKT_PROTECTION_L          (179),
		.PKT_BURSTWRAP_H           (162),
		.PKT_BURSTWRAP_L           (162),
		.PKT_BYTE_CNT_H            (161),
		.PKT_BYTE_CNT_L            (157),
		.PKT_ADDR_H                (150),
		.PKT_ADDR_L                (144),
		.PKT_TRANS_COMPRESSED_READ (151),
		.PKT_TRANS_POSTED          (152),
		.PKT_TRANS_WRITE           (153),
		.PKT_TRANS_READ            (154),
		.PKT_DATA_H                (127),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (143),
		.PKT_BYTEEN_L              (128),
		.PKT_SRC_ID_H              (174),
		.PKT_SRC_ID_L              (172),
		.PKT_DEST_ID_H             (177),
		.PKT_DEST_ID_L             (175),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (6),
		.ST_DATA_W                 (191),
		.AVS_BURSTCOUNT_W          (5),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) read_dma_cr_descriptor_slave_agent (
		.clk                     (clk_125_clk_clk),                                               //             clk.clk
		.reset                   (read_dma_cr_reset_n_reset_bridge_in_reset_reset),               //       clk_reset.reset
		.m0_address              (read_dma_cr_descriptor_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (read_dma_cr_descriptor_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (read_dma_cr_descriptor_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (read_dma_cr_descriptor_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (read_dma_cr_descriptor_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (read_dma_cr_descriptor_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (read_dma_cr_descriptor_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (read_dma_cr_descriptor_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (read_dma_cr_descriptor_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (read_dma_cr_descriptor_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (read_dma_cr_descriptor_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (read_dma_cr_descriptor_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (read_dma_cr_descriptor_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (read_dma_cr_descriptor_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (read_dma_cr_descriptor_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (read_dma_cr_descriptor_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (agent_pipeline_008_source0_ready),                              //              cp.ready
		.cp_valid                (agent_pipeline_008_source0_valid),                              //                .valid
		.cp_data                 (agent_pipeline_008_source0_data),                               //                .data
		.cp_startofpacket        (agent_pipeline_008_source0_startofpacket),                      //                .startofpacket
		.cp_endofpacket          (agent_pipeline_008_source0_endofpacket),                        //                .endofpacket
		.cp_channel              (agent_pipeline_008_source0_channel),                            //                .channel
		.rf_sink_ready           (read_dma_cr_descriptor_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (read_dma_cr_descriptor_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (read_dma_cr_descriptor_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (read_dma_cr_descriptor_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (read_dma_cr_descriptor_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (read_dma_cr_descriptor_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (read_dma_cr_descriptor_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (read_dma_cr_descriptor_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (read_dma_cr_descriptor_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (read_dma_cr_descriptor_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_004_out_0_ready),                             // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_004_out_0_valid),                             //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_004_out_0_data),                              //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_004_out_0_error),                             //                .error
		.rdata_fifo_src_ready    (read_dma_cr_descriptor_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (read_dma_cr_descriptor_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (read_dma_cr_descriptor_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                         //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                           //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (192),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) read_dma_cr_descriptor_slave_agent_rsp_fifo (
		.clk               (clk_125_clk_clk),                                               //       clk.clk
		.reset             (read_dma_cr_reset_n_reset_bridge_in_reset_reset),               // clk_reset.reset
		.in_data           (read_dma_cr_descriptor_slave_agent_rf_source_data),             //        in.data
		.in_valid          (read_dma_cr_descriptor_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (read_dma_cr_descriptor_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (read_dma_cr_descriptor_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (read_dma_cr_descriptor_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (read_dma_cr_descriptor_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (read_dma_cr_descriptor_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (read_dma_cr_descriptor_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (read_dma_cr_descriptor_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (read_dma_cr_descriptor_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                         // (terminated)
		.csr_read          (1'b0),                                                          // (terminated)
		.csr_write         (1'b0),                                                          // (terminated)
		.csr_readdata      (),                                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                          // (terminated)
		.almost_full_data  (),                                                              // (terminated)
		.almost_empty_data (),                                                              // (terminated)
		.in_empty          (1'b0),                                                          // (terminated)
		.out_empty         (),                                                              // (terminated)
		.in_error          (1'b0),                                                          // (terminated)
		.out_error         (),                                                              // (terminated)
		.in_channel        (1'b0),                                                          // (terminated)
		.out_channel       ()                                                               // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (190),
		.PKT_ORI_BURST_SIZE_L      (188),
		.PKT_RESPONSE_STATUS_H     (187),
		.PKT_RESPONSE_STATUS_L     (186),
		.PKT_BURST_SIZE_H          (165),
		.PKT_BURST_SIZE_L          (163),
		.PKT_TRANS_LOCK            (155),
		.PKT_BEGIN_BURST           (170),
		.PKT_PROTECTION_H          (181),
		.PKT_PROTECTION_L          (179),
		.PKT_BURSTWRAP_H           (162),
		.PKT_BURSTWRAP_L           (162),
		.PKT_BYTE_CNT_H            (161),
		.PKT_BYTE_CNT_L            (157),
		.PKT_ADDR_H                (150),
		.PKT_ADDR_L                (144),
		.PKT_TRANS_COMPRESSED_READ (151),
		.PKT_TRANS_POSTED          (152),
		.PKT_TRANS_WRITE           (153),
		.PKT_TRANS_READ            (154),
		.PKT_DATA_H                (127),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (143),
		.PKT_BYTEEN_L              (128),
		.PKT_SRC_ID_H              (174),
		.PKT_SRC_ID_L              (172),
		.PKT_DEST_ID_H             (177),
		.PKT_DEST_ID_L             (175),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (6),
		.ST_DATA_W                 (191),
		.AVS_BURSTCOUNT_W          (5),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) read_dma_cb_descriptor_slave_agent (
		.clk                     (clk_125_clk_clk),                                               //             clk.clk
		.reset                   (read_dma_cr_reset_n_reset_bridge_in_reset_reset),               //       clk_reset.reset
		.m0_address              (read_dma_cb_descriptor_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (read_dma_cb_descriptor_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (read_dma_cb_descriptor_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (read_dma_cb_descriptor_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (read_dma_cb_descriptor_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (read_dma_cb_descriptor_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (read_dma_cb_descriptor_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (read_dma_cb_descriptor_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (read_dma_cb_descriptor_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (read_dma_cb_descriptor_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (read_dma_cb_descriptor_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (read_dma_cb_descriptor_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (read_dma_cb_descriptor_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (read_dma_cb_descriptor_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (read_dma_cb_descriptor_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (read_dma_cb_descriptor_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (agent_pipeline_010_source0_ready),                              //              cp.ready
		.cp_valid                (agent_pipeline_010_source0_valid),                              //                .valid
		.cp_data                 (agent_pipeline_010_source0_data),                               //                .data
		.cp_startofpacket        (agent_pipeline_010_source0_startofpacket),                      //                .startofpacket
		.cp_endofpacket          (agent_pipeline_010_source0_endofpacket),                        //                .endofpacket
		.cp_channel              (agent_pipeline_010_source0_channel),                            //                .channel
		.rf_sink_ready           (read_dma_cb_descriptor_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (read_dma_cb_descriptor_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (read_dma_cb_descriptor_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (read_dma_cb_descriptor_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (read_dma_cb_descriptor_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (read_dma_cb_descriptor_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (read_dma_cb_descriptor_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (read_dma_cb_descriptor_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (read_dma_cb_descriptor_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (read_dma_cb_descriptor_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_005_out_0_ready),                             // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_005_out_0_valid),                             //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_005_out_0_data),                              //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_005_out_0_error),                             //                .error
		.rdata_fifo_src_ready    (read_dma_cb_descriptor_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (read_dma_cb_descriptor_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (read_dma_cb_descriptor_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                         //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                           //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (192),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) read_dma_cb_descriptor_slave_agent_rsp_fifo (
		.clk               (clk_125_clk_clk),                                               //       clk.clk
		.reset             (read_dma_cr_reset_n_reset_bridge_in_reset_reset),               // clk_reset.reset
		.in_data           (read_dma_cb_descriptor_slave_agent_rf_source_data),             //        in.data
		.in_valid          (read_dma_cb_descriptor_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (read_dma_cb_descriptor_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (read_dma_cb_descriptor_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (read_dma_cb_descriptor_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (read_dma_cb_descriptor_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (read_dma_cb_descriptor_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (read_dma_cb_descriptor_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (read_dma_cb_descriptor_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (read_dma_cb_descriptor_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                         // (terminated)
		.csr_read          (1'b0),                                                          // (terminated)
		.csr_write         (1'b0),                                                          // (terminated)
		.csr_readdata      (),                                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                          // (terminated)
		.almost_full_data  (),                                                              // (terminated)
		.almost_empty_data (),                                                              // (terminated)
		.in_empty          (1'b0),                                                          // (terminated)
		.out_empty         (),                                                              // (terminated)
		.in_error          (1'b0),                                                          // (terminated)
		.out_error         (),                                                              // (terminated)
		.in_channel        (1'b0),                                                          // (terminated)
		.out_channel       ()                                                               // (terminated)
	);

	ECE423_QSYS_mm_interconnect_2_router router (
		.sink_ready         (cpu_1_bridge_0_m0_agent_cp_ready),                 //      sink.ready
		.sink_valid         (cpu_1_bridge_0_m0_agent_cp_valid),                 //          .valid
		.sink_data          (cpu_1_bridge_0_m0_agent_cp_data),                  //          .data
		.sink_startofpacket (cpu_1_bridge_0_m0_agent_cp_startofpacket),         //          .startofpacket
		.sink_endofpacket   (cpu_1_bridge_0_m0_agent_cp_endofpacket),           //          .endofpacket
		.clk                (clk_125_clk_clk),                                  //       clk.clk
		.reset              (cpu_1_bridge_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_src_ready),                                 //       src.ready
		.src_valid          (router_src_valid),                                 //          .valid
		.src_data           (router_src_data),                                  //          .data
		.src_channel        (router_src_channel),                               //          .channel
		.src_startofpacket  (router_src_startofpacket),                         //          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                            //          .endofpacket
	);

	ECE423_QSYS_mm_interconnect_2_router_001 router_001 (
		.sink_ready         (agent_pipeline_001_source0_ready),                 //      sink.ready
		.sink_valid         (agent_pipeline_001_source0_valid),                 //          .valid
		.sink_data          (agent_pipeline_001_source0_data),                  //          .data
		.sink_startofpacket (agent_pipeline_001_source0_startofpacket),         //          .startofpacket
		.sink_endofpacket   (agent_pipeline_001_source0_endofpacket),           //          .endofpacket
		.clk                (clk_125_clk_clk),                                  //       clk.clk
		.reset              (cpu_1_bridge_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_001_src_ready),                             //       src.ready
		.src_valid          (router_001_src_valid),                             //          .valid
		.src_data           (router_001_src_data),                              //          .data
		.src_channel        (router_001_src_channel),                           //          .channel
		.src_startofpacket  (router_001_src_startofpacket),                     //          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                        //          .endofpacket
	);

	ECE423_QSYS_mm_interconnect_2_router_001 router_002 (
		.sink_ready         (agent_pipeline_003_source0_ready),                 //      sink.ready
		.sink_valid         (agent_pipeline_003_source0_valid),                 //          .valid
		.sink_data          (agent_pipeline_003_source0_data),                  //          .data
		.sink_startofpacket (agent_pipeline_003_source0_startofpacket),         //          .startofpacket
		.sink_endofpacket   (agent_pipeline_003_source0_endofpacket),           //          .endofpacket
		.clk                (clk_125_clk_clk),                                  //       clk.clk
		.reset              (cpu_1_bridge_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_002_src_ready),                             //       src.ready
		.src_valid          (router_002_src_valid),                             //          .valid
		.src_data           (router_002_src_data),                              //          .data
		.src_channel        (router_002_src_channel),                           //          .channel
		.src_startofpacket  (router_002_src_startofpacket),                     //          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                        //          .endofpacket
	);

	ECE423_QSYS_mm_interconnect_2_router_001 router_003 (
		.sink_ready         (agent_pipeline_005_source0_ready),                //      sink.ready
		.sink_valid         (agent_pipeline_005_source0_valid),                //          .valid
		.sink_data          (agent_pipeline_005_source0_data),                 //          .data
		.sink_startofpacket (agent_pipeline_005_source0_startofpacket),        //          .startofpacket
		.sink_endofpacket   (agent_pipeline_005_source0_endofpacket),          //          .endofpacket
		.clk                (clk_125_clk_clk),                                 //       clk.clk
		.reset              (read_dma_cr_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_003_src_ready),                            //       src.ready
		.src_valid          (router_003_src_valid),                            //          .valid
		.src_data           (router_003_src_data),                             //          .data
		.src_channel        (router_003_src_channel),                          //          .channel
		.src_startofpacket  (router_003_src_startofpacket),                    //          .startofpacket
		.src_endofpacket    (router_003_src_endofpacket)                       //          .endofpacket
	);

	ECE423_QSYS_mm_interconnect_2_router_001 router_004 (
		.sink_ready         (agent_pipeline_007_source0_ready),                //      sink.ready
		.sink_valid         (agent_pipeline_007_source0_valid),                //          .valid
		.sink_data          (agent_pipeline_007_source0_data),                 //          .data
		.sink_startofpacket (agent_pipeline_007_source0_startofpacket),        //          .startofpacket
		.sink_endofpacket   (agent_pipeline_007_source0_endofpacket),          //          .endofpacket
		.clk                (clk_125_clk_clk),                                 //       clk.clk
		.reset              (read_dma_cr_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_004_src_ready),                            //       src.ready
		.src_valid          (router_004_src_valid),                            //          .valid
		.src_data           (router_004_src_data),                             //          .data
		.src_channel        (router_004_src_channel),                          //          .channel
		.src_startofpacket  (router_004_src_startofpacket),                    //          .startofpacket
		.src_endofpacket    (router_004_src_endofpacket)                       //          .endofpacket
	);

	ECE423_QSYS_mm_interconnect_2_router_005 router_005 (
		.sink_ready         (agent_pipeline_009_source0_ready),                //      sink.ready
		.sink_valid         (agent_pipeline_009_source0_valid),                //          .valid
		.sink_data          (agent_pipeline_009_source0_data),                 //          .data
		.sink_startofpacket (agent_pipeline_009_source0_startofpacket),        //          .startofpacket
		.sink_endofpacket   (agent_pipeline_009_source0_endofpacket),          //          .endofpacket
		.clk                (clk_125_clk_clk),                                 //       clk.clk
		.reset              (read_dma_cr_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_005_src_ready),                            //       src.ready
		.src_valid          (router_005_src_valid),                            //          .valid
		.src_data           (router_005_src_data),                             //          .data
		.src_channel        (router_005_src_channel),                          //          .channel
		.src_startofpacket  (router_005_src_startofpacket),                    //          .startofpacket
		.src_endofpacket    (router_005_src_endofpacket)                       //          .endofpacket
	);

	ECE423_QSYS_mm_interconnect_2_router_005 router_006 (
		.sink_ready         (agent_pipeline_011_source0_ready),                //      sink.ready
		.sink_valid         (agent_pipeline_011_source0_valid),                //          .valid
		.sink_data          (agent_pipeline_011_source0_data),                 //          .data
		.sink_startofpacket (agent_pipeline_011_source0_startofpacket),        //          .startofpacket
		.sink_endofpacket   (agent_pipeline_011_source0_endofpacket),          //          .endofpacket
		.clk                (clk_125_clk_clk),                                 //       clk.clk
		.reset              (read_dma_cr_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_006_src_ready),                            //       src.ready
		.src_valid          (router_006_src_valid),                            //          .valid
		.src_data           (router_006_src_data),                             //          .data
		.src_channel        (router_006_src_channel),                          //          .channel
		.src_startofpacket  (router_006_src_startofpacket),                    //          .startofpacket
		.src_endofpacket    (router_006_src_endofpacket)                       //          .endofpacket
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (69),
		.PKT_DEST_ID_L             (67),
		.PKT_SRC_ID_H              (66),
		.PKT_SRC_ID_L              (64),
		.PKT_BYTE_CNT_H            (53),
		.PKT_BYTE_CNT_L            (49),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (44),
		.PKT_TRANS_WRITE           (45),
		.MAX_OUTSTANDING_RESPONSES (13),
		.PIPELINED                 (0),
		.ST_DATA_W                 (83),
		.ST_CHANNEL_W              (6),
		.VALID_WIDTH               (1),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) cpu_1_bridge_0_m0_limiter (
		.clk                    (clk_125_clk_clk),                                  //       clk.clk
		.reset                  (cpu_1_bridge_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.cmd_sink_ready         (router_src_ready),                                 //  cmd_sink.ready
		.cmd_sink_valid         (router_src_valid),                                 //          .valid
		.cmd_sink_data          (router_src_data),                                  //          .data
		.cmd_sink_channel       (router_src_channel),                               //          .channel
		.cmd_sink_startofpacket (router_src_startofpacket),                         //          .startofpacket
		.cmd_sink_endofpacket   (router_src_endofpacket),                           //          .endofpacket
		.cmd_src_ready          (cpu_1_bridge_0_m0_limiter_cmd_src_ready),          //   cmd_src.ready
		.cmd_src_data           (cpu_1_bridge_0_m0_limiter_cmd_src_data),           //          .data
		.cmd_src_channel        (cpu_1_bridge_0_m0_limiter_cmd_src_channel),        //          .channel
		.cmd_src_startofpacket  (cpu_1_bridge_0_m0_limiter_cmd_src_startofpacket),  //          .startofpacket
		.cmd_src_endofpacket    (cpu_1_bridge_0_m0_limiter_cmd_src_endofpacket),    //          .endofpacket
		.cmd_src_valid          (cpu_1_bridge_0_m0_limiter_cmd_src_valid),          //          .valid
		.rsp_sink_ready         (limiter_pipeline_001_source0_ready),               //  rsp_sink.ready
		.rsp_sink_valid         (limiter_pipeline_001_source0_valid),               //          .valid
		.rsp_sink_channel       (limiter_pipeline_001_source0_channel),             //          .channel
		.rsp_sink_data          (limiter_pipeline_001_source0_data),                //          .data
		.rsp_sink_startofpacket (limiter_pipeline_001_source0_startofpacket),       //          .startofpacket
		.rsp_sink_endofpacket   (limiter_pipeline_001_source0_endofpacket),         //          .endofpacket
		.rsp_src_ready          (cpu_1_bridge_0_m0_limiter_rsp_src_ready),          //   rsp_src.ready
		.rsp_src_valid          (cpu_1_bridge_0_m0_limiter_rsp_src_valid),          //          .valid
		.rsp_src_data           (cpu_1_bridge_0_m0_limiter_rsp_src_data),           //          .data
		.rsp_src_channel        (cpu_1_bridge_0_m0_limiter_rsp_src_channel),        //          .channel
		.rsp_src_startofpacket  (cpu_1_bridge_0_m0_limiter_rsp_src_startofpacket),  //          .startofpacket
		.rsp_src_endofpacket    (cpu_1_bridge_0_m0_limiter_rsp_src_endofpacket)     //          .endofpacket
	);

	ECE423_QSYS_mm_interconnect_2_cmd_demux cmd_demux (
		.clk                (clk_125_clk_clk),                                  //       clk.clk
		.reset              (cpu_1_bridge_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (limiter_pipeline_source0_ready),                   //      sink.ready
		.sink_channel       (limiter_pipeline_source0_channel),                 //          .channel
		.sink_data          (limiter_pipeline_source0_data),                    //          .data
		.sink_startofpacket (limiter_pipeline_source0_startofpacket),           //          .startofpacket
		.sink_endofpacket   (limiter_pipeline_source0_endofpacket),             //          .endofpacket
		.sink_valid         (limiter_pipeline_source0_valid),                   //          .valid
		.src0_ready         (cmd_demux_src0_ready),                             //      src0.ready
		.src0_valid         (cmd_demux_src0_valid),                             //          .valid
		.src0_data          (cmd_demux_src0_data),                              //          .data
		.src0_channel       (cmd_demux_src0_channel),                           //          .channel
		.src0_startofpacket (cmd_demux_src0_startofpacket),                     //          .startofpacket
		.src0_endofpacket   (cmd_demux_src0_endofpacket),                       //          .endofpacket
		.src1_ready         (cmd_demux_src1_ready),                             //      src1.ready
		.src1_valid         (cmd_demux_src1_valid),                             //          .valid
		.src1_data          (cmd_demux_src1_data),                              //          .data
		.src1_channel       (cmd_demux_src1_channel),                           //          .channel
		.src1_startofpacket (cmd_demux_src1_startofpacket),                     //          .startofpacket
		.src1_endofpacket   (cmd_demux_src1_endofpacket),                       //          .endofpacket
		.src2_ready         (cmd_demux_src2_ready),                             //      src2.ready
		.src2_valid         (cmd_demux_src2_valid),                             //          .valid
		.src2_data          (cmd_demux_src2_data),                              //          .data
		.src2_channel       (cmd_demux_src2_channel),                           //          .channel
		.src2_startofpacket (cmd_demux_src2_startofpacket),                     //          .startofpacket
		.src2_endofpacket   (cmd_demux_src2_endofpacket),                       //          .endofpacket
		.src3_ready         (cmd_demux_src3_ready),                             //      src3.ready
		.src3_valid         (cmd_demux_src3_valid),                             //          .valid
		.src3_data          (cmd_demux_src3_data),                              //          .data
		.src3_channel       (cmd_demux_src3_channel),                           //          .channel
		.src3_startofpacket (cmd_demux_src3_startofpacket),                     //          .startofpacket
		.src3_endofpacket   (cmd_demux_src3_endofpacket),                       //          .endofpacket
		.src4_ready         (cmd_demux_src4_ready),                             //      src4.ready
		.src4_valid         (cmd_demux_src4_valid),                             //          .valid
		.src4_data          (cmd_demux_src4_data),                              //          .data
		.src4_channel       (cmd_demux_src4_channel),                           //          .channel
		.src4_startofpacket (cmd_demux_src4_startofpacket),                     //          .startofpacket
		.src4_endofpacket   (cmd_demux_src4_endofpacket),                       //          .endofpacket
		.src5_ready         (cmd_demux_src5_ready),                             //      src5.ready
		.src5_valid         (cmd_demux_src5_valid),                             //          .valid
		.src5_data          (cmd_demux_src5_data),                              //          .data
		.src5_channel       (cmd_demux_src5_channel),                           //          .channel
		.src5_startofpacket (cmd_demux_src5_startofpacket),                     //          .startofpacket
		.src5_endofpacket   (cmd_demux_src5_endofpacket)                        //          .endofpacket
	);

	ECE423_QSYS_mm_interconnect_2_cmd_mux cmd_mux (
		.clk                 (clk_125_clk_clk),                                  //       clk.clk
		.reset               (cpu_1_bridge_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                                //       src.ready
		.src_valid           (cmd_mux_src_valid),                                //          .valid
		.src_data            (cmd_mux_src_data),                                 //          .data
		.src_channel         (cmd_mux_src_channel),                              //          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                        //          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                          //          .endofpacket
		.sink0_ready         (mux_pipeline_source0_ready),                       //     sink0.ready
		.sink0_valid         (mux_pipeline_source0_valid),                       //          .valid
		.sink0_channel       (mux_pipeline_source0_channel),                     //          .channel
		.sink0_data          (mux_pipeline_source0_data),                        //          .data
		.sink0_startofpacket (mux_pipeline_source0_startofpacket),               //          .startofpacket
		.sink0_endofpacket   (mux_pipeline_source0_endofpacket)                  //          .endofpacket
	);

	ECE423_QSYS_mm_interconnect_2_cmd_mux cmd_mux_001 (
		.clk                 (clk_125_clk_clk),                                  //       clk.clk
		.reset               (cpu_1_bridge_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_001_src_ready),                            //       src.ready
		.src_valid           (cmd_mux_001_src_valid),                            //          .valid
		.src_data            (cmd_mux_001_src_data),                             //          .data
		.src_channel         (cmd_mux_001_src_channel),                          //          .channel
		.src_startofpacket   (cmd_mux_001_src_startofpacket),                    //          .startofpacket
		.src_endofpacket     (cmd_mux_001_src_endofpacket),                      //          .endofpacket
		.sink0_ready         (mux_pipeline_001_source0_ready),                   //     sink0.ready
		.sink0_valid         (mux_pipeline_001_source0_valid),                   //          .valid
		.sink0_channel       (mux_pipeline_001_source0_channel),                 //          .channel
		.sink0_data          (mux_pipeline_001_source0_data),                    //          .data
		.sink0_startofpacket (mux_pipeline_001_source0_startofpacket),           //          .startofpacket
		.sink0_endofpacket   (mux_pipeline_001_source0_endofpacket)              //          .endofpacket
	);

	ECE423_QSYS_mm_interconnect_2_cmd_mux cmd_mux_002 (
		.clk                 (clk_125_clk_clk),                                 //       clk.clk
		.reset               (read_dma_cr_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_002_src_ready),                           //       src.ready
		.src_valid           (cmd_mux_002_src_valid),                           //          .valid
		.src_data            (cmd_mux_002_src_data),                            //          .data
		.src_channel         (cmd_mux_002_src_channel),                         //          .channel
		.src_startofpacket   (cmd_mux_002_src_startofpacket),                   //          .startofpacket
		.src_endofpacket     (cmd_mux_002_src_endofpacket),                     //          .endofpacket
		.sink0_ready         (mux_pipeline_002_source0_ready),                  //     sink0.ready
		.sink0_valid         (mux_pipeline_002_source0_valid),                  //          .valid
		.sink0_channel       (mux_pipeline_002_source0_channel),                //          .channel
		.sink0_data          (mux_pipeline_002_source0_data),                   //          .data
		.sink0_startofpacket (mux_pipeline_002_source0_startofpacket),          //          .startofpacket
		.sink0_endofpacket   (mux_pipeline_002_source0_endofpacket)             //          .endofpacket
	);

	ECE423_QSYS_mm_interconnect_2_cmd_mux cmd_mux_003 (
		.clk                 (clk_125_clk_clk),                                 //       clk.clk
		.reset               (read_dma_cr_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_003_src_ready),                           //       src.ready
		.src_valid           (cmd_mux_003_src_valid),                           //          .valid
		.src_data            (cmd_mux_003_src_data),                            //          .data
		.src_channel         (cmd_mux_003_src_channel),                         //          .channel
		.src_startofpacket   (cmd_mux_003_src_startofpacket),                   //          .startofpacket
		.src_endofpacket     (cmd_mux_003_src_endofpacket),                     //          .endofpacket
		.sink0_ready         (mux_pipeline_003_source0_ready),                  //     sink0.ready
		.sink0_valid         (mux_pipeline_003_source0_valid),                  //          .valid
		.sink0_channel       (mux_pipeline_003_source0_channel),                //          .channel
		.sink0_data          (mux_pipeline_003_source0_data),                   //          .data
		.sink0_startofpacket (mux_pipeline_003_source0_startofpacket),          //          .startofpacket
		.sink0_endofpacket   (mux_pipeline_003_source0_endofpacket)             //          .endofpacket
	);

	ECE423_QSYS_mm_interconnect_2_cmd_mux cmd_mux_004 (
		.clk                 (clk_125_clk_clk),                                 //       clk.clk
		.reset               (read_dma_cr_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_004_src_ready),                           //       src.ready
		.src_valid           (cmd_mux_004_src_valid),                           //          .valid
		.src_data            (cmd_mux_004_src_data),                            //          .data
		.src_channel         (cmd_mux_004_src_channel),                         //          .channel
		.src_startofpacket   (cmd_mux_004_src_startofpacket),                   //          .startofpacket
		.src_endofpacket     (cmd_mux_004_src_endofpacket),                     //          .endofpacket
		.sink0_ready         (mux_pipeline_004_source0_ready),                  //     sink0.ready
		.sink0_valid         (mux_pipeline_004_source0_valid),                  //          .valid
		.sink0_channel       (mux_pipeline_004_source0_channel),                //          .channel
		.sink0_data          (mux_pipeline_004_source0_data),                   //          .data
		.sink0_startofpacket (mux_pipeline_004_source0_startofpacket),          //          .startofpacket
		.sink0_endofpacket   (mux_pipeline_004_source0_endofpacket)             //          .endofpacket
	);

	ECE423_QSYS_mm_interconnect_2_cmd_mux cmd_mux_005 (
		.clk                 (clk_125_clk_clk),                                 //       clk.clk
		.reset               (read_dma_cr_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_005_src_ready),                           //       src.ready
		.src_valid           (cmd_mux_005_src_valid),                           //          .valid
		.src_data            (cmd_mux_005_src_data),                            //          .data
		.src_channel         (cmd_mux_005_src_channel),                         //          .channel
		.src_startofpacket   (cmd_mux_005_src_startofpacket),                   //          .startofpacket
		.src_endofpacket     (cmd_mux_005_src_endofpacket),                     //          .endofpacket
		.sink0_ready         (mux_pipeline_005_source0_ready),                  //     sink0.ready
		.sink0_valid         (mux_pipeline_005_source0_valid),                  //          .valid
		.sink0_channel       (mux_pipeline_005_source0_channel),                //          .channel
		.sink0_data          (mux_pipeline_005_source0_data),                   //          .data
		.sink0_startofpacket (mux_pipeline_005_source0_startofpacket),          //          .startofpacket
		.sink0_endofpacket   (mux_pipeline_005_source0_endofpacket)             //          .endofpacket
	);

	ECE423_QSYS_mm_interconnect_2_rsp_demux rsp_demux (
		.clk                (clk_125_clk_clk),                                  //       clk.clk
		.reset              (cpu_1_bridge_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_001_src_ready),                             //      sink.ready
		.sink_channel       (router_001_src_channel),                           //          .channel
		.sink_data          (router_001_src_data),                              //          .data
		.sink_startofpacket (router_001_src_startofpacket),                     //          .startofpacket
		.sink_endofpacket   (router_001_src_endofpacket),                       //          .endofpacket
		.sink_valid         (router_001_src_valid),                             //          .valid
		.src0_ready         (rsp_demux_src0_ready),                             //      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                             //          .valid
		.src0_data          (rsp_demux_src0_data),                              //          .data
		.src0_channel       (rsp_demux_src0_channel),                           //          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                     //          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket)                        //          .endofpacket
	);

	ECE423_QSYS_mm_interconnect_2_rsp_demux rsp_demux_001 (
		.clk                (clk_125_clk_clk),                                  //       clk.clk
		.reset              (cpu_1_bridge_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_002_src_ready),                             //      sink.ready
		.sink_channel       (router_002_src_channel),                           //          .channel
		.sink_data          (router_002_src_data),                              //          .data
		.sink_startofpacket (router_002_src_startofpacket),                     //          .startofpacket
		.sink_endofpacket   (router_002_src_endofpacket),                       //          .endofpacket
		.sink_valid         (router_002_src_valid),                             //          .valid
		.src0_ready         (rsp_demux_001_src0_ready),                         //      src0.ready
		.src0_valid         (rsp_demux_001_src0_valid),                         //          .valid
		.src0_data          (rsp_demux_001_src0_data),                          //          .data
		.src0_channel       (rsp_demux_001_src0_channel),                       //          .channel
		.src0_startofpacket (rsp_demux_001_src0_startofpacket),                 //          .startofpacket
		.src0_endofpacket   (rsp_demux_001_src0_endofpacket)                    //          .endofpacket
	);

	ECE423_QSYS_mm_interconnect_2_rsp_demux rsp_demux_002 (
		.clk                (clk_125_clk_clk),                                 //       clk.clk
		.reset              (read_dma_cr_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_003_src_ready),                            //      sink.ready
		.sink_channel       (router_003_src_channel),                          //          .channel
		.sink_data          (router_003_src_data),                             //          .data
		.sink_startofpacket (router_003_src_startofpacket),                    //          .startofpacket
		.sink_endofpacket   (router_003_src_endofpacket),                      //          .endofpacket
		.sink_valid         (router_003_src_valid),                            //          .valid
		.src0_ready         (rsp_demux_002_src0_ready),                        //      src0.ready
		.src0_valid         (rsp_demux_002_src0_valid),                        //          .valid
		.src0_data          (rsp_demux_002_src0_data),                         //          .data
		.src0_channel       (rsp_demux_002_src0_channel),                      //          .channel
		.src0_startofpacket (rsp_demux_002_src0_startofpacket),                //          .startofpacket
		.src0_endofpacket   (rsp_demux_002_src0_endofpacket)                   //          .endofpacket
	);

	ECE423_QSYS_mm_interconnect_2_rsp_demux rsp_demux_003 (
		.clk                (clk_125_clk_clk),                                 //       clk.clk
		.reset              (read_dma_cr_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_004_src_ready),                            //      sink.ready
		.sink_channel       (router_004_src_channel),                          //          .channel
		.sink_data          (router_004_src_data),                             //          .data
		.sink_startofpacket (router_004_src_startofpacket),                    //          .startofpacket
		.sink_endofpacket   (router_004_src_endofpacket),                      //          .endofpacket
		.sink_valid         (router_004_src_valid),                            //          .valid
		.src0_ready         (rsp_demux_003_src0_ready),                        //      src0.ready
		.src0_valid         (rsp_demux_003_src0_valid),                        //          .valid
		.src0_data          (rsp_demux_003_src0_data),                         //          .data
		.src0_channel       (rsp_demux_003_src0_channel),                      //          .channel
		.src0_startofpacket (rsp_demux_003_src0_startofpacket),                //          .startofpacket
		.src0_endofpacket   (rsp_demux_003_src0_endofpacket)                   //          .endofpacket
	);

	ECE423_QSYS_mm_interconnect_2_rsp_demux rsp_demux_004 (
		.clk                (clk_125_clk_clk),                                                  //       clk.clk
		.reset              (read_dma_cr_reset_n_reset_bridge_in_reset_reset),                  // clk_reset.reset
		.sink_ready         (read_dma_cr_descriptor_slave_rsp_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (read_dma_cr_descriptor_slave_rsp_width_adapter_src_channel),       //          .channel
		.sink_data          (read_dma_cr_descriptor_slave_rsp_width_adapter_src_data),          //          .data
		.sink_startofpacket (read_dma_cr_descriptor_slave_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (read_dma_cr_descriptor_slave_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (read_dma_cr_descriptor_slave_rsp_width_adapter_src_valid),         //          .valid
		.src0_ready         (rsp_demux_004_src0_ready),                                         //      src0.ready
		.src0_valid         (rsp_demux_004_src0_valid),                                         //          .valid
		.src0_data          (rsp_demux_004_src0_data),                                          //          .data
		.src0_channel       (rsp_demux_004_src0_channel),                                       //          .channel
		.src0_startofpacket (rsp_demux_004_src0_startofpacket),                                 //          .startofpacket
		.src0_endofpacket   (rsp_demux_004_src0_endofpacket)                                    //          .endofpacket
	);

	ECE423_QSYS_mm_interconnect_2_rsp_demux rsp_demux_005 (
		.clk                (clk_125_clk_clk),                                                  //       clk.clk
		.reset              (read_dma_cr_reset_n_reset_bridge_in_reset_reset),                  // clk_reset.reset
		.sink_ready         (read_dma_cb_descriptor_slave_rsp_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (read_dma_cb_descriptor_slave_rsp_width_adapter_src_channel),       //          .channel
		.sink_data          (read_dma_cb_descriptor_slave_rsp_width_adapter_src_data),          //          .data
		.sink_startofpacket (read_dma_cb_descriptor_slave_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (read_dma_cb_descriptor_slave_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (read_dma_cb_descriptor_slave_rsp_width_adapter_src_valid),         //          .valid
		.src0_ready         (rsp_demux_005_src0_ready),                                         //      src0.ready
		.src0_valid         (rsp_demux_005_src0_valid),                                         //          .valid
		.src0_data          (rsp_demux_005_src0_data),                                          //          .data
		.src0_channel       (rsp_demux_005_src0_channel),                                       //          .channel
		.src0_startofpacket (rsp_demux_005_src0_startofpacket),                                 //          .startofpacket
		.src0_endofpacket   (rsp_demux_005_src0_endofpacket)                                    //          .endofpacket
	);

	ECE423_QSYS_mm_interconnect_2_rsp_mux rsp_mux (
		.clk                 (clk_125_clk_clk),                                  //       clk.clk
		.reset               (cpu_1_bridge_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_src_ready),                                //       src.ready
		.src_valid           (rsp_mux_src_valid),                                //          .valid
		.src_data            (rsp_mux_src_data),                                 //          .data
		.src_channel         (rsp_mux_src_channel),                              //          .channel
		.src_startofpacket   (rsp_mux_src_startofpacket),                        //          .startofpacket
		.src_endofpacket     (rsp_mux_src_endofpacket),                          //          .endofpacket
		.sink0_ready         (mux_pipeline_006_source0_ready),                   //     sink0.ready
		.sink0_valid         (mux_pipeline_006_source0_valid),                   //          .valid
		.sink0_channel       (mux_pipeline_006_source0_channel),                 //          .channel
		.sink0_data          (mux_pipeline_006_source0_data),                    //          .data
		.sink0_startofpacket (mux_pipeline_006_source0_startofpacket),           //          .startofpacket
		.sink0_endofpacket   (mux_pipeline_006_source0_endofpacket),             //          .endofpacket
		.sink1_ready         (mux_pipeline_007_source0_ready),                   //     sink1.ready
		.sink1_valid         (mux_pipeline_007_source0_valid),                   //          .valid
		.sink1_channel       (mux_pipeline_007_source0_channel),                 //          .channel
		.sink1_data          (mux_pipeline_007_source0_data),                    //          .data
		.sink1_startofpacket (mux_pipeline_007_source0_startofpacket),           //          .startofpacket
		.sink1_endofpacket   (mux_pipeline_007_source0_endofpacket),             //          .endofpacket
		.sink2_ready         (mux_pipeline_008_source0_ready),                   //     sink2.ready
		.sink2_valid         (mux_pipeline_008_source0_valid),                   //          .valid
		.sink2_channel       (mux_pipeline_008_source0_channel),                 //          .channel
		.sink2_data          (mux_pipeline_008_source0_data),                    //          .data
		.sink2_startofpacket (mux_pipeline_008_source0_startofpacket),           //          .startofpacket
		.sink2_endofpacket   (mux_pipeline_008_source0_endofpacket),             //          .endofpacket
		.sink3_ready         (mux_pipeline_009_source0_ready),                   //     sink3.ready
		.sink3_valid         (mux_pipeline_009_source0_valid),                   //          .valid
		.sink3_channel       (mux_pipeline_009_source0_channel),                 //          .channel
		.sink3_data          (mux_pipeline_009_source0_data),                    //          .data
		.sink3_startofpacket (mux_pipeline_009_source0_startofpacket),           //          .startofpacket
		.sink3_endofpacket   (mux_pipeline_009_source0_endofpacket),             //          .endofpacket
		.sink4_ready         (mux_pipeline_010_source0_ready),                   //     sink4.ready
		.sink4_valid         (mux_pipeline_010_source0_valid),                   //          .valid
		.sink4_channel       (mux_pipeline_010_source0_channel),                 //          .channel
		.sink4_data          (mux_pipeline_010_source0_data),                    //          .data
		.sink4_startofpacket (mux_pipeline_010_source0_startofpacket),           //          .startofpacket
		.sink4_endofpacket   (mux_pipeline_010_source0_endofpacket),             //          .endofpacket
		.sink5_ready         (mux_pipeline_011_source0_ready),                   //     sink5.ready
		.sink5_valid         (mux_pipeline_011_source0_valid),                   //          .valid
		.sink5_channel       (mux_pipeline_011_source0_channel),                 //          .channel
		.sink5_data          (mux_pipeline_011_source0_data),                    //          .data
		.sink5_startofpacket (mux_pipeline_011_source0_startofpacket),           //          .startofpacket
		.sink5_endofpacket   (mux_pipeline_011_source0_endofpacket)              //          .endofpacket
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (42),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (53),
		.IN_PKT_BYTE_CNT_L             (49),
		.IN_PKT_TRANS_COMPRESSED_READ  (43),
		.IN_PKT_TRANS_WRITE            (45),
		.IN_PKT_BURSTWRAP_H            (54),
		.IN_PKT_BURSTWRAP_L            (54),
		.IN_PKT_BURST_SIZE_H           (57),
		.IN_PKT_BURST_SIZE_L           (55),
		.IN_PKT_RESPONSE_STATUS_H      (79),
		.IN_PKT_RESPONSE_STATUS_L      (78),
		.IN_PKT_TRANS_EXCLUSIVE        (48),
		.IN_PKT_BURST_TYPE_H           (59),
		.IN_PKT_BURST_TYPE_L           (58),
		.IN_PKT_ORI_BURST_SIZE_L       (80),
		.IN_PKT_ORI_BURST_SIZE_H       (82),
		.IN_ST_DATA_W                  (83),
		.OUT_PKT_ADDR_H                (150),
		.OUT_PKT_ADDR_L                (144),
		.OUT_PKT_DATA_H                (127),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (143),
		.OUT_PKT_BYTEEN_L              (128),
		.OUT_PKT_BYTE_CNT_H            (161),
		.OUT_PKT_BYTE_CNT_L            (157),
		.OUT_PKT_TRANS_COMPRESSED_READ (151),
		.OUT_PKT_BURST_SIZE_H          (165),
		.OUT_PKT_BURST_SIZE_L          (163),
		.OUT_PKT_RESPONSE_STATUS_H     (187),
		.OUT_PKT_RESPONSE_STATUS_L     (186),
		.OUT_PKT_TRANS_EXCLUSIVE       (156),
		.OUT_PKT_BURST_TYPE_H          (167),
		.OUT_PKT_BURST_TYPE_L          (166),
		.OUT_PKT_ORI_BURST_SIZE_L      (188),
		.OUT_PKT_ORI_BURST_SIZE_H      (190),
		.OUT_ST_DATA_W                 (191),
		.ST_CHANNEL_W                  (6),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) read_dma_cr_descriptor_slave_cmd_width_adapter (
		.clk                  (clk_125_clk_clk),                                                  //       clk.clk
		.reset                (read_dma_cr_reset_n_reset_bridge_in_reset_reset),                  // clk_reset.reset
		.in_valid             (cmd_mux_004_src_valid),                                            //      sink.valid
		.in_channel           (cmd_mux_004_src_channel),                                          //          .channel
		.in_startofpacket     (cmd_mux_004_src_startofpacket),                                    //          .startofpacket
		.in_endofpacket       (cmd_mux_004_src_endofpacket),                                      //          .endofpacket
		.in_ready             (cmd_mux_004_src_ready),                                            //          .ready
		.in_data              (cmd_mux_004_src_data),                                             //          .data
		.out_endofpacket      (read_dma_cr_descriptor_slave_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (read_dma_cr_descriptor_slave_cmd_width_adapter_src_data),          //          .data
		.out_channel          (read_dma_cr_descriptor_slave_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (read_dma_cr_descriptor_slave_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (read_dma_cr_descriptor_slave_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (read_dma_cr_descriptor_slave_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                            // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (42),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (53),
		.IN_PKT_BYTE_CNT_L             (49),
		.IN_PKT_TRANS_COMPRESSED_READ  (43),
		.IN_PKT_TRANS_WRITE            (45),
		.IN_PKT_BURSTWRAP_H            (54),
		.IN_PKT_BURSTWRAP_L            (54),
		.IN_PKT_BURST_SIZE_H           (57),
		.IN_PKT_BURST_SIZE_L           (55),
		.IN_PKT_RESPONSE_STATUS_H      (79),
		.IN_PKT_RESPONSE_STATUS_L      (78),
		.IN_PKT_TRANS_EXCLUSIVE        (48),
		.IN_PKT_BURST_TYPE_H           (59),
		.IN_PKT_BURST_TYPE_L           (58),
		.IN_PKT_ORI_BURST_SIZE_L       (80),
		.IN_PKT_ORI_BURST_SIZE_H       (82),
		.IN_ST_DATA_W                  (83),
		.OUT_PKT_ADDR_H                (150),
		.OUT_PKT_ADDR_L                (144),
		.OUT_PKT_DATA_H                (127),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (143),
		.OUT_PKT_BYTEEN_L              (128),
		.OUT_PKT_BYTE_CNT_H            (161),
		.OUT_PKT_BYTE_CNT_L            (157),
		.OUT_PKT_TRANS_COMPRESSED_READ (151),
		.OUT_PKT_BURST_SIZE_H          (165),
		.OUT_PKT_BURST_SIZE_L          (163),
		.OUT_PKT_RESPONSE_STATUS_H     (187),
		.OUT_PKT_RESPONSE_STATUS_L     (186),
		.OUT_PKT_TRANS_EXCLUSIVE       (156),
		.OUT_PKT_BURST_TYPE_H          (167),
		.OUT_PKT_BURST_TYPE_L          (166),
		.OUT_PKT_ORI_BURST_SIZE_L      (188),
		.OUT_PKT_ORI_BURST_SIZE_H      (190),
		.OUT_ST_DATA_W                 (191),
		.ST_CHANNEL_W                  (6),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) read_dma_cb_descriptor_slave_cmd_width_adapter (
		.clk                  (clk_125_clk_clk),                                                  //       clk.clk
		.reset                (read_dma_cr_reset_n_reset_bridge_in_reset_reset),                  // clk_reset.reset
		.in_valid             (cmd_mux_005_src_valid),                                            //      sink.valid
		.in_channel           (cmd_mux_005_src_channel),                                          //          .channel
		.in_startofpacket     (cmd_mux_005_src_startofpacket),                                    //          .startofpacket
		.in_endofpacket       (cmd_mux_005_src_endofpacket),                                      //          .endofpacket
		.in_ready             (cmd_mux_005_src_ready),                                            //          .ready
		.in_data              (cmd_mux_005_src_data),                                             //          .data
		.out_endofpacket      (read_dma_cb_descriptor_slave_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (read_dma_cb_descriptor_slave_cmd_width_adapter_src_data),          //          .data
		.out_channel          (read_dma_cb_descriptor_slave_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (read_dma_cb_descriptor_slave_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (read_dma_cb_descriptor_slave_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (read_dma_cb_descriptor_slave_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                            // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (150),
		.IN_PKT_ADDR_L                 (144),
		.IN_PKT_DATA_H                 (127),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (143),
		.IN_PKT_BYTEEN_L               (128),
		.IN_PKT_BYTE_CNT_H             (161),
		.IN_PKT_BYTE_CNT_L             (157),
		.IN_PKT_TRANS_COMPRESSED_READ  (151),
		.IN_PKT_TRANS_WRITE            (153),
		.IN_PKT_BURSTWRAP_H            (162),
		.IN_PKT_BURSTWRAP_L            (162),
		.IN_PKT_BURST_SIZE_H           (165),
		.IN_PKT_BURST_SIZE_L           (163),
		.IN_PKT_RESPONSE_STATUS_H      (187),
		.IN_PKT_RESPONSE_STATUS_L      (186),
		.IN_PKT_TRANS_EXCLUSIVE        (156),
		.IN_PKT_BURST_TYPE_H           (167),
		.IN_PKT_BURST_TYPE_L           (166),
		.IN_PKT_ORI_BURST_SIZE_L       (188),
		.IN_PKT_ORI_BURST_SIZE_H       (190),
		.IN_ST_DATA_W                  (191),
		.OUT_PKT_ADDR_H                (42),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (53),
		.OUT_PKT_BYTE_CNT_L            (49),
		.OUT_PKT_TRANS_COMPRESSED_READ (43),
		.OUT_PKT_BURST_SIZE_H          (57),
		.OUT_PKT_BURST_SIZE_L          (55),
		.OUT_PKT_RESPONSE_STATUS_H     (79),
		.OUT_PKT_RESPONSE_STATUS_L     (78),
		.OUT_PKT_TRANS_EXCLUSIVE       (48),
		.OUT_PKT_BURST_TYPE_H          (59),
		.OUT_PKT_BURST_TYPE_L          (58),
		.OUT_PKT_ORI_BURST_SIZE_L      (80),
		.OUT_PKT_ORI_BURST_SIZE_H      (82),
		.OUT_ST_DATA_W                 (83),
		.ST_CHANNEL_W                  (6),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) read_dma_cr_descriptor_slave_rsp_width_adapter (
		.clk                  (clk_125_clk_clk),                                                  //       clk.clk
		.reset                (read_dma_cr_reset_n_reset_bridge_in_reset_reset),                  // clk_reset.reset
		.in_valid             (router_005_src_valid),                                             //      sink.valid
		.in_channel           (router_005_src_channel),                                           //          .channel
		.in_startofpacket     (router_005_src_startofpacket),                                     //          .startofpacket
		.in_endofpacket       (router_005_src_endofpacket),                                       //          .endofpacket
		.in_ready             (router_005_src_ready),                                             //          .ready
		.in_data              (router_005_src_data),                                              //          .data
		.out_endofpacket      (read_dma_cr_descriptor_slave_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (read_dma_cr_descriptor_slave_rsp_width_adapter_src_data),          //          .data
		.out_channel          (read_dma_cr_descriptor_slave_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (read_dma_cr_descriptor_slave_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (read_dma_cr_descriptor_slave_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (read_dma_cr_descriptor_slave_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                            // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (150),
		.IN_PKT_ADDR_L                 (144),
		.IN_PKT_DATA_H                 (127),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (143),
		.IN_PKT_BYTEEN_L               (128),
		.IN_PKT_BYTE_CNT_H             (161),
		.IN_PKT_BYTE_CNT_L             (157),
		.IN_PKT_TRANS_COMPRESSED_READ  (151),
		.IN_PKT_TRANS_WRITE            (153),
		.IN_PKT_BURSTWRAP_H            (162),
		.IN_PKT_BURSTWRAP_L            (162),
		.IN_PKT_BURST_SIZE_H           (165),
		.IN_PKT_BURST_SIZE_L           (163),
		.IN_PKT_RESPONSE_STATUS_H      (187),
		.IN_PKT_RESPONSE_STATUS_L      (186),
		.IN_PKT_TRANS_EXCLUSIVE        (156),
		.IN_PKT_BURST_TYPE_H           (167),
		.IN_PKT_BURST_TYPE_L           (166),
		.IN_PKT_ORI_BURST_SIZE_L       (188),
		.IN_PKT_ORI_BURST_SIZE_H       (190),
		.IN_ST_DATA_W                  (191),
		.OUT_PKT_ADDR_H                (42),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (53),
		.OUT_PKT_BYTE_CNT_L            (49),
		.OUT_PKT_TRANS_COMPRESSED_READ (43),
		.OUT_PKT_BURST_SIZE_H          (57),
		.OUT_PKT_BURST_SIZE_L          (55),
		.OUT_PKT_RESPONSE_STATUS_H     (79),
		.OUT_PKT_RESPONSE_STATUS_L     (78),
		.OUT_PKT_TRANS_EXCLUSIVE       (48),
		.OUT_PKT_BURST_TYPE_H          (59),
		.OUT_PKT_BURST_TYPE_L          (58),
		.OUT_PKT_ORI_BURST_SIZE_L      (80),
		.OUT_PKT_ORI_BURST_SIZE_H      (82),
		.OUT_ST_DATA_W                 (83),
		.ST_CHANNEL_W                  (6),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) read_dma_cb_descriptor_slave_rsp_width_adapter (
		.clk                  (clk_125_clk_clk),                                                  //       clk.clk
		.reset                (read_dma_cr_reset_n_reset_bridge_in_reset_reset),                  // clk_reset.reset
		.in_valid             (router_006_src_valid),                                             //      sink.valid
		.in_channel           (router_006_src_channel),                                           //          .channel
		.in_startofpacket     (router_006_src_startofpacket),                                     //          .startofpacket
		.in_endofpacket       (router_006_src_endofpacket),                                       //          .endofpacket
		.in_ready             (router_006_src_ready),                                             //          .ready
		.in_data              (router_006_src_data),                                              //          .data
		.out_endofpacket      (read_dma_cb_descriptor_slave_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (read_dma_cb_descriptor_slave_rsp_width_adapter_src_data),          //          .data
		.out_channel          (read_dma_cb_descriptor_slave_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (read_dma_cb_descriptor_slave_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (read_dma_cb_descriptor_slave_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (read_dma_cb_descriptor_slave_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                            // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (83),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (6),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) limiter_pipeline (
		.clk               (clk_125_clk_clk),                                  //       cr0.clk
		.reset             (cpu_1_bridge_0_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cpu_1_bridge_0_m0_limiter_cmd_src_ready),          //     sink0.ready
		.in_valid          (cpu_1_bridge_0_m0_limiter_cmd_src_valid),          //          .valid
		.in_startofpacket  (cpu_1_bridge_0_m0_limiter_cmd_src_startofpacket),  //          .startofpacket
		.in_endofpacket    (cpu_1_bridge_0_m0_limiter_cmd_src_endofpacket),    //          .endofpacket
		.in_data           (cpu_1_bridge_0_m0_limiter_cmd_src_data),           //          .data
		.in_channel        (cpu_1_bridge_0_m0_limiter_cmd_src_channel),        //          .channel
		.out_ready         (limiter_pipeline_source0_ready),                   //   source0.ready
		.out_valid         (limiter_pipeline_source0_valid),                   //          .valid
		.out_startofpacket (limiter_pipeline_source0_startofpacket),           //          .startofpacket
		.out_endofpacket   (limiter_pipeline_source0_endofpacket),             //          .endofpacket
		.out_data          (limiter_pipeline_source0_data),                    //          .data
		.out_channel       (limiter_pipeline_source0_channel),                 //          .channel
		.in_empty          (1'b0),                                             // (terminated)
		.out_empty         (),                                                 // (terminated)
		.out_error         (),                                                 // (terminated)
		.in_error          (1'b0)                                              // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (83),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (6),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) limiter_pipeline_001 (
		.clk               (clk_125_clk_clk),                                  //       cr0.clk
		.reset             (cpu_1_bridge_0_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (rsp_mux_src_ready),                                //     sink0.ready
		.in_valid          (rsp_mux_src_valid),                                //          .valid
		.in_startofpacket  (rsp_mux_src_startofpacket),                        //          .startofpacket
		.in_endofpacket    (rsp_mux_src_endofpacket),                          //          .endofpacket
		.in_data           (rsp_mux_src_data),                                 //          .data
		.in_channel        (rsp_mux_src_channel),                              //          .channel
		.out_ready         (limiter_pipeline_001_source0_ready),               //   source0.ready
		.out_valid         (limiter_pipeline_001_source0_valid),               //          .valid
		.out_startofpacket (limiter_pipeline_001_source0_startofpacket),       //          .startofpacket
		.out_endofpacket   (limiter_pipeline_001_source0_endofpacket),         //          .endofpacket
		.out_data          (limiter_pipeline_001_source0_data),                //          .data
		.out_channel       (limiter_pipeline_001_source0_channel),             //          .channel
		.in_empty          (1'b0),                                             // (terminated)
		.out_empty         (),                                                 // (terminated)
		.out_error         (),                                                 // (terminated)
		.in_error          (1'b0)                                              // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (83),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (6),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline (
		.clk               (clk_125_clk_clk),                                  //       cr0.clk
		.reset             (cpu_1_bridge_0_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_mux_src_ready),                                //     sink0.ready
		.in_valid          (cmd_mux_src_valid),                                //          .valid
		.in_startofpacket  (cmd_mux_src_startofpacket),                        //          .startofpacket
		.in_endofpacket    (cmd_mux_src_endofpacket),                          //          .endofpacket
		.in_data           (cmd_mux_src_data),                                 //          .data
		.in_channel        (cmd_mux_src_channel),                              //          .channel
		.out_ready         (agent_pipeline_source0_ready),                     //   source0.ready
		.out_valid         (agent_pipeline_source0_valid),                     //          .valid
		.out_startofpacket (agent_pipeline_source0_startofpacket),             //          .startofpacket
		.out_endofpacket   (agent_pipeline_source0_endofpacket),               //          .endofpacket
		.out_data          (agent_pipeline_source0_data),                      //          .data
		.out_channel       (agent_pipeline_source0_channel),                   //          .channel
		.in_empty          (1'b0),                                             // (terminated)
		.out_empty         (),                                                 // (terminated)
		.out_error         (),                                                 // (terminated)
		.in_error          (1'b0)                                              // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (83),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (0),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_001 (
		.clk               (clk_125_clk_clk),                                             //       cr0.clk
		.reset             (cpu_1_bridge_0_reset_reset_bridge_in_reset_reset),            // cr0_reset.reset
		.in_ready          (mailbox_simple_0_1_avmm_msg_receiver_agent_rp_ready),         //     sink0.ready
		.in_valid          (mailbox_simple_0_1_avmm_msg_receiver_agent_rp_valid),         //          .valid
		.in_startofpacket  (mailbox_simple_0_1_avmm_msg_receiver_agent_rp_startofpacket), //          .startofpacket
		.in_endofpacket    (mailbox_simple_0_1_avmm_msg_receiver_agent_rp_endofpacket),   //          .endofpacket
		.in_data           (mailbox_simple_0_1_avmm_msg_receiver_agent_rp_data),          //          .data
		.out_ready         (agent_pipeline_001_source0_ready),                            //   source0.ready
		.out_valid         (agent_pipeline_001_source0_valid),                            //          .valid
		.out_startofpacket (agent_pipeline_001_source0_startofpacket),                    //          .startofpacket
		.out_endofpacket   (agent_pipeline_001_source0_endofpacket),                      //          .endofpacket
		.out_data          (agent_pipeline_001_source0_data),                             //          .data
		.in_empty          (1'b0),                                                        // (terminated)
		.out_empty         (),                                                            // (terminated)
		.out_error         (),                                                            // (terminated)
		.in_error          (1'b0),                                                        // (terminated)
		.out_channel       (),                                                            // (terminated)
		.in_channel        (1'b0)                                                         // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (83),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (6),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_002 (
		.clk               (clk_125_clk_clk),                                  //       cr0.clk
		.reset             (cpu_1_bridge_0_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_mux_001_src_ready),                            //     sink0.ready
		.in_valid          (cmd_mux_001_src_valid),                            //          .valid
		.in_startofpacket  (cmd_mux_001_src_startofpacket),                    //          .startofpacket
		.in_endofpacket    (cmd_mux_001_src_endofpacket),                      //          .endofpacket
		.in_data           (cmd_mux_001_src_data),                             //          .data
		.in_channel        (cmd_mux_001_src_channel),                          //          .channel
		.out_ready         (agent_pipeline_002_source0_ready),                 //   source0.ready
		.out_valid         (agent_pipeline_002_source0_valid),                 //          .valid
		.out_startofpacket (agent_pipeline_002_source0_startofpacket),         //          .startofpacket
		.out_endofpacket   (agent_pipeline_002_source0_endofpacket),           //          .endofpacket
		.out_data          (agent_pipeline_002_source0_data),                  //          .data
		.out_channel       (agent_pipeline_002_source0_channel),               //          .channel
		.in_empty          (1'b0),                                             // (terminated)
		.out_empty         (),                                                 // (terminated)
		.out_error         (),                                                 // (terminated)
		.in_error          (1'b0)                                              // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (83),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (0),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_003 (
		.clk               (clk_125_clk_clk),                                           //       cr0.clk
		.reset             (cpu_1_bridge_0_reset_reset_bridge_in_reset_reset),          // cr0_reset.reset
		.in_ready          (mailbox_simple_1_0_avmm_msg_sender_agent_rp_ready),         //     sink0.ready
		.in_valid          (mailbox_simple_1_0_avmm_msg_sender_agent_rp_valid),         //          .valid
		.in_startofpacket  (mailbox_simple_1_0_avmm_msg_sender_agent_rp_startofpacket), //          .startofpacket
		.in_endofpacket    (mailbox_simple_1_0_avmm_msg_sender_agent_rp_endofpacket),   //          .endofpacket
		.in_data           (mailbox_simple_1_0_avmm_msg_sender_agent_rp_data),          //          .data
		.out_ready         (agent_pipeline_003_source0_ready),                          //   source0.ready
		.out_valid         (agent_pipeline_003_source0_valid),                          //          .valid
		.out_startofpacket (agent_pipeline_003_source0_startofpacket),                  //          .startofpacket
		.out_endofpacket   (agent_pipeline_003_source0_endofpacket),                    //          .endofpacket
		.out_data          (agent_pipeline_003_source0_data),                           //          .data
		.in_empty          (1'b0),                                                      // (terminated)
		.out_empty         (),                                                          // (terminated)
		.out_error         (),                                                          // (terminated)
		.in_error          (1'b0),                                                      // (terminated)
		.out_channel       (),                                                          // (terminated)
		.in_channel        (1'b0)                                                       // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (83),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (6),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_004 (
		.clk               (clk_125_clk_clk),                                 //       cr0.clk
		.reset             (read_dma_cr_reset_n_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_mux_002_src_ready),                           //     sink0.ready
		.in_valid          (cmd_mux_002_src_valid),                           //          .valid
		.in_startofpacket  (cmd_mux_002_src_startofpacket),                   //          .startofpacket
		.in_endofpacket    (cmd_mux_002_src_endofpacket),                     //          .endofpacket
		.in_data           (cmd_mux_002_src_data),                            //          .data
		.in_channel        (cmd_mux_002_src_channel),                         //          .channel
		.out_ready         (agent_pipeline_004_source0_ready),                //   source0.ready
		.out_valid         (agent_pipeline_004_source0_valid),                //          .valid
		.out_startofpacket (agent_pipeline_004_source0_startofpacket),        //          .startofpacket
		.out_endofpacket   (agent_pipeline_004_source0_endofpacket),          //          .endofpacket
		.out_data          (agent_pipeline_004_source0_data),                 //          .data
		.out_channel       (agent_pipeline_004_source0_channel),              //          .channel
		.in_empty          (1'b0),                                            // (terminated)
		.out_empty         (),                                                // (terminated)
		.out_error         (),                                                // (terminated)
		.in_error          (1'b0)                                             // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (83),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (0),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_005 (
		.clk               (clk_125_clk_clk),                                 //       cr0.clk
		.reset             (read_dma_cr_reset_n_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (read_dma_cr_csr_agent_rp_ready),                  //     sink0.ready
		.in_valid          (read_dma_cr_csr_agent_rp_valid),                  //          .valid
		.in_startofpacket  (read_dma_cr_csr_agent_rp_startofpacket),          //          .startofpacket
		.in_endofpacket    (read_dma_cr_csr_agent_rp_endofpacket),            //          .endofpacket
		.in_data           (read_dma_cr_csr_agent_rp_data),                   //          .data
		.out_ready         (agent_pipeline_005_source0_ready),                //   source0.ready
		.out_valid         (agent_pipeline_005_source0_valid),                //          .valid
		.out_startofpacket (agent_pipeline_005_source0_startofpacket),        //          .startofpacket
		.out_endofpacket   (agent_pipeline_005_source0_endofpacket),          //          .endofpacket
		.out_data          (agent_pipeline_005_source0_data),                 //          .data
		.in_empty          (1'b0),                                            // (terminated)
		.out_empty         (),                                                // (terminated)
		.out_error         (),                                                // (terminated)
		.in_error          (1'b0),                                            // (terminated)
		.out_channel       (),                                                // (terminated)
		.in_channel        (1'b0)                                             // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (83),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (6),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_006 (
		.clk               (clk_125_clk_clk),                                 //       cr0.clk
		.reset             (read_dma_cr_reset_n_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_mux_003_src_ready),                           //     sink0.ready
		.in_valid          (cmd_mux_003_src_valid),                           //          .valid
		.in_startofpacket  (cmd_mux_003_src_startofpacket),                   //          .startofpacket
		.in_endofpacket    (cmd_mux_003_src_endofpacket),                     //          .endofpacket
		.in_data           (cmd_mux_003_src_data),                            //          .data
		.in_channel        (cmd_mux_003_src_channel),                         //          .channel
		.out_ready         (agent_pipeline_006_source0_ready),                //   source0.ready
		.out_valid         (agent_pipeline_006_source0_valid),                //          .valid
		.out_startofpacket (agent_pipeline_006_source0_startofpacket),        //          .startofpacket
		.out_endofpacket   (agent_pipeline_006_source0_endofpacket),          //          .endofpacket
		.out_data          (agent_pipeline_006_source0_data),                 //          .data
		.out_channel       (agent_pipeline_006_source0_channel),              //          .channel
		.in_empty          (1'b0),                                            // (terminated)
		.out_empty         (),                                                // (terminated)
		.out_error         (),                                                // (terminated)
		.in_error          (1'b0)                                             // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (83),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (0),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_007 (
		.clk               (clk_125_clk_clk),                                 //       cr0.clk
		.reset             (read_dma_cr_reset_n_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (read_dma_cb_csr_agent_rp_ready),                  //     sink0.ready
		.in_valid          (read_dma_cb_csr_agent_rp_valid),                  //          .valid
		.in_startofpacket  (read_dma_cb_csr_agent_rp_startofpacket),          //          .startofpacket
		.in_endofpacket    (read_dma_cb_csr_agent_rp_endofpacket),            //          .endofpacket
		.in_data           (read_dma_cb_csr_agent_rp_data),                   //          .data
		.out_ready         (agent_pipeline_007_source0_ready),                //   source0.ready
		.out_valid         (agent_pipeline_007_source0_valid),                //          .valid
		.out_startofpacket (agent_pipeline_007_source0_startofpacket),        //          .startofpacket
		.out_endofpacket   (agent_pipeline_007_source0_endofpacket),          //          .endofpacket
		.out_data          (agent_pipeline_007_source0_data),                 //          .data
		.in_empty          (1'b0),                                            // (terminated)
		.out_empty         (),                                                // (terminated)
		.out_error         (),                                                // (terminated)
		.in_error          (1'b0),                                            // (terminated)
		.out_channel       (),                                                // (terminated)
		.in_channel        (1'b0)                                             // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (191),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (6),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_008 (
		.clk               (clk_125_clk_clk),                                                  //       cr0.clk
		.reset             (read_dma_cr_reset_n_reset_bridge_in_reset_reset),                  // cr0_reset.reset
		.in_ready          (read_dma_cr_descriptor_slave_cmd_width_adapter_src_ready),         //     sink0.ready
		.in_valid          (read_dma_cr_descriptor_slave_cmd_width_adapter_src_valid),         //          .valid
		.in_startofpacket  (read_dma_cr_descriptor_slave_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_endofpacket    (read_dma_cr_descriptor_slave_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.in_data           (read_dma_cr_descriptor_slave_cmd_width_adapter_src_data),          //          .data
		.in_channel        (read_dma_cr_descriptor_slave_cmd_width_adapter_src_channel),       //          .channel
		.out_ready         (agent_pipeline_008_source0_ready),                                 //   source0.ready
		.out_valid         (agent_pipeline_008_source0_valid),                                 //          .valid
		.out_startofpacket (agent_pipeline_008_source0_startofpacket),                         //          .startofpacket
		.out_endofpacket   (agent_pipeline_008_source0_endofpacket),                           //          .endofpacket
		.out_data          (agent_pipeline_008_source0_data),                                  //          .data
		.out_channel       (agent_pipeline_008_source0_channel),                               //          .channel
		.in_empty          (1'b0),                                                             // (terminated)
		.out_empty         (),                                                                 // (terminated)
		.out_error         (),                                                                 // (terminated)
		.in_error          (1'b0)                                                              // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (191),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (0),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_009 (
		.clk               (clk_125_clk_clk),                                     //       cr0.clk
		.reset             (read_dma_cr_reset_n_reset_bridge_in_reset_reset),     // cr0_reset.reset
		.in_ready          (read_dma_cr_descriptor_slave_agent_rp_ready),         //     sink0.ready
		.in_valid          (read_dma_cr_descriptor_slave_agent_rp_valid),         //          .valid
		.in_startofpacket  (read_dma_cr_descriptor_slave_agent_rp_startofpacket), //          .startofpacket
		.in_endofpacket    (read_dma_cr_descriptor_slave_agent_rp_endofpacket),   //          .endofpacket
		.in_data           (read_dma_cr_descriptor_slave_agent_rp_data),          //          .data
		.out_ready         (agent_pipeline_009_source0_ready),                    //   source0.ready
		.out_valid         (agent_pipeline_009_source0_valid),                    //          .valid
		.out_startofpacket (agent_pipeline_009_source0_startofpacket),            //          .startofpacket
		.out_endofpacket   (agent_pipeline_009_source0_endofpacket),              //          .endofpacket
		.out_data          (agent_pipeline_009_source0_data),                     //          .data
		.in_empty          (1'b0),                                                // (terminated)
		.out_empty         (),                                                    // (terminated)
		.out_error         (),                                                    // (terminated)
		.in_error          (1'b0),                                                // (terminated)
		.out_channel       (),                                                    // (terminated)
		.in_channel        (1'b0)                                                 // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (191),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (6),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_010 (
		.clk               (clk_125_clk_clk),                                                  //       cr0.clk
		.reset             (read_dma_cr_reset_n_reset_bridge_in_reset_reset),                  // cr0_reset.reset
		.in_ready          (read_dma_cb_descriptor_slave_cmd_width_adapter_src_ready),         //     sink0.ready
		.in_valid          (read_dma_cb_descriptor_slave_cmd_width_adapter_src_valid),         //          .valid
		.in_startofpacket  (read_dma_cb_descriptor_slave_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_endofpacket    (read_dma_cb_descriptor_slave_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.in_data           (read_dma_cb_descriptor_slave_cmd_width_adapter_src_data),          //          .data
		.in_channel        (read_dma_cb_descriptor_slave_cmd_width_adapter_src_channel),       //          .channel
		.out_ready         (agent_pipeline_010_source0_ready),                                 //   source0.ready
		.out_valid         (agent_pipeline_010_source0_valid),                                 //          .valid
		.out_startofpacket (agent_pipeline_010_source0_startofpacket),                         //          .startofpacket
		.out_endofpacket   (agent_pipeline_010_source0_endofpacket),                           //          .endofpacket
		.out_data          (agent_pipeline_010_source0_data),                                  //          .data
		.out_channel       (agent_pipeline_010_source0_channel),                               //          .channel
		.in_empty          (1'b0),                                                             // (terminated)
		.out_empty         (),                                                                 // (terminated)
		.out_error         (),                                                                 // (terminated)
		.in_error          (1'b0)                                                              // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (191),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (0),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_011 (
		.clk               (clk_125_clk_clk),                                     //       cr0.clk
		.reset             (read_dma_cr_reset_n_reset_bridge_in_reset_reset),     // cr0_reset.reset
		.in_ready          (read_dma_cb_descriptor_slave_agent_rp_ready),         //     sink0.ready
		.in_valid          (read_dma_cb_descriptor_slave_agent_rp_valid),         //          .valid
		.in_startofpacket  (read_dma_cb_descriptor_slave_agent_rp_startofpacket), //          .startofpacket
		.in_endofpacket    (read_dma_cb_descriptor_slave_agent_rp_endofpacket),   //          .endofpacket
		.in_data           (read_dma_cb_descriptor_slave_agent_rp_data),          //          .data
		.out_ready         (agent_pipeline_011_source0_ready),                    //   source0.ready
		.out_valid         (agent_pipeline_011_source0_valid),                    //          .valid
		.out_startofpacket (agent_pipeline_011_source0_startofpacket),            //          .startofpacket
		.out_endofpacket   (agent_pipeline_011_source0_endofpacket),              //          .endofpacket
		.out_data          (agent_pipeline_011_source0_data),                     //          .data
		.in_empty          (1'b0),                                                // (terminated)
		.out_empty         (),                                                    // (terminated)
		.out_error         (),                                                    // (terminated)
		.in_error          (1'b0),                                                // (terminated)
		.out_channel       (),                                                    // (terminated)
		.in_channel        (1'b0)                                                 // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (83),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (6),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline (
		.clk               (clk_125_clk_clk),                                  //       cr0.clk
		.reset             (cpu_1_bridge_0_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_demux_src0_ready),                             //     sink0.ready
		.in_valid          (cmd_demux_src0_valid),                             //          .valid
		.in_startofpacket  (cmd_demux_src0_startofpacket),                     //          .startofpacket
		.in_endofpacket    (cmd_demux_src0_endofpacket),                       //          .endofpacket
		.in_data           (cmd_demux_src0_data),                              //          .data
		.in_channel        (cmd_demux_src0_channel),                           //          .channel
		.out_ready         (mux_pipeline_source0_ready),                       //   source0.ready
		.out_valid         (mux_pipeline_source0_valid),                       //          .valid
		.out_startofpacket (mux_pipeline_source0_startofpacket),               //          .startofpacket
		.out_endofpacket   (mux_pipeline_source0_endofpacket),                 //          .endofpacket
		.out_data          (mux_pipeline_source0_data),                        //          .data
		.out_channel       (mux_pipeline_source0_channel),                     //          .channel
		.in_empty          (1'b0),                                             // (terminated)
		.out_empty         (),                                                 // (terminated)
		.out_error         (),                                                 // (terminated)
		.in_error          (1'b0)                                              // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (83),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (6),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_001 (
		.clk               (clk_125_clk_clk),                                  //       cr0.clk
		.reset             (cpu_1_bridge_0_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_demux_src1_ready),                             //     sink0.ready
		.in_valid          (cmd_demux_src1_valid),                             //          .valid
		.in_startofpacket  (cmd_demux_src1_startofpacket),                     //          .startofpacket
		.in_endofpacket    (cmd_demux_src1_endofpacket),                       //          .endofpacket
		.in_data           (cmd_demux_src1_data),                              //          .data
		.in_channel        (cmd_demux_src1_channel),                           //          .channel
		.out_ready         (mux_pipeline_001_source0_ready),                   //   source0.ready
		.out_valid         (mux_pipeline_001_source0_valid),                   //          .valid
		.out_startofpacket (mux_pipeline_001_source0_startofpacket),           //          .startofpacket
		.out_endofpacket   (mux_pipeline_001_source0_endofpacket),             //          .endofpacket
		.out_data          (mux_pipeline_001_source0_data),                    //          .data
		.out_channel       (mux_pipeline_001_source0_channel),                 //          .channel
		.in_empty          (1'b0),                                             // (terminated)
		.out_empty         (),                                                 // (terminated)
		.out_error         (),                                                 // (terminated)
		.in_error          (1'b0)                                              // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (83),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (6),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_002 (
		.clk               (clk_125_clk_clk),                                 //       cr0.clk
		.reset             (read_dma_cr_reset_n_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_demux_src2_ready),                            //     sink0.ready
		.in_valid          (cmd_demux_src2_valid),                            //          .valid
		.in_startofpacket  (cmd_demux_src2_startofpacket),                    //          .startofpacket
		.in_endofpacket    (cmd_demux_src2_endofpacket),                      //          .endofpacket
		.in_data           (cmd_demux_src2_data),                             //          .data
		.in_channel        (cmd_demux_src2_channel),                          //          .channel
		.out_ready         (mux_pipeline_002_source0_ready),                  //   source0.ready
		.out_valid         (mux_pipeline_002_source0_valid),                  //          .valid
		.out_startofpacket (mux_pipeline_002_source0_startofpacket),          //          .startofpacket
		.out_endofpacket   (mux_pipeline_002_source0_endofpacket),            //          .endofpacket
		.out_data          (mux_pipeline_002_source0_data),                   //          .data
		.out_channel       (mux_pipeline_002_source0_channel),                //          .channel
		.in_empty          (1'b0),                                            // (terminated)
		.out_empty         (),                                                // (terminated)
		.out_error         (),                                                // (terminated)
		.in_error          (1'b0)                                             // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (83),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (6),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_003 (
		.clk               (clk_125_clk_clk),                                 //       cr0.clk
		.reset             (read_dma_cr_reset_n_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_demux_src3_ready),                            //     sink0.ready
		.in_valid          (cmd_demux_src3_valid),                            //          .valid
		.in_startofpacket  (cmd_demux_src3_startofpacket),                    //          .startofpacket
		.in_endofpacket    (cmd_demux_src3_endofpacket),                      //          .endofpacket
		.in_data           (cmd_demux_src3_data),                             //          .data
		.in_channel        (cmd_demux_src3_channel),                          //          .channel
		.out_ready         (mux_pipeline_003_source0_ready),                  //   source0.ready
		.out_valid         (mux_pipeline_003_source0_valid),                  //          .valid
		.out_startofpacket (mux_pipeline_003_source0_startofpacket),          //          .startofpacket
		.out_endofpacket   (mux_pipeline_003_source0_endofpacket),            //          .endofpacket
		.out_data          (mux_pipeline_003_source0_data),                   //          .data
		.out_channel       (mux_pipeline_003_source0_channel),                //          .channel
		.in_empty          (1'b0),                                            // (terminated)
		.out_empty         (),                                                // (terminated)
		.out_error         (),                                                // (terminated)
		.in_error          (1'b0)                                             // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (83),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (6),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_004 (
		.clk               (clk_125_clk_clk),                                 //       cr0.clk
		.reset             (read_dma_cr_reset_n_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_demux_src4_ready),                            //     sink0.ready
		.in_valid          (cmd_demux_src4_valid),                            //          .valid
		.in_startofpacket  (cmd_demux_src4_startofpacket),                    //          .startofpacket
		.in_endofpacket    (cmd_demux_src4_endofpacket),                      //          .endofpacket
		.in_data           (cmd_demux_src4_data),                             //          .data
		.in_channel        (cmd_demux_src4_channel),                          //          .channel
		.out_ready         (mux_pipeline_004_source0_ready),                  //   source0.ready
		.out_valid         (mux_pipeline_004_source0_valid),                  //          .valid
		.out_startofpacket (mux_pipeline_004_source0_startofpacket),          //          .startofpacket
		.out_endofpacket   (mux_pipeline_004_source0_endofpacket),            //          .endofpacket
		.out_data          (mux_pipeline_004_source0_data),                   //          .data
		.out_channel       (mux_pipeline_004_source0_channel),                //          .channel
		.in_empty          (1'b0),                                            // (terminated)
		.out_empty         (),                                                // (terminated)
		.out_error         (),                                                // (terminated)
		.in_error          (1'b0)                                             // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (83),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (6),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_005 (
		.clk               (clk_125_clk_clk),                                 //       cr0.clk
		.reset             (read_dma_cr_reset_n_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_demux_src5_ready),                            //     sink0.ready
		.in_valid          (cmd_demux_src5_valid),                            //          .valid
		.in_startofpacket  (cmd_demux_src5_startofpacket),                    //          .startofpacket
		.in_endofpacket    (cmd_demux_src5_endofpacket),                      //          .endofpacket
		.in_data           (cmd_demux_src5_data),                             //          .data
		.in_channel        (cmd_demux_src5_channel),                          //          .channel
		.out_ready         (mux_pipeline_005_source0_ready),                  //   source0.ready
		.out_valid         (mux_pipeline_005_source0_valid),                  //          .valid
		.out_startofpacket (mux_pipeline_005_source0_startofpacket),          //          .startofpacket
		.out_endofpacket   (mux_pipeline_005_source0_endofpacket),            //          .endofpacket
		.out_data          (mux_pipeline_005_source0_data),                   //          .data
		.out_channel       (mux_pipeline_005_source0_channel),                //          .channel
		.in_empty          (1'b0),                                            // (terminated)
		.out_empty         (),                                                // (terminated)
		.out_error         (),                                                // (terminated)
		.in_error          (1'b0)                                             // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (83),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (6),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_006 (
		.clk               (clk_125_clk_clk),                                  //       cr0.clk
		.reset             (cpu_1_bridge_0_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (rsp_demux_src0_ready),                             //     sink0.ready
		.in_valid          (rsp_demux_src0_valid),                             //          .valid
		.in_startofpacket  (rsp_demux_src0_startofpacket),                     //          .startofpacket
		.in_endofpacket    (rsp_demux_src0_endofpacket),                       //          .endofpacket
		.in_data           (rsp_demux_src0_data),                              //          .data
		.in_channel        (rsp_demux_src0_channel),                           //          .channel
		.out_ready         (mux_pipeline_006_source0_ready),                   //   source0.ready
		.out_valid         (mux_pipeline_006_source0_valid),                   //          .valid
		.out_startofpacket (mux_pipeline_006_source0_startofpacket),           //          .startofpacket
		.out_endofpacket   (mux_pipeline_006_source0_endofpacket),             //          .endofpacket
		.out_data          (mux_pipeline_006_source0_data),                    //          .data
		.out_channel       (mux_pipeline_006_source0_channel),                 //          .channel
		.in_empty          (1'b0),                                             // (terminated)
		.out_empty         (),                                                 // (terminated)
		.out_error         (),                                                 // (terminated)
		.in_error          (1'b0)                                              // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (83),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (6),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_007 (
		.clk               (clk_125_clk_clk),                                  //       cr0.clk
		.reset             (cpu_1_bridge_0_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (rsp_demux_001_src0_ready),                         //     sink0.ready
		.in_valid          (rsp_demux_001_src0_valid),                         //          .valid
		.in_startofpacket  (rsp_demux_001_src0_startofpacket),                 //          .startofpacket
		.in_endofpacket    (rsp_demux_001_src0_endofpacket),                   //          .endofpacket
		.in_data           (rsp_demux_001_src0_data),                          //          .data
		.in_channel        (rsp_demux_001_src0_channel),                       //          .channel
		.out_ready         (mux_pipeline_007_source0_ready),                   //   source0.ready
		.out_valid         (mux_pipeline_007_source0_valid),                   //          .valid
		.out_startofpacket (mux_pipeline_007_source0_startofpacket),           //          .startofpacket
		.out_endofpacket   (mux_pipeline_007_source0_endofpacket),             //          .endofpacket
		.out_data          (mux_pipeline_007_source0_data),                    //          .data
		.out_channel       (mux_pipeline_007_source0_channel),                 //          .channel
		.in_empty          (1'b0),                                             // (terminated)
		.out_empty         (),                                                 // (terminated)
		.out_error         (),                                                 // (terminated)
		.in_error          (1'b0)                                              // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (83),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (6),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_008 (
		.clk               (clk_125_clk_clk),                                  //       cr0.clk
		.reset             (cpu_1_bridge_0_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (rsp_demux_002_src0_ready),                         //     sink0.ready
		.in_valid          (rsp_demux_002_src0_valid),                         //          .valid
		.in_startofpacket  (rsp_demux_002_src0_startofpacket),                 //          .startofpacket
		.in_endofpacket    (rsp_demux_002_src0_endofpacket),                   //          .endofpacket
		.in_data           (rsp_demux_002_src0_data),                          //          .data
		.in_channel        (rsp_demux_002_src0_channel),                       //          .channel
		.out_ready         (mux_pipeline_008_source0_ready),                   //   source0.ready
		.out_valid         (mux_pipeline_008_source0_valid),                   //          .valid
		.out_startofpacket (mux_pipeline_008_source0_startofpacket),           //          .startofpacket
		.out_endofpacket   (mux_pipeline_008_source0_endofpacket),             //          .endofpacket
		.out_data          (mux_pipeline_008_source0_data),                    //          .data
		.out_channel       (mux_pipeline_008_source0_channel),                 //          .channel
		.in_empty          (1'b0),                                             // (terminated)
		.out_empty         (),                                                 // (terminated)
		.out_error         (),                                                 // (terminated)
		.in_error          (1'b0)                                              // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (83),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (6),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_009 (
		.clk               (clk_125_clk_clk),                                  //       cr0.clk
		.reset             (cpu_1_bridge_0_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (rsp_demux_003_src0_ready),                         //     sink0.ready
		.in_valid          (rsp_demux_003_src0_valid),                         //          .valid
		.in_startofpacket  (rsp_demux_003_src0_startofpacket),                 //          .startofpacket
		.in_endofpacket    (rsp_demux_003_src0_endofpacket),                   //          .endofpacket
		.in_data           (rsp_demux_003_src0_data),                          //          .data
		.in_channel        (rsp_demux_003_src0_channel),                       //          .channel
		.out_ready         (mux_pipeline_009_source0_ready),                   //   source0.ready
		.out_valid         (mux_pipeline_009_source0_valid),                   //          .valid
		.out_startofpacket (mux_pipeline_009_source0_startofpacket),           //          .startofpacket
		.out_endofpacket   (mux_pipeline_009_source0_endofpacket),             //          .endofpacket
		.out_data          (mux_pipeline_009_source0_data),                    //          .data
		.out_channel       (mux_pipeline_009_source0_channel),                 //          .channel
		.in_empty          (1'b0),                                             // (terminated)
		.out_empty         (),                                                 // (terminated)
		.out_error         (),                                                 // (terminated)
		.in_error          (1'b0)                                              // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (83),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (6),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_010 (
		.clk               (clk_125_clk_clk),                                  //       cr0.clk
		.reset             (cpu_1_bridge_0_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (rsp_demux_004_src0_ready),                         //     sink0.ready
		.in_valid          (rsp_demux_004_src0_valid),                         //          .valid
		.in_startofpacket  (rsp_demux_004_src0_startofpacket),                 //          .startofpacket
		.in_endofpacket    (rsp_demux_004_src0_endofpacket),                   //          .endofpacket
		.in_data           (rsp_demux_004_src0_data),                          //          .data
		.in_channel        (rsp_demux_004_src0_channel),                       //          .channel
		.out_ready         (mux_pipeline_010_source0_ready),                   //   source0.ready
		.out_valid         (mux_pipeline_010_source0_valid),                   //          .valid
		.out_startofpacket (mux_pipeline_010_source0_startofpacket),           //          .startofpacket
		.out_endofpacket   (mux_pipeline_010_source0_endofpacket),             //          .endofpacket
		.out_data          (mux_pipeline_010_source0_data),                    //          .data
		.out_channel       (mux_pipeline_010_source0_channel),                 //          .channel
		.in_empty          (1'b0),                                             // (terminated)
		.out_empty         (),                                                 // (terminated)
		.out_error         (),                                                 // (terminated)
		.in_error          (1'b0)                                              // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (83),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (6),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_011 (
		.clk               (clk_125_clk_clk),                                  //       cr0.clk
		.reset             (cpu_1_bridge_0_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (rsp_demux_005_src0_ready),                         //     sink0.ready
		.in_valid          (rsp_demux_005_src0_valid),                         //          .valid
		.in_startofpacket  (rsp_demux_005_src0_startofpacket),                 //          .startofpacket
		.in_endofpacket    (rsp_demux_005_src0_endofpacket),                   //          .endofpacket
		.in_data           (rsp_demux_005_src0_data),                          //          .data
		.in_channel        (rsp_demux_005_src0_channel),                       //          .channel
		.out_ready         (mux_pipeline_011_source0_ready),                   //   source0.ready
		.out_valid         (mux_pipeline_011_source0_valid),                   //          .valid
		.out_startofpacket (mux_pipeline_011_source0_startofpacket),           //          .startofpacket
		.out_endofpacket   (mux_pipeline_011_source0_endofpacket),             //          .endofpacket
		.out_data          (mux_pipeline_011_source0_data),                    //          .data
		.out_channel       (mux_pipeline_011_source0_channel),                 //          .channel
		.in_empty          (1'b0),                                             // (terminated)
		.out_empty         (),                                                 // (terminated)
		.out_error         (),                                                 // (terminated)
		.in_error          (1'b0)                                              // (terminated)
	);

	ECE423_QSYS_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter (
		.in_clk_0_clk   (clk_125_clk_clk),                                                 // in_clk_0.clk
		.in_rst_0_reset (cpu_1_bridge_0_reset_reset_bridge_in_reset_reset),                // in_rst_0.reset
		.in_0_data      (mailbox_simple_0_1_avmm_msg_receiver_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (mailbox_simple_0_1_avmm_msg_receiver_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (mailbox_simple_0_1_avmm_msg_receiver_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_out_0_data),                                    //    out_0.data
		.out_0_valid    (avalon_st_adapter_out_0_valid),                                   //         .valid
		.out_0_ready    (avalon_st_adapter_out_0_ready),                                   //         .ready
		.out_0_error    (avalon_st_adapter_out_0_error)                                    //         .error
	);

	ECE423_QSYS_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_001 (
		.in_clk_0_clk   (clk_125_clk_clk),                                               // in_clk_0.clk
		.in_rst_0_reset (cpu_1_bridge_0_reset_reset_bridge_in_reset_reset),              // in_rst_0.reset
		.in_0_data      (mailbox_simple_1_0_avmm_msg_sender_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (mailbox_simple_1_0_avmm_msg_sender_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (mailbox_simple_1_0_avmm_msg_sender_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_001_out_0_data),                              //    out_0.data
		.out_0_valid    (avalon_st_adapter_001_out_0_valid),                             //         .valid
		.out_0_ready    (avalon_st_adapter_001_out_0_ready),                             //         .ready
		.out_0_error    (avalon_st_adapter_001_out_0_error)                              //         .error
	);

	ECE423_QSYS_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_002 (
		.in_clk_0_clk   (clk_125_clk_clk),                                 // in_clk_0.clk
		.in_rst_0_reset (read_dma_cr_reset_n_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (read_dma_cr_csr_agent_rdata_fifo_src_data),       //     in_0.data
		.in_0_valid     (read_dma_cr_csr_agent_rdata_fifo_src_valid),      //         .valid
		.in_0_ready     (read_dma_cr_csr_agent_rdata_fifo_src_ready),      //         .ready
		.out_0_data     (avalon_st_adapter_002_out_0_data),                //    out_0.data
		.out_0_valid    (avalon_st_adapter_002_out_0_valid),               //         .valid
		.out_0_ready    (avalon_st_adapter_002_out_0_ready),               //         .ready
		.out_0_error    (avalon_st_adapter_002_out_0_error)                //         .error
	);

	ECE423_QSYS_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_003 (
		.in_clk_0_clk   (clk_125_clk_clk),                                 // in_clk_0.clk
		.in_rst_0_reset (read_dma_cr_reset_n_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (read_dma_cb_csr_agent_rdata_fifo_src_data),       //     in_0.data
		.in_0_valid     (read_dma_cb_csr_agent_rdata_fifo_src_valid),      //         .valid
		.in_0_ready     (read_dma_cb_csr_agent_rdata_fifo_src_ready),      //         .ready
		.out_0_data     (avalon_st_adapter_003_out_0_data),                //    out_0.data
		.out_0_valid    (avalon_st_adapter_003_out_0_valid),               //         .valid
		.out_0_ready    (avalon_st_adapter_003_out_0_ready),               //         .ready
		.out_0_error    (avalon_st_adapter_003_out_0_error)                //         .error
	);

	ECE423_QSYS_mm_interconnect_1_avalon_st_adapter_005 #(
		.inBitsPerSymbol (130),
		.inUsePackets    (0),
		.inDataWidth     (130),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (130),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_004 (
		.in_clk_0_clk   (clk_125_clk_clk),                                         // in_clk_0.clk
		.in_rst_0_reset (read_dma_cr_reset_n_reset_bridge_in_reset_reset),         // in_rst_0.reset
		.in_0_data      (read_dma_cr_descriptor_slave_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (read_dma_cr_descriptor_slave_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (read_dma_cr_descriptor_slave_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_004_out_0_data),                        //    out_0.data
		.out_0_valid    (avalon_st_adapter_004_out_0_valid),                       //         .valid
		.out_0_ready    (avalon_st_adapter_004_out_0_ready),                       //         .ready
		.out_0_error    (avalon_st_adapter_004_out_0_error)                        //         .error
	);

	ECE423_QSYS_mm_interconnect_1_avalon_st_adapter_005 #(
		.inBitsPerSymbol (130),
		.inUsePackets    (0),
		.inDataWidth     (130),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (130),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_005 (
		.in_clk_0_clk   (clk_125_clk_clk),                                         // in_clk_0.clk
		.in_rst_0_reset (read_dma_cr_reset_n_reset_bridge_in_reset_reset),         // in_rst_0.reset
		.in_0_data      (read_dma_cb_descriptor_slave_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (read_dma_cb_descriptor_slave_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (read_dma_cb_descriptor_slave_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_005_out_0_data),                        //    out_0.data
		.out_0_valid    (avalon_st_adapter_005_out_0_valid),                       //         .valid
		.out_0_ready    (avalon_st_adapter_005_out_0_ready),                       //         .ready
		.out_0_error    (avalon_st_adapter_005_out_0_error)                        //         .error
	);

endmodule
