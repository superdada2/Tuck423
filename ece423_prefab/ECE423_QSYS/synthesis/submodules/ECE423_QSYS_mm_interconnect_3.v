// ECE423_QSYS_mm_interconnect_3.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 15.1 185

`timescale 1 ps / 1 ps
module ECE423_QSYS_mm_interconnect_3 (
		input  wire          clk_125_clk_clk,                                           //                                         clk_125_clk.clk
		input  wire          lpddr2_avl_1_translator_reset_reset_bridge_in_reset_reset, // lpddr2_avl_1_translator_reset_reset_bridge_in_reset.reset
		input  wire          lpddr2_mp_cmd_reset_n_1_reset_bridge_in_reset_reset,       //       lpddr2_mp_cmd_reset_n_1_reset_bridge_in_reset.reset
		input  wire          read_dma_y_reset_n_reset_bridge_in_reset_reset,            //            read_dma_y_reset_n_reset_bridge_in_reset.reset
		input  wire          video_dma_reset_n_reset_bridge_in_reset_reset,             //             video_dma_reset_n_reset_bridge_in_reset.reset
		input  wire [28:0]   read_dma_cb_mm_read_address,                               //                                 read_dma_cb_mm_read.address
		output wire          read_dma_cb_mm_read_waitrequest,                           //                                                    .waitrequest
		input  wire [2:0]    read_dma_cb_mm_read_burstcount,                            //                                                    .burstcount
		input  wire [127:0]  read_dma_cb_mm_read_byteenable,                            //                                                    .byteenable
		input  wire          read_dma_cb_mm_read_read,                                  //                                                    .read
		output wire [1023:0] read_dma_cb_mm_read_readdata,                              //                                                    .readdata
		output wire          read_dma_cb_mm_read_readdatavalid,                         //                                                    .readdatavalid
		input  wire [28:0]   read_dma_cr_mm_read_address,                               //                                 read_dma_cr_mm_read.address
		output wire          read_dma_cr_mm_read_waitrequest,                           //                                                    .waitrequest
		input  wire [2:0]    read_dma_cr_mm_read_burstcount,                            //                                                    .burstcount
		input  wire [127:0]  read_dma_cr_mm_read_byteenable,                            //                                                    .byteenable
		input  wire          read_dma_cr_mm_read_read,                                  //                                                    .read
		output wire [1023:0] read_dma_cr_mm_read_readdata,                              //                                                    .readdata
		output wire          read_dma_cr_mm_read_readdatavalid,                         //                                                    .readdatavalid
		input  wire [28:0]   read_dma_y_mm_read_address,                                //                                  read_dma_y_mm_read.address
		output wire          read_dma_y_mm_read_waitrequest,                            //                                                    .waitrequest
		input  wire [2:0]    read_dma_y_mm_read_burstcount,                             //                                                    .burstcount
		input  wire [127:0]  read_dma_y_mm_read_byteenable,                             //                                                    .byteenable
		input  wire          read_dma_y_mm_read_read,                                   //                                                    .read
		output wire [1023:0] read_dma_y_mm_read_readdata,                               //                                                    .readdata
		output wire          read_dma_y_mm_read_readdatavalid,                          //                                                    .readdatavalid
		input  wire [28:0]   video_dma_mm_read_address,                                 //                                   video_dma_mm_read.address
		output wire          video_dma_mm_read_waitrequest,                             //                                                    .waitrequest
		input  wire [7:0]    video_dma_mm_read_burstcount,                              //                                                    .burstcount
		input  wire [15:0]   video_dma_mm_read_byteenable,                              //                                                    .byteenable
		input  wire          video_dma_mm_read_read,                                    //                                                    .read
		output wire [127:0]  video_dma_mm_read_readdata,                                //                                                    .readdata
		output wire          video_dma_mm_read_readdatavalid,                           //                                                    .readdatavalid
		input  wire [28:0]   write_dma_mm_write_address,                                //                                  write_dma_mm_write.address
		output wire          write_dma_mm_write_waitrequest,                            //                                                    .waitrequest
		input  wire [2:0]    write_dma_mm_write_burstcount,                             //                                                    .burstcount
		input  wire [127:0]  write_dma_mm_write_byteenable,                             //                                                    .byteenable
		input  wire          write_dma_mm_write_write,                                  //                                                    .write
		input  wire [1023:0] write_dma_mm_write_writedata,                              //                                                    .writedata
		output wire [24:0]   lpddr2_avl_1_address,                                      //                                        lpddr2_avl_1.address
		output wire          lpddr2_avl_1_write,                                        //                                                    .write
		output wire          lpddr2_avl_1_read,                                         //                                                    .read
		input  wire [127:0]  lpddr2_avl_1_readdata,                                     //                                                    .readdata
		output wire [127:0]  lpddr2_avl_1_writedata,                                    //                                                    .writedata
		output wire          lpddr2_avl_1_beginbursttransfer,                           //                                                    .beginbursttransfer
		output wire [7:0]    lpddr2_avl_1_burstcount,                                   //                                                    .burstcount
		output wire [15:0]   lpddr2_avl_1_byteenable,                                   //                                                    .byteenable
		input  wire          lpddr2_avl_1_readdatavalid,                                //                                                    .readdatavalid
		input  wire          lpddr2_avl_1_waitrequest                                   //                                                    .waitrequest
	);

	wire           video_dma_mm_read_translator_avalon_universal_master_0_waitrequest;     // video_dma_mm_read_agent:av_waitrequest -> video_dma_mm_read_translator:uav_waitrequest
	wire   [127:0] video_dma_mm_read_translator_avalon_universal_master_0_readdata;        // video_dma_mm_read_agent:av_readdata -> video_dma_mm_read_translator:uav_readdata
	wire           video_dma_mm_read_translator_avalon_universal_master_0_debugaccess;     // video_dma_mm_read_translator:uav_debugaccess -> video_dma_mm_read_agent:av_debugaccess
	wire    [28:0] video_dma_mm_read_translator_avalon_universal_master_0_address;         // video_dma_mm_read_translator:uav_address -> video_dma_mm_read_agent:av_address
	wire           video_dma_mm_read_translator_avalon_universal_master_0_read;            // video_dma_mm_read_translator:uav_read -> video_dma_mm_read_agent:av_read
	wire    [15:0] video_dma_mm_read_translator_avalon_universal_master_0_byteenable;      // video_dma_mm_read_translator:uav_byteenable -> video_dma_mm_read_agent:av_byteenable
	wire           video_dma_mm_read_translator_avalon_universal_master_0_readdatavalid;   // video_dma_mm_read_agent:av_readdatavalid -> video_dma_mm_read_translator:uav_readdatavalid
	wire           video_dma_mm_read_translator_avalon_universal_master_0_lock;            // video_dma_mm_read_translator:uav_lock -> video_dma_mm_read_agent:av_lock
	wire           video_dma_mm_read_translator_avalon_universal_master_0_write;           // video_dma_mm_read_translator:uav_write -> video_dma_mm_read_agent:av_write
	wire   [127:0] video_dma_mm_read_translator_avalon_universal_master_0_writedata;       // video_dma_mm_read_translator:uav_writedata -> video_dma_mm_read_agent:av_writedata
	wire    [11:0] video_dma_mm_read_translator_avalon_universal_master_0_burstcount;      // video_dma_mm_read_translator:uav_burstcount -> video_dma_mm_read_agent:av_burstcount
	wire           rsp_mux_src_valid;                                                      // rsp_mux:src_valid -> video_dma_mm_read_agent:rp_valid
	wire   [219:0] rsp_mux_src_data;                                                       // rsp_mux:src_data -> video_dma_mm_read_agent:rp_data
	wire           rsp_mux_src_ready;                                                      // video_dma_mm_read_agent:rp_ready -> rsp_mux:src_ready
	wire     [4:0] rsp_mux_src_channel;                                                    // rsp_mux:src_channel -> video_dma_mm_read_agent:rp_channel
	wire           rsp_mux_src_startofpacket;                                              // rsp_mux:src_startofpacket -> video_dma_mm_read_agent:rp_startofpacket
	wire           rsp_mux_src_endofpacket;                                                // rsp_mux:src_endofpacket -> video_dma_mm_read_agent:rp_endofpacket
	wire           read_dma_y_mm_read_translator_avalon_universal_master_0_waitrequest;    // read_dma_y_mm_read_agent:av_waitrequest -> read_dma_y_mm_read_translator:uav_waitrequest
	wire  [1023:0] read_dma_y_mm_read_translator_avalon_universal_master_0_readdata;       // read_dma_y_mm_read_agent:av_readdata -> read_dma_y_mm_read_translator:uav_readdata
	wire           read_dma_y_mm_read_translator_avalon_universal_master_0_debugaccess;    // read_dma_y_mm_read_translator:uav_debugaccess -> read_dma_y_mm_read_agent:av_debugaccess
	wire    [28:0] read_dma_y_mm_read_translator_avalon_universal_master_0_address;        // read_dma_y_mm_read_translator:uav_address -> read_dma_y_mm_read_agent:av_address
	wire           read_dma_y_mm_read_translator_avalon_universal_master_0_read;           // read_dma_y_mm_read_translator:uav_read -> read_dma_y_mm_read_agent:av_read
	wire   [127:0] read_dma_y_mm_read_translator_avalon_universal_master_0_byteenable;     // read_dma_y_mm_read_translator:uav_byteenable -> read_dma_y_mm_read_agent:av_byteenable
	wire           read_dma_y_mm_read_translator_avalon_universal_master_0_readdatavalid;  // read_dma_y_mm_read_agent:av_readdatavalid -> read_dma_y_mm_read_translator:uav_readdatavalid
	wire           read_dma_y_mm_read_translator_avalon_universal_master_0_lock;           // read_dma_y_mm_read_translator:uav_lock -> read_dma_y_mm_read_agent:av_lock
	wire           read_dma_y_mm_read_translator_avalon_universal_master_0_write;          // read_dma_y_mm_read_translator:uav_write -> read_dma_y_mm_read_agent:av_write
	wire  [1023:0] read_dma_y_mm_read_translator_avalon_universal_master_0_writedata;      // read_dma_y_mm_read_translator:uav_writedata -> read_dma_y_mm_read_agent:av_writedata
	wire     [9:0] read_dma_y_mm_read_translator_avalon_universal_master_0_burstcount;     // read_dma_y_mm_read_translator:uav_burstcount -> read_dma_y_mm_read_agent:av_burstcount
	wire           read_dma_cb_mm_read_translator_avalon_universal_master_0_waitrequest;   // read_dma_cb_mm_read_agent:av_waitrequest -> read_dma_cb_mm_read_translator:uav_waitrequest
	wire  [1023:0] read_dma_cb_mm_read_translator_avalon_universal_master_0_readdata;      // read_dma_cb_mm_read_agent:av_readdata -> read_dma_cb_mm_read_translator:uav_readdata
	wire           read_dma_cb_mm_read_translator_avalon_universal_master_0_debugaccess;   // read_dma_cb_mm_read_translator:uav_debugaccess -> read_dma_cb_mm_read_agent:av_debugaccess
	wire    [28:0] read_dma_cb_mm_read_translator_avalon_universal_master_0_address;       // read_dma_cb_mm_read_translator:uav_address -> read_dma_cb_mm_read_agent:av_address
	wire           read_dma_cb_mm_read_translator_avalon_universal_master_0_read;          // read_dma_cb_mm_read_translator:uav_read -> read_dma_cb_mm_read_agent:av_read
	wire   [127:0] read_dma_cb_mm_read_translator_avalon_universal_master_0_byteenable;    // read_dma_cb_mm_read_translator:uav_byteenable -> read_dma_cb_mm_read_agent:av_byteenable
	wire           read_dma_cb_mm_read_translator_avalon_universal_master_0_readdatavalid; // read_dma_cb_mm_read_agent:av_readdatavalid -> read_dma_cb_mm_read_translator:uav_readdatavalid
	wire           read_dma_cb_mm_read_translator_avalon_universal_master_0_lock;          // read_dma_cb_mm_read_translator:uav_lock -> read_dma_cb_mm_read_agent:av_lock
	wire           read_dma_cb_mm_read_translator_avalon_universal_master_0_write;         // read_dma_cb_mm_read_translator:uav_write -> read_dma_cb_mm_read_agent:av_write
	wire  [1023:0] read_dma_cb_mm_read_translator_avalon_universal_master_0_writedata;     // read_dma_cb_mm_read_translator:uav_writedata -> read_dma_cb_mm_read_agent:av_writedata
	wire     [9:0] read_dma_cb_mm_read_translator_avalon_universal_master_0_burstcount;    // read_dma_cb_mm_read_translator:uav_burstcount -> read_dma_cb_mm_read_agent:av_burstcount
	wire           read_dma_cr_mm_read_translator_avalon_universal_master_0_waitrequest;   // read_dma_cr_mm_read_agent:av_waitrequest -> read_dma_cr_mm_read_translator:uav_waitrequest
	wire  [1023:0] read_dma_cr_mm_read_translator_avalon_universal_master_0_readdata;      // read_dma_cr_mm_read_agent:av_readdata -> read_dma_cr_mm_read_translator:uav_readdata
	wire           read_dma_cr_mm_read_translator_avalon_universal_master_0_debugaccess;   // read_dma_cr_mm_read_translator:uav_debugaccess -> read_dma_cr_mm_read_agent:av_debugaccess
	wire    [28:0] read_dma_cr_mm_read_translator_avalon_universal_master_0_address;       // read_dma_cr_mm_read_translator:uav_address -> read_dma_cr_mm_read_agent:av_address
	wire           read_dma_cr_mm_read_translator_avalon_universal_master_0_read;          // read_dma_cr_mm_read_translator:uav_read -> read_dma_cr_mm_read_agent:av_read
	wire   [127:0] read_dma_cr_mm_read_translator_avalon_universal_master_0_byteenable;    // read_dma_cr_mm_read_translator:uav_byteenable -> read_dma_cr_mm_read_agent:av_byteenable
	wire           read_dma_cr_mm_read_translator_avalon_universal_master_0_readdatavalid; // read_dma_cr_mm_read_agent:av_readdatavalid -> read_dma_cr_mm_read_translator:uav_readdatavalid
	wire           read_dma_cr_mm_read_translator_avalon_universal_master_0_lock;          // read_dma_cr_mm_read_translator:uav_lock -> read_dma_cr_mm_read_agent:av_lock
	wire           read_dma_cr_mm_read_translator_avalon_universal_master_0_write;         // read_dma_cr_mm_read_translator:uav_write -> read_dma_cr_mm_read_agent:av_write
	wire  [1023:0] read_dma_cr_mm_read_translator_avalon_universal_master_0_writedata;     // read_dma_cr_mm_read_translator:uav_writedata -> read_dma_cr_mm_read_agent:av_writedata
	wire     [9:0] read_dma_cr_mm_read_translator_avalon_universal_master_0_burstcount;    // read_dma_cr_mm_read_translator:uav_burstcount -> read_dma_cr_mm_read_agent:av_burstcount
	wire           write_dma_mm_write_translator_avalon_universal_master_0_waitrequest;    // write_dma_mm_write_agent:av_waitrequest -> write_dma_mm_write_translator:uav_waitrequest
	wire  [1023:0] write_dma_mm_write_translator_avalon_universal_master_0_readdata;       // write_dma_mm_write_agent:av_readdata -> write_dma_mm_write_translator:uav_readdata
	wire           write_dma_mm_write_translator_avalon_universal_master_0_debugaccess;    // write_dma_mm_write_translator:uav_debugaccess -> write_dma_mm_write_agent:av_debugaccess
	wire    [28:0] write_dma_mm_write_translator_avalon_universal_master_0_address;        // write_dma_mm_write_translator:uav_address -> write_dma_mm_write_agent:av_address
	wire           write_dma_mm_write_translator_avalon_universal_master_0_read;           // write_dma_mm_write_translator:uav_read -> write_dma_mm_write_agent:av_read
	wire   [127:0] write_dma_mm_write_translator_avalon_universal_master_0_byteenable;     // write_dma_mm_write_translator:uav_byteenable -> write_dma_mm_write_agent:av_byteenable
	wire           write_dma_mm_write_translator_avalon_universal_master_0_readdatavalid;  // write_dma_mm_write_agent:av_readdatavalid -> write_dma_mm_write_translator:uav_readdatavalid
	wire           write_dma_mm_write_translator_avalon_universal_master_0_lock;           // write_dma_mm_write_translator:uav_lock -> write_dma_mm_write_agent:av_lock
	wire           write_dma_mm_write_translator_avalon_universal_master_0_write;          // write_dma_mm_write_translator:uav_write -> write_dma_mm_write_agent:av_write
	wire  [1023:0] write_dma_mm_write_translator_avalon_universal_master_0_writedata;      // write_dma_mm_write_translator:uav_writedata -> write_dma_mm_write_agent:av_writedata
	wire     [9:0] write_dma_mm_write_translator_avalon_universal_master_0_burstcount;     // write_dma_mm_write_translator:uav_burstcount -> write_dma_mm_write_agent:av_burstcount
	wire   [127:0] lpddr2_avl_1_agent_m0_readdata;                                         // lpddr2_avl_1_translator:uav_readdata -> lpddr2_avl_1_agent:m0_readdata
	wire           lpddr2_avl_1_agent_m0_waitrequest;                                      // lpddr2_avl_1_translator:uav_waitrequest -> lpddr2_avl_1_agent:m0_waitrequest
	wire           lpddr2_avl_1_agent_m0_debugaccess;                                      // lpddr2_avl_1_agent:m0_debugaccess -> lpddr2_avl_1_translator:uav_debugaccess
	wire    [28:0] lpddr2_avl_1_agent_m0_address;                                          // lpddr2_avl_1_agent:m0_address -> lpddr2_avl_1_translator:uav_address
	wire    [15:0] lpddr2_avl_1_agent_m0_byteenable;                                       // lpddr2_avl_1_agent:m0_byteenable -> lpddr2_avl_1_translator:uav_byteenable
	wire           lpddr2_avl_1_agent_m0_read;                                             // lpddr2_avl_1_agent:m0_read -> lpddr2_avl_1_translator:uav_read
	wire           lpddr2_avl_1_agent_m0_readdatavalid;                                    // lpddr2_avl_1_translator:uav_readdatavalid -> lpddr2_avl_1_agent:m0_readdatavalid
	wire           lpddr2_avl_1_agent_m0_lock;                                             // lpddr2_avl_1_agent:m0_lock -> lpddr2_avl_1_translator:uav_lock
	wire   [127:0] lpddr2_avl_1_agent_m0_writedata;                                        // lpddr2_avl_1_agent:m0_writedata -> lpddr2_avl_1_translator:uav_writedata
	wire           lpddr2_avl_1_agent_m0_write;                                            // lpddr2_avl_1_agent:m0_write -> lpddr2_avl_1_translator:uav_write
	wire    [11:0] lpddr2_avl_1_agent_m0_burstcount;                                       // lpddr2_avl_1_agent:m0_burstcount -> lpddr2_avl_1_translator:uav_burstcount
	wire           lpddr2_avl_1_agent_rf_source_valid;                                     // lpddr2_avl_1_agent:rf_source_valid -> lpddr2_avl_1_agent_rsp_fifo:in_valid
	wire   [220:0] lpddr2_avl_1_agent_rf_source_data;                                      // lpddr2_avl_1_agent:rf_source_data -> lpddr2_avl_1_agent_rsp_fifo:in_data
	wire           lpddr2_avl_1_agent_rf_source_ready;                                     // lpddr2_avl_1_agent_rsp_fifo:in_ready -> lpddr2_avl_1_agent:rf_source_ready
	wire           lpddr2_avl_1_agent_rf_source_startofpacket;                             // lpddr2_avl_1_agent:rf_source_startofpacket -> lpddr2_avl_1_agent_rsp_fifo:in_startofpacket
	wire           lpddr2_avl_1_agent_rf_source_endofpacket;                               // lpddr2_avl_1_agent:rf_source_endofpacket -> lpddr2_avl_1_agent_rsp_fifo:in_endofpacket
	wire           lpddr2_avl_1_agent_rsp_fifo_out_valid;                                  // lpddr2_avl_1_agent_rsp_fifo:out_valid -> lpddr2_avl_1_agent:rf_sink_valid
	wire   [220:0] lpddr2_avl_1_agent_rsp_fifo_out_data;                                   // lpddr2_avl_1_agent_rsp_fifo:out_data -> lpddr2_avl_1_agent:rf_sink_data
	wire           lpddr2_avl_1_agent_rsp_fifo_out_ready;                                  // lpddr2_avl_1_agent:rf_sink_ready -> lpddr2_avl_1_agent_rsp_fifo:out_ready
	wire           lpddr2_avl_1_agent_rsp_fifo_out_startofpacket;                          // lpddr2_avl_1_agent_rsp_fifo:out_startofpacket -> lpddr2_avl_1_agent:rf_sink_startofpacket
	wire           lpddr2_avl_1_agent_rsp_fifo_out_endofpacket;                            // lpddr2_avl_1_agent_rsp_fifo:out_endofpacket -> lpddr2_avl_1_agent:rf_sink_endofpacket
	wire           lpddr2_avl_1_agent_rdata_fifo_src_valid;                                // lpddr2_avl_1_agent:rdata_fifo_src_valid -> lpddr2_avl_1_agent_rdata_fifo:in_valid
	wire   [129:0] lpddr2_avl_1_agent_rdata_fifo_src_data;                                 // lpddr2_avl_1_agent:rdata_fifo_src_data -> lpddr2_avl_1_agent_rdata_fifo:in_data
	wire           lpddr2_avl_1_agent_rdata_fifo_src_ready;                                // lpddr2_avl_1_agent_rdata_fifo:in_ready -> lpddr2_avl_1_agent:rdata_fifo_src_ready
	wire           video_dma_mm_read_agent_cp_valid;                                       // video_dma_mm_read_agent:cp_valid -> router:sink_valid
	wire   [219:0] video_dma_mm_read_agent_cp_data;                                        // video_dma_mm_read_agent:cp_data -> router:sink_data
	wire           video_dma_mm_read_agent_cp_ready;                                       // router:sink_ready -> video_dma_mm_read_agent:cp_ready
	wire           video_dma_mm_read_agent_cp_startofpacket;                               // video_dma_mm_read_agent:cp_startofpacket -> router:sink_startofpacket
	wire           video_dma_mm_read_agent_cp_endofpacket;                                 // video_dma_mm_read_agent:cp_endofpacket -> router:sink_endofpacket
	wire           router_src_valid;                                                       // router:src_valid -> cmd_demux:sink_valid
	wire   [219:0] router_src_data;                                                        // router:src_data -> cmd_demux:sink_data
	wire           router_src_ready;                                                       // cmd_demux:sink_ready -> router:src_ready
	wire     [4:0] router_src_channel;                                                     // router:src_channel -> cmd_demux:sink_channel
	wire           router_src_startofpacket;                                               // router:src_startofpacket -> cmd_demux:sink_startofpacket
	wire           router_src_endofpacket;                                                 // router:src_endofpacket -> cmd_demux:sink_endofpacket
	wire           read_dma_y_mm_read_agent_cp_valid;                                      // read_dma_y_mm_read_agent:cp_valid -> router_001:sink_valid
	wire  [1227:0] read_dma_y_mm_read_agent_cp_data;                                       // read_dma_y_mm_read_agent:cp_data -> router_001:sink_data
	wire           read_dma_y_mm_read_agent_cp_ready;                                      // router_001:sink_ready -> read_dma_y_mm_read_agent:cp_ready
	wire           read_dma_y_mm_read_agent_cp_startofpacket;                              // read_dma_y_mm_read_agent:cp_startofpacket -> router_001:sink_startofpacket
	wire           read_dma_y_mm_read_agent_cp_endofpacket;                                // read_dma_y_mm_read_agent:cp_endofpacket -> router_001:sink_endofpacket
	wire           read_dma_cb_mm_read_agent_cp_valid;                                     // read_dma_cb_mm_read_agent:cp_valid -> router_002:sink_valid
	wire  [1227:0] read_dma_cb_mm_read_agent_cp_data;                                      // read_dma_cb_mm_read_agent:cp_data -> router_002:sink_data
	wire           read_dma_cb_mm_read_agent_cp_ready;                                     // router_002:sink_ready -> read_dma_cb_mm_read_agent:cp_ready
	wire           read_dma_cb_mm_read_agent_cp_startofpacket;                             // read_dma_cb_mm_read_agent:cp_startofpacket -> router_002:sink_startofpacket
	wire           read_dma_cb_mm_read_agent_cp_endofpacket;                               // read_dma_cb_mm_read_agent:cp_endofpacket -> router_002:sink_endofpacket
	wire           read_dma_cr_mm_read_agent_cp_valid;                                     // read_dma_cr_mm_read_agent:cp_valid -> router_003:sink_valid
	wire  [1227:0] read_dma_cr_mm_read_agent_cp_data;                                      // read_dma_cr_mm_read_agent:cp_data -> router_003:sink_data
	wire           read_dma_cr_mm_read_agent_cp_ready;                                     // router_003:sink_ready -> read_dma_cr_mm_read_agent:cp_ready
	wire           read_dma_cr_mm_read_agent_cp_startofpacket;                             // read_dma_cr_mm_read_agent:cp_startofpacket -> router_003:sink_startofpacket
	wire           read_dma_cr_mm_read_agent_cp_endofpacket;                               // read_dma_cr_mm_read_agent:cp_endofpacket -> router_003:sink_endofpacket
	wire           write_dma_mm_write_agent_cp_valid;                                      // write_dma_mm_write_agent:cp_valid -> router_004:sink_valid
	wire  [1227:0] write_dma_mm_write_agent_cp_data;                                       // write_dma_mm_write_agent:cp_data -> router_004:sink_data
	wire           write_dma_mm_write_agent_cp_ready;                                      // router_004:sink_ready -> write_dma_mm_write_agent:cp_ready
	wire           write_dma_mm_write_agent_cp_startofpacket;                              // write_dma_mm_write_agent:cp_startofpacket -> router_004:sink_startofpacket
	wire           write_dma_mm_write_agent_cp_endofpacket;                                // write_dma_mm_write_agent:cp_endofpacket -> router_004:sink_endofpacket
	wire           router_005_src_valid;                                                   // router_005:src_valid -> rsp_demux:sink_valid
	wire   [219:0] router_005_src_data;                                                    // router_005:src_data -> rsp_demux:sink_data
	wire           router_005_src_ready;                                                   // rsp_demux:sink_ready -> router_005:src_ready
	wire     [4:0] router_005_src_channel;                                                 // router_005:src_channel -> rsp_demux:sink_channel
	wire           router_005_src_startofpacket;                                           // router_005:src_startofpacket -> rsp_demux:sink_startofpacket
	wire           router_005_src_endofpacket;                                             // router_005:src_endofpacket -> rsp_demux:sink_endofpacket
	wire           rsp_mux_001_src_valid;                                                  // rsp_mux_001:src_valid -> read_dma_y_mm_read_rsp_width_adapter:in_valid
	wire   [219:0] rsp_mux_001_src_data;                                                   // rsp_mux_001:src_data -> read_dma_y_mm_read_rsp_width_adapter:in_data
	wire           rsp_mux_001_src_ready;                                                  // read_dma_y_mm_read_rsp_width_adapter:in_ready -> rsp_mux_001:src_ready
	wire     [4:0] rsp_mux_001_src_channel;                                                // rsp_mux_001:src_channel -> read_dma_y_mm_read_rsp_width_adapter:in_channel
	wire           rsp_mux_001_src_startofpacket;                                          // rsp_mux_001:src_startofpacket -> read_dma_y_mm_read_rsp_width_adapter:in_startofpacket
	wire           rsp_mux_001_src_endofpacket;                                            // rsp_mux_001:src_endofpacket -> read_dma_y_mm_read_rsp_width_adapter:in_endofpacket
	wire           read_dma_y_mm_read_rsp_width_adapter_src_valid;                         // read_dma_y_mm_read_rsp_width_adapter:out_valid -> read_dma_y_mm_read_agent:rp_valid
	wire  [1227:0] read_dma_y_mm_read_rsp_width_adapter_src_data;                          // read_dma_y_mm_read_rsp_width_adapter:out_data -> read_dma_y_mm_read_agent:rp_data
	wire           read_dma_y_mm_read_rsp_width_adapter_src_ready;                         // read_dma_y_mm_read_agent:rp_ready -> read_dma_y_mm_read_rsp_width_adapter:out_ready
	wire     [4:0] read_dma_y_mm_read_rsp_width_adapter_src_channel;                       // read_dma_y_mm_read_rsp_width_adapter:out_channel -> read_dma_y_mm_read_agent:rp_channel
	wire           read_dma_y_mm_read_rsp_width_adapter_src_startofpacket;                 // read_dma_y_mm_read_rsp_width_adapter:out_startofpacket -> read_dma_y_mm_read_agent:rp_startofpacket
	wire           read_dma_y_mm_read_rsp_width_adapter_src_endofpacket;                   // read_dma_y_mm_read_rsp_width_adapter:out_endofpacket -> read_dma_y_mm_read_agent:rp_endofpacket
	wire           rsp_mux_002_src_valid;                                                  // rsp_mux_002:src_valid -> read_dma_cb_mm_read_rsp_width_adapter:in_valid
	wire   [219:0] rsp_mux_002_src_data;                                                   // rsp_mux_002:src_data -> read_dma_cb_mm_read_rsp_width_adapter:in_data
	wire           rsp_mux_002_src_ready;                                                  // read_dma_cb_mm_read_rsp_width_adapter:in_ready -> rsp_mux_002:src_ready
	wire     [4:0] rsp_mux_002_src_channel;                                                // rsp_mux_002:src_channel -> read_dma_cb_mm_read_rsp_width_adapter:in_channel
	wire           rsp_mux_002_src_startofpacket;                                          // rsp_mux_002:src_startofpacket -> read_dma_cb_mm_read_rsp_width_adapter:in_startofpacket
	wire           rsp_mux_002_src_endofpacket;                                            // rsp_mux_002:src_endofpacket -> read_dma_cb_mm_read_rsp_width_adapter:in_endofpacket
	wire           read_dma_cb_mm_read_rsp_width_adapter_src_valid;                        // read_dma_cb_mm_read_rsp_width_adapter:out_valid -> read_dma_cb_mm_read_agent:rp_valid
	wire  [1227:0] read_dma_cb_mm_read_rsp_width_adapter_src_data;                         // read_dma_cb_mm_read_rsp_width_adapter:out_data -> read_dma_cb_mm_read_agent:rp_data
	wire           read_dma_cb_mm_read_rsp_width_adapter_src_ready;                        // read_dma_cb_mm_read_agent:rp_ready -> read_dma_cb_mm_read_rsp_width_adapter:out_ready
	wire     [4:0] read_dma_cb_mm_read_rsp_width_adapter_src_channel;                      // read_dma_cb_mm_read_rsp_width_adapter:out_channel -> read_dma_cb_mm_read_agent:rp_channel
	wire           read_dma_cb_mm_read_rsp_width_adapter_src_startofpacket;                // read_dma_cb_mm_read_rsp_width_adapter:out_startofpacket -> read_dma_cb_mm_read_agent:rp_startofpacket
	wire           read_dma_cb_mm_read_rsp_width_adapter_src_endofpacket;                  // read_dma_cb_mm_read_rsp_width_adapter:out_endofpacket -> read_dma_cb_mm_read_agent:rp_endofpacket
	wire           rsp_mux_003_src_valid;                                                  // rsp_mux_003:src_valid -> read_dma_cr_mm_read_rsp_width_adapter:in_valid
	wire   [219:0] rsp_mux_003_src_data;                                                   // rsp_mux_003:src_data -> read_dma_cr_mm_read_rsp_width_adapter:in_data
	wire           rsp_mux_003_src_ready;                                                  // read_dma_cr_mm_read_rsp_width_adapter:in_ready -> rsp_mux_003:src_ready
	wire     [4:0] rsp_mux_003_src_channel;                                                // rsp_mux_003:src_channel -> read_dma_cr_mm_read_rsp_width_adapter:in_channel
	wire           rsp_mux_003_src_startofpacket;                                          // rsp_mux_003:src_startofpacket -> read_dma_cr_mm_read_rsp_width_adapter:in_startofpacket
	wire           rsp_mux_003_src_endofpacket;                                            // rsp_mux_003:src_endofpacket -> read_dma_cr_mm_read_rsp_width_adapter:in_endofpacket
	wire           read_dma_cr_mm_read_rsp_width_adapter_src_valid;                        // read_dma_cr_mm_read_rsp_width_adapter:out_valid -> read_dma_cr_mm_read_agent:rp_valid
	wire  [1227:0] read_dma_cr_mm_read_rsp_width_adapter_src_data;                         // read_dma_cr_mm_read_rsp_width_adapter:out_data -> read_dma_cr_mm_read_agent:rp_data
	wire           read_dma_cr_mm_read_rsp_width_adapter_src_ready;                        // read_dma_cr_mm_read_agent:rp_ready -> read_dma_cr_mm_read_rsp_width_adapter:out_ready
	wire     [4:0] read_dma_cr_mm_read_rsp_width_adapter_src_channel;                      // read_dma_cr_mm_read_rsp_width_adapter:out_channel -> read_dma_cr_mm_read_agent:rp_channel
	wire           read_dma_cr_mm_read_rsp_width_adapter_src_startofpacket;                // read_dma_cr_mm_read_rsp_width_adapter:out_startofpacket -> read_dma_cr_mm_read_agent:rp_startofpacket
	wire           read_dma_cr_mm_read_rsp_width_adapter_src_endofpacket;                  // read_dma_cr_mm_read_rsp_width_adapter:out_endofpacket -> read_dma_cr_mm_read_agent:rp_endofpacket
	wire           rsp_mux_004_src_valid;                                                  // rsp_mux_004:src_valid -> write_dma_mm_write_rsp_width_adapter:in_valid
	wire   [219:0] rsp_mux_004_src_data;                                                   // rsp_mux_004:src_data -> write_dma_mm_write_rsp_width_adapter:in_data
	wire           rsp_mux_004_src_ready;                                                  // write_dma_mm_write_rsp_width_adapter:in_ready -> rsp_mux_004:src_ready
	wire     [4:0] rsp_mux_004_src_channel;                                                // rsp_mux_004:src_channel -> write_dma_mm_write_rsp_width_adapter:in_channel
	wire           rsp_mux_004_src_startofpacket;                                          // rsp_mux_004:src_startofpacket -> write_dma_mm_write_rsp_width_adapter:in_startofpacket
	wire           rsp_mux_004_src_endofpacket;                                            // rsp_mux_004:src_endofpacket -> write_dma_mm_write_rsp_width_adapter:in_endofpacket
	wire           write_dma_mm_write_rsp_width_adapter_src_valid;                         // write_dma_mm_write_rsp_width_adapter:out_valid -> write_dma_mm_write_agent:rp_valid
	wire  [1227:0] write_dma_mm_write_rsp_width_adapter_src_data;                          // write_dma_mm_write_rsp_width_adapter:out_data -> write_dma_mm_write_agent:rp_data
	wire           write_dma_mm_write_rsp_width_adapter_src_ready;                         // write_dma_mm_write_agent:rp_ready -> write_dma_mm_write_rsp_width_adapter:out_ready
	wire     [4:0] write_dma_mm_write_rsp_width_adapter_src_channel;                       // write_dma_mm_write_rsp_width_adapter:out_channel -> write_dma_mm_write_agent:rp_channel
	wire           write_dma_mm_write_rsp_width_adapter_src_startofpacket;                 // write_dma_mm_write_rsp_width_adapter:out_startofpacket -> write_dma_mm_write_agent:rp_startofpacket
	wire           write_dma_mm_write_rsp_width_adapter_src_endofpacket;                   // write_dma_mm_write_rsp_width_adapter:out_endofpacket -> write_dma_mm_write_agent:rp_endofpacket
	wire           router_001_src_valid;                                                   // router_001:src_valid -> read_dma_y_mm_read_cmd_width_adapter:in_valid
	wire  [1227:0] router_001_src_data;                                                    // router_001:src_data -> read_dma_y_mm_read_cmd_width_adapter:in_data
	wire           router_001_src_ready;                                                   // read_dma_y_mm_read_cmd_width_adapter:in_ready -> router_001:src_ready
	wire     [4:0] router_001_src_channel;                                                 // router_001:src_channel -> read_dma_y_mm_read_cmd_width_adapter:in_channel
	wire           router_001_src_startofpacket;                                           // router_001:src_startofpacket -> read_dma_y_mm_read_cmd_width_adapter:in_startofpacket
	wire           router_001_src_endofpacket;                                             // router_001:src_endofpacket -> read_dma_y_mm_read_cmd_width_adapter:in_endofpacket
	wire           read_dma_y_mm_read_cmd_width_adapter_src_valid;                         // read_dma_y_mm_read_cmd_width_adapter:out_valid -> cmd_demux_001:sink_valid
	wire   [219:0] read_dma_y_mm_read_cmd_width_adapter_src_data;                          // read_dma_y_mm_read_cmd_width_adapter:out_data -> cmd_demux_001:sink_data
	wire           read_dma_y_mm_read_cmd_width_adapter_src_ready;                         // cmd_demux_001:sink_ready -> read_dma_y_mm_read_cmd_width_adapter:out_ready
	wire     [4:0] read_dma_y_mm_read_cmd_width_adapter_src_channel;                       // read_dma_y_mm_read_cmd_width_adapter:out_channel -> cmd_demux_001:sink_channel
	wire           read_dma_y_mm_read_cmd_width_adapter_src_startofpacket;                 // read_dma_y_mm_read_cmd_width_adapter:out_startofpacket -> cmd_demux_001:sink_startofpacket
	wire           read_dma_y_mm_read_cmd_width_adapter_src_endofpacket;                   // read_dma_y_mm_read_cmd_width_adapter:out_endofpacket -> cmd_demux_001:sink_endofpacket
	wire           router_002_src_valid;                                                   // router_002:src_valid -> read_dma_cb_mm_read_cmd_width_adapter:in_valid
	wire  [1227:0] router_002_src_data;                                                    // router_002:src_data -> read_dma_cb_mm_read_cmd_width_adapter:in_data
	wire           router_002_src_ready;                                                   // read_dma_cb_mm_read_cmd_width_adapter:in_ready -> router_002:src_ready
	wire     [4:0] router_002_src_channel;                                                 // router_002:src_channel -> read_dma_cb_mm_read_cmd_width_adapter:in_channel
	wire           router_002_src_startofpacket;                                           // router_002:src_startofpacket -> read_dma_cb_mm_read_cmd_width_adapter:in_startofpacket
	wire           router_002_src_endofpacket;                                             // router_002:src_endofpacket -> read_dma_cb_mm_read_cmd_width_adapter:in_endofpacket
	wire           read_dma_cb_mm_read_cmd_width_adapter_src_valid;                        // read_dma_cb_mm_read_cmd_width_adapter:out_valid -> cmd_demux_002:sink_valid
	wire   [219:0] read_dma_cb_mm_read_cmd_width_adapter_src_data;                         // read_dma_cb_mm_read_cmd_width_adapter:out_data -> cmd_demux_002:sink_data
	wire           read_dma_cb_mm_read_cmd_width_adapter_src_ready;                        // cmd_demux_002:sink_ready -> read_dma_cb_mm_read_cmd_width_adapter:out_ready
	wire     [4:0] read_dma_cb_mm_read_cmd_width_adapter_src_channel;                      // read_dma_cb_mm_read_cmd_width_adapter:out_channel -> cmd_demux_002:sink_channel
	wire           read_dma_cb_mm_read_cmd_width_adapter_src_startofpacket;                // read_dma_cb_mm_read_cmd_width_adapter:out_startofpacket -> cmd_demux_002:sink_startofpacket
	wire           read_dma_cb_mm_read_cmd_width_adapter_src_endofpacket;                  // read_dma_cb_mm_read_cmd_width_adapter:out_endofpacket -> cmd_demux_002:sink_endofpacket
	wire           router_003_src_valid;                                                   // router_003:src_valid -> read_dma_cr_mm_read_cmd_width_adapter:in_valid
	wire  [1227:0] router_003_src_data;                                                    // router_003:src_data -> read_dma_cr_mm_read_cmd_width_adapter:in_data
	wire           router_003_src_ready;                                                   // read_dma_cr_mm_read_cmd_width_adapter:in_ready -> router_003:src_ready
	wire     [4:0] router_003_src_channel;                                                 // router_003:src_channel -> read_dma_cr_mm_read_cmd_width_adapter:in_channel
	wire           router_003_src_startofpacket;                                           // router_003:src_startofpacket -> read_dma_cr_mm_read_cmd_width_adapter:in_startofpacket
	wire           router_003_src_endofpacket;                                             // router_003:src_endofpacket -> read_dma_cr_mm_read_cmd_width_adapter:in_endofpacket
	wire           read_dma_cr_mm_read_cmd_width_adapter_src_valid;                        // read_dma_cr_mm_read_cmd_width_adapter:out_valid -> cmd_demux_003:sink_valid
	wire   [219:0] read_dma_cr_mm_read_cmd_width_adapter_src_data;                         // read_dma_cr_mm_read_cmd_width_adapter:out_data -> cmd_demux_003:sink_data
	wire           read_dma_cr_mm_read_cmd_width_adapter_src_ready;                        // cmd_demux_003:sink_ready -> read_dma_cr_mm_read_cmd_width_adapter:out_ready
	wire     [4:0] read_dma_cr_mm_read_cmd_width_adapter_src_channel;                      // read_dma_cr_mm_read_cmd_width_adapter:out_channel -> cmd_demux_003:sink_channel
	wire           read_dma_cr_mm_read_cmd_width_adapter_src_startofpacket;                // read_dma_cr_mm_read_cmd_width_adapter:out_startofpacket -> cmd_demux_003:sink_startofpacket
	wire           read_dma_cr_mm_read_cmd_width_adapter_src_endofpacket;                  // read_dma_cr_mm_read_cmd_width_adapter:out_endofpacket -> cmd_demux_003:sink_endofpacket
	wire           router_004_src_valid;                                                   // router_004:src_valid -> write_dma_mm_write_cmd_width_adapter:in_valid
	wire  [1227:0] router_004_src_data;                                                    // router_004:src_data -> write_dma_mm_write_cmd_width_adapter:in_data
	wire           router_004_src_ready;                                                   // write_dma_mm_write_cmd_width_adapter:in_ready -> router_004:src_ready
	wire     [4:0] router_004_src_channel;                                                 // router_004:src_channel -> write_dma_mm_write_cmd_width_adapter:in_channel
	wire           router_004_src_startofpacket;                                           // router_004:src_startofpacket -> write_dma_mm_write_cmd_width_adapter:in_startofpacket
	wire           router_004_src_endofpacket;                                             // router_004:src_endofpacket -> write_dma_mm_write_cmd_width_adapter:in_endofpacket
	wire           write_dma_mm_write_cmd_width_adapter_src_valid;                         // write_dma_mm_write_cmd_width_adapter:out_valid -> cmd_demux_004:sink_valid
	wire   [219:0] write_dma_mm_write_cmd_width_adapter_src_data;                          // write_dma_mm_write_cmd_width_adapter:out_data -> cmd_demux_004:sink_data
	wire           write_dma_mm_write_cmd_width_adapter_src_ready;                         // cmd_demux_004:sink_ready -> write_dma_mm_write_cmd_width_adapter:out_ready
	wire     [4:0] write_dma_mm_write_cmd_width_adapter_src_channel;                       // write_dma_mm_write_cmd_width_adapter:out_channel -> cmd_demux_004:sink_channel
	wire           write_dma_mm_write_cmd_width_adapter_src_startofpacket;                 // write_dma_mm_write_cmd_width_adapter:out_startofpacket -> cmd_demux_004:sink_startofpacket
	wire           write_dma_mm_write_cmd_width_adapter_src_endofpacket;                   // write_dma_mm_write_cmd_width_adapter:out_endofpacket -> cmd_demux_004:sink_endofpacket
	wire           cmd_mux_src_valid;                                                      // cmd_mux:src_valid -> agent_pipeline:in_valid
	wire   [219:0] cmd_mux_src_data;                                                       // cmd_mux:src_data -> agent_pipeline:in_data
	wire           cmd_mux_src_ready;                                                      // agent_pipeline:in_ready -> cmd_mux:src_ready
	wire     [4:0] cmd_mux_src_channel;                                                    // cmd_mux:src_channel -> agent_pipeline:in_channel
	wire           cmd_mux_src_startofpacket;                                              // cmd_mux:src_startofpacket -> agent_pipeline:in_startofpacket
	wire           cmd_mux_src_endofpacket;                                                // cmd_mux:src_endofpacket -> agent_pipeline:in_endofpacket
	wire           agent_pipeline_source0_valid;                                           // agent_pipeline:out_valid -> lpddr2_avl_1_agent:cp_valid
	wire   [219:0] agent_pipeline_source0_data;                                            // agent_pipeline:out_data -> lpddr2_avl_1_agent:cp_data
	wire           agent_pipeline_source0_ready;                                           // lpddr2_avl_1_agent:cp_ready -> agent_pipeline:out_ready
	wire     [4:0] agent_pipeline_source0_channel;                                         // agent_pipeline:out_channel -> lpddr2_avl_1_agent:cp_channel
	wire           agent_pipeline_source0_startofpacket;                                   // agent_pipeline:out_startofpacket -> lpddr2_avl_1_agent:cp_startofpacket
	wire           agent_pipeline_source0_endofpacket;                                     // agent_pipeline:out_endofpacket -> lpddr2_avl_1_agent:cp_endofpacket
	wire           lpddr2_avl_1_agent_rp_valid;                                            // lpddr2_avl_1_agent:rp_valid -> agent_pipeline_001:in_valid
	wire   [219:0] lpddr2_avl_1_agent_rp_data;                                             // lpddr2_avl_1_agent:rp_data -> agent_pipeline_001:in_data
	wire           lpddr2_avl_1_agent_rp_ready;                                            // agent_pipeline_001:in_ready -> lpddr2_avl_1_agent:rp_ready
	wire           lpddr2_avl_1_agent_rp_startofpacket;                                    // lpddr2_avl_1_agent:rp_startofpacket -> agent_pipeline_001:in_startofpacket
	wire           lpddr2_avl_1_agent_rp_endofpacket;                                      // lpddr2_avl_1_agent:rp_endofpacket -> agent_pipeline_001:in_endofpacket
	wire           agent_pipeline_001_source0_valid;                                       // agent_pipeline_001:out_valid -> router_005:sink_valid
	wire   [219:0] agent_pipeline_001_source0_data;                                        // agent_pipeline_001:out_data -> router_005:sink_data
	wire           agent_pipeline_001_source0_ready;                                       // router_005:sink_ready -> agent_pipeline_001:out_ready
	wire           agent_pipeline_001_source0_startofpacket;                               // agent_pipeline_001:out_startofpacket -> router_005:sink_startofpacket
	wire           agent_pipeline_001_source0_endofpacket;                                 // agent_pipeline_001:out_endofpacket -> router_005:sink_endofpacket
	wire           cmd_demux_src0_valid;                                                   // cmd_demux:src0_valid -> mux_pipeline:in_valid
	wire   [219:0] cmd_demux_src0_data;                                                    // cmd_demux:src0_data -> mux_pipeline:in_data
	wire           cmd_demux_src0_ready;                                                   // mux_pipeline:in_ready -> cmd_demux:src0_ready
	wire     [4:0] cmd_demux_src0_channel;                                                 // cmd_demux:src0_channel -> mux_pipeline:in_channel
	wire           cmd_demux_src0_startofpacket;                                           // cmd_demux:src0_startofpacket -> mux_pipeline:in_startofpacket
	wire           cmd_demux_src0_endofpacket;                                             // cmd_demux:src0_endofpacket -> mux_pipeline:in_endofpacket
	wire           mux_pipeline_source0_valid;                                             // mux_pipeline:out_valid -> cmd_mux:sink0_valid
	wire   [219:0] mux_pipeline_source0_data;                                              // mux_pipeline:out_data -> cmd_mux:sink0_data
	wire           mux_pipeline_source0_ready;                                             // cmd_mux:sink0_ready -> mux_pipeline:out_ready
	wire     [4:0] mux_pipeline_source0_channel;                                           // mux_pipeline:out_channel -> cmd_mux:sink0_channel
	wire           mux_pipeline_source0_startofpacket;                                     // mux_pipeline:out_startofpacket -> cmd_mux:sink0_startofpacket
	wire           mux_pipeline_source0_endofpacket;                                       // mux_pipeline:out_endofpacket -> cmd_mux:sink0_endofpacket
	wire           cmd_demux_001_src0_valid;                                               // cmd_demux_001:src0_valid -> mux_pipeline_001:in_valid
	wire   [219:0] cmd_demux_001_src0_data;                                                // cmd_demux_001:src0_data -> mux_pipeline_001:in_data
	wire           cmd_demux_001_src0_ready;                                               // mux_pipeline_001:in_ready -> cmd_demux_001:src0_ready
	wire     [4:0] cmd_demux_001_src0_channel;                                             // cmd_demux_001:src0_channel -> mux_pipeline_001:in_channel
	wire           cmd_demux_001_src0_startofpacket;                                       // cmd_demux_001:src0_startofpacket -> mux_pipeline_001:in_startofpacket
	wire           cmd_demux_001_src0_endofpacket;                                         // cmd_demux_001:src0_endofpacket -> mux_pipeline_001:in_endofpacket
	wire           mux_pipeline_001_source0_valid;                                         // mux_pipeline_001:out_valid -> cmd_mux:sink1_valid
	wire   [219:0] mux_pipeline_001_source0_data;                                          // mux_pipeline_001:out_data -> cmd_mux:sink1_data
	wire           mux_pipeline_001_source0_ready;                                         // cmd_mux:sink1_ready -> mux_pipeline_001:out_ready
	wire     [4:0] mux_pipeline_001_source0_channel;                                       // mux_pipeline_001:out_channel -> cmd_mux:sink1_channel
	wire           mux_pipeline_001_source0_startofpacket;                                 // mux_pipeline_001:out_startofpacket -> cmd_mux:sink1_startofpacket
	wire           mux_pipeline_001_source0_endofpacket;                                   // mux_pipeline_001:out_endofpacket -> cmd_mux:sink1_endofpacket
	wire           cmd_demux_002_src0_valid;                                               // cmd_demux_002:src0_valid -> mux_pipeline_002:in_valid
	wire   [219:0] cmd_demux_002_src0_data;                                                // cmd_demux_002:src0_data -> mux_pipeline_002:in_data
	wire           cmd_demux_002_src0_ready;                                               // mux_pipeline_002:in_ready -> cmd_demux_002:src0_ready
	wire     [4:0] cmd_demux_002_src0_channel;                                             // cmd_demux_002:src0_channel -> mux_pipeline_002:in_channel
	wire           cmd_demux_002_src0_startofpacket;                                       // cmd_demux_002:src0_startofpacket -> mux_pipeline_002:in_startofpacket
	wire           cmd_demux_002_src0_endofpacket;                                         // cmd_demux_002:src0_endofpacket -> mux_pipeline_002:in_endofpacket
	wire           mux_pipeline_002_source0_valid;                                         // mux_pipeline_002:out_valid -> cmd_mux:sink2_valid
	wire   [219:0] mux_pipeline_002_source0_data;                                          // mux_pipeline_002:out_data -> cmd_mux:sink2_data
	wire           mux_pipeline_002_source0_ready;                                         // cmd_mux:sink2_ready -> mux_pipeline_002:out_ready
	wire     [4:0] mux_pipeline_002_source0_channel;                                       // mux_pipeline_002:out_channel -> cmd_mux:sink2_channel
	wire           mux_pipeline_002_source0_startofpacket;                                 // mux_pipeline_002:out_startofpacket -> cmd_mux:sink2_startofpacket
	wire           mux_pipeline_002_source0_endofpacket;                                   // mux_pipeline_002:out_endofpacket -> cmd_mux:sink2_endofpacket
	wire           cmd_demux_003_src0_valid;                                               // cmd_demux_003:src0_valid -> mux_pipeline_003:in_valid
	wire   [219:0] cmd_demux_003_src0_data;                                                // cmd_demux_003:src0_data -> mux_pipeline_003:in_data
	wire           cmd_demux_003_src0_ready;                                               // mux_pipeline_003:in_ready -> cmd_demux_003:src0_ready
	wire     [4:0] cmd_demux_003_src0_channel;                                             // cmd_demux_003:src0_channel -> mux_pipeline_003:in_channel
	wire           cmd_demux_003_src0_startofpacket;                                       // cmd_demux_003:src0_startofpacket -> mux_pipeline_003:in_startofpacket
	wire           cmd_demux_003_src0_endofpacket;                                         // cmd_demux_003:src0_endofpacket -> mux_pipeline_003:in_endofpacket
	wire           mux_pipeline_003_source0_valid;                                         // mux_pipeline_003:out_valid -> cmd_mux:sink3_valid
	wire   [219:0] mux_pipeline_003_source0_data;                                          // mux_pipeline_003:out_data -> cmd_mux:sink3_data
	wire           mux_pipeline_003_source0_ready;                                         // cmd_mux:sink3_ready -> mux_pipeline_003:out_ready
	wire     [4:0] mux_pipeline_003_source0_channel;                                       // mux_pipeline_003:out_channel -> cmd_mux:sink3_channel
	wire           mux_pipeline_003_source0_startofpacket;                                 // mux_pipeline_003:out_startofpacket -> cmd_mux:sink3_startofpacket
	wire           mux_pipeline_003_source0_endofpacket;                                   // mux_pipeline_003:out_endofpacket -> cmd_mux:sink3_endofpacket
	wire           cmd_demux_004_src0_valid;                                               // cmd_demux_004:src0_valid -> mux_pipeline_004:in_valid
	wire   [219:0] cmd_demux_004_src0_data;                                                // cmd_demux_004:src0_data -> mux_pipeline_004:in_data
	wire           cmd_demux_004_src0_ready;                                               // mux_pipeline_004:in_ready -> cmd_demux_004:src0_ready
	wire     [4:0] cmd_demux_004_src0_channel;                                             // cmd_demux_004:src0_channel -> mux_pipeline_004:in_channel
	wire           cmd_demux_004_src0_startofpacket;                                       // cmd_demux_004:src0_startofpacket -> mux_pipeline_004:in_startofpacket
	wire           cmd_demux_004_src0_endofpacket;                                         // cmd_demux_004:src0_endofpacket -> mux_pipeline_004:in_endofpacket
	wire           mux_pipeline_004_source0_valid;                                         // mux_pipeline_004:out_valid -> cmd_mux:sink4_valid
	wire   [219:0] mux_pipeline_004_source0_data;                                          // mux_pipeline_004:out_data -> cmd_mux:sink4_data
	wire           mux_pipeline_004_source0_ready;                                         // cmd_mux:sink4_ready -> mux_pipeline_004:out_ready
	wire     [4:0] mux_pipeline_004_source0_channel;                                       // mux_pipeline_004:out_channel -> cmd_mux:sink4_channel
	wire           mux_pipeline_004_source0_startofpacket;                                 // mux_pipeline_004:out_startofpacket -> cmd_mux:sink4_startofpacket
	wire           mux_pipeline_004_source0_endofpacket;                                   // mux_pipeline_004:out_endofpacket -> cmd_mux:sink4_endofpacket
	wire           rsp_demux_src0_valid;                                                   // rsp_demux:src0_valid -> mux_pipeline_005:in_valid
	wire   [219:0] rsp_demux_src0_data;                                                    // rsp_demux:src0_data -> mux_pipeline_005:in_data
	wire           rsp_demux_src0_ready;                                                   // mux_pipeline_005:in_ready -> rsp_demux:src0_ready
	wire     [4:0] rsp_demux_src0_channel;                                                 // rsp_demux:src0_channel -> mux_pipeline_005:in_channel
	wire           rsp_demux_src0_startofpacket;                                           // rsp_demux:src0_startofpacket -> mux_pipeline_005:in_startofpacket
	wire           rsp_demux_src0_endofpacket;                                             // rsp_demux:src0_endofpacket -> mux_pipeline_005:in_endofpacket
	wire           mux_pipeline_005_source0_valid;                                         // mux_pipeline_005:out_valid -> rsp_mux:sink0_valid
	wire   [219:0] mux_pipeline_005_source0_data;                                          // mux_pipeline_005:out_data -> rsp_mux:sink0_data
	wire           mux_pipeline_005_source0_ready;                                         // rsp_mux:sink0_ready -> mux_pipeline_005:out_ready
	wire     [4:0] mux_pipeline_005_source0_channel;                                       // mux_pipeline_005:out_channel -> rsp_mux:sink0_channel
	wire           mux_pipeline_005_source0_startofpacket;                                 // mux_pipeline_005:out_startofpacket -> rsp_mux:sink0_startofpacket
	wire           mux_pipeline_005_source0_endofpacket;                                   // mux_pipeline_005:out_endofpacket -> rsp_mux:sink0_endofpacket
	wire           rsp_demux_src1_valid;                                                   // rsp_demux:src1_valid -> mux_pipeline_006:in_valid
	wire   [219:0] rsp_demux_src1_data;                                                    // rsp_demux:src1_data -> mux_pipeline_006:in_data
	wire           rsp_demux_src1_ready;                                                   // mux_pipeline_006:in_ready -> rsp_demux:src1_ready
	wire     [4:0] rsp_demux_src1_channel;                                                 // rsp_demux:src1_channel -> mux_pipeline_006:in_channel
	wire           rsp_demux_src1_startofpacket;                                           // rsp_demux:src1_startofpacket -> mux_pipeline_006:in_startofpacket
	wire           rsp_demux_src1_endofpacket;                                             // rsp_demux:src1_endofpacket -> mux_pipeline_006:in_endofpacket
	wire           mux_pipeline_006_source0_valid;                                         // mux_pipeline_006:out_valid -> rsp_mux_001:sink0_valid
	wire   [219:0] mux_pipeline_006_source0_data;                                          // mux_pipeline_006:out_data -> rsp_mux_001:sink0_data
	wire           mux_pipeline_006_source0_ready;                                         // rsp_mux_001:sink0_ready -> mux_pipeline_006:out_ready
	wire     [4:0] mux_pipeline_006_source0_channel;                                       // mux_pipeline_006:out_channel -> rsp_mux_001:sink0_channel
	wire           mux_pipeline_006_source0_startofpacket;                                 // mux_pipeline_006:out_startofpacket -> rsp_mux_001:sink0_startofpacket
	wire           mux_pipeline_006_source0_endofpacket;                                   // mux_pipeline_006:out_endofpacket -> rsp_mux_001:sink0_endofpacket
	wire           rsp_demux_src2_valid;                                                   // rsp_demux:src2_valid -> mux_pipeline_007:in_valid
	wire   [219:0] rsp_demux_src2_data;                                                    // rsp_demux:src2_data -> mux_pipeline_007:in_data
	wire           rsp_demux_src2_ready;                                                   // mux_pipeline_007:in_ready -> rsp_demux:src2_ready
	wire     [4:0] rsp_demux_src2_channel;                                                 // rsp_demux:src2_channel -> mux_pipeline_007:in_channel
	wire           rsp_demux_src2_startofpacket;                                           // rsp_demux:src2_startofpacket -> mux_pipeline_007:in_startofpacket
	wire           rsp_demux_src2_endofpacket;                                             // rsp_demux:src2_endofpacket -> mux_pipeline_007:in_endofpacket
	wire           mux_pipeline_007_source0_valid;                                         // mux_pipeline_007:out_valid -> rsp_mux_002:sink0_valid
	wire   [219:0] mux_pipeline_007_source0_data;                                          // mux_pipeline_007:out_data -> rsp_mux_002:sink0_data
	wire           mux_pipeline_007_source0_ready;                                         // rsp_mux_002:sink0_ready -> mux_pipeline_007:out_ready
	wire     [4:0] mux_pipeline_007_source0_channel;                                       // mux_pipeline_007:out_channel -> rsp_mux_002:sink0_channel
	wire           mux_pipeline_007_source0_startofpacket;                                 // mux_pipeline_007:out_startofpacket -> rsp_mux_002:sink0_startofpacket
	wire           mux_pipeline_007_source0_endofpacket;                                   // mux_pipeline_007:out_endofpacket -> rsp_mux_002:sink0_endofpacket
	wire           rsp_demux_src3_valid;                                                   // rsp_demux:src3_valid -> mux_pipeline_008:in_valid
	wire   [219:0] rsp_demux_src3_data;                                                    // rsp_demux:src3_data -> mux_pipeline_008:in_data
	wire           rsp_demux_src3_ready;                                                   // mux_pipeline_008:in_ready -> rsp_demux:src3_ready
	wire     [4:0] rsp_demux_src3_channel;                                                 // rsp_demux:src3_channel -> mux_pipeline_008:in_channel
	wire           rsp_demux_src3_startofpacket;                                           // rsp_demux:src3_startofpacket -> mux_pipeline_008:in_startofpacket
	wire           rsp_demux_src3_endofpacket;                                             // rsp_demux:src3_endofpacket -> mux_pipeline_008:in_endofpacket
	wire           mux_pipeline_008_source0_valid;                                         // mux_pipeline_008:out_valid -> rsp_mux_003:sink0_valid
	wire   [219:0] mux_pipeline_008_source0_data;                                          // mux_pipeline_008:out_data -> rsp_mux_003:sink0_data
	wire           mux_pipeline_008_source0_ready;                                         // rsp_mux_003:sink0_ready -> mux_pipeline_008:out_ready
	wire     [4:0] mux_pipeline_008_source0_channel;                                       // mux_pipeline_008:out_channel -> rsp_mux_003:sink0_channel
	wire           mux_pipeline_008_source0_startofpacket;                                 // mux_pipeline_008:out_startofpacket -> rsp_mux_003:sink0_startofpacket
	wire           mux_pipeline_008_source0_endofpacket;                                   // mux_pipeline_008:out_endofpacket -> rsp_mux_003:sink0_endofpacket
	wire           rsp_demux_src4_valid;                                                   // rsp_demux:src4_valid -> mux_pipeline_009:in_valid
	wire   [219:0] rsp_demux_src4_data;                                                    // rsp_demux:src4_data -> mux_pipeline_009:in_data
	wire           rsp_demux_src4_ready;                                                   // mux_pipeline_009:in_ready -> rsp_demux:src4_ready
	wire     [4:0] rsp_demux_src4_channel;                                                 // rsp_demux:src4_channel -> mux_pipeline_009:in_channel
	wire           rsp_demux_src4_startofpacket;                                           // rsp_demux:src4_startofpacket -> mux_pipeline_009:in_startofpacket
	wire           rsp_demux_src4_endofpacket;                                             // rsp_demux:src4_endofpacket -> mux_pipeline_009:in_endofpacket
	wire           mux_pipeline_009_source0_valid;                                         // mux_pipeline_009:out_valid -> rsp_mux_004:sink0_valid
	wire   [219:0] mux_pipeline_009_source0_data;                                          // mux_pipeline_009:out_data -> rsp_mux_004:sink0_data
	wire           mux_pipeline_009_source0_ready;                                         // rsp_mux_004:sink0_ready -> mux_pipeline_009:out_ready
	wire     [4:0] mux_pipeline_009_source0_channel;                                       // mux_pipeline_009:out_channel -> rsp_mux_004:sink0_channel
	wire           mux_pipeline_009_source0_startofpacket;                                 // mux_pipeline_009:out_startofpacket -> rsp_mux_004:sink0_startofpacket
	wire           mux_pipeline_009_source0_endofpacket;                                   // mux_pipeline_009:out_endofpacket -> rsp_mux_004:sink0_endofpacket
	wire           lpddr2_avl_1_agent_rdata_fifo_out_valid;                                // lpddr2_avl_1_agent_rdata_fifo:out_valid -> avalon_st_adapter:in_0_valid
	wire   [129:0] lpddr2_avl_1_agent_rdata_fifo_out_data;                                 // lpddr2_avl_1_agent_rdata_fifo:out_data -> avalon_st_adapter:in_0_data
	wire           lpddr2_avl_1_agent_rdata_fifo_out_ready;                                // avalon_st_adapter:in_0_ready -> lpddr2_avl_1_agent_rdata_fifo:out_ready
	wire           avalon_st_adapter_out_0_valid;                                          // avalon_st_adapter:out_0_valid -> lpddr2_avl_1_agent:rdata_fifo_sink_valid
	wire   [129:0] avalon_st_adapter_out_0_data;                                           // avalon_st_adapter:out_0_data -> lpddr2_avl_1_agent:rdata_fifo_sink_data
	wire           avalon_st_adapter_out_0_ready;                                          // lpddr2_avl_1_agent:rdata_fifo_sink_ready -> avalon_st_adapter:out_0_ready
	wire     [0:0] avalon_st_adapter_out_0_error;                                          // avalon_st_adapter:out_0_error -> lpddr2_avl_1_agent:rdata_fifo_sink_error

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (29),
		.AV_DATA_W                   (128),
		.AV_BURSTCOUNT_W             (8),
		.AV_BYTEENABLE_W             (16),
		.UAV_ADDRESS_W               (29),
		.UAV_BURSTCOUNT_W            (12),
		.USE_READ                    (1),
		.USE_WRITE                   (0),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (1),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (16),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (1),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) video_dma_mm_read_translator (
		.clk                    (clk_125_clk_clk),                                                                                                                       //                       clk.clk
		.reset                  (video_dma_reset_n_reset_bridge_in_reset_reset),                                                                                         //                     reset.reset
		.uav_address            (video_dma_mm_read_translator_avalon_universal_master_0_address),                                                                        // avalon_universal_master_0.address
		.uav_burstcount         (video_dma_mm_read_translator_avalon_universal_master_0_burstcount),                                                                     //                          .burstcount
		.uav_read               (video_dma_mm_read_translator_avalon_universal_master_0_read),                                                                           //                          .read
		.uav_write              (video_dma_mm_read_translator_avalon_universal_master_0_write),                                                                          //                          .write
		.uav_waitrequest        (video_dma_mm_read_translator_avalon_universal_master_0_waitrequest),                                                                    //                          .waitrequest
		.uav_readdatavalid      (video_dma_mm_read_translator_avalon_universal_master_0_readdatavalid),                                                                  //                          .readdatavalid
		.uav_byteenable         (video_dma_mm_read_translator_avalon_universal_master_0_byteenable),                                                                     //                          .byteenable
		.uav_readdata           (video_dma_mm_read_translator_avalon_universal_master_0_readdata),                                                                       //                          .readdata
		.uav_writedata          (video_dma_mm_read_translator_avalon_universal_master_0_writedata),                                                                      //                          .writedata
		.uav_lock               (video_dma_mm_read_translator_avalon_universal_master_0_lock),                                                                           //                          .lock
		.uav_debugaccess        (video_dma_mm_read_translator_avalon_universal_master_0_debugaccess),                                                                    //                          .debugaccess
		.av_address             (video_dma_mm_read_address),                                                                                                             //      avalon_anti_master_0.address
		.av_waitrequest         (video_dma_mm_read_waitrequest),                                                                                                         //                          .waitrequest
		.av_burstcount          (video_dma_mm_read_burstcount),                                                                                                          //                          .burstcount
		.av_byteenable          (video_dma_mm_read_byteenable),                                                                                                          //                          .byteenable
		.av_read                (video_dma_mm_read_read),                                                                                                                //                          .read
		.av_readdata            (video_dma_mm_read_readdata),                                                                                                            //                          .readdata
		.av_readdatavalid       (video_dma_mm_read_readdatavalid),                                                                                                       //                          .readdatavalid
		.av_beginbursttransfer  (1'b0),                                                                                                                                  //               (terminated)
		.av_begintransfer       (1'b0),                                                                                                                                  //               (terminated)
		.av_chipselect          (1'b0),                                                                                                                                  //               (terminated)
		.av_write               (1'b0),                                                                                                                                  //               (terminated)
		.av_writedata           (128'b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000), //               (terminated)
		.av_lock                (1'b0),                                                                                                                                  //               (terminated)
		.av_debugaccess         (1'b0),                                                                                                                                  //               (terminated)
		.uav_clken              (),                                                                                                                                      //               (terminated)
		.av_clken               (1'b1),                                                                                                                                  //               (terminated)
		.uav_response           (2'b00),                                                                                                                                 //               (terminated)
		.av_response            (),                                                                                                                                      //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                                                                                  //               (terminated)
		.av_writeresponsevalid  ()                                                                                                                                       //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (29),
		.AV_DATA_W                   (1024),
		.AV_BURSTCOUNT_W             (3),
		.AV_BYTEENABLE_W             (128),
		.UAV_ADDRESS_W               (29),
		.UAV_BURSTCOUNT_W            (10),
		.USE_READ                    (1),
		.USE_WRITE                   (0),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (1),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (128),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (1),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) read_dma_y_mm_read_translator (
		.clk                    (clk_125_clk_clkclk.clk
		.reset                  (read_dma_y_reset_n_reset_bridge_in_reset_resetreset.reset
		.uav_address            (read_dma_y_mm_read_translator_avalon_universal_master_0_address),                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        // avalon_universal_master_0.address
		.uav_burstcount         (read_dma_y_mm_read_translator_avalon_universal_master_0_burstcountburstcount
		.uav_read               (read_dma_y_mm_read_translator_avalon_universal_master_0_readread
		.uav_write              (read_dma_y_mm_read_translator_avalon_universal_master_0_writewrite
		.uav_waitrequest        (read_dma_y_mm_read_translator_avalon_universal_master_0_waitrequestwaitrequest
		.uav_readdatavalid      (read_dma_y_mm_read_translator_avalon_universal_master_0_readdatavalidreaddatavalid
		.uav_byteenable         (read_dma_y_mm_read_translator_avalon_universal_master_0_byteenablebyteenable
		.uav_readdata           (read_dma_y_mm_read_translator_avalon_universal_master_0_readdatareaddata
		.uav_writedata          (read_dma_y_mm_read_translator_avalon_universal_master_0_writedatawritedata
		.uav_lock               (read_dma_y_mm_read_translator_avalon_universal_master_0_locklock
		.uav_debugaccess        (read_dma_y_mm_read_translator_avalon_universal_master_0_debugaccessdebugaccess
		.av_address             (read_dma_y_mm_read_addressavalon_anti_master_0.address
		.av_waitrequest         (read_dma_y_mm_read_waitrequestwaitrequest
		.av_burstcount          (read_dma_y_mm_read_burstcountburstcount
		.av_byteenable          (read_dma_y_mm_read_byteenable),                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          //                          .byteenable
		.av_read                (read_dma_y_mm_read_readread
		.av_readdata            (read_dma_y_mm_read_readdatareaddata
		.av_readdatavalid       (read_dma_y_mm_read_readdatavalidreaddatavalid
		.av_beginbursttransfer  (1'bterminated)
		.av_begintransfer       (1'bterminated)
		.av_chipselect          (1'bterminated)
		.av_write               (1'bterminated)
		.av_writedata           (1024'bterminated)
		.av_lock                (1'b0),                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   //               (terminated)
		.av_debugaccess         (1'bterminated)
		.uav_clkenterminated)
		.av_clken               (1'bterminated)
		.uav_response           (2'b00),                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  //               (terminated)
		.av_response            (),                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       //               (terminated)
		.uav_writeresponsevalid (1'bterminated)
		.av_writeresponsevalidterminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (29),
		.AV_DATA_W                   (1024),
		.AV_BURSTCOUNT_W             (3),
		.AV_BYTEENABLE_W             (128),
		.UAV_ADDRESS_W               (29),
		.UAV_BURSTCOUNT_W            (10),
		.USE_READ                    (1),
		.USE_WRITE                   (0),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (1),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (128),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (1),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) read_dma_cb_mm_read_translator (
		.clk                    (clk_125_clk_clkclk.clk
		.reset                  (read_dma_y_reset_n_reset_bridge_in_reset_resetreset.reset
		.uav_address            (read_dma_cb_mm_read_translator_avalon_universal_master_0_addressavalon_universal_master_0.address
		.uav_burstcount         (read_dma_cb_mm_read_translator_avalon_universal_master_0_burstcountburstcount
		.uav_read               (read_dma_cb_mm_read_translator_avalon_universal_master_0_readread
		.uav_write              (read_dma_cb_mm_read_translator_avalon_universal_master_0_writewrite
		.uav_waitrequest        (read_dma_cb_mm_read_translator_avalon_universal_master_0_waitrequestwaitrequest
		.uav_readdatavalid      (read_dma_cb_mm_read_translator_avalon_universal_master_0_readdatavalidreaddatavalid
		.uav_byteenable         (read_dma_cb_mm_read_translator_avalon_universal_master_0_byteenablebyteenable
		.uav_readdata           (read_dma_cb_mm_read_translator_avalon_universal_master_0_readdatareaddata
		.uav_writedata          (read_dma_cb_mm_read_translator_avalon_universal_master_0_writedatawritedata
		.uav_lock               (read_dma_cb_mm_read_translator_avalon_universal_master_0_locklock
		.uav_debugaccess        (read_dma_cb_mm_read_translator_avalon_universal_master_0_debugaccessdebugaccess
		.av_address             (read_dma_cb_mm_read_addressavalon_anti_master_0.address
		.av_waitrequest         (read_dma_cb_mm_read_waitrequestwaitrequest
		.av_burstcount          (read_dma_cb_mm_read_burstcountburstcount
		.av_byteenable          (read_dma_cb_mm_read_byteenablebyteenable
		.av_read                (read_dma_cb_mm_read_readread
		.av_readdata            (read_dma_cb_mm_read_readdata),                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           //                          .readdata
		.av_readdatavalid       (read_dma_cb_mm_read_readdatavalidreaddatavalid
		.av_beginbursttransfer  (1'b0),                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   //               (terminated)
		.av_begintransfer       (1'bterminated)
		.av_chipselect          (1'bterminated)
		.av_write               (1'bterminated)
		.av_writedata           (1024'bterminated)
		.av_lock                (1'bterminated)
		.av_debugaccess         (1'bterminated)
		.uav_clkenterminated)
		.av_clken               (1'bterminated)
		.uav_response           (2'b00),                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  //               (terminated)
		.av_responseterminated)
		.uav_writeresponsevalid (1'bterminated)
		.av_writeresponsevalidterminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (29),
		.AV_DATA_W                   (1024),
		.AV_BURSTCOUNT_W             (3),
		.AV_BYTEENABLE_W             (128),
		.UAV_ADDRESS_W               (29),
		.UAV_BURSTCOUNT_W            (10),
		.USE_READ                    (1),
		.USE_WRITE                   (0),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (1),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (128),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (1),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) read_dma_cr_mm_read_translator (
		.clk                    (clk_125_clk_clkclk.clk
		.reset                  (read_dma_y_reset_n_reset_bridge_in_reset_resetreset.reset
		.uav_address            (read_dma_cr_mm_read_translator_avalon_universal_master_0_addressavalon_universal_master_0.address
		.uav_burstcount         (read_dma_cr_mm_read_translator_avalon_universal_master_0_burstcountburstcount
		.uav_read               (read_dma_cr_mm_read_translator_avalon_universal_master_0_readread
		.uav_write              (read_dma_cr_mm_read_translator_avalon_universal_master_0_writewrite
		.uav_waitrequest        (read_dma_cr_mm_read_translator_avalon_universal_master_0_waitrequestwaitrequest
		.uav_readdatavalid      (read_dma_cr_mm_read_translator_avalon_universal_master_0_readdatavalidreaddatavalid
		.uav_byteenable         (read_dma_cr_mm_read_translator_avalon_universal_master_0_byteenablebyteenable
		.uav_readdata           (read_dma_cr_mm_read_translator_avalon_universal_master_0_readdata),                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      //                          .readdata
		.uav_writedata          (read_dma_cr_mm_read_translator_avalon_universal_master_0_writedatawritedata
		.uav_lock               (read_dma_cr_mm_read_translator_avalon_universal_master_0_locklock
		.uav_debugaccess        (read_dma_cr_mm_read_translator_avalon_universal_master_0_debugaccessdebugaccess
		.av_address             (read_dma_cr_mm_read_addressavalon_anti_master_0.address
		.av_waitrequest         (read_dma_cr_mm_read_waitrequestwaitrequest
		.av_burstcount          (read_dma_cr_mm_read_burstcountburstcount
		.av_byteenable          (read_dma_cr_mm_read_byteenablebyteenable
		.av_read                (read_dma_cr_mm_read_readread
		.av_readdata            (read_dma_cr_mm_read_readdata),                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           //                          .readdata
		.av_readdatavalid       (read_dma_cr_mm_read_readdatavalidreaddatavalid
		.av_beginbursttransfer  (1'bterminated)
		.av_begintransfer       (1'bterminated)
		.av_chipselect          (1'b0),                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   //               (terminated)
		.av_write               (1'bterminated)
		.av_writedata           (1024'bterminated)
		.av_lock                (1'bterminated)
		.av_debugaccess         (1'bterminated)
		.uav_clkenterminated)
		.av_clken               (1'bterminated)
		.uav_response           (2'b00),                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  //               (terminated)
		.av_responseterminated)
		.uav_writeresponsevalid (1'bterminated)
		.av_writeresponsevalidterminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (29),
		.AV_DATA_W                   (1024),
		.AV_BURSTCOUNT_W             (3),
		.AV_BYTEENABLE_W             (128),
		.UAV_ADDRESS_W               (29),
		.UAV_BURSTCOUNT_W            (10),
		.USE_READ                    (0),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (1),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (128),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (1),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) write_dma_mm_write_translator (
		.clk                    (clk_125_clk_clk),                                                       //                       clk.clk
		.reset                  (read_dma_y_reset_n_reset_bridge_in_reset_reset),                        //                     reset.reset
		.uav_address            (write_dma_mm_write_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (write_dma_mm_write_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (write_dma_mm_write_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (write_dma_mm_write_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (write_dma_mm_write_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (write_dma_mm_write_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (write_dma_mm_write_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (write_dma_mm_write_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (write_dma_mm_write_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (write_dma_mm_write_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (write_dma_mm_write_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (write_dma_mm_write_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (write_dma_mm_write_waitrequest),                                        //                          .waitrequest
		.av_burstcount          (write_dma_mm_write_burstcount),                                         //                          .burstcount
		.av_byteenable          (write_dma_mm_write_byteenable),                                         //                          .byteenable
		.av_write               (write_dma_mm_write_write),                                              //                          .write
		.av_writedata           (write_dma_mm_write_writedata),                                          //                          .writedata
		.av_beginbursttransfer  (1'b0),                                                                  //               (terminated)
		.av_begintransfer       (1'b0),                                                                  //               (terminated)
		.av_chipselect          (1'b0),                                                                  //               (terminated)
		.av_read                (1'b0),                                                                  //               (terminated)
		.av_readdata            (),                                                                      //               (terminated)
		.av_readdatavalid       (),                                                                      //               (terminated)
		.av_lock                (1'b0),                                                                  //               (terminated)
		.av_debugaccess         (1'b0),                                                                  //               (terminated)
		.uav_clken              (),                                                                      //               (terminated)
		.av_clken               (1'b1),                                                                  //               (terminated)
		.uav_response           (2'b00),                                                                 //               (terminated)
		.av_response            (),                                                                      //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                  //               (terminated)
		.av_writeresponsevalid  ()                                                                       //               (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (25),
		.AV_DATA_W                      (128),
		.UAV_DATA_W                     (128),
		.AV_BURSTCOUNT_W                (8),
		.AV_BYTEENABLE_W                (16),
		.UAV_BYTEENABLE_W               (16),
		.UAV_ADDRESS_W                  (29),
		.UAV_BURSTCOUNT_W               (12),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (16),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) lpddr2_avl_1_translator (
		.clk                    (clk_125_clk_clk),                                           //                      clk.clk
		.reset                  (lpddr2_avl_1_translator_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (lpddr2_avl_1_agent_m0_address),                             // avalon_universal_slave_0.address
		.uav_burstcount         (lpddr2_avl_1_agent_m0_burstcount),                          //                         .burstcount
		.uav_read               (lpddr2_avl_1_agent_m0_read),                                //                         .read
		.uav_write              (lpddr2_avl_1_agent_m0_write),                               //                         .write
		.uav_waitrequest        (lpddr2_avl_1_agent_m0_waitrequest),                         //                         .waitrequest
		.uav_readdatavalid      (lpddr2_avl_1_agent_m0_readdatavalid),                       //                         .readdatavalid
		.uav_byteenable         (lpddr2_avl_1_agent_m0_byteenable),                          //                         .byteenable
		.uav_readdata           (lpddr2_avl_1_agent_m0_readdata),                            //                         .readdata
		.uav_writedata          (lpddr2_avl_1_agent_m0_writedata),                           //                         .writedata
		.uav_lock               (lpddr2_avl_1_agent_m0_lock),                                //                         .lock
		.uav_debugaccess        (lpddr2_avl_1_agent_m0_debugaccess),                         //                         .debugaccess
		.av_address             (lpddr2_avl_1_address),                                      //      avalon_anti_slave_0.address
		.av_write               (lpddr2_avl_1_write),                                        //                         .write
		.av_read                (lpddr2_avl_1_read),                                         //                         .read
		.av_readdata            (lpddr2_avl_1_readdata),                                     //                         .readdata
		.av_writedata           (lpddr2_avl_1_writedata),                                    //                         .writedata
		.av_beginbursttransfer  (lpddr2_avl_1_beginbursttransfer),                           //                         .beginbursttransfer
		.av_burstcount          (lpddr2_avl_1_burstcount),                                   //                         .burstcount
		.av_byteenable          (lpddr2_avl_1_byteenable),                                   //                         .byteenable
		.av_readdatavalid       (lpddr2_avl_1_readdatavalid),                                //                         .readdatavalid
		.av_waitrequest         (lpddr2_avl_1_waitrequest),                                  //                         .waitrequest
		.av_begintransfer       (),                                                          //              (terminated)
		.av_writebyteenable     (),                                                          //              (terminated)
		.av_lock                (),                                                          //              (terminated)
		.av_chipselect          (),                                                          //              (terminated)
		.av_clken               (),                                                          //              (terminated)
		.uav_clken              (1'b0),                                                      //              (terminated)
		.av_debugaccess         (),                                                          //              (terminated)
		.av_outputenable        (),                                                          //              (terminated)
		.uav_response           (),                                                          //              (terminated)
		.av_response            (2'b00),                                                     //              (terminated)
		.uav_writeresponsevalid (),                                                          //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                       //              (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (219),
		.PKT_ORI_BURST_SIZE_L      (217),
		.PKT_RESPONSE_STATUS_H     (216),
		.PKT_RESPONSE_STATUS_L     (215),
		.PKT_QOS_H                 (200),
		.PKT_QOS_L                 (200),
		.PKT_DATA_SIDEBAND_H       (198),
		.PKT_DATA_SIDEBAND_L       (198),
		.PKT_ADDR_SIDEBAND_H       (197),
		.PKT_ADDR_SIDEBAND_L       (197),
		.PKT_BURST_TYPE_H          (196),
		.PKT_BURST_TYPE_L          (195),
		.PKT_CACHE_H               (214),
		.PKT_CACHE_L               (211),
		.PKT_THREAD_ID_H           (207),
		.PKT_THREAD_ID_L           (207),
		.PKT_BURST_SIZE_H          (194),
		.PKT_BURST_SIZE_L          (192),
		.PKT_TRANS_EXCLUSIVE       (178),
		.PKT_TRANS_LOCK            (177),
		.PKT_BEGIN_BURST           (199),
		.PKT_PROTECTION_H          (210),
		.PKT_PROTECTION_L          (208),
		.PKT_BURSTWRAP_H           (191),
		.PKT_BURSTWRAP_L           (191),
		.PKT_BYTE_CNT_H            (190),
		.PKT_BYTE_CNT_L            (179),
		.PKT_ADDR_H                (172),
		.PKT_ADDR_L                (144),
		.PKT_TRANS_COMPRESSED_READ (173),
		.PKT_TRANS_POSTED          (174),
		.PKT_TRANS_WRITE           (175),
		.PKT_TRANS_READ            (176),
		.PKT_DATA_H                (127),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (143),
		.PKT_BYTEEN_L              (128),
		.PKT_SRC_ID_H              (203),
		.PKT_SRC_ID_L              (201),
		.PKT_DEST_ID_H             (206),
		.PKT_DEST_ID_L             (204),
		.ST_DATA_W                 (220),
		.ST_CHANNEL_W              (5),
		.AV_BURSTCOUNT_W           (12),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (3),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) video_dma_mm_read_agent (
		.clk                   (clk_125_clk_clk),                                                      //       clk.clk
		.reset                 (video_dma_reset_n_reset_bridge_in_reset_reset),                        // clk_reset.reset
		.av_address            (video_dma_mm_read_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (video_dma_mm_read_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (video_dma_mm_read_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (video_dma_mm_read_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (video_dma_mm_read_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (video_dma_mm_read_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (video_dma_mm_read_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (video_dma_mm_read_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (video_dma_mm_read_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (video_dma_mm_read_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (video_dma_mm_read_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (video_dma_mm_read_agent_cp_valid),                                     //        cp.valid
		.cp_data               (video_dma_mm_read_agent_cp_data),                                      //          .data
		.cp_startofpacket      (video_dma_mm_read_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (video_dma_mm_read_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (video_dma_mm_read_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_src_valid),                                                    //        rp.valid
		.rp_data               (rsp_mux_src_data),                                                     //          .data
		.rp_channel            (rsp_mux_src_channel),                                                  //          .channel
		.rp_startofpacket      (rsp_mux_src_startofpacket),                                            //          .startofpacket
		.rp_endofpacket        (rsp_mux_src_endofpacket),                                              //          .endofpacket
		.rp_ready              (rsp_mux_src_ready),                                                    //          .ready
		.av_response           (),                                                                     // (terminated)
		.av_writeresponsevalid ()                                                                      // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (1227),
		.PKT_ORI_BURST_SIZE_L      (1225),
		.PKT_RESPONSE_STATUS_H     (1224),
		.PKT_RESPONSE_STATUS_L     (1223),
		.PKT_QOS_H                 (1208),
		.PKT_QOS_L                 (1208),
		.PKT_DATA_SIDEBAND_H       (1206),
		.PKT_DATA_SIDEBAND_L       (1206),
		.PKT_ADDR_SIDEBAND_H       (1205),
		.PKT_ADDR_SIDEBAND_L       (1205),
		.PKT_BURST_TYPE_H          (1204),
		.PKT_BURST_TYPE_L          (1203),
		.PKT_CACHE_H               (1222),
		.PKT_CACHE_L               (1219),
		.PKT_THREAD_ID_H           (1215),
		.PKT_THREAD_ID_L           (1215),
		.PKT_BURST_SIZE_H          (1202),
		.PKT_BURST_SIZE_L          (1200),
		.PKT_TRANS_EXCLUSIVE       (1186),
		.PKT_TRANS_LOCK            (1185),
		.PKT_BEGIN_BURST           (1207),
		.PKT_PROTECTION_H          (1218),
		.PKT_PROTECTION_L          (1216),
		.PKT_BURSTWRAP_H           (1199),
		.PKT_BURSTWRAP_L           (1199),
		.PKT_BYTE_CNT_H            (1198),
		.PKT_BYTE_CNT_L            (1187),
		.PKT_ADDR_H                (1180),
		.PKT_ADDR_L                (1152),
		.PKT_TRANS_COMPRESSED_READ (1181),
		.PKT_TRANS_POSTED          (1182),
		.PKT_TRANS_WRITE           (1183),
		.PKT_TRANS_READ            (1184),
		.PKT_DATA_H                (1023),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (1151),
		.PKT_BYTEEN_L              (1024),
		.PKT_SRC_ID_H              (1211),
		.PKT_SRC_ID_L              (1209),
		.PKT_DEST_ID_H             (1214),
		.PKT_DEST_ID_L             (1212),
		.ST_DATA_W                 (1228),
		.ST_CHANNEL_W              (5),
		.AV_BURSTCOUNT_W           (10),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (2),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) read_dma_y_mm_read_agent (
		.clk                   (clk_125_clk_clk),                                                       //       clk.clk
		.reset                 (read_dma_y_reset_n_reset_bridge_in_reset_reset),                        // clk_reset.reset
		.av_address            (read_dma_y_mm_read_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (read_dma_y_mm_read_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (read_dma_y_mm_read_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (read_dma_y_mm_read_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (read_dma_y_mm_read_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (read_dma_y_mm_read_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (read_dma_y_mm_read_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (read_dma_y_mm_read_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (read_dma_y_mm_read_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (read_dma_y_mm_read_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (read_dma_y_mm_read_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (read_dma_y_mm_read_agent_cp_valid),                                     //        cp.valid
		.cp_data               (read_dma_y_mm_read_agent_cp_data),                                      //          .data
		.cp_startofpacket      (read_dma_y_mm_read_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (read_dma_y_mm_read_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (read_dma_y_mm_read_agent_cp_ready),                                     //          .ready
		.rp_valid              (read_dma_y_mm_read_rsp_width_adapter_src_valid),                        //        rp.valid
		.rp_data               (read_dma_y_mm_read_rsp_width_adapter_src_data),                         //          .data
		.rp_channel            (read_dma_y_mm_read_rsp_width_adapter_src_channel),                      //          .channel
		.rp_startofpacket      (read_dma_y_mm_read_rsp_width_adapter_src_startofpacket),                //          .startofpacket
		.rp_endofpacket        (read_dma_y_mm_read_rsp_width_adapter_src_endofpacket),                  //          .endofpacket
		.rp_ready              (read_dma_y_mm_read_rsp_width_adapter_src_ready),                        //          .ready
		.av_response           (),                                                                      // (terminated)
		.av_writeresponsevalid ()                                                                       // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (1227),
		.PKT_ORI_BURST_SIZE_L      (1225),
		.PKT_RESPONSE_STATUS_H     (1224),
		.PKT_RESPONSE_STATUS_L     (1223),
		.PKT_QOS_H                 (1208),
		.PKT_QOS_L                 (1208),
		.PKT_DATA_SIDEBAND_H       (1206),
		.PKT_DATA_SIDEBAND_L       (1206),
		.PKT_ADDR_SIDEBAND_H       (1205),
		.PKT_ADDR_SIDEBAND_L       (1205),
		.PKT_BURST_TYPE_H          (1204),
		.PKT_BURST_TYPE_L          (1203),
		.PKT_CACHE_H               (1222),
		.PKT_CACHE_L               (1219),
		.PKT_THREAD_ID_H           (1215),
		.PKT_THREAD_ID_L           (1215),
		.PKT_BURST_SIZE_H          (1202),
		.PKT_BURST_SIZE_L          (1200),
		.PKT_TRANS_EXCLUSIVE       (1186),
		.PKT_TRANS_LOCK            (1185),
		.PKT_BEGIN_BURST           (1207),
		.PKT_PROTECTION_H          (1218),
		.PKT_PROTECTION_L          (1216),
		.PKT_BURSTWRAP_H           (1199),
		.PKT_BURSTWRAP_L           (1199),
		.PKT_BYTE_CNT_H            (1198),
		.PKT_BYTE_CNT_L            (1187),
		.PKT_ADDR_H                (1180),
		.PKT_ADDR_L                (1152),
		.PKT_TRANS_COMPRESSED_READ (1181),
		.PKT_TRANS_POSTED          (1182),
		.PKT_TRANS_WRITE           (1183),
		.PKT_TRANS_READ            (1184),
		.PKT_DATA_H                (1023),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (1151),
		.PKT_BYTEEN_L              (1024),
		.PKT_SRC_ID_H              (1211),
		.PKT_SRC_ID_L              (1209),
		.PKT_DEST_ID_H             (1214),
		.PKT_DEST_ID_L             (1212),
		.ST_DATA_W                 (1228),
		.ST_CHANNEL_W              (5),
		.AV_BURSTCOUNT_W           (10),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (0),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) read_dma_cb_mm_read_agent (
		.clk                   (clk_125_clk_clk),                                                        //       clk.clk
		.reset                 (read_dma_y_reset_n_reset_bridge_in_reset_reset),                         // clk_reset.reset
		.av_address            (read_dma_cb_mm_read_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (read_dma_cb_mm_read_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (read_dma_cb_mm_read_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (read_dma_cb_mm_read_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (read_dma_cb_mm_read_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (read_dma_cb_mm_read_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (read_dma_cb_mm_read_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (read_dma_cb_mm_read_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (read_dma_cb_mm_read_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (read_dma_cb_mm_read_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (read_dma_cb_mm_read_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (read_dma_cb_mm_read_agent_cp_valid),                                     //        cp.valid
		.cp_data               (read_dma_cb_mm_read_agent_cp_data),                                      //          .data
		.cp_startofpacket      (read_dma_cb_mm_read_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (read_dma_cb_mm_read_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (read_dma_cb_mm_read_agent_cp_ready),                                     //          .ready
		.rp_valid              (read_dma_cb_mm_read_rsp_width_adapter_src_valid),                        //        rp.valid
		.rp_data               (read_dma_cb_mm_read_rsp_width_adapter_src_data),                         //          .data
		.rp_channel            (read_dma_cb_mm_read_rsp_width_adapter_src_channel),                      //          .channel
		.rp_startofpacket      (read_dma_cb_mm_read_rsp_width_adapter_src_startofpacket),                //          .startofpacket
		.rp_endofpacket        (read_dma_cb_mm_read_rsp_width_adapter_src_endofpacket),                  //          .endofpacket
		.rp_ready              (read_dma_cb_mm_read_rsp_width_adapter_src_ready),                        //          .ready
		.av_response           (),                                                                       // (terminated)
		.av_writeresponsevalid ()                                                                        // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (1227),
		.PKT_ORI_BURST_SIZE_L      (1225),
		.PKT_RESPONSE_STATUS_H     (1224),
		.PKT_RESPONSE_STATUS_L     (1223),
		.PKT_QOS_H                 (1208),
		.PKT_QOS_L                 (1208),
		.PKT_DATA_SIDEBAND_H       (1206),
		.PKT_DATA_SIDEBAND_L       (1206),
		.PKT_ADDR_SIDEBAND_H       (1205),
		.PKT_ADDR_SIDEBAND_L       (1205),
		.PKT_BURST_TYPE_H          (1204),
		.PKT_BURST_TYPE_L          (1203),
		.PKT_CACHE_H               (1222),
		.PKT_CACHE_L               (1219),
		.PKT_THREAD_ID_H           (1215),
		.PKT_THREAD_ID_L           (1215),
		.PKT_BURST_SIZE_H          (1202),
		.PKT_BURST_SIZE_L          (1200),
		.PKT_TRANS_EXCLUSIVE       (1186),
		.PKT_TRANS_LOCK            (1185),
		.PKT_BEGIN_BURST           (1207),
		.PKT_PROTECTION_H          (1218),
		.PKT_PROTECTION_L          (1216),
		.PKT_BURSTWRAP_H           (1199),
		.PKT_BURSTWRAP_L           (1199),
		.PKT_BYTE_CNT_H            (1198),
		.PKT_BYTE_CNT_L            (1187),
		.PKT_ADDR_H                (1180),
		.PKT_ADDR_L                (1152),
		.PKT_TRANS_COMPRESSED_READ (1181),
		.PKT_TRANS_POSTED          (1182),
		.PKT_TRANS_WRITE           (1183),
		.PKT_TRANS_READ            (1184),
		.PKT_DATA_H                (1023),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (1151),
		.PKT_BYTEEN_L              (1024),
		.PKT_SRC_ID_H              (1211),
		.PKT_SRC_ID_L              (1209),
		.PKT_DEST_ID_H             (1214),
		.PKT_DEST_ID_L             (1212),
		.ST_DATA_W                 (1228),
		.ST_CHANNEL_W              (5),
		.AV_BURSTCOUNT_W           (10),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (1),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) read_dma_cr_mm_read_agent (
		.clk                   (clk_125_clk_clk),                                                        //       clk.clk
		.reset                 (read_dma_y_reset_n_reset_bridge_in_reset_reset),                         // clk_reset.reset
		.av_address            (read_dma_cr_mm_read_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (read_dma_cr_mm_read_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (read_dma_cr_mm_read_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (read_dma_cr_mm_read_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (read_dma_cr_mm_read_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (read_dma_cr_mm_read_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (read_dma_cr_mm_read_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (read_dma_cr_mm_read_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (read_dma_cr_mm_read_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (read_dma_cr_mm_read_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (read_dma_cr_mm_read_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (read_dma_cr_mm_read_agent_cp_valid),                                     //        cp.valid
		.cp_data               (read_dma_cr_mm_read_agent_cp_data),                                      //          .data
		.cp_startofpacket      (read_dma_cr_mm_read_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (read_dma_cr_mm_read_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (read_dma_cr_mm_read_agent_cp_ready),                                     //          .ready
		.rp_valid              (read_dma_cr_mm_read_rsp_width_adapter_src_valid),                        //        rp.valid
		.rp_data               (read_dma_cr_mm_read_rsp_width_adapter_src_data),                         //          .data
		.rp_channel            (read_dma_cr_mm_read_rsp_width_adapter_src_channel),                      //          .channel
		.rp_startofpacket      (read_dma_cr_mm_read_rsp_width_adapter_src_startofpacket),                //          .startofpacket
		.rp_endofpacket        (read_dma_cr_mm_read_rsp_width_adapter_src_endofpacket),                  //          .endofpacket
		.rp_ready              (read_dma_cr_mm_read_rsp_width_adapter_src_ready),                        //          .ready
		.av_response           (),                                                                       // (terminated)
		.av_writeresponsevalid ()                                                                        // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (1227),
		.PKT_ORI_BURST_SIZE_L      (1225),
		.PKT_RESPONSE_STATUS_H     (1224),
		.PKT_RESPONSE_STATUS_L     (1223),
		.PKT_QOS_H                 (1208),
		.PKT_QOS_L                 (1208),
		.PKT_DATA_SIDEBAND_H       (1206),
		.PKT_DATA_SIDEBAND_L       (1206),
		.PKT_ADDR_SIDEBAND_H       (1205),
		.PKT_ADDR_SIDEBAND_L       (1205),
		.PKT_BURST_TYPE_H          (1204),
		.PKT_BURST_TYPE_L          (1203),
		.PKT_CACHE_H               (1222),
		.PKT_CACHE_L               (1219),
		.PKT_THREAD_ID_H           (1215),
		.PKT_THREAD_ID_L           (1215),
		.PKT_BURST_SIZE_H          (1202),
		.PKT_BURST_SIZE_L          (1200),
		.PKT_TRANS_EXCLUSIVE       (1186),
		.PKT_TRANS_LOCK            (1185),
		.PKT_BEGIN_BURST           (1207),
		.PKT_PROTECTION_H          (1218),
		.PKT_PROTECTION_L          (1216),
		.PKT_BURSTWRAP_H           (1199),
		.PKT_BURSTWRAP_L           (1199),
		.PKT_BYTE_CNT_H            (1198),
		.PKT_BYTE_CNT_L            (1187),
		.PKT_ADDR_H                (1180),
		.PKT_ADDR_L                (1152),
		.PKT_TRANS_COMPRESSED_READ (1181),
		.PKT_TRANS_POSTED          (1182),
		.PKT_TRANS_WRITE           (1183),
		.PKT_TRANS_READ            (1184),
		.PKT_DATA_H                (1023),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (1151),
		.PKT_BYTEEN_L              (1024),
		.PKT_SRC_ID_H              (1211),
		.PKT_SRC_ID_L              (1209),
		.PKT_DEST_ID_H             (1214),
		.PKT_DEST_ID_L             (1212),
		.ST_DATA_W                 (1228),
		.ST_CHANNEL_W              (5),
		.AV_BURSTCOUNT_W           (10),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (4),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) write_dma_mm_write_agent (
		.clk                   (clk_125_clk_clk),                                                       //       clk.clk
		.reset                 (read_dma_y_reset_n_reset_bridge_in_reset_reset),                        // clk_reset.reset
		.av_address            (write_dma_mm_write_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (write_dma_mm_write_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (write_dma_mm_write_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (write_dma_mm_write_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (write_dma_mm_write_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (write_dma_mm_write_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (write_dma_mm_write_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (write_dma_mm_write_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (write_dma_mm_write_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (write_dma_mm_write_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (write_dma_mm_write_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (write_dma_mm_write_agent_cp_valid),                                     //        cp.valid
		.cp_data               (write_dma_mm_write_agent_cp_data),                                      //          .data
		.cp_startofpacket      (write_dma_mm_write_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (write_dma_mm_write_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (write_dma_mm_write_agent_cp_ready),                                     //          .ready
		.rp_valid              (write_dma_mm_write_rsp_width_adapter_src_valid),                        //        rp.valid
		.rp_data               (write_dma_mm_write_rsp_width_adapter_src_data),                         //          .data
		.rp_channel            (write_dma_mm_write_rsp_width_adapter_src_channel),                      //          .channel
		.rp_startofpacket      (write_dma_mm_write_rsp_width_adapter_src_startofpacket),                //          .startofpacket
		.rp_endofpacket        (write_dma_mm_write_rsp_width_adapter_src_endofpacket),                  //          .endofpacket
		.rp_ready              (write_dma_mm_write_rsp_width_adapter_src_ready),                        //          .ready
		.av_response           (),                                                                      // (terminated)
		.av_writeresponsevalid ()                                                                       // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (219),
		.PKT_ORI_BURST_SIZE_L      (217),
		.PKT_RESPONSE_STATUS_H     (216),
		.PKT_RESPONSE_STATUS_L     (215),
		.PKT_BURST_SIZE_H          (194),
		.PKT_BURST_SIZE_L          (192),
		.PKT_TRANS_LOCK            (177),
		.PKT_BEGIN_BURST           (199),
		.PKT_PROTECTION_H          (210),
		.PKT_PROTECTION_L          (208),
		.PKT_BURSTWRAP_H           (191),
		.PKT_BURSTWRAP_L           (191),
		.PKT_BYTE_CNT_H            (190),
		.PKT_BYTE_CNT_L            (179),
		.PKT_ADDR_H                (172),
		.PKT_ADDR_L                (144),
		.PKT_TRANS_COMPRESSED_READ (173),
		.PKT_TRANS_POSTED          (174),
		.PKT_TRANS_WRITE           (175),
		.PKT_TRANS_READ            (176),
		.PKT_DATA_H                (127),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (143),
		.PKT_BYTEEN_L              (128),
		.PKT_SRC_ID_H              (203),
		.PKT_SRC_ID_L              (201),
		.PKT_DEST_ID_H             (206),
		.PKT_DEST_ID_L             (204),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (5),
		.ST_DATA_W                 (220),
		.AVS_BURSTCOUNT_W          (12),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) lpddr2_avl_1_agent (
		.clk                     (clk_125_clk_clk),                                           //             clk.clk
		.reset                   (lpddr2_avl_1_translator_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (lpddr2_avl_1_agent_m0_address),                             //              m0.address
		.m0_burstcount           (lpddr2_avl_1_agent_m0_burstcount),                          //                .burstcount
		.m0_byteenable           (lpddr2_avl_1_agent_m0_byteenable),                          //                .byteenable
		.m0_debugaccess          (lpddr2_avl_1_agent_m0_debugaccess),                         //                .debugaccess
		.m0_lock                 (lpddr2_avl_1_agent_m0_lock),                                //                .lock
		.m0_readdata             (lpddr2_avl_1_agent_m0_readdata),                            //                .readdata
		.m0_readdatavalid        (lpddr2_avl_1_agent_m0_readdatavalid),                       //                .readdatavalid
		.m0_read                 (lpddr2_avl_1_agent_m0_read),                                //                .read
		.m0_waitrequest          (lpddr2_avl_1_agent_m0_waitrequest),                         //                .waitrequest
		.m0_writedata            (lpddr2_avl_1_agent_m0_writedata),                           //                .writedata
		.m0_write                (lpddr2_avl_1_agent_m0_write),                               //                .write
		.rp_endofpacket          (lpddr2_avl_1_agent_rp_endofpacket),                         //              rp.endofpacket
		.rp_ready                (lpddr2_avl_1_agent_rp_ready),                               //                .ready
		.rp_valid                (lpddr2_avl_1_agent_rp_valid),                               //                .valid
		.rp_data                 (lpddr2_avl_1_agent_rp_data),                                //                .data
		.rp_startofpacket        (lpddr2_avl_1_agent_rp_startofpacket),                       //                .startofpacket
		.cp_ready                (agent_pipeline_source0_ready),                              //              cp.ready
		.cp_valid                (agent_pipeline_source0_valid),                              //                .valid
		.cp_data                 (agent_pipeline_source0_data),                               //                .data
		.cp_startofpacket        (agent_pipeline_source0_startofpacket),                      //                .startofpacket
		.cp_endofpacket          (agent_pipeline_source0_endofpacket),                        //                .endofpacket
		.cp_channel              (agent_pipeline_source0_channel),                            //                .channel
		.rf_sink_ready           (lpddr2_avl_1_agent_rsp_fifo_out_ready),                     //         rf_sink.ready
		.rf_sink_valid           (lpddr2_avl_1_agent_rsp_fifo_out_valid),                     //                .valid
		.rf_sink_startofpacket   (lpddr2_avl_1_agent_rsp_fifo_out_startofpacket),             //                .startofpacket
		.rf_sink_endofpacket     (lpddr2_avl_1_agent_rsp_fifo_out_endofpacket),               //                .endofpacket
		.rf_sink_data            (lpddr2_avl_1_agent_rsp_fifo_out_data),                      //                .data
		.rf_source_ready         (lpddr2_avl_1_agent_rf_source_ready),                        //       rf_source.ready
		.rf_source_valid         (lpddr2_avl_1_agent_rf_source_valid),                        //                .valid
		.rf_source_startofpacket (lpddr2_avl_1_agent_rf_source_startofpacket),                //                .startofpacket
		.rf_source_endofpacket   (lpddr2_avl_1_agent_rf_source_endofpacket),                  //                .endofpacket
		.rf_source_data          (lpddr2_avl_1_agent_rf_source_data),                         //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_out_0_ready),                             // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_out_0_valid),                             //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_out_0_data),                              //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_out_0_error),                             //                .error
		.rdata_fifo_src_ready    (lpddr2_avl_1_agent_rdata_fifo_src_ready),                   //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (lpddr2_avl_1_agent_rdata_fifo_src_valid),                   //                .valid
		.rdata_fifo_src_data     (lpddr2_avl_1_agent_rdata_fifo_src_data),                    //                .data
		.m0_response             (2'b00),                                                     //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                       //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (221),
		.FIFO_DEPTH          (49),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) lpddr2_avl_1_agent_rsp_fifo (
		.clk               (clk_125_clk_clk),                                           //       clk.clk
		.reset             (lpddr2_avl_1_translator_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (lpddr2_avl_1_agent_rf_source_data),                         //        in.data
		.in_valid          (lpddr2_avl_1_agent_rf_source_valid),                        //          .valid
		.in_ready          (lpddr2_avl_1_agent_rf_source_ready),                        //          .ready
		.in_startofpacket  (lpddr2_avl_1_agent_rf_source_startofpacket),                //          .startofpacket
		.in_endofpacket    (lpddr2_avl_1_agent_rf_source_endofpacket),                  //          .endofpacket
		.out_data          (lpddr2_avl_1_agent_rsp_fifo_out_data),                      //       out.data
		.out_valid         (lpddr2_avl_1_agent_rsp_fifo_out_valid),                     //          .valid
		.out_ready         (lpddr2_avl_1_agent_rsp_fifo_out_ready),                     //          .ready
		.out_startofpacket (lpddr2_avl_1_agent_rsp_fifo_out_startofpacket),             //          .startofpacket
		.out_endofpacket   (lpddr2_avl_1_agent_rsp_fifo_out_endofpacket),               //          .endofpacket
		.csr_address       (2'b00),                                                     // (terminated)
		.csr_read          (1'b0),                                                      // (terminated)
		.csr_write         (1'b0),                                                      // (terminated)
		.csr_readdata      (),                                                          // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                      // (terminated)
		.almost_full_data  (),                                                          // (terminated)
		.almost_empty_data (),                                                          // (terminated)
		.in_empty          (1'b0),                                                      // (terminated)
		.out_empty         (),                                                          // (terminated)
		.in_error          (1'b0),                                                      // (terminated)
		.out_error         (),                                                          // (terminated)
		.in_channel        (1'b0),                                                      // (terminated)
		.out_channel       ()                                                           // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (130),
		.FIFO_DEPTH          (64),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (3),
		.USE_MEMORY_BLOCKS   (1),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) lpddr2_avl_1_agent_rdata_fifo (
		.clk               (clk_125_clk_clk),                                           //       clk.clk
		.reset             (lpddr2_avl_1_translator_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (lpddr2_avl_1_agent_rdata_fifo_src_data),                    //        in.data
		.in_valid          (lpddr2_avl_1_agent_rdata_fifo_src_valid),                   //          .valid
		.in_ready          (lpddr2_avl_1_agent_rdata_fifo_src_ready),                   //          .ready
		.out_data          (lpddr2_avl_1_agent_rdata_fifo_out_data),                    //       out.data
		.out_valid         (lpddr2_avl_1_agent_rdata_fifo_out_valid),                   //          .valid
		.out_ready         (lpddr2_avl_1_agent_rdata_fifo_out_ready),                   //          .ready
		.csr_address       (2'b00),                                                     // (terminated)
		.csr_read          (1'b0),                                                      // (terminated)
		.csr_write         (1'b0),                                                      // (terminated)
		.csr_readdata      (),                                                          // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                      // (terminated)
		.almost_full_data  (),                                                          // (terminated)
		.almost_empty_data (),                                                          // (terminated)
		.in_startofpacket  (1'b0),                                                      // (terminated)
		.in_endofpacket    (1'b0),                                                      // (terminated)
		.out_startofpacket (),                                                          // (terminated)
		.out_endofpacket   (),                                                          // (terminated)
		.in_empty          (1'b0),                                                      // (terminated)
		.out_empty         (),                                                          // (terminated)
		.in_error          (1'b0),                                                      // (terminated)
		.out_error         (),                                                          // (terminated)
		.in_channel        (1'b0),                                                      // (terminated)
		.out_channel       ()                                                           // (terminated)
	);

	ECE423_QSYS_mm_interconnect_3_router router (
		.sink_ready         (video_dma_mm_read_agent_cp_ready),              //      sink.ready
		.sink_valid         (video_dma_mm_read_agent_cp_valid),              //          .valid
		.sink_data          (video_dma_mm_read_agent_cp_data),               //          .data
		.sink_startofpacket (video_dma_mm_read_agent_cp_startofpacket),      //          .startofpacket
		.sink_endofpacket   (video_dma_mm_read_agent_cp_endofpacket),        //          .endofpacket
		.clk                (clk_125_clk_clk),                               //       clk.clk
		.reset              (video_dma_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_src_ready),                              //       src.ready
		.src_valid          (router_src_valid),                              //          .valid
		.src_data           (router_src_data),                               //          .data
		.src_channel        (router_src_channel),                            //          .channel
		.src_startofpacket  (router_src_startofpacket),                      //          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                         //          .endofpacket
	);

	ECE423_QSYS_mm_interconnect_3_router_001 router_001 (
		.sink_ready         (read_dma_y_mm_read_agent_cp_ready),              //      sink.ready
		.sink_valid         (read_dma_y_mm_read_agent_cp_valid),              //          .valid
		.sink_data          (read_dma_y_mm_read_agent_cp_data),               //          .data
		.sink_startofpacket (read_dma_y_mm_read_agent_cp_startofpacket),      //          .startofpacket
		.sink_endofpacket   (read_dma_y_mm_read_agent_cp_endofpacket),        //          .endofpacket
		.clk                (clk_125_clk_clk),                                //       clk.clk
		.reset              (read_dma_y_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_001_src_ready),                           //       src.ready
		.src_valid          (router_001_src_valid),                           //          .valid
		.src_data           (router_001_src_data),                            //          .data
		.src_channel        (router_001_src_channel),                         //          .channel
		.src_startofpacket  (router_001_src_startofpacket),                   //          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                      //          .endofpacket
	);

	ECE423_QSYS_mm_interconnect_3_router_001 router_002 (
		.sink_ready         (read_dma_cb_mm_read_agent_cp_ready),             //      sink.ready
		.sink_valid         (read_dma_cb_mm_read_agent_cp_valid),             //          .valid
		.sink_data          (read_dma_cb_mm_read_agent_cp_data),              //          .data
		.sink_startofpacket (read_dma_cb_mm_read_agent_cp_startofpacket),     //          .startofpacket
		.sink_endofpacket   (read_dma_cb_mm_read_agent_cp_endofpacket),       //          .endofpacket
		.clk                (clk_125_clk_clk),                                //       clk.clk
		.reset              (read_dma_y_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_002_src_ready),                           //       src.ready
		.src_valid          (router_002_src_valid),                           //          .valid
		.src_data           (router_002_src_data),                            //          .data
		.src_channel        (router_002_src_channel),                         //          .channel
		.src_startofpacket  (router_002_src_startofpacket),                   //          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                      //          .endofpacket
	);

	ECE423_QSYS_mm_interconnect_3_router_001 router_003 (
		.sink_ready         (read_dma_cr_mm_read_agent_cp_ready),             //      sink.ready
		.sink_valid         (read_dma_cr_mm_read_agent_cp_valid),             //          .valid
		.sink_data          (read_dma_cr_mm_read_agent_cp_data),              //          .data
		.sink_startofpacket (read_dma_cr_mm_read_agent_cp_startofpacket),     //          .startofpacket
		.sink_endofpacket   (read_dma_cr_mm_read_agent_cp_endofpacket),       //          .endofpacket
		.clk                (clk_125_clk_clk),                                //       clk.clk
		.reset              (read_dma_y_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_003_src_ready),                           //       src.ready
		.src_valid          (router_003_src_valid),                           //          .valid
		.src_data           (router_003_src_data),                            //          .data
		.src_channel        (router_003_src_channel),                         //          .channel
		.src_startofpacket  (router_003_src_startofpacket),                   //          .startofpacket
		.src_endofpacket    (router_003_src_endofpacket)                      //          .endofpacket
	);

	ECE423_QSYS_mm_interconnect_3_router_001 router_004 (
		.sink_ready         (write_dma_mm_write_agent_cp_ready),              //      sink.ready
		.sink_valid         (write_dma_mm_write_agent_cp_valid),              //          .valid
		.sink_data          (write_dma_mm_write_agent_cp_data),               //          .data
		.sink_startofpacket (write_dma_mm_write_agent_cp_startofpacket),      //          .startofpacket
		.sink_endofpacket   (write_dma_mm_write_agent_cp_endofpacket),        //          .endofpacket
		.clk                (clk_125_clk_clk),                                //       clk.clk
		.reset              (read_dma_y_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_004_src_ready),                           //       src.ready
		.src_valid          (router_004_src_valid),                           //          .valid
		.src_data           (router_004_src_data),                            //          .data
		.src_channel        (router_004_src_channel),                         //          .channel
		.src_startofpacket  (router_004_src_startofpacket),                   //          .startofpacket
		.src_endofpacket    (router_004_src_endofpacket)                      //          .endofpacket
	);

	ECE423_QSYS_mm_interconnect_3_router_005 router_005 (
		.sink_ready         (agent_pipeline_001_source0_ready),                          //      sink.ready
		.sink_valid         (agent_pipeline_001_source0_valid),                          //          .valid
		.sink_data          (agent_pipeline_001_source0_data),                           //          .data
		.sink_startofpacket (agent_pipeline_001_source0_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (agent_pipeline_001_source0_endofpacket),                    //          .endofpacket
		.clk                (clk_125_clk_clk),                                           //       clk.clk
		.reset              (lpddr2_avl_1_translator_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_005_src_ready),                                      //       src.ready
		.src_valid          (router_005_src_valid),                                      //          .valid
		.src_data           (router_005_src_data),                                       //          .data
		.src_channel        (router_005_src_channel),                                    //          .channel
		.src_startofpacket  (router_005_src_startofpacket),                              //          .startofpacket
		.src_endofpacket    (router_005_src_endofpacket)                                 //          .endofpacket
	);

	ECE423_QSYS_mm_interconnect_3_cmd_demux cmd_demux (
		.clk                (clk_125_clk_clk),                               //       clk.clk
		.reset              (video_dma_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_src_ready),                              //      sink.ready
		.sink_channel       (router_src_channel),                            //          .channel
		.sink_data          (router_src_data),                               //          .data
		.sink_startofpacket (router_src_startofpacket),                      //          .startofpacket
		.sink_endofpacket   (router_src_endofpacket),                        //          .endofpacket
		.sink_valid         (router_src_valid),                              //          .valid
		.src0_ready         (cmd_demux_src0_ready),                          //      src0.ready
		.src0_valid         (cmd_demux_src0_valid),                          //          .valid
		.src0_data          (cmd_demux_src0_data),                           //          .data
		.src0_channel       (cmd_demux_src0_channel),                        //          .channel
		.src0_startofpacket (cmd_demux_src0_startofpacket),                  //          .startofpacket
		.src0_endofpacket   (cmd_demux_src0_endofpacket)                     //          .endofpacket
	);

	ECE423_QSYS_mm_interconnect_3_cmd_demux cmd_demux_001 (
		.clk                (clk_125_clk_clk),                                        //       clk.clk
		.reset              (read_dma_y_reset_n_reset_bridge_in_reset_reset),         // clk_reset.reset
		.sink_ready         (read_dma_y_mm_read_cmd_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (read_dma_y_mm_read_cmd_width_adapter_src_channel),       //          .channel
		.sink_data          (read_dma_y_mm_read_cmd_width_adapter_src_data),          //          .data
		.sink_startofpacket (read_dma_y_mm_read_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (read_dma_y_mm_read_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (read_dma_y_mm_read_cmd_width_adapter_src_valid),         //          .valid
		.src0_ready         (cmd_demux_001_src0_ready),                               //      src0.ready
		.src0_valid         (cmd_demux_001_src0_valid),                               //          .valid
		.src0_data          (cmd_demux_001_src0_data),                                //          .data
		.src0_channel       (cmd_demux_001_src0_channel),                             //          .channel
		.src0_startofpacket (cmd_demux_001_src0_startofpacket),                       //          .startofpacket
		.src0_endofpacket   (cmd_demux_001_src0_endofpacket)                          //          .endofpacket
	);

	ECE423_QSYS_mm_interconnect_3_cmd_demux cmd_demux_002 (
		.clk                (clk_125_clk_clk),                                         //       clk.clk
		.reset              (read_dma_y_reset_n_reset_bridge_in_reset_reset),          // clk_reset.reset
		.sink_ready         (read_dma_cb_mm_read_cmd_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (read_dma_cb_mm_read_cmd_width_adapter_src_channel),       //          .channel
		.sink_data          (read_dma_cb_mm_read_cmd_width_adapter_src_data),          //          .data
		.sink_startofpacket (read_dma_cb_mm_read_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (read_dma_cb_mm_read_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (read_dma_cb_mm_read_cmd_width_adapter_src_valid),         //          .valid
		.src0_ready         (cmd_demux_002_src0_ready),                                //      src0.ready
		.src0_valid         (cmd_demux_002_src0_valid),                                //          .valid
		.src0_data          (cmd_demux_002_src0_data),                                 //          .data
		.src0_channel       (cmd_demux_002_src0_channel),                              //          .channel
		.src0_startofpacket (cmd_demux_002_src0_startofpacket),                        //          .startofpacket
		.src0_endofpacket   (cmd_demux_002_src0_endofpacket)                           //          .endofpacket
	);

	ECE423_QSYS_mm_interconnect_3_cmd_demux cmd_demux_003 (
		.clk                (clk_125_clk_clk),                                         //       clk.clk
		.reset              (read_dma_y_reset_n_reset_bridge_in_reset_reset),          // clk_reset.reset
		.sink_ready         (read_dma_cr_mm_read_cmd_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (read_dma_cr_mm_read_cmd_width_adapter_src_channel),       //          .channel
		.sink_data          (read_dma_cr_mm_read_cmd_width_adapter_src_data),          //          .data
		.sink_startofpacket (read_dma_cr_mm_read_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (read_dma_cr_mm_read_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (read_dma_cr_mm_read_cmd_width_adapter_src_valid),         //          .valid
		.src0_ready         (cmd_demux_003_src0_ready),                                //      src0.ready
		.src0_valid         (cmd_demux_003_src0_valid),                                //          .valid
		.src0_data          (cmd_demux_003_src0_data),                                 //          .data
		.src0_channel       (cmd_demux_003_src0_channel),                              //          .channel
		.src0_startofpacket (cmd_demux_003_src0_startofpacket),                        //          .startofpacket
		.src0_endofpacket   (cmd_demux_003_src0_endofpacket)                           //          .endofpacket
	);

	ECE423_QSYS_mm_interconnect_3_cmd_demux cmd_demux_004 (
		.clk                (clk_125_clk_clk),                                        //       clk.clk
		.reset              (read_dma_y_reset_n_reset_bridge_in_reset_reset),         // clk_reset.reset
		.sink_ready         (write_dma_mm_write_cmd_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (write_dma_mm_write_cmd_width_adapter_src_channel),       //          .channel
		.sink_data          (write_dma_mm_write_cmd_width_adapter_src_data),          //          .data
		.sink_startofpacket (write_dma_mm_write_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (write_dma_mm_write_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (write_dma_mm_write_cmd_width_adapter_src_valid),         //          .valid
		.src0_ready         (cmd_demux_004_src0_ready),                               //      src0.ready
		.src0_valid         (cmd_demux_004_src0_valid),                               //          .valid
		.src0_data          (cmd_demux_004_src0_data),                                //          .data
		.src0_channel       (cmd_demux_004_src0_channel),                             //          .channel
		.src0_startofpacket (cmd_demux_004_src0_startofpacket),                       //          .startofpacket
		.src0_endofpacket   (cmd_demux_004_src0_endofpacket)                          //          .endofpacket
	);

	ECE423_QSYS_mm_interconnect_3_cmd_mux cmd_mux (
		.clk                 (clk_125_clk_clk),                                           //       clk.clk
		.reset               (lpddr2_avl_1_translator_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                                         //       src.ready
		.src_valid           (cmd_mux_src_valid),                                         //          .valid
		.src_data            (cmd_mux_src_data),                                          //          .data
		.src_channel         (cmd_mux_src_channel),                                       //          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                                 //          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                                   //          .endofpacket
		.sink0_ready         (mux_pipeline_source0_ready),                                //     sink0.ready
		.sink0_valid         (mux_pipeline_source0_valid),                                //          .valid
		.sink0_channel       (mux_pipeline_source0_channel),                              //          .channel
		.sink0_data          (mux_pipeline_source0_data),                                 //          .data
		.sink0_startofpacket (mux_pipeline_source0_startofpacket),                        //          .startofpacket
		.sink0_endofpacket   (mux_pipeline_source0_endofpacket),                          //          .endofpacket
		.sink1_ready         (mux_pipeline_001_source0_ready),                            //     sink1.ready
		.sink1_valid         (mux_pipeline_001_source0_valid),                            //          .valid
		.sink1_channel       (mux_pipeline_001_source0_channel),                          //          .channel
		.sink1_data          (mux_pipeline_001_source0_data),                             //          .data
		.sink1_startofpacket (mux_pipeline_001_source0_startofpacket),                    //          .startofpacket
		.sink1_endofpacket   (mux_pipeline_001_source0_endofpacket),                      //          .endofpacket
		.sink2_ready         (mux_pipeline_002_source0_ready),                            //     sink2.ready
		.sink2_valid         (mux_pipeline_002_source0_valid),                            //          .valid
		.sink2_channel       (mux_pipeline_002_source0_channel),                          //          .channel
		.sink2_data          (mux_pipeline_002_source0_data),                             //          .data
		.sink2_startofpacket (mux_pipeline_002_source0_startofpacket),                    //          .startofpacket
		.sink2_endofpacket   (mux_pipeline_002_source0_endofpacket),                      //          .endofpacket
		.sink3_ready         (mux_pipeline_003_source0_ready),                            //     sink3.ready
		.sink3_valid         (mux_pipeline_003_source0_valid),                            //          .valid
		.sink3_channel       (mux_pipeline_003_source0_channel),                          //          .channel
		.sink3_data          (mux_pipeline_003_source0_data),                             //          .data
		.sink3_startofpacket (mux_pipeline_003_source0_startofpacket),                    //          .startofpacket
		.sink3_endofpacket   (mux_pipeline_003_source0_endofpacket),                      //          .endofpacket
		.sink4_ready         (mux_pipeline_004_source0_ready),                            //     sink4.ready
		.sink4_valid         (mux_pipeline_004_source0_valid),                            //          .valid
		.sink4_channel       (mux_pipeline_004_source0_channel),                          //          .channel
		.sink4_data          (mux_pipeline_004_source0_data),                             //          .data
		.sink4_startofpacket (mux_pipeline_004_source0_startofpacket),                    //          .startofpacket
		.sink4_endofpacket   (mux_pipeline_004_source0_endofpacket)                       //          .endofpacket
	);

	ECE423_QSYS_mm_interconnect_3_rsp_demux rsp_demux (
		.clk                (clk_125_clk_clk),                                           //       clk.clk
		.reset              (lpddr2_avl_1_translator_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_005_src_ready),                                      //      sink.ready
		.sink_channel       (router_005_src_channel),                                    //          .channel
		.sink_data          (router_005_src_data),                                       //          .data
		.sink_startofpacket (router_005_src_startofpacket),                              //          .startofpacket
		.sink_endofpacket   (router_005_src_endofpacket),                                //          .endofpacket
		.sink_valid         (router_005_src_valid),                                      //          .valid
		.src0_ready         (rsp_demux_src0_ready),                                      //      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                                      //          .valid
		.src0_data          (rsp_demux_src0_data),                                       //          .data
		.src0_channel       (rsp_demux_src0_channel),                                    //          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                              //          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket),                                //          .endofpacket
		.src1_ready         (rsp_demux_src1_ready),                                      //      src1.ready
		.src1_valid         (rsp_demux_src1_valid),                                      //          .valid
		.src1_data          (rsp_demux_src1_data),                                       //          .data
		.src1_channel       (rsp_demux_src1_channel),                                    //          .channel
		.src1_startofpacket (rsp_demux_src1_startofpacket),                              //          .startofpacket
		.src1_endofpacket   (rsp_demux_src1_endofpacket),                                //          .endofpacket
		.src2_ready         (rsp_demux_src2_ready),                                      //      src2.ready
		.src2_valid         (rsp_demux_src2_valid),                                      //          .valid
		.src2_data          (rsp_demux_src2_data),                                       //          .data
		.src2_channel       (rsp_demux_src2_channel),                                    //          .channel
		.src2_startofpacket (rsp_demux_src2_startofpacket),                              //          .startofpacket
		.src2_endofpacket   (rsp_demux_src2_endofpacket),                                //          .endofpacket
		.src3_ready         (rsp_demux_src3_ready),                                      //      src3.ready
		.src3_valid         (rsp_demux_src3_valid),                                      //          .valid
		.src3_data          (rsp_demux_src3_data),                                       //          .data
		.src3_channel       (rsp_demux_src3_channel),                                    //          .channel
		.src3_startofpacket (rsp_demux_src3_startofpacket),                              //          .startofpacket
		.src3_endofpacket   (rsp_demux_src3_endofpacket),                                //          .endofpacket
		.src4_ready         (rsp_demux_src4_ready),                                      //      src4.ready
		.src4_valid         (rsp_demux_src4_valid),                                      //          .valid
		.src4_data          (rsp_demux_src4_data),                                       //          .data
		.src4_channel       (rsp_demux_src4_channel),                                    //          .channel
		.src4_startofpacket (rsp_demux_src4_startofpacket),                              //          .startofpacket
		.src4_endofpacket   (rsp_demux_src4_endofpacket)                                 //          .endofpacket
	);

	ECE423_QSYS_mm_interconnect_3_rsp_mux rsp_mux (
		.clk                 (clk_125_clk_clk),                               //       clk.clk
		.reset               (video_dma_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_src_ready),                             //       src.ready
		.src_valid           (rsp_mux_src_valid),                             //          .valid
		.src_data            (rsp_mux_src_data),                              //          .data
		.src_channel         (rsp_mux_src_channel),                           //          .channel
		.src_startofpacket   (rsp_mux_src_startofpacket),                     //          .startofpacket
		.src_endofpacket     (rsp_mux_src_endofpacket),                       //          .endofpacket
		.sink0_ready         (mux_pipeline_005_source0_ready),                //     sink0.ready
		.sink0_valid         (mux_pipeline_005_source0_valid),                //          .valid
		.sink0_channel       (mux_pipeline_005_source0_channel),              //          .channel
		.sink0_data          (mux_pipeline_005_source0_data),                 //          .data
		.sink0_startofpacket (mux_pipeline_005_source0_startofpacket),        //          .startofpacket
		.sink0_endofpacket   (mux_pipeline_005_source0_endofpacket)           //          .endofpacket
	);

	ECE423_QSYS_mm_interconnect_3_rsp_mux rsp_mux_001 (
		.clk                 (clk_125_clk_clk),                                //       clk.clk
		.reset               (read_dma_y_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_001_src_ready),                          //       src.ready
		.src_valid           (rsp_mux_001_src_valid),                          //          .valid
		.src_data            (rsp_mux_001_src_data),                           //          .data
		.src_channel         (rsp_mux_001_src_channel),                        //          .channel
		.src_startofpacket   (rsp_mux_001_src_startofpacket),                  //          .startofpacket
		.src_endofpacket     (rsp_mux_001_src_endofpacket),                    //          .endofpacket
		.sink0_ready         (mux_pipeline_006_source0_ready),                 //     sink0.ready
		.sink0_valid         (mux_pipeline_006_source0_valid),                 //          .valid
		.sink0_channel       (mux_pipeline_006_source0_channel),               //          .channel
		.sink0_data          (mux_pipeline_006_source0_data),                  //          .data
		.sink0_startofpacket (mux_pipeline_006_source0_startofpacket),         //          .startofpacket
		.sink0_endofpacket   (mux_pipeline_006_source0_endofpacket)            //          .endofpacket
	);

	ECE423_QSYS_mm_interconnect_3_rsp_mux rsp_mux_002 (
		.clk                 (clk_125_clk_clk),                                //       clk.clk
		.reset               (read_dma_y_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_002_src_ready),                          //       src.ready
		.src_valid           (rsp_mux_002_src_valid),                          //          .valid
		.src_data            (rsp_mux_002_src_data),                           //          .data
		.src_channel         (rsp_mux_002_src_channel),                        //          .channel
		.src_startofpacket   (rsp_mux_002_src_startofpacket),                  //          .startofpacket
		.src_endofpacket     (rsp_mux_002_src_endofpacket),                    //          .endofpacket
		.sink0_ready         (mux_pipeline_007_source0_ready),                 //     sink0.ready
		.sink0_valid         (mux_pipeline_007_source0_valid),                 //          .valid
		.sink0_channel       (mux_pipeline_007_source0_channel),               //          .channel
		.sink0_data          (mux_pipeline_007_source0_data),                  //          .data
		.sink0_startofpacket (mux_pipeline_007_source0_startofpacket),         //          .startofpacket
		.sink0_endofpacket   (mux_pipeline_007_source0_endofpacket)            //          .endofpacket
	);

	ECE423_QSYS_mm_interconnect_3_rsp_mux rsp_mux_003 (
		.clk                 (clk_125_clk_clk),                                //       clk.clk
		.reset               (read_dma_y_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_003_src_ready),                          //       src.ready
		.src_valid           (rsp_mux_003_src_valid),                          //          .valid
		.src_data            (rsp_mux_003_src_data),                           //          .data
		.src_channel         (rsp_mux_003_src_channel),                        //          .channel
		.src_startofpacket   (rsp_mux_003_src_startofpacket),                  //          .startofpacket
		.src_endofpacket     (rsp_mux_003_src_endofpacket),                    //          .endofpacket
		.sink0_ready         (mux_pipeline_008_source0_ready),                 //     sink0.ready
		.sink0_valid         (mux_pipeline_008_source0_valid),                 //          .valid
		.sink0_channel       (mux_pipeline_008_source0_channel),               //          .channel
		.sink0_data          (mux_pipeline_008_source0_data),                  //          .data
		.sink0_startofpacket (mux_pipeline_008_source0_startofpacket),         //          .startofpacket
		.sink0_endofpacket   (mux_pipeline_008_source0_endofpacket)            //          .endofpacket
	);

	ECE423_QSYS_mm_interconnect_3_rsp_mux rsp_mux_004 (
		.clk                 (clk_125_clk_clk),                                //       clk.clk
		.reset               (read_dma_y_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_004_src_ready),                          //       src.ready
		.src_valid           (rsp_mux_004_src_valid),                          //          .valid
		.src_data            (rsp_mux_004_src_data),                           //          .data
		.src_channel         (rsp_mux_004_src_channel),                        //          .channel
		.src_startofpacket   (rsp_mux_004_src_startofpacket),                  //          .startofpacket
		.src_endofpacket     (rsp_mux_004_src_endofpacket),                    //          .endofpacket
		.sink0_ready         (mux_pipeline_009_source0_ready),                 //     sink0.ready
		.sink0_valid         (mux_pipeline_009_source0_valid),                 //          .valid
		.sink0_channel       (mux_pipeline_009_source0_channel),               //          .channel
		.sink0_data          (mux_pipeline_009_source0_data),                  //          .data
		.sink0_startofpacket (mux_pipeline_009_source0_startofpacket),         //          .startofpacket
		.sink0_endofpacket   (mux_pipeline_009_source0_endofpacket)            //          .endofpacket
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (172),
		.IN_PKT_ADDR_L                 (144),
		.IN_PKT_DATA_H                 (127),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (143),
		.IN_PKT_BYTEEN_L               (128),
		.IN_PKT_BYTE_CNT_H             (190),
		.IN_PKT_BYTE_CNT_L             (179),
		.IN_PKT_TRANS_COMPRESSED_READ  (173),
		.IN_PKT_TRANS_WRITE            (175),
		.IN_PKT_BURSTWRAP_H            (191),
		.IN_PKT_BURSTWRAP_L            (191),
		.IN_PKT_BURST_SIZE_H           (194),
		.IN_PKT_BURST_SIZE_L           (192),
		.IN_PKT_RESPONSE_STATUS_H      (216),
		.IN_PKT_RESPONSE_STATUS_L      (215),
		.IN_PKT_TRANS_EXCLUSIVE        (178),
		.IN_PKT_BURST_TYPE_H           (196),
		.IN_PKT_BURST_TYPE_L           (195),
		.IN_PKT_ORI_BURST_SIZE_L       (217),
		.IN_PKT_ORI_BURST_SIZE_H       (219),
		.IN_ST_DATA_W                  (220),
		.OUT_PKT_ADDR_H                (1180),
		.OUT_PKT_ADDR_L                (1152),
		.OUT_PKT_DATA_H                (1023),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (1151),
		.OUT_PKT_BYTEEN_L              (1024),
		.OUT_PKT_BYTE_CNT_H            (1198),
		.OUT_PKT_BYTE_CNT_L            (1187),
		.OUT_PKT_TRANS_COMPRESSED_READ (1181),
		.OUT_PKT_BURST_SIZE_H          (1202),
		.OUT_PKT_BURST_SIZE_L          (1200),
		.OUT_PKT_RESPONSE_STATUS_H     (1224),
		.OUT_PKT_RESPONSE_STATUS_L     (1223),
		.OUT_PKT_TRANS_EXCLUSIVE       (1186),
		.OUT_PKT_BURST_TYPE_H          (1204),
		.OUT_PKT_BURST_TYPE_L          (1203),
		.OUT_PKT_ORI_BURST_SIZE_L      (1225),
		.OUT_PKT_ORI_BURST_SIZE_H      (1227),
		.OUT_ST_DATA_W                 (1228),
		.ST_CHANNEL_W                  (5),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) read_dma_y_mm_read_rsp_width_adapter (
		.clk                  (clk_125_clk_clk),                                        //       clk.clk
		.reset                (read_dma_y_reset_n_reset_bridge_in_reset_reset),         // clk_reset.reset
		.in_valid             (rsp_mux_001_src_valid),                                  //      sink.valid
		.in_channel           (rsp_mux_001_src_channel),                                //          .channel
		.in_startofpacket     (rsp_mux_001_src_startofpacket),                          //          .startofpacket
		.in_endofpacket       (rsp_mux_001_src_endofpacket),                            //          .endofpacket
		.in_ready             (rsp_mux_001_src_ready),                                  //          .ready
		.in_data              (rsp_mux_001_src_data),                                   //          .data
		.out_endofpacket      (read_dma_y_mm_read_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (read_dma_y_mm_read_rsp_width_adapter_src_data),          //          .data
		.out_channel          (read_dma_y_mm_read_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (read_dma_y_mm_read_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (read_dma_y_mm_read_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (read_dma_y_mm_read_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                  // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (172),
		.IN_PKT_ADDR_L                 (144),
		.IN_PKT_DATA_H                 (127),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (143),
		.IN_PKT_BYTEEN_L               (128),
		.IN_PKT_BYTE_CNT_H             (190),
		.IN_PKT_BYTE_CNT_L             (179),
		.IN_PKT_TRANS_COMPRESSED_READ  (173),
		.IN_PKT_TRANS_WRITE            (175),
		.IN_PKT_BURSTWRAP_H            (191),
		.IN_PKT_BURSTWRAP_L            (191),
		.IN_PKT_BURST_SIZE_H           (194),
		.IN_PKT_BURST_SIZE_L           (192),
		.IN_PKT_RESPONSE_STATUS_H      (216),
		.IN_PKT_RESPONSE_STATUS_L      (215),
		.IN_PKT_TRANS_EXCLUSIVE        (178),
		.IN_PKT_BURST_TYPE_H           (196),
		.IN_PKT_BURST_TYPE_L           (195),
		.IN_PKT_ORI_BURST_SIZE_L       (217),
		.IN_PKT_ORI_BURST_SIZE_H       (219),
		.IN_ST_DATA_W                  (220),
		.OUT_PKT_ADDR_H                (1180),
		.OUT_PKT_ADDR_L                (1152),
		.OUT_PKT_DATA_H                (1023),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (1151),
		.OUT_PKT_BYTEEN_L              (1024),
		.OUT_PKT_BYTE_CNT_H            (1198),
		.OUT_PKT_BYTE_CNT_L            (1187),
		.OUT_PKT_TRANS_COMPRESSED_READ (1181),
		.OUT_PKT_BURST_SIZE_H          (1202),
		.OUT_PKT_BURST_SIZE_L          (1200),
		.OUT_PKT_RESPONSE_STATUS_H     (1224),
		.OUT_PKT_RESPONSE_STATUS_L     (1223),
		.OUT_PKT_TRANS_EXCLUSIVE       (1186),
		.OUT_PKT_BURST_TYPE_H          (1204),
		.OUT_PKT_BURST_TYPE_L          (1203),
		.OUT_PKT_ORI_BURST_SIZE_L      (1225),
		.OUT_PKT_ORI_BURST_SIZE_H      (1227),
		.OUT_ST_DATA_W                 (1228),
		.ST_CHANNEL_W                  (5),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) read_dma_cb_mm_read_rsp_width_adapter (
		.clk                  (clk_125_clk_clk),                                         //       clk.clk
		.reset                (read_dma_y_reset_n_reset_bridge_in_reset_reset),          // clk_reset.reset
		.in_valid             (rsp_mux_002_src_valid),                                   //      sink.valid
		.in_channel           (rsp_mux_002_src_channel),                                 //          .channel
		.in_startofpacket     (rsp_mux_002_src_startofpacket),                           //          .startofpacket
		.in_endofpacket       (rsp_mux_002_src_endofpacket),                             //          .endofpacket
		.in_ready             (rsp_mux_002_src_ready),                                   //          .ready
		.in_data              (rsp_mux_002_src_data),                                    //          .data
		.out_endofpacket      (read_dma_cb_mm_read_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (read_dma_cb_mm_read_rsp_width_adapter_src_data),          //          .data
		.out_channel          (read_dma_cb_mm_read_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (read_dma_cb_mm_read_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (read_dma_cb_mm_read_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (read_dma_cb_mm_read_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                   // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (172),
		.IN_PKT_ADDR_L                 (144),
		.IN_PKT_DATA_H                 (127),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (143),
		.IN_PKT_BYTEEN_L               (128),
		.IN_PKT_BYTE_CNT_H             (190),
		.IN_PKT_BYTE_CNT_L             (179),
		.IN_PKT_TRANS_COMPRESSED_READ  (173),
		.IN_PKT_TRANS_WRITE            (175),
		.IN_PKT_BURSTWRAP_H            (191),
		.IN_PKT_BURSTWRAP_L            (191),
		.IN_PKT_BURST_SIZE_H           (194),
		.IN_PKT_BURST_SIZE_L           (192),
		.IN_PKT_RESPONSE_STATUS_H      (216),
		.IN_PKT_RESPONSE_STATUS_L      (215),
		.IN_PKT_TRANS_EXCLUSIVE        (178),
		.IN_PKT_BURST_TYPE_H           (196),
		.IN_PKT_BURST_TYPE_L           (195),
		.IN_PKT_ORI_BURST_SIZE_L       (217),
		.IN_PKT_ORI_BURST_SIZE_H       (219),
		.IN_ST_DATA_W                  (220),
		.OUT_PKT_ADDR_H                (1180),
		.OUT_PKT_ADDR_L                (1152),
		.OUT_PKT_DATA_H                (1023),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (1151),
		.OUT_PKT_BYTEEN_L              (1024),
		.OUT_PKT_BYTE_CNT_H            (1198),
		.OUT_PKT_BYTE_CNT_L            (1187),
		.OUT_PKT_TRANS_COMPRESSED_READ (1181),
		.OUT_PKT_BURST_SIZE_H          (1202),
		.OUT_PKT_BURST_SIZE_L          (1200),
		.OUT_PKT_RESPONSE_STATUS_H     (1224),
		.OUT_PKT_RESPONSE_STATUS_L     (1223),
		.OUT_PKT_TRANS_EXCLUSIVE       (1186),
		.OUT_PKT_BURST_TYPE_H          (1204),
		.OUT_PKT_BURST_TYPE_L          (1203),
		.OUT_PKT_ORI_BURST_SIZE_L      (1225),
		.OUT_PKT_ORI_BURST_SIZE_H      (1227),
		.OUT_ST_DATA_W                 (1228),
		.ST_CHANNEL_W                  (5),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) read_dma_cr_mm_read_rsp_width_adapter (
		.clk                  (clk_125_clk_clk),                                         //       clk.clk
		.reset                (read_dma_y_reset_n_reset_bridge_in_reset_reset),          // clk_reset.reset
		.in_valid             (rsp_mux_003_src_valid),                                   //      sink.valid
		.in_channel           (rsp_mux_003_src_channel),                                 //          .channel
		.in_startofpacket     (rsp_mux_003_src_startofpacket),                           //          .startofpacket
		.in_endofpacket       (rsp_mux_003_src_endofpacket),                             //          .endofpacket
		.in_ready             (rsp_mux_003_src_ready),                                   //          .ready
		.in_data              (rsp_mux_003_src_data),                                    //          .data
		.out_endofpacket      (read_dma_cr_mm_read_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (read_dma_cr_mm_read_rsp_width_adapter_src_data),          //          .data
		.out_channel          (read_dma_cr_mm_read_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (read_dma_cr_mm_read_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (read_dma_cr_mm_read_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (read_dma_cr_mm_read_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                   // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (172),
		.IN_PKT_ADDR_L                 (144),
		.IN_PKT_DATA_H                 (127),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (143),
		.IN_PKT_BYTEEN_L               (128),
		.IN_PKT_BYTE_CNT_H             (190),
		.IN_PKT_BYTE_CNT_L             (179),
		.IN_PKT_TRANS_COMPRESSED_READ  (173),
		.IN_PKT_TRANS_WRITE            (175),
		.IN_PKT_BURSTWRAP_H            (191),
		.IN_PKT_BURSTWRAP_L            (191),
		.IN_PKT_BURST_SIZE_H           (194),
		.IN_PKT_BURST_SIZE_L           (192),
		.IN_PKT_RESPONSE_STATUS_H      (216),
		.IN_PKT_RESPONSE_STATUS_L      (215),
		.IN_PKT_TRANS_EXCLUSIVE        (178),
		.IN_PKT_BURST_TYPE_H           (196),
		.IN_PKT_BURST_TYPE_L           (195),
		.IN_PKT_ORI_BURST_SIZE_L       (217),
		.IN_PKT_ORI_BURST_SIZE_H       (219),
		.IN_ST_DATA_W                  (220),
		.OUT_PKT_ADDR_H                (1180),
		.OUT_PKT_ADDR_L                (1152),
		.OUT_PKT_DATA_H                (1023),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (1151),
		.OUT_PKT_BYTEEN_L              (1024),
		.OUT_PKT_BYTE_CNT_H            (1198),
		.OUT_PKT_BYTE_CNT_L            (1187),
		.OUT_PKT_TRANS_COMPRESSED_READ (1181),
		.OUT_PKT_BURST_SIZE_H          (1202),
		.OUT_PKT_BURST_SIZE_L          (1200),
		.OUT_PKT_RESPONSE_STATUS_H     (1224),
		.OUT_PKT_RESPONSE_STATUS_L     (1223),
		.OUT_PKT_TRANS_EXCLUSIVE       (1186),
		.OUT_PKT_BURST_TYPE_H          (1204),
		.OUT_PKT_BURST_TYPE_L          (1203),
		.OUT_PKT_ORI_BURST_SIZE_L      (1225),
		.OUT_PKT_ORI_BURST_SIZE_H      (1227),
		.OUT_ST_DATA_W                 (1228),
		.ST_CHANNEL_W                  (5),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) write_dma_mm_write_rsp_width_adapter (
		.clk                  (clk_125_clk_clk),                                        //       clk.clk
		.reset                (read_dma_y_reset_n_reset_bridge_in_reset_reset),         // clk_reset.reset
		.in_valid             (rsp_mux_004_src_valid),                                  //      sink.valid
		.in_channel           (rsp_mux_004_src_channel),                                //          .channel
		.in_startofpacket     (rsp_mux_004_src_startofpacket),                          //          .startofpacket
		.in_endofpacket       (rsp_mux_004_src_endofpacket),                            //          .endofpacket
		.in_ready             (rsp_mux_004_src_ready),                                  //          .ready
		.in_data              (rsp_mux_004_src_data),                                   //          .data
		.out_endofpacket      (write_dma_mm_write_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (write_dma_mm_write_rsp_width_adapter_src_data),          //          .data
		.out_channel          (write_dma_mm_write_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (write_dma_mm_write_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (write_dma_mm_write_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (write_dma_mm_write_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                  // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (1180),
		.IN_PKT_ADDR_L                 (1152),
		.IN_PKT_DATA_H                 (1023),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (1151),
		.IN_PKT_BYTEEN_L               (1024),
		.IN_PKT_BYTE_CNT_H             (1198),
		.IN_PKT_BYTE_CNT_L             (1187),
		.IN_PKT_TRANS_COMPRESSED_READ  (1181),
		.IN_PKT_TRANS_WRITE            (1183),
		.IN_PKT_BURSTWRAP_H            (1199),
		.IN_PKT_BURSTWRAP_L            (1199),
		.IN_PKT_BURST_SIZE_H           (1202),
		.IN_PKT_BURST_SIZE_L           (1200),
		.IN_PKT_RESPONSE_STATUS_H      (1224),
		.IN_PKT_RESPONSE_STATUS_L      (1223),
		.IN_PKT_TRANS_EXCLUSIVE        (1186),
		.IN_PKT_BURST_TYPE_H           (1204),
		.IN_PKT_BURST_TYPE_L           (1203),
		.IN_PKT_ORI_BURST_SIZE_L       (1225),
		.IN_PKT_ORI_BURST_SIZE_H       (1227),
		.IN_ST_DATA_W                  (1228),
		.OUT_PKT_ADDR_H                (172),
		.OUT_PKT_ADDR_L                (144),
		.OUT_PKT_DATA_H                (127),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (143),
		.OUT_PKT_BYTEEN_L              (128),
		.OUT_PKT_BYTE_CNT_H            (190),
		.OUT_PKT_BYTE_CNT_L            (179),
		.OUT_PKT_TRANS_COMPRESSED_READ (173),
		.OUT_PKT_BURST_SIZE_H          (194),
		.OUT_PKT_BURST_SIZE_L          (192),
		.OUT_PKT_RESPONSE_STATUS_H     (216),
		.OUT_PKT_RESPONSE_STATUS_L     (215),
		.OUT_PKT_TRANS_EXCLUSIVE       (178),
		.OUT_PKT_BURST_TYPE_H          (196),
		.OUT_PKT_BURST_TYPE_L          (195),
		.OUT_PKT_ORI_BURST_SIZE_L      (217),
		.OUT_PKT_ORI_BURST_SIZE_H      (219),
		.OUT_ST_DATA_W                 (220),
		.ST_CHANNEL_W                  (5),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) read_dma_y_mm_read_cmd_width_adapter (
		.clk                  (clk_125_clk_clk),                                        //       clk.clk
		.reset                (read_dma_y_reset_n_reset_bridge_in_reset_reset),         // clk_reset.reset
		.in_valid             (router_001_src_valid),                                   //      sink.valid
		.in_channel           (router_001_src_channel),                                 //          .channel
		.in_startofpacket     (router_001_src_startofpacket),                           //          .startofpacket
		.in_endofpacket       (router_001_src_endofpacket),                             //          .endofpacket
		.in_ready             (router_001_src_ready),                                   //          .ready
		.in_data              (router_001_src_data),                                    //          .data
		.out_endofpacket      (read_dma_y_mm_read_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (read_dma_y_mm_read_cmd_width_adapter_src_data),          //          .data
		.out_channel          (read_dma_y_mm_read_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (read_dma_y_mm_read_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (read_dma_y_mm_read_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (read_dma_y_mm_read_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                  // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (1180),
		.IN_PKT_ADDR_L                 (1152),
		.IN_PKT_DATA_H                 (1023),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (1151),
		.IN_PKT_BYTEEN_L               (1024),
		.IN_PKT_BYTE_CNT_H             (1198),
		.IN_PKT_BYTE_CNT_L             (1187),
		.IN_PKT_TRANS_COMPRESSED_READ  (1181),
		.IN_PKT_TRANS_WRITE            (1183),
		.IN_PKT_BURSTWRAP_H            (1199),
		.IN_PKT_BURSTWRAP_L            (1199),
		.IN_PKT_BURST_SIZE_H           (1202),
		.IN_PKT_BURST_SIZE_L           (1200),
		.IN_PKT_RESPONSE_STATUS_H      (1224),
		.IN_PKT_RESPONSE_STATUS_L      (1223),
		.IN_PKT_TRANS_EXCLUSIVE        (1186),
		.IN_PKT_BURST_TYPE_H           (1204),
		.IN_PKT_BURST_TYPE_L           (1203),
		.IN_PKT_ORI_BURST_SIZE_L       (1225),
		.IN_PKT_ORI_BURST_SIZE_H       (1227),
		.IN_ST_DATA_W                  (1228),
		.OUT_PKT_ADDR_H                (172),
		.OUT_PKT_ADDR_L                (144),
		.OUT_PKT_DATA_H                (127),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (143),
		.OUT_PKT_BYTEEN_L              (128),
		.OUT_PKT_BYTE_CNT_H            (190),
		.OUT_PKT_BYTE_CNT_L            (179),
		.OUT_PKT_TRANS_COMPRESSED_READ (173),
		.OUT_PKT_BURST_SIZE_H          (194),
		.OUT_PKT_BURST_SIZE_L          (192),
		.OUT_PKT_RESPONSE_STATUS_H     (216),
		.OUT_PKT_RESPONSE_STATUS_L     (215),
		.OUT_PKT_TRANS_EXCLUSIVE       (178),
		.OUT_PKT_BURST_TYPE_H          (196),
		.OUT_PKT_BURST_TYPE_L          (195),
		.OUT_PKT_ORI_BURST_SIZE_L      (217),
		.OUT_PKT_ORI_BURST_SIZE_H      (219),
		.OUT_ST_DATA_W                 (220),
		.ST_CHANNEL_W                  (5),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) read_dma_cb_mm_read_cmd_width_adapter (
		.clk                  (clk_125_clk_clk),                                         //       clk.clk
		.reset                (read_dma_y_reset_n_reset_bridge_in_reset_reset),          // clk_reset.reset
		.in_valid             (router_002_src_valid),                                    //      sink.valid
		.in_channel           (router_002_src_channel),                                  //          .channel
		.in_startofpacket     (router_002_src_startofpacket),                            //          .startofpacket
		.in_endofpacket       (router_002_src_endofpacket),                              //          .endofpacket
		.in_ready             (router_002_src_ready),                                    //          .ready
		.in_data              (router_002_src_data),                                     //          .data
		.out_endofpacket      (read_dma_cb_mm_read_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (read_dma_cb_mm_read_cmd_width_adapter_src_data),          //          .data
		.out_channel          (read_dma_cb_mm_read_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (read_dma_cb_mm_read_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (read_dma_cb_mm_read_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (read_dma_cb_mm_read_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                   // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (1180),
		.IN_PKT_ADDR_L                 (1152),
		.IN_PKT_DATA_H                 (1023),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (1151),
		.IN_PKT_BYTEEN_L               (1024),
		.IN_PKT_BYTE_CNT_H             (1198),
		.IN_PKT_BYTE_CNT_L             (1187),
		.IN_PKT_TRANS_COMPRESSED_READ  (1181),
		.IN_PKT_TRANS_WRITE            (1183),
		.IN_PKT_BURSTWRAP_H            (1199),
		.IN_PKT_BURSTWRAP_L            (1199),
		.IN_PKT_BURST_SIZE_H           (1202),
		.IN_PKT_BURST_SIZE_L           (1200),
		.IN_PKT_RESPONSE_STATUS_H      (1224),
		.IN_PKT_RESPONSE_STATUS_L      (1223),
		.IN_PKT_TRANS_EXCLUSIVE        (1186),
		.IN_PKT_BURST_TYPE_H           (1204),
		.IN_PKT_BURST_TYPE_L           (1203),
		.IN_PKT_ORI_BURST_SIZE_L       (1225),
		.IN_PKT_ORI_BURST_SIZE_H       (1227),
		.IN_ST_DATA_W                  (1228),
		.OUT_PKT_ADDR_H                (172),
		.OUT_PKT_ADDR_L                (144),
		.OUT_PKT_DATA_H                (127),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (143),
		.OUT_PKT_BYTEEN_L              (128),
		.OUT_PKT_BYTE_CNT_H            (190),
		.OUT_PKT_BYTE_CNT_L            (179),
		.OUT_PKT_TRANS_COMPRESSED_READ (173),
		.OUT_PKT_BURST_SIZE_H          (194),
		.OUT_PKT_BURST_SIZE_L          (192),
		.OUT_PKT_RESPONSE_STATUS_H     (216),
		.OUT_PKT_RESPONSE_STATUS_L     (215),
		.OUT_PKT_TRANS_EXCLUSIVE       (178),
		.OUT_PKT_BURST_TYPE_H          (196),
		.OUT_PKT_BURST_TYPE_L          (195),
		.OUT_PKT_ORI_BURST_SIZE_L      (217),
		.OUT_PKT_ORI_BURST_SIZE_H      (219),
		.OUT_ST_DATA_W                 (220),
		.ST_CHANNEL_W                  (5),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) read_dma_cr_mm_read_cmd_width_adapter (
		.clk                  (clk_125_clk_clk),                                         //       clk.clk
		.reset                (read_dma_y_reset_n_reset_bridge_in_reset_reset),          // clk_reset.reset
		.in_valid             (router_003_src_valid),                                    //      sink.valid
		.in_channel           (router_003_src_channel),                                  //          .channel
		.in_startofpacket     (router_003_src_startofpacket),                            //          .startofpacket
		.in_endofpacket       (router_003_src_endofpacket),                              //          .endofpacket
		.in_ready             (router_003_src_ready),                                    //          .ready
		.in_data              (router_003_src_data),                                     //          .data
		.out_endofpacket      (read_dma_cr_mm_read_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (read_dma_cr_mm_read_cmd_width_adapter_src_data),          //          .data
		.out_channel          (read_dma_cr_mm_read_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (read_dma_cr_mm_read_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (read_dma_cr_mm_read_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (read_dma_cr_mm_read_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                   // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (1180),
		.IN_PKT_ADDR_L                 (1152),
		.IN_PKT_DATA_H                 (1023),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (1151),
		.IN_PKT_BYTEEN_L               (1024),
		.IN_PKT_BYTE_CNT_H             (1198),
		.IN_PKT_BYTE_CNT_L             (1187),
		.IN_PKT_TRANS_COMPRESSED_READ  (1181),
		.IN_PKT_TRANS_WRITE            (1183),
		.IN_PKT_BURSTWRAP_H            (1199),
		.IN_PKT_BURSTWRAP_L            (1199),
		.IN_PKT_BURST_SIZE_H           (1202),
		.IN_PKT_BURST_SIZE_L           (1200),
		.IN_PKT_RESPONSE_STATUS_H      (1224),
		.IN_PKT_RESPONSE_STATUS_L      (1223),
		.IN_PKT_TRANS_EXCLUSIVE        (1186),
		.IN_PKT_BURST_TYPE_H           (1204),
		.IN_PKT_BURST_TYPE_L           (1203),
		.IN_PKT_ORI_BURST_SIZE_L       (1225),
		.IN_PKT_ORI_BURST_SIZE_H       (1227),
		.IN_ST_DATA_W                  (1228),
		.OUT_PKT_ADDR_H                (172),
		.OUT_PKT_ADDR_L                (144),
		.OUT_PKT_DATA_H                (127),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (143),
		.OUT_PKT_BYTEEN_L              (128),
		.OUT_PKT_BYTE_CNT_H            (190),
		.OUT_PKT_BYTE_CNT_L            (179),
		.OUT_PKT_TRANS_COMPRESSED_READ (173),
		.OUT_PKT_BURST_SIZE_H          (194),
		.OUT_PKT_BURST_SIZE_L          (192),
		.OUT_PKT_RESPONSE_STATUS_H     (216),
		.OUT_PKT_RESPONSE_STATUS_L     (215),
		.OUT_PKT_TRANS_EXCLUSIVE       (178),
		.OUT_PKT_BURST_TYPE_H          (196),
		.OUT_PKT_BURST_TYPE_L          (195),
		.OUT_PKT_ORI_BURST_SIZE_L      (217),
		.OUT_PKT_ORI_BURST_SIZE_H      (219),
		.OUT_ST_DATA_W                 (220),
		.ST_CHANNEL_W                  (5),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) write_dma_mm_write_cmd_width_adapter (
		.clk                  (clk_125_clk_clk),                                        //       clk.clk
		.reset                (read_dma_y_reset_n_reset_bridge_in_reset_reset),         // clk_reset.reset
		.in_valid             (router_004_src_valid),                                   //      sink.valid
		.in_channel           (router_004_src_channel),                                 //          .channel
		.in_startofpacket     (router_004_src_startofpacket),                           //          .startofpacket
		.in_endofpacket       (router_004_src_endofpacket),                             //          .endofpacket
		.in_ready             (router_004_src_ready),                                   //          .ready
		.in_data              (router_004_src_data),                                    //          .data
		.out_endofpacket      (write_dma_mm_write_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (write_dma_mm_write_cmd_width_adapter_src_data),          //          .data
		.out_channel          (write_dma_mm_write_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (write_dma_mm_write_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (write_dma_mm_write_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (write_dma_mm_write_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                  // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (220),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (5),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline (
		.clk               (clk_125_clk_clk),                                           //       cr0.clk
		.reset             (lpddr2_avl_1_translator_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_mux_src_ready),                                         //     sink0.ready
		.in_valid          (cmd_mux_src_valid),                                         //          .valid
		.in_startofpacket  (cmd_mux_src_startofpacket),                                 //          .startofpacket
		.in_endofpacket    (cmd_mux_src_endofpacket),                                   //          .endofpacket
		.in_data           (cmd_mux_src_data),                                          //          .data
		.in_channel        (cmd_mux_src_channel),                                       //          .channel
		.out_ready         (agent_pipeline_source0_ready),                              //   source0.ready
		.out_valid         (agent_pipeline_source0_valid),                              //          .valid
		.out_startofpacket (agent_pipeline_source0_startofpacket),                      //          .startofpacket
		.out_endofpacket   (agent_pipeline_source0_endofpacket),                        //          .endofpacket
		.out_data          (agent_pipeline_source0_data),                               //          .data
		.out_channel       (agent_pipeline_source0_channel),                            //          .channel
		.in_empty          (1'b0),                                                      // (terminated)
		.out_empty         (),                                                          // (terminated)
		.out_error         (),                                                          // (terminated)
		.in_error          (1'b0)                                                       // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (220),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (0),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_001 (
		.clk               (clk_125_clk_clk),                                           //       cr0.clk
		.reset             (lpddr2_avl_1_translator_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (lpddr2_avl_1_agent_rp_ready),                               //     sink0.ready
		.in_valid          (lpddr2_avl_1_agent_rp_valid),                               //          .valid
		.in_startofpacket  (lpddr2_avl_1_agent_rp_startofpacket),                       //          .startofpacket
		.in_endofpacket    (lpddr2_avl_1_agent_rp_endofpacket),                         //          .endofpacket
		.in_data           (lpddr2_avl_1_agent_rp_data),                                //          .data
		.out_ready         (agent_pipeline_001_source0_ready),                          //   source0.ready
		.out_valid         (agent_pipeline_001_source0_valid),                          //          .valid
		.out_startofpacket (agent_pipeline_001_source0_startofpacket),                  //          .startofpacket
		.out_endofpacket   (agent_pipeline_001_source0_endofpacket),                    //          .endofpacket
		.out_data          (agent_pipeline_001_source0_data),                           //          .data
		.in_empty          (1'b0),                                                      // (terminated)
		.out_empty         (),                                                          // (terminated)
		.out_error         (),                                                          // (terminated)
		.in_error          (1'b0),                                                      // (terminated)
		.out_channel       (),                                                          // (terminated)
		.in_channel        (1'b0)                                                       // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (220),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (5),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline (
		.clk               (clk_125_clk_clk),                                           //       cr0.clk
		.reset             (lpddr2_avl_1_translator_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_demux_src0_ready),                                      //     sink0.ready
		.in_valid          (cmd_demux_src0_valid),                                      //          .valid
		.in_startofpacket  (cmd_demux_src0_startofpacket),                              //          .startofpacket
		.in_endofpacket    (cmd_demux_src0_endofpacket),                                //          .endofpacket
		.in_data           (cmd_demux_src0_data),                                       //          .data
		.in_channel        (cmd_demux_src0_channel),                                    //          .channel
		.out_ready         (mux_pipeline_source0_ready),                                //   source0.ready
		.out_valid         (mux_pipeline_source0_valid),                                //          .valid
		.out_startofpacket (mux_pipeline_source0_startofpacket),                        //          .startofpacket
		.out_endofpacket   (mux_pipeline_source0_endofpacket),                          //          .endofpacket
		.out_data          (mux_pipeline_source0_data),                                 //          .data
		.out_channel       (mux_pipeline_source0_channel),                              //          .channel
		.in_empty          (1'b0),                                                      // (terminated)
		.out_empty         (),                                                          // (terminated)
		.out_error         (),                                                          // (terminated)
		.in_error          (1'b0)                                                       // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (220),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (5),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_001 (
		.clk               (clk_125_clk_clk),                                           //       cr0.clk
		.reset             (lpddr2_avl_1_translator_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_demux_001_src0_ready),                                  //     sink0.ready
		.in_valid          (cmd_demux_001_src0_valid),                                  //          .valid
		.in_startofpacket  (cmd_demux_001_src0_startofpacket),                          //          .startofpacket
		.in_endofpacket    (cmd_demux_001_src0_endofpacket),                            //          .endofpacket
		.in_data           (cmd_demux_001_src0_data),                                   //          .data
		.in_channel        (cmd_demux_001_src0_channel),                                //          .channel
		.out_ready         (mux_pipeline_001_source0_ready),                            //   source0.ready
		.out_valid         (mux_pipeline_001_source0_valid),                            //          .valid
		.out_startofpacket (mux_pipeline_001_source0_startofpacket),                    //          .startofpacket
		.out_endofpacket   (mux_pipeline_001_source0_endofpacket),                      //          .endofpacket
		.out_data          (mux_pipeline_001_source0_data),                             //          .data
		.out_channel       (mux_pipeline_001_source0_channel),                          //          .channel
		.in_empty          (1'b0),                                                      // (terminated)
		.out_empty         (),                                                          // (terminated)
		.out_error         (),                                                          // (terminated)
		.in_error          (1'b0)                                                       // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (220),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (5),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_002 (
		.clk               (clk_125_clk_clk),                                           //       cr0.clk
		.reset             (lpddr2_avl_1_translator_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_demux_002_src0_ready),                                  //     sink0.ready
		.in_valid          (cmd_demux_002_src0_valid),                                  //          .valid
		.in_startofpacket  (cmd_demux_002_src0_startofpacket),                          //          .startofpacket
		.in_endofpacket    (cmd_demux_002_src0_endofpacket),                            //          .endofpacket
		.in_data           (cmd_demux_002_src0_data),                                   //          .data
		.in_channel        (cmd_demux_002_src0_channel),                                //          .channel
		.out_ready         (mux_pipeline_002_source0_ready),                            //   source0.ready
		.out_valid         (mux_pipeline_002_source0_valid),                            //          .valid
		.out_startofpacket (mux_pipeline_002_source0_startofpacket),                    //          .startofpacket
		.out_endofpacket   (mux_pipeline_002_source0_endofpacket),                      //          .endofpacket
		.out_data          (mux_pipeline_002_source0_data),                             //          .data
		.out_channel       (mux_pipeline_002_source0_channel),                          //          .channel
		.in_empty          (1'b0),                                                      // (terminated)
		.out_empty         (),                                                          // (terminated)
		.out_error         (),                                                          // (terminated)
		.in_error          (1'b0)                                                       // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (220),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (5),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_003 (
		.clk               (clk_125_clk_clk),                                           //       cr0.clk
		.reset             (lpddr2_avl_1_translator_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_demux_003_src0_ready),                                  //     sink0.ready
		.in_valid          (cmd_demux_003_src0_valid),                                  //          .valid
		.in_startofpacket  (cmd_demux_003_src0_startofpacket),                          //          .startofpacket
		.in_endofpacket    (cmd_demux_003_src0_endofpacket),                            //          .endofpacket
		.in_data           (cmd_demux_003_src0_data),                                   //          .data
		.in_channel        (cmd_demux_003_src0_channel),                                //          .channel
		.out_ready         (mux_pipeline_003_source0_ready),                            //   source0.ready
		.out_valid         (mux_pipeline_003_source0_valid),                            //          .valid
		.out_startofpacket (mux_pipeline_003_source0_startofpacket),                    //          .startofpacket
		.out_endofpacket   (mux_pipeline_003_source0_endofpacket),                      //          .endofpacket
		.out_data          (mux_pipeline_003_source0_data),                             //          .data
		.out_channel       (mux_pipeline_003_source0_channel),                          //          .channel
		.in_empty          (1'b0),                                                      // (terminated)
		.out_empty         (),                                                          // (terminated)
		.out_error         (),                                                          // (terminated)
		.in_error          (1'b0)                                                       // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (220),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (5),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_004 (
		.clk               (clk_125_clk_clk),                                           //       cr0.clk
		.reset             (lpddr2_avl_1_translator_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_demux_004_src0_ready),                                  //     sink0.ready
		.in_valid          (cmd_demux_004_src0_valid),                                  //          .valid
		.in_startofpacket  (cmd_demux_004_src0_startofpacket),                          //          .startofpacket
		.in_endofpacket    (cmd_demux_004_src0_endofpacket),                            //          .endofpacket
		.in_data           (cmd_demux_004_src0_data),                                   //          .data
		.in_channel        (cmd_demux_004_src0_channel),                                //          .channel
		.out_ready         (mux_pipeline_004_source0_ready),                            //   source0.ready
		.out_valid         (mux_pipeline_004_source0_valid),                            //          .valid
		.out_startofpacket (mux_pipeline_004_source0_startofpacket),                    //          .startofpacket
		.out_endofpacket   (mux_pipeline_004_source0_endofpacket),                      //          .endofpacket
		.out_data          (mux_pipeline_004_source0_data),                             //          .data
		.out_channel       (mux_pipeline_004_source0_channel),                          //          .channel
		.in_empty          (1'b0),                                                      // (terminated)
		.out_empty         (),                                                          // (terminated)
		.out_error         (),                                                          // (terminated)
		.in_error          (1'b0)                                                       // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (220),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (5),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_005 (
		.clk               (clk_125_clk_clk),                               //       cr0.clk
		.reset             (video_dma_reset_n_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (rsp_demux_src0_ready),                          //     sink0.ready
		.in_valid          (rsp_demux_src0_valid),                          //          .valid
		.in_startofpacket  (rsp_demux_src0_startofpacket),                  //          .startofpacket
		.in_endofpacket    (rsp_demux_src0_endofpacket),                    //          .endofpacket
		.in_data           (rsp_demux_src0_data),                           //          .data
		.in_channel        (rsp_demux_src0_channel),                        //          .channel
		.out_ready         (mux_pipeline_005_source0_ready),                //   source0.ready
		.out_valid         (mux_pipeline_005_source0_valid),                //          .valid
		.out_startofpacket (mux_pipeline_005_source0_startofpacket),        //          .startofpacket
		.out_endofpacket   (mux_pipeline_005_source0_endofpacket),          //          .endofpacket
		.out_data          (mux_pipeline_005_source0_data),                 //          .data
		.out_channel       (mux_pipeline_005_source0_channel),              //          .channel
		.in_empty          (1'b0),                                          // (terminated)
		.out_empty         (),                                              // (terminated)
		.out_error         (),                                              // (terminated)
		.in_error          (1'b0)                                           // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (220),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (5),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_006 (
		.clk               (clk_125_clk_clk),                                //       cr0.clk
		.reset             (read_dma_y_reset_n_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (rsp_demux_src1_ready),                           //     sink0.ready
		.in_valid          (rsp_demux_src1_valid),                           //          .valid
		.in_startofpacket  (rsp_demux_src1_startofpacket),                   //          .startofpacket
		.in_endofpacket    (rsp_demux_src1_endofpacket),                     //          .endofpacket
		.in_data           (rsp_demux_src1_data),                            //          .data
		.in_channel        (rsp_demux_src1_channel),                         //          .channel
		.out_ready         (mux_pipeline_006_source0_ready),                 //   source0.ready
		.out_valid         (mux_pipeline_006_source0_valid),                 //          .valid
		.out_startofpacket (mux_pipeline_006_source0_startofpacket),         //          .startofpacket
		.out_endofpacket   (mux_pipeline_006_source0_endofpacket),           //          .endofpacket
		.out_data          (mux_pipeline_006_source0_data),                  //          .data
		.out_channel       (mux_pipeline_006_source0_channel),               //          .channel
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.out_error         (),                                               // (terminated)
		.in_error          (1'b0)                                            // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (220),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (5),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_007 (
		.clk               (clk_125_clk_clk),                                //       cr0.clk
		.reset             (read_dma_y_reset_n_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (rsp_demux_src2_ready),                           //     sink0.ready
		.in_valid          (rsp_demux_src2_valid),                           //          .valid
		.in_startofpacket  (rsp_demux_src2_startofpacket),                   //          .startofpacket
		.in_endofpacket    (rsp_demux_src2_endofpacket),                     //          .endofpacket
		.in_data           (rsp_demux_src2_data),                            //          .data
		.in_channel        (rsp_demux_src2_channel),                         //          .channel
		.out_ready         (mux_pipeline_007_source0_ready),                 //   source0.ready
		.out_valid         (mux_pipeline_007_source0_valid),                 //          .valid
		.out_startofpacket (mux_pipeline_007_source0_startofpacket),         //          .startofpacket
		.out_endofpacket   (mux_pipeline_007_source0_endofpacket),           //          .endofpacket
		.out_data          (mux_pipeline_007_source0_data),                  //          .data
		.out_channel       (mux_pipeline_007_source0_channel),               //          .channel
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.out_error         (),                                               // (terminated)
		.in_error          (1'b0)                                            // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (220),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (5),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_008 (
		.clk               (clk_125_clk_clk),                                //       cr0.clk
		.reset             (read_dma_y_reset_n_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (rsp_demux_src3_ready),                           //     sink0.ready
		.in_valid          (rsp_demux_src3_valid),                           //          .valid
		.in_startofpacket  (rsp_demux_src3_startofpacket),                   //          .startofpacket
		.in_endofpacket    (rsp_demux_src3_endofpacket),                     //          .endofpacket
		.in_data           (rsp_demux_src3_data),                            //          .data
		.in_channel        (rsp_demux_src3_channel),                         //          .channel
		.out_ready         (mux_pipeline_008_source0_ready),                 //   source0.ready
		.out_valid         (mux_pipeline_008_source0_valid),                 //          .valid
		.out_startofpacket (mux_pipeline_008_source0_startofpacket),         //          .startofpacket
		.out_endofpacket   (mux_pipeline_008_source0_endofpacket),           //          .endofpacket
		.out_data          (mux_pipeline_008_source0_data),                  //          .data
		.out_channel       (mux_pipeline_008_source0_channel),               //          .channel
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.out_error         (),                                               // (terminated)
		.in_error          (1'b0)                                            // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (220),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (5),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_009 (
		.clk               (clk_125_clk_clk),                                //       cr0.clk
		.reset             (read_dma_y_reset_n_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (rsp_demux_src4_ready),                           //     sink0.ready
		.in_valid          (rsp_demux_src4_valid),                           //          .valid
		.in_startofpacket  (rsp_demux_src4_startofpacket),                   //          .startofpacket
		.in_endofpacket    (rsp_demux_src4_endofpacket),                     //          .endofpacket
		.in_data           (rsp_demux_src4_data),                            //          .data
		.in_channel        (rsp_demux_src4_channel),                         //          .channel
		.out_ready         (mux_pipeline_009_source0_ready),                 //   source0.ready
		.out_valid         (mux_pipeline_009_source0_valid),                 //          .valid
		.out_startofpacket (mux_pipeline_009_source0_startofpacket),         //          .startofpacket
		.out_endofpacket   (mux_pipeline_009_source0_endofpacket),           //          .endofpacket
		.out_data          (mux_pipeline_009_source0_data),                  //          .data
		.out_channel       (mux_pipeline_009_source0_channel),               //          .channel
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.out_error         (),                                               // (terminated)
		.in_error          (1'b0)                                            // (terminated)
	);

	ECE423_QSYS_mm_interconnect_1_avalon_st_adapter_005 #(
		.inBitsPerSymbol (130),
		.inUsePackets    (0),
		.inDataWidth     (130),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (130),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter (
		.in_clk_0_clk   (clk_125_clk_clk),                                           // in_clk_0.clk
		.in_rst_0_reset (lpddr2_avl_1_translator_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (lpddr2_avl_1_agent_rdata_fifo_out_data),                    //     in_0.data
		.in_0_valid     (lpddr2_avl_1_agent_rdata_fifo_out_valid),                   //         .valid
		.in_0_ready     (lpddr2_avl_1_agent_rdata_fifo_out_ready),                   //         .ready
		.out_0_data     (avalon_st_adapter_out_0_data),                              //    out_0.data
		.out_0_valid    (avalon_st_adapter_out_0_valid),                             //         .valid
		.out_0_ready    (avalon_st_adapter_out_0_ready),                             //         .ready
		.out_0_error    (avalon_st_adapter_out_0_error)                              //         .error
	);

endmodule
