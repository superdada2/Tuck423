//
//  mjpeg423_decoder.c
//  mjpeg423app
//
//  Created by Rodolfo Pellizzoni on 12/24/13.
//  Copyright (c) 2013 __MyCompanyName__. All rights reserved.
//

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "../common/mjpeg423_types.h"
#include "mjpeg423_decoder.h"
#include "../common/util.h"

#define FRAME_RATE 24
#define DEBUG 0

static iframe_trailer_t *closest_iframe_index(iframe_trailer_t *trailer, int num_iframes, int frame_index)
{
	int closest_index = 0;
	int closest_distance = abs(frame_index - trailer[0].frame_index);

	for (int i = 1; i < num_iframes; i++)
	{
		int current_distance = abs(frame_index - trailer[i].frame_index);

		// Should always be shrinking, otherwise we found the closest one already
		if (current_distance > closest_distance)
		{
			break;
		}

		closest_distance = current_distance;
		closest_index = i;
	}

	return &trailer[closest_index];
}

// Returns frame number that we jumped to, -1 for error
static int jump_to_iframe(FAT_FILE_HANDLE file_handle, iframe_trailer_t *iframe)
{
	if (Fat_FileSeek(file_handle, FILE_SEEK_BEGIN, iframe->frame_position) == FALSE)
	{
		error_and_exit("cannot seek into file");
	}
	return iframe->frame_index;
}

//main decoder function
void mjpeg423_decode(FAT_FILE_HANDLE file_handle, ece423_video_display* p_display)
{
	volatile int playback = 1;
    // header and payload info
    uint32_t num_frames, w_size, h_size, num_iframes, payload_size;
    uint32_t Ysize, Cbsize, frame_size, frame_type;

    // input buffer
    alt_u32 *p_buffer;
    
    // Good to reset
    is_pressed = NONE_PRESSED;

    // read header
    if(Fat_FileRead(file_handle, &num_frames, sizeof(uint32_t)) == FALSE)
    {
    	error_and_exit("cannot read input file");
    }
#if DEBUG
    DEBUG_PRINT_ARG("Decoder start. Num frames #%u\n", num_frames)
#endif

    if(Fat_FileRead(file_handle, &w_size, sizeof(uint32_t)) == FALSE)
    {
    	error_and_exit("cannot read input file");
    }
#if DEBUG
    DEBUG_PRINT_ARG("Width %u\n", w_size)
#endif

    if(Fat_FileRead(file_handle, &h_size, sizeof(uint32_t)) == FALSE)
    {
    	error_and_exit("cannot read input file");
    }
#if DEBUG
    DEBUG_PRINT_ARG("Height %u\n", h_size)
#endif

    if(Fat_FileRead(file_handle, &num_iframes, sizeof(uint32_t)) == FALSE)
    {
    	error_and_exit("cannot read input file");
    }
#if DEBUG
    DEBUG_PRINT_ARG("Num i frames %u\n", num_iframes)
#endif

    if(Fat_FileRead(file_handle, &payload_size, sizeof(uint32_t)) == FALSE)
    {
    	error_and_exit("cannot read input file");
    }

    int hCb_size = h_size/8;           // number of chrominance blocks
    int wCb_size = w_size/8;
    int hYb_size = h_size/8;           // number of luminance blocks. Same as chrominance in the sample app
    int wYb_size = w_size/8;
    
    // trailer structure
    iframe_trailer_t* trailer = malloc(sizeof(iframe_trailer_t)*num_iframes);
    
    // main data structures. See lab manual for explanation
    rgb_pixel_t* rgbblock;
    if((rgbblock = malloc(w_size*h_size*sizeof(rgb_pixel_t)))==NULL)
    {
    	error_and_exit("cannot allocate rgbblock");
    }
    color_block_t* Yblock;
    if((Yblock = malloc(hYb_size * wYb_size * 64))==NULL)
    {
    	error_and_exit("cannot allocate Yblock");
    }
    color_block_t* Cbblock;
    if((Cbblock = malloc(hCb_size * wCb_size * 64))==NULL)
    {
    	error_and_exit("cannot allocate Cbblock");
    }
    color_block_t* Crblock;
    if((Crblock = malloc(hCb_size * wCb_size * 64))==NULL)
    {
    	error_and_exit("cannot allocate Crblock");;
    }
    dct_block_t* YDCAC;
    if((YDCAC = malloc(hYb_size * wYb_size * 64 * sizeof(DCTELEM)))==NULL)
    {
    	error_and_exit("cannot allocate YDCAC");
    }
    dct_block_t* CbDCAC;
    if((CbDCAC = malloc(hCb_size * wCb_size * 64 * sizeof(DCTELEM)))==NULL)
    {
    	error_and_exit("cannot allocate CbDCAC");
    }
    dct_block_t* CrDCAC;
    if((CrDCAC = malloc(hCb_size * wCb_size * 64 * sizeof(DCTELEM)))==NULL)
    {
    	error_and_exit("cannot allocate CrDCAC");
    }
    // Ybitstream is assigned a size sufficient to hold all bistreams
    // the bitstream is then read from the file into Ybitstream
    // the remaining pointers simply point to the beginning of the Cb and Cr streams within Ybitstream
    uint8_t* Ybitstream;
    if((Ybitstream = malloc(hYb_size * wYb_size * 64 * sizeof(DCTELEM) + 2 * hCb_size * wCb_size * 64 * sizeof(DCTELEM)))==NULL)
    {
    	error_and_exit("cannot allocate bitstream");
    }
    uint8_t* Cbbitstream;
    uint8_t* Crbitstream;
    
    // read trailer. Note: the trailer information is not used in the sample decoder app
    // set file to beginning of trailer
    if(Fat_FileSeek(file_handle, FILE_SEEK_BEGIN, 5 * sizeof(uint32_t) + payload_size) == FALSE)
    {
    	error_and_exit("cannot seek into file");
    }
    for(int count = 0; count < num_iframes; count++)
    {
        if(Fat_FileRead(file_handle, &(trailer[count].frame_index), sizeof(uint32_t)) == FALSE) error_and_exit("cannot read input file");
        if(Fat_FileRead(file_handle, &(trailer[count].frame_position), sizeof(uint32_t)) == FALSE) error_and_exit("cannot read input file");
#if DEBUG
        DEBUG_PRINT_ARG("I frame index %u, ", trailer[count].frame_index)
        DEBUG_PRINT_ARG("position %u\n", trailer[count].frame_position)
#endif
    }
    // set it back to beginning of payload
    if(Fat_FileSeek(file_handle, FILE_SEEK_BEGIN, 5 * sizeof(uint32_t)) == FALSE)
    {
    	error_and_exit("cannot seek into file");
    }
    
    // read and decode frames
    for(int frame_index = 0; frame_index < num_frames; frame_index ++)
    {
    	do
    	{
			switch(is_pressed)
			{
				// Play/Pause
				case BUTTON_0:
				{
					printf("Play/Pause\n");
					is_pressed = NONE_PRESSED;
					playback = !playback;

					break;
				}
				// Stop
				case BUTTON_1:
				{
					printf("Stop\n");
					is_pressed = NONE_PRESSED;

					goto exit_decode;
				}
				// Fast forward
				case BUTTON_2:
				{
					printf("Fast Forward\n");
					is_pressed = NONE_PRESSED;

					// if fast forward past end of video
					if (frame_index + FRAME_RATE * 5 > num_frames - 1)
					{
						goto exit_decode;
					}
					frame_index = jump_to_iframe(file_handle, closest_iframe_index(trailer, num_iframes, frame_index + FRAME_RATE * 5));
					break;
				}
				// Rewind
				case BUTTON_3:
				{
					printf("Rewind\n");
					frame_index = jump_to_iframe(file_handle, closest_iframe_index(trailer, num_iframes, frame_index - FRAME_RATE * 5));
					is_pressed = NONE_PRESSED;
					break;
				}
				default:
				{
					break;
				}
			}
    	} while (!playback);
#if DEBUG
    	DEBUG_PRINT_ARG("\nFrame #%u\n", frame_index)
#endif

        // read frame payload
        if(Fat_FileRead(file_handle, &frame_size, sizeof(uint32_t)) == FALSE)
		{
			error_and_exit("cannot read input file");
		}
#if DEBUG
        DEBUG_PRINT_ARG("Frame_size %u\n", frame_size)
#endif

        if(Fat_FileRead(file_handle, &frame_type, sizeof(uint32_t)) == FALSE)
        {
        	error_and_exit("cannot read input file");
        }
#if DEBUG
        DEBUG_PRINT_ARG("Frame_type %u\n", frame_type)
#endif

        if(Fat_FileRead(file_handle, &Ysize, sizeof(uint32_t)) == FALSE)
        {
        	error_and_exit("cannot read input file");
        }
        if(Fat_FileRead(file_handle, &Cbsize, sizeof(uint32_t)) == FALSE)
        {
        	error_and_exit("cannot read input file");
        }
        if(Fat_FileRead(file_handle, Ybitstream, frame_size - 4 * sizeof(uint32_t)) == FALSE)
        {
        	error_and_exit("cannot read input file");
        }
        // set the Cb and Cr bitstreams to point to the right location
        Cbbitstream = Ybitstream + Ysize;
        Crbitstream = Cbbitstream + Cbsize;
        
        // lossless decoding
        lossless_decode(hYb_size*wYb_size, Ybitstream, YDCAC, Yquant, frame_type);
        lossless_decode(hCb_size*wCb_size, Cbbitstream, CbDCAC, Cquant, frame_type);
        lossless_decode(hCb_size*wCb_size, Crbitstream, CrDCAC, Cquant, frame_type);
        
        // fdct
        for(int b = 0; b < hYb_size*wYb_size; b++) idct(YDCAC[b], Yblock[b]);
        for(int b = 0; b < hCb_size*wCb_size; b++) idct(CbDCAC[b], Cbblock[b]);
        for(int b = 0; b < hCb_size*wCb_size; b++) idct(CrDCAC[b], Crblock[b]);
        
        // ybcbr to rgb conversion
        for(int b = 0; b < hCb_size * wCb_size; b++)
        {
            ycbcr_to_rgb(b/wCb_size*8, b%wCb_size*8, w_size, Yblock[b], Cbblock[b], Crblock[b], rgbblock);
        }

        // output to video hardware module
        while (ece423_video_display_buffer_is_available(p_display) != 0){};

		p_buffer = ece423_video_display_get_buffer(p_display);
		memcpy(p_buffer, rgbblock, w_size * h_size * sizeof(rgb_pixel_t));

		ece423_video_display_register_written_buffer(p_display);
		// ece423_video_display_switch_frames(state.p_display);
    } // end frame iteration
#if DEBUG
    DEBUG_PRINT("\nDecoder done.\n\n\n")
#endif
    
exit_decode:
    // clean up
    ece423_video_display_discard_buffered_frames(p_display);

    free(rgbblock); 
    free(Yblock);
    free(Cbblock);
    free(Crblock);
    free(YDCAC);
    free(CbDCAC);
    free(CrDCAC);
    free(Ybitstream);

    return;
}
