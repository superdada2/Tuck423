
lab3_cpu1.elf:     file format elf32-littlenios2
lab3_cpu1.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x210c0190

Program Header:
    LOAD off    0x00001000 vaddr 0x210c0000 paddr 0x210c0000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x210c0020 paddr 0x210c0020 align 2**12
         filesz 0x0001124c memsz 0x0001124c flags r-x
    LOAD off    0x00013000 vaddr 0x10000000 paddr 0x210d126c align 2**12
         filesz 0x000024d8 memsz 0x00002640 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  210c0000  210c0000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000170  210c0020  210c0020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000110dc  210c0190  210c0190  00001190  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000068c  10000000  210d126c  00013000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001e4c  1000068c  210d18f8  0001368c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000168  100024d8  210d3744  000154d8  2**2
                  ALLOC, SMALL_DATA
  6 .lpddr2       00000000  10002640  10002640  000154d8  2**0
                  CONTENTS
  7 .sram_memory  00000000  210d3744  210d3744  000154d8  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  000154d8  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00001110  00000000  00000000  00015500  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0002f3b6  00000000  00000000  00016610  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000bab1  00000000  00000000  000459c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000e21d  00000000  00000000  00051477  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  000024d4  00000000  00000000  0005f694  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000047b5  00000000  00000000  00061b68  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0001d74f  00000000  00000000  0006631d  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000060  00000000  00000000  00083a6c  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00002040  00000000  00000000  00083ad0  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  0008989b  2**0
                  CONTENTS, READONLY
 19 .cpu          00000005  00000000  00000000  0008989e  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  000898a3  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  000898a4  2**0
                  CONTENTS, READONLY
 22 .stderr_dev   0000000b  00000000  00000000  000898a5  2**0
                  CONTENTS, READONLY
 23 .stdin_dev    0000000b  00000000  00000000  000898b0  2**0
                  CONTENTS, READONLY
 24 .stdout_dev   0000000b  00000000  00000000  000898bb  2**0
                  CONTENTS, READONLY
 25 .sopc_system_name 0000000b  00000000  00000000  000898c6  2**0
                  CONTENTS, READONLY
 26 .quartus_project_dir 00000026  00000000  00000000  000898d1  2**0
                  CONTENTS, READONLY
 27 .jdi          000073e5  00000000  00000000  000898f7  2**0
                  CONTENTS, READONLY
 28 .sopcinfo     001ace22  00000000  00000000  00090cdc  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
210c0000 l    d  .entry	00000000 .entry
210c0020 l    d  .exceptions	00000000 .exceptions
210c0190 l    d  .text	00000000 .text
10000000 l    d  .rodata	00000000 .rodata
1000068c l    d  .rwdata	00000000 .rwdata
100024d8 l    d  .bss	00000000 .bss
10002640 l    d  .lpddr2	00000000 .lpddr2
210d3744 l    d  .sram_memory	00000000 .sram_memory
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../lab3_cpu1_bsp//obj/HAL/src/crt0.o
210c01d8 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 tables.c
00000000 l    df *ABS*	00000000 util.c
00000000 l    df *ABS*	00000000 idct.c
00000000 l    df *ABS*	00000000 lossless_decode.c
00000000 l    df *ABS*	00000000 mjpeg423_decoder.c
00000000 l    df *ABS*	00000000 ycbcr_to_rgb.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 fprintf.c
00000000 l    df *ABS*	00000000 fwrite.c
00000000 l    df *ABS*	00000000 impure.c
1000088c l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 malign.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
10000202 l     O .rodata	00000010 zeroes.4255
210c4374 l     F .text	000000bc __sbprintf
10000212 l     O .rodata	00000010 blanks.4254
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 dtoa.c
210c4718 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
210c62d4 l     F .text	00000008 __fp_lock
210c62dc l     F .text	00000008 __fp_unlock
210c62f0 l     F .text	0000019c __sinit.part.1
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
100010d8 l     O .rwdata	00000020 lc_ctype_charset
100010b8 l     O .rwdata	00000020 lc_message_charset
100010f8 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
10000240 l     O .rodata	0000000c p05.2710
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
210c90d0 l     F .text	000000fc __sprint_r.part.0
10000374 l     O .rodata	00000010 blanks.4199
10000364 l     O .rodata	00000010 zeroes.4200
210ca4d8 l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
210cb9dc l     F .text	0000006c udivmodsi4
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
210ce1f4 l     F .text	00000008 alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00000000 l    df *ABS*	00000000 alt_isatty.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_lseek.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
100024b8 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
10001428 l     O .rwdata	00001060 jtag_uart_1
100013e0 l     O .rwdata	00000048 mailbox_simple_0_1
10001398 l     O .rwdata	00000048 mailbox_simple_1_0
10001338 l     O .rwdata	00000060 read_dma_cb
100012d8 l     O .rwdata	00000060 read_dma_cr
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
210ce810 l     F .text	0000005c altera_avalon_jtag_uart_timeout
210ce86c l     F .text	000000fc altera_avalon_jtag_uart_irq
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_mailbox_simple.c
210ced88 l     F .text	00000054 altera_avalon_mailbox_simple_rx_isr
210ceddc l     F .text	0000009c altera_avalon_mailbox_simple_tx_isr
00000000 l    df *ABS*	00000000 altera_msgdma.c
210cf394 l     F .text	000000cc alt_msgdma_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
10002514 g     O .bss	00000004 alt_instruction_exception_handler
210cfeec g     F .text	0000013c alt_msgdma_standard_descriptor_async_transfer
210c2240 g     F .text	00000018 putchar
210c8630 g     F .text	00000074 _mprec_log10
210cf12c g     F .text	0000014c altera_avalon_mailbox_send
210c871c g     F .text	0000008c __any_on
210cab98 g     F .text	00000054 _isatty_r
1000024c g     O .rodata	00000028 __mprec_tinytens
210ce478 g     F .text	00000060 alt_main
210c2258 g     F .text	000000a8 _puts_r
10002540 g     O .bss	00000100 alt_irq
210cabec g     F .text	0000005c _lseek_r
210c13dc g     F .text	00000230 ycbcr_to_rgb
210d18f8 g       *ABS*	00000000 __flash_rwdata_start
210ccc70 g     F .text	00000084 .hidden __eqdf2
210cf4d0 g     F .text	0000003c alt_msgdma_construct_standard_mm_to_mm_descriptor
10002640 g       *ABS*	00000000 __alt_heap_start
210c21fc g     F .text	0000003c printf
210caca4 g     F .text	0000009c _wcrtomb_r
1000080c g     O .rwdata	00000080 Yquant
210c8fc8 g     F .text	0000005c __sseek
210c6624 g     F .text	00000010 __sinit
210ca594 g     F .text	00000138 __swbuf_r
210c70d0 g     F .text	0000007c _setlocale_r
210c648c g     F .text	00000068 __sfmoreglue
210ce4dc g     F .text	00000004 __malloc_unlock
210c7588 g     F .text	0000015c memmove
210c660c g     F .text	00000018 _cleanup
210c7808 g     F .text	000000a8 _Balloc
210cf460 g     F .text	00000038 alt_msgdma_construct_standard_st_to_mm_descriptor
210cccf4 g     F .text	000000e0 .hidden __gtdf2
210d0efc g     F .text	00000008 altera_nios2_gen2_irq_init
00000000  w      *UND*	00000000 __errno
210c0000 g     F .entry	0000001c __reset
210c0020 g       *ABS*	00000000 __flash_exceptions_start
210cab40 g     F .text	00000058 _fstat_r
100024ec g     O .bss	00000004 errno
210c8f44 g     F .text	00000008 __seofread
10002500 g     O .bss	00000004 alt_argv
1000a488 g       *ABS*	00000000 _gp
210cf278 g     F .text	0000011c altera_avalon_mailbox_retrieve_poll
210cfa64 g     F .text	0000005c alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits
10001130 g     O .rwdata	00000180 alt_fd_list
210c2238 g     F .text	00000008 _putchar_r
210d0804 g     F .text	00000078 alt_find_dev
210c7450 g     F .text	00000138 memcpy
210c62e4 g     F .text	0000000c _cleanup_r
210cdf30 g     F .text	000000d0 .hidden __floatsidf
210d098c g     F .text	00000110 alt_io_redirect
210ccdd4 g     F .text	000000e0 .hidden __ltdf2
210d126c g       *ABS*	00000000 __DTOR_END__
210cfd18 g     F .text	00000088 alt_msgdma_start_prefetcher_with_extd_desc_list
210d0028 g     F .text	0000016c alt_msgdma_extended_descriptor_async_transfer
210cfedc g     F .text	00000010 alt_msgdma_register_callback
210c2300 g     F .text	00000014 puts
210d1054 g     F .text	00000074 alt_exception_cause_generated_bad_addr
210cee78 g     F .text	00000088 altera_avalon_mailbox_simple_init
210c8e7c g     F .text	00000074 __fpclassifyd
210c858c g     F .text	000000a4 __ratio
210ca4b4 g     F .text	00000024 __vfiprintf_internal
210ceaac g     F .text	0000013c altera_avalon_jtag_uart_read
210c1a00 g     F .text	00000014 malloc
210cf93c g     F .text	00000060 alt_msgdma_prefetcher_add_standard_desc_to_list
210c21d0 g     F .text	0000002c _printf_r
210c0920 g     F .text	00000628 lossless_decode
210cbaf8 g     F .text	00000008 .hidden __udivsi3
210ce294 g     F .text	00000090 isatty
1000029c g     O .rodata	000000c8 __mprec_tens
210cf0f8 g     F .text	00000034 altera_avalon_mailbox_status
210cf04c g     F .text	000000ac altera_avalon_mailbox_close
210c714c g     F .text	0000000c __locale_charset
210d1004 g     F .text	00000050 alt_icache_flush
100024e8 g     O .bss	00000004 __malloc_top_pad
10002498 g     O .rwdata	00000004 __mb_cur_max
210c717c g     F .text	0000000c _localeconv_r
210c7c14 g     F .text	0000003c __i2b
210c6a88 g     F .text	000004c0 __sfvwrite_r
210c2314 g     F .text	00000054 _sbrk_r
210cac48 g     F .text	0000005c _read_r
100024a0 g     O .rwdata	00000004 alt_max_fd
210ca85c g     F .text	000000f0 _fclose_r
210c62a4 g     F .text	00000030 fflush
100024e4 g     O .bss	00000004 __malloc_max_sbrked_mem
210cbb08 g     F .text	0000089c .hidden __adddf3
210c8334 g     F .text	0000011c __b2d
210cf6dc g     F .text	00000048 alt_msgdma_construct_prefetcher_standard_st_to_mm_descriptor
210cb44c g     F .text	00000590 .hidden __umoddi3
210ce3f0 g     F .text	00000088 lseek
210c0264 g     F .text	00000068 print_dct
10002488 g     O .rwdata	00000004 _global_impure_ptr
210c8914 g     F .text	00000568 _realloc_r
10002640 g       *ABS*	00000000 __bss_end
210d0924 g     F .text	00000068 alt_iic_isr_register
210d0e04 g     F .text	000000f8 alt_tick
210cfdfc g     F .text	000000e0 alt_msgdma_init
210cae8c g     F .text	000005c0 .hidden __udivdi3
210ca960 g     F .text	00000184 _fputwc_r
10000274 g     O .rodata	00000028 __mprec_bigtens
210c79f8 g     F .text	00000104 __s2b
210ce000 g     F .text	000000a4 .hidden __floatunsidf
210c80dc g     F .text	00000060 __mcmp
210d039c g     F .text	00000234 alt_msgdma_extended_descriptor_sync_transfer
210c6644 g     F .text	00000018 __fp_lock_all
210d090c g     F .text	00000018 alt_ic_irq_enabled
100024d8 g     O .bss	00000008 state
210d0dd0 g     F .text	00000034 alt_alarm_stop
210c1068 g     F .text	00000070 input_AC
10002508 g     O .bss	00000004 alt_irq_active
210c10d8 g     F .text	00000304 mjpeg423_decode
210c00fc g     F .exceptions	00000068 alt_irq_handler
100012b0 g     O .rwdata	00000028 alt_dev_null
210cf584 g     F .text	00000078 alt_msgdma_construct_extended_mm_to_st_descriptor
210cfbd0 g     F .text	00000148 alt_msgdma_start_prefetcher_with_std_desc_list
210ce1dc g     F .text	00000018 alt_dcache_flush_all
210c7afc g     F .text	00000068 __hi0bits
210cdea8 g     F .text	00000088 .hidden __fixdfsi
100024d8 g       *ABS*	00000000 __ram_rwdata_end
100024a4 g     O .rwdata	00000008 alt_dev_list
210ce63c g     F .text	000000e8 write
210c87a8 g     F .text	000000a0 _putc_r
1000068c g       *ABS*	00000000 __ram_rodata_end
210ce210 g     F .text	00000084 fstat
210c1700 g     F .text	00000024 fprintf
210ccdd4 g     F .text	000000e0 .hidden __ledf2
210c7e4c g     F .text	00000140 __pow5mult
210c91e4 g     F .text	000012d0 ___vfiprintf_internal_r
100024f8 g     O .bss	00000004 __nlocale_changed
210cbb00 g     F .text	00000008 .hidden __umodsi3
210cf724 g     F .text	00000048 alt_msgdma_construct_prefetcher_standard_mm_to_st_descriptor
10002640 g       *ABS*	00000000 end
210ce968 g     F .text	00000080 altera_avalon_jtag_uart_init
210c0164 g     F .exceptions	0000002c alt_instruction_exception_entry
210d126c g       *ABS*	00000000 __CTOR_LIST__
20000000 g       *ABS*	00000000 __alt_stack_pointer
210ce0a4 g     F .text	00000064 .hidden __clzsi2
210cebe8 g     F .text	000001a0 altera_avalon_jtag_uart_write
210c6634 g     F .text	00000004 __sfp_lock_acquire
210c7368 g     F .text	000000e8 memchr
210c2400 g     F .text	00001f50 ___vfprintf_internal_r
210c6798 g     F .text	000002f0 _free_r
210d0c40 g     F .text	0000017c alt_printf
210c7158 g     F .text	00000010 __locale_mb_cur_max
210c4584 g     F .text	00000194 __call_exitprocs
100024f4 g     O .bss	00000004 __mlocale_changed
10002490 g     O .rwdata	00000004 __malloc_sbrk_base
210c0190 g     F .text	0000004c _start
10002510 g     O .bss	00000004 _alt_tick_rate
210c01fc g     F .text	00000068 print_block
210c02cc g     F .text	00000080 print_bitstream
210c7f8c g     F .text	00000150 __lshift
1000250c g     O .bss	00000004 _alt_nticks
210cf498 g     F .text	00000038 alt_msgdma_construct_standard_mm_to_st_descriptor
210ce4e0 g     F .text	000000ec read
210ce744 g     F .text	00000090 alt_sys_init
210d1158 g     F .text	00000114 __register_exitproc
210c7c50 g     F .text	000001fc __multiply
210ce9e8 g     F .text	00000050 altera_avalon_jtag_uart_close
1000068c g       *ABS*	00000000 __ram_rwdata_start
10000000 g       *ABS*	00000000 __ram_rodata_start
10002518 g     O .bss	00000028 __malloc_current_mallinfo
210c8450 g     F .text	0000013c __d2b
21080000 g       *ABS*	00000000 __alt_mem_sram_memory
210ce7d4 g     F .text	00000010 altera_avalon_jtag_uart_read_fd
210d0fb4 g     F .text	00000050 alt_get_fd
210d0664 g     F .text	00000060 alt_busy_sleep
210ca744 g     F .text	00000054 _close_r
210cf690 g     F .text	0000004c alt_msgdma_construct_prefetcher_standard_mm_to_mm_descriptor
210d10dc g     F .text	0000007c memcmp
210ce7f4 g     F .text	00000010 altera_avalon_jtag_uart_close_fd
10002640 g       *ABS*	00000000 __alt_stack_base
210ce804 g     F .text	0000000c altera_avalon_jtag_uart_ioctl_fd
210c034c g     F .text	000005d4 idct
210c1724 g     F .text	000000cc _fwrite_r
210cf76c g     F .text	00000090 alt_msgdma_construct_prefetcher_extended_st_to_mm_descriptor
210c4430 g     F .text	00000154 __swsetup_r
210cc3a4 g     F .text	000008cc .hidden __divdf3
210c64f4 g     F .text	00000118 __sfp
210c86a4 g     F .text	00000078 __copybits
10000cb0 g     O .rwdata	00000408 __malloc_av_
210c6640 g     F .text	00000004 __sinit_lock_release
210cceb4 g     F .text	00000724 .hidden __muldf3
210c8ef0 g     F .text	00000054 __sread
210d0f04 g     F .text	000000b0 alt_find_file
210d06c4 g     F .text	00000078 alt_dev_llist_insert
210ce4d8 g     F .text	00000004 __malloc_lock
210c16d8 g     F .text	00000028 _fprintf_r
210ce5f0 g     F .text	0000004c sbrk
210c6248 g     F .text	0000005c _fflush_r
210ca798 g     F .text	000000c4 _calloc_r
210c1000 g     F .text	00000068 input_DC
100024d8 g       *ABS*	00000000 __bss_start
210c76e4 g     F .text	00000124 memset
210cfda0 g     F .text	0000005c alt_msgdma_open
210c160c g     F .text	00000094 main
100024fc g     O .bss	00000004 alt_envp
100024e0 g     O .bss	00000004 __malloc_max_total_mem
210cf99c g     F .text	00000084 alt_msgdma_prefetcher_add_extended_desc_to_list
210ce7e4 g     F .text	00000010 altera_avalon_jtag_uart_write_fd
210ca6cc g     F .text	0000001c __swbuf
210c9024 g     F .text	00000008 __sclose
20000000 g       *ABS*	00000000 __alt_heap_limit
210ca94c g     F .text	00000014 fclose
210c4918 g     F .text	00001728 _dtoa_r
210cfac0 g     F .text	00000110 alt_msgdma_start_prefetcher_with_list_addr
210c1a28 g     F .text	000007a8 _malloc_r
210cae00 g     F .text	00000030 __ascii_wctomb
100024b4 g     O .rwdata	00000004 alt_errno
210cf88c g     F .text	000000b0 alt_msgdma_construct_prefetcher_extended_mm_to_mm_descriptor
210c6f48 g     F .text	000000c4 _fwalk
210c8848 g     F .text	000000cc putc
210cba48 g     F .text	00000054 .hidden __divsi3
210c6674 g     F .text	00000124 _malloc_trim_r
210d126c g       *ABS*	00000000 __CTOR_END__
210c902c g     F .text	000000a4 strcmp
210d126c g       *ABS*	00000000 __flash_rodata_start
210d126c g       *ABS*	00000000 __DTOR_LIST__
210ccc70 g     F .text	00000084 .hidden __nedf2
210ce724 g     F .text	00000020 alt_irq_init
210ce5cc g     F .text	00000024 alt_release_fd
210d0194 g     F .text	00000208 alt_msgdma_standard_descriptor_sync_transfer
210c1830 g     F .text	0000001c memalign
10000384 g     O .rodata	00000100 .hidden __clz_tab
100024f0 g     O .bss	00000004 _PathLocale
210d10c8 g     F .text	00000014 atexit
210ca6e8 g     F .text	0000005c _write_r
210c7188 g     F .text	0000001c setlocale
210cf7fc g     F .text	00000090 alt_msgdma_construct_prefetcher_extended_mm_to_st_descriptor
1000248c g     O .rwdata	00000004 _impure_ptr
10002504 g     O .bss	00000004 alt_argc
210c6040 g     F .text	00000208 __sflush_r
210d07a0 g     F .text	00000064 _do_dtors
210c7174 g     F .text	00000008 __locale_cjk_lang
1000068c g     O .rwdata	00000100 zigzag_table
210c0020 g       .exceptions	00000000 alt_irq_entry
210c01dc g     F .text	00000020 error_and_exit
210c82d4 g     F .text	00000060 __ulp
210c665c g     F .text	00000018 __fp_unlock_all
00000000 g       *ABS*	00000000 __alt_mem_lpddr2
100024ac g     O .rwdata	00000008 alt_fs_list
210c0020 g       *ABS*	00000000 __ram_exceptions_start
210c71a4 g     F .text	0000000c localeconv
210d0888 g     F .text	00000004 alt_ic_isr_register
210c17f0 g     F .text	00000040 fwrite
100024d8 g       *ABS*	00000000 _edata
210c0f48 g     F .text	000000b8 update_buffer
10002640 g       *ABS*	00000000 _end
210c0190 g       *ABS*	00000000 __ram_exceptions_end
210cea38 g     F .text	00000074 altera_avalon_jtag_uart_ioctl
210d08cc g     F .text	00000040 alt_ic_irq_disable
100024bc g     O .rwdata	00000008 alt_mailbox_simple_list
210c8f4c g     F .text	0000007c __swrite
10002494 g     O .rwdata	00000004 __malloc_trim_threshold
210c7168 g     F .text	0000000c __locale_msgcharset
210c16a0 g     F .text	00000038 exit
210c700c g     F .text	000000c4 _fwalk_reent
210cfa20 g     F .text	00000044 alt_msgdma_prefetcher_set_std_list_own_by_hw_bits
210c813c g     F .text	00000198 __mdiff
210cba9c g     F .text	0000005c .hidden __modsi3
210c184c g     F .text	000001b4 _memalign_r
20000000 g       *ABS*	00000000 __alt_data_end
210c0020 g     F .exceptions	00000000 alt_exception
210c6638 g     F .text	00000004 __sfp_lock_release
210cf5fc g     F .text	00000094 alt_msgdma_construct_extended_mm_to_mm_descriptor
210cf50c g     F .text	00000078 alt_msgdma_construct_extended_st_to_mm_descriptor
210cef00 g     F .text	0000014c altera_avalon_mailbox_open
210ce1fc g     F .text	00000014 _exit
210d05d0 g     F .text	00000094 alt_alarm_start
210c71b0 g     F .text	000001b8 __smakebuf_r
100024c4 g     O .rwdata	00000008 alt_msgdma_list
210c2368 g     F .text	00000098 strlen
210d0a9c g     F .text	000001a4 open
210cccf4 g     F .text	000000e0 .hidden __gedf2
210d0dbc g     F .text	00000014 alt_putchar
1000249c g     O .rwdata	00000004 __wctomb
210c91cc g     F .text	00000018 __sprint_r
210d087c g     F .text	0000000c alt_icache_flush_all
100024cc g     O .rwdata	00000004 alt_priority_mask
1000078c g     O .rwdata	00000080 Cquant
210d088c g     F .text	00000040 alt_ic_irq_enable
210c4350 g     F .text	00000024 __vfprintf_internal
210cae30 g     F .text	0000005c _wctomb_r
210cd5d8 g     F .text	000008d0 .hidden __subdf3
210c7b64 g     F .text	000000b0 __lo0bits
100024d0 g     O .rwdata	00000008 alt_alarm_list
210d073c g     F .text	00000064 _do_ctors
210cad40 g     F .text	000000c0 wcrtomb
210ce108 g     F .text	000000d4 close
210ce324 g     F .text	000000cc alt_load
210caae4 g     F .text	0000005c fputwc
210c1a14 g     F .text	00000014 free
210c663c g     F .text	00000004 __sinit_lock_acquire
210c78d8 g     F .text	00000120 __multadd
210c78b0 g     F .text	00000028 _Bfree



Disassembly of section .entry:

210c0000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
210c0000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
210c0004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
210c0008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
210c000c:	00bffd16 	blt	zero,r2,210c0004 <__flash_rwdata_start+0xfffee70c>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
210c0010:	00484334 	movhi	at,8460
    ori r1, r1, %lo(_start)
210c0014:	08406414 	ori	at,at,400
    jmp r1
210c0018:	0800683a 	jmp	at
210c001c:	00000000 	call	20000000 <__alt_data_end>

Disassembly of section .exceptions:

210c0020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
210c0020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
210c0024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
210c0028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
210c002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
210c0030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
210c0034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
210c0038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
210c003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
210c0040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
210c0044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
210c0048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
210c004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
210c0050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
210c0054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
210c0058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
210c005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
210c0060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
210c0064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
210c0068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
210c006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
210c0070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
210c0074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
210c0078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
210c007c:	10000326 	beq	r2,zero,210c008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
210c0080:	20000226 	beq	r4,zero,210c008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
210c0084:	10c00fc0 	call	210c00fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
210c0088:	00000706 	br	210c00a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
210c008c:	df401215 	stw	ea,72(sp)
        ldhu.n  r2, 0(r4)
        ldhu.n  r3, 2(r4)
        slli.n  r3, r3, 16
        or.n    r2, r2, r3 /* Instruction that caused exception */
#else
        ldw   r2, -4(ea)   /* Instruction that caused exception */
210c0090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
210c0094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
210c0098:	10c01640 	call	210c0164 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
210c009c:	1000021e 	bne	r2,zero,210c00a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
210c00a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
210c00a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
210c00a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
210c00ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
210c00b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
210c00b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
210c00b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
210c00bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
210c00c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
210c00c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
210c00c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
210c00cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
210c00d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
210c00d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
210c00d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
210c00dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
210c00e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
210c00e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
210c00e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
210c00ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
210c00f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
210c00f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
210c00f8:	ef80083a 	eret

210c00fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
210c00fc:	defffe04 	addi	sp,sp,-8
210c0100:	dfc00115 	stw	ra,4(sp)
210c0104:	dc000015 	stw	r16,0(sp)
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
210c0108:	000b313a 	rdctl	r5,ipending
210c010c:	04040034 	movhi	r16,4096
210c0110:	84095004 	addi	r16,r16,9536
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
210c0114:	2880004c 	andi	r2,r5,1

  active = alt_irq_pending ();

  do
  {
    i = 0;
210c0118:	0007883a 	mov	r3,zero
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
210c011c:	1000051e 	bne	r2,zero,210c0134 <alt_irq_handler+0x38>
210c0120:	00800044 	movi	r2,1
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
210c0124:	1085883a 	add	r2,r2,r2
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
210c0128:	2888703a 	and	r4,r5,r2
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
      i++;
210c012c:	18c00044 	addi	r3,r3,1
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
210c0130:	203ffc26 	beq	r4,zero,210c0124 <__flash_rwdata_start+0xfffee82c>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
210c0134:	180690fa 	slli	r3,r3,3
210c0138:	80c5883a 	add	r2,r16,r3
210c013c:	1007883a 	mov	r3,r2
210c0140:	19000117 	ldw	r4,4(r3)
210c0144:	10800017 	ldw	r2,0(r2)
210c0148:	103ee83a 	callr	r2
210c014c:	000b313a 	rdctl	r5,ipending

    } while (1);

    active = alt_irq_pending ();
    
  } while (active);
210c0150:	283ff01e 	bne	r5,zero,210c0114 <__flash_rwdata_start+0xfffee81c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
210c0154:	dfc00117 	ldw	ra,4(sp)
210c0158:	dc000017 	ldw	r16,0(sp)
210c015c:	dec00204 	addi	sp,sp,8
210c0160:	f800283a 	ret

210c0164 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
210c0164:	200b883a 	mov	r5,r4
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
210c0168:	000531fa 	rdctl	r2,exception
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
210c016c:	000d333a 	rdctl	r6,badaddr
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
210c0170:	d0e02317 	ldw	r3,-32628(gp)
210c0174:	18000326 	beq	r3,zero,210c0184 <alt_instruction_exception_entry+0x20>
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
210c0178:	11001f0c 	andi	r4,r2,124
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
210c017c:	2008d0ba 	srli	r4,r4,2
210c0180:	1800683a 	jmp	r3
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
210c0184:	003da03a 	break	0
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
}
210c0188:	0005883a 	mov	r2,zero
210c018c:	f800283a 	ret

Disassembly of section .text:

210c0190 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
210c0190:	00900014 	movui	r2,16384
#endif

0:
    initd 0(r2)
210c0194:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
210c0198:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
210c019c:	00bffd16 	blt	zero,r2,210c0194 <__flash_rwdata_start+0xfffee89c>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
210c01a0:	06c80034 	movhi	sp,8192
    ori sp, sp, %lo(__alt_stack_pointer)
210c01a4:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
210c01a8:	06840034 	movhi	gp,4096
    ori gp, gp, %lo(_gp)
210c01ac:	d6a92214 	ori	gp,gp,42120
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
210c01b0:	00840034 	movhi	r2,4096
    ori r2, r2, %lo(__bss_start)
210c01b4:	10893614 	ori	r2,r2,9432

    movhi r3, %hi(__bss_end)
210c01b8:	00c40034 	movhi	r3,4096
    ori r3, r3, %lo(__bss_end)
210c01bc:	18c99014 	ori	r3,r3,9792

    beq r2, r3, 1f
210c01c0:	10c00326 	beq	r2,r3,210c01d0 <_start+0x40>

0:
    stw zero, (r2)
210c01c4:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
210c01c8:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
210c01cc:	10fffd36 	bltu	r2,r3,210c01c4 <__flash_rwdata_start+0xfffee8cc>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
210c01d0:	10ce3240 	call	210ce324 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
210c01d4:	10ce4780 	call	210ce478 <alt_main>

210c01d8 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
210c01d8:	003fff06 	br	210c01d8 <__flash_rwdata_start+0xfffee8e0>

210c01dc <error_and_exit>:

#include <stdio.h>
#include <stdlib.h>
#include "util.h"

void error_and_exit(const char* str){
210c01dc:	200b883a 	mov	r5,r4
    printf("Error: %s\n", str);
210c01e0:	01040034 	movhi	r4,4096

#include <stdio.h>
#include <stdlib.h>
#include "util.h"

void error_and_exit(const char* str){
210c01e4:	deffff04 	addi	sp,sp,-4
    printf("Error: %s\n", str);
210c01e8:	21000004 	addi	r4,r4,0

#include <stdio.h>
#include <stdlib.h>
#include "util.h"

void error_and_exit(const char* str){
210c01ec:	dfc00015 	stw	ra,0(sp)
    printf("Error: %s\n", str);
210c01f0:	10c21fc0 	call	210c21fc <printf>
    exit(-1);
210c01f4:	013fffc4 	movi	r4,-1
210c01f8:	10c16a00 	call	210c16a0 <exit>

210c01fc <print_block>:
}

void print_block(pcolor_block_t b)
{
210c01fc:	defffc04 	addi	sp,sp,-16
210c0200:	dc800215 	stw	r18,8(sp)
210c0204:	dc400115 	stw	r17,4(sp)
210c0208:	dfc00315 	stw	ra,12(sp)
210c020c:	dc000015 	stw	r16,0(sp)
210c0210:	244001c4 	addi	r17,r4,7
210c0214:	248011c4 	addi	r18,r4,71
210c0218:	8c3ffe44 	addi	r16,r17,-7
    for (int row = 0; row < 8; row++)
        for(int column = 0; column < 8; column++){
            if(column != 7) printf("%d,", b[row][column]);
210c021c:	81400003 	ldbu	r5,0(r16)
210c0220:	01040034 	movhi	r4,4096
210c0224:	84000044 	addi	r16,r16,1
210c0228:	21000304 	addi	r4,r4,12
210c022c:	10c21fc0 	call	210c21fc <printf>
210c0230:	8c3ffa1e 	bne	r17,r16,210c021c <__flash_rwdata_start+0xfffee924>
            else printf("%u\n", b[row][column]);
210c0234:	89400003 	ldbu	r5,0(r17)
210c0238:	01040034 	movhi	r4,4096
210c023c:	8c400204 	addi	r17,r17,8
210c0240:	21000404 	addi	r4,r4,16
210c0244:	10c21fc0 	call	210c21fc <printf>
    exit(-1);
}

void print_block(pcolor_block_t b)
{
    for (int row = 0; row < 8; row++)
210c0248:	8cbff31e 	bne	r17,r18,210c0218 <__flash_rwdata_start+0xfffee920>
        for(int column = 0; column < 8; column++){
            if(column != 7) printf("%d,", b[row][column]);
            else printf("%u\n", b[row][column]);
        } 
}
210c024c:	dfc00317 	ldw	ra,12(sp)
210c0250:	dc800217 	ldw	r18,8(sp)
210c0254:	dc400117 	ldw	r17,4(sp)
210c0258:	dc000017 	ldw	r16,0(sp)
210c025c:	dec00404 	addi	sp,sp,16
210c0260:	f800283a 	ret

210c0264 <print_dct>:

void print_dct(pdct_block_t b)
{
210c0264:	defffc04 	addi	sp,sp,-16
210c0268:	dc800215 	stw	r18,8(sp)
210c026c:	dc400115 	stw	r17,4(sp)
210c0270:	dfc00315 	stw	ra,12(sp)
210c0274:	dc000015 	stw	r16,0(sp)
210c0278:	24400384 	addi	r17,r4,14
210c027c:	24802384 	addi	r18,r4,142
210c0280:	8c3ffc84 	addi	r16,r17,-14
    for (int row = 0; row < 8; row++)
        for(int column = 0; column < 8; column++){
            if(column != 7) printf("%d,", b[row][column]);
210c0284:	8140000f 	ldh	r5,0(r16)
210c0288:	01040034 	movhi	r4,4096
210c028c:	84000084 	addi	r16,r16,2
210c0290:	21000304 	addi	r4,r4,12
210c0294:	10c21fc0 	call	210c21fc <printf>
210c0298:	8c3ffa1e 	bne	r17,r16,210c0284 <__flash_rwdata_start+0xfffee98c>
            else printf("%d\n", b[row][column]);
210c029c:	8940000f 	ldh	r5,0(r17)
210c02a0:	01040034 	movhi	r4,4096
210c02a4:	8c400404 	addi	r17,r17,16
210c02a8:	21000504 	addi	r4,r4,20
210c02ac:	10c21fc0 	call	210c21fc <printf>
        } 
}

void print_dct(pdct_block_t b)
{
    for (int row = 0; row < 8; row++)
210c02b0:	8cbff31e 	bne	r17,r18,210c0280 <__flash_rwdata_start+0xfffee988>
        for(int column = 0; column < 8; column++){
            if(column != 7) printf("%d,", b[row][column]);
            else printf("%d\n", b[row][column]);
        } 
}
210c02b4:	dfc00317 	ldw	ra,12(sp)
210c02b8:	dc800217 	ldw	r18,8(sp)
210c02bc:	dc400117 	ldw	r17,4(sp)
210c02c0:	dc000017 	ldw	r16,0(sp)
210c02c4:	dec00404 	addi	sp,sp,16
210c02c8:	f800283a 	ret

210c02cc <print_bitstream>:

void print_bitstream(int num_bytes, void* bitstream)
{
    for (int index = 0; index < num_bytes; index++)
210c02cc:	01001d0e 	bge	zero,r4,210c0344 <print_bitstream+0x78>
            else printf("%d\n", b[row][column]);
        } 
}

void print_bitstream(int num_bytes, void* bitstream)
{
210c02d0:	defffb04 	addi	sp,sp,-20
210c02d4:	dcc00315 	stw	r19,12(sp)
210c02d8:	dc800215 	stw	r18,8(sp)
210c02dc:	dc400115 	stw	r17,4(sp)
210c02e0:	dfc00415 	stw	ra,16(sp)
210c02e4:	dc000015 	stw	r16,0(sp)
210c02e8:	2823883a 	mov	r17,r5
210c02ec:	2927883a 	add	r19,r5,r4
    for (int index = 0; index < num_bytes; index++)
        for(int x = 0; x < 8 ; x++)
210c02f0:	04800204 	movi	r18,8
            else printf("%d\n", b[row][column]);
        } 
}

void print_bitstream(int num_bytes, void* bitstream)
{
210c02f4:	0021883a 	mov	r16,zero
    for (int index = 0; index < num_bytes; index++)
        for(int x = 0; x < 8 ; x++)
            printf("%u", (uint8_t)((((uint8_t*)bitstream)[index]) << x) >> 7);
210c02f8:	89400003 	ldbu	r5,0(r17)
210c02fc:	01040034 	movhi	r4,4096
210c0300:	21000604 	addi	r4,r4,24
210c0304:	2c0a983a 	sll	r5,r5,r16
}

void print_bitstream(int num_bytes, void* bitstream)
{
    for (int index = 0; index < num_bytes; index++)
        for(int x = 0; x < 8 ; x++)
210c0308:	84000044 	addi	r16,r16,1
            printf("%u", (uint8_t)((((uint8_t*)bitstream)[index]) << x) >> 7);
210c030c:	29403fcc 	andi	r5,r5,255
210c0310:	280ad1fa 	srli	r5,r5,7
210c0314:	10c21fc0 	call	210c21fc <printf>
}

void print_bitstream(int num_bytes, void* bitstream)
{
    for (int index = 0; index < num_bytes; index++)
        for(int x = 0; x < 8 ; x++)
210c0318:	84bff71e 	bne	r16,r18,210c02f8 <__flash_rwdata_start+0xfffeea00>
210c031c:	8c400044 	addi	r17,r17,1
        } 
}

void print_bitstream(int num_bytes, void* bitstream)
{
    for (int index = 0; index < num_bytes; index++)
210c0320:	8cfff41e 	bne	r17,r19,210c02f4 <__flash_rwdata_start+0xfffee9fc>
        for(int x = 0; x < 8 ; x++)
            printf("%u", (uint8_t)((((uint8_t*)bitstream)[index]) << x) >> 7);
    printf("\n");
210c0324:	01000284 	movi	r4,10
}
210c0328:	dfc00417 	ldw	ra,16(sp)
210c032c:	dcc00317 	ldw	r19,12(sp)
210c0330:	dc800217 	ldw	r18,8(sp)
210c0334:	dc400117 	ldw	r17,4(sp)
210c0338:	dc000017 	ldw	r16,0(sp)
210c033c:	dec00504 	addi	sp,sp,20
void print_bitstream(int num_bytes, void* bitstream)
{
    for (int index = 0; index < num_bytes; index++)
        for(int x = 0; x < 8 ; x++)
            printf("%u", (uint8_t)((((uint8_t*)bitstream)[index]) << x) >> 7);
    printf("\n");
210c0340:	10c22401 	jmpi	210c2240 <putchar>
210c0344:	01000284 	movi	r4,10
210c0348:	10c22401 	jmpi	210c2240 <putchar>

210c034c <idct>:
/* normalize the result between 0 and 255 */
/* this is required to handle precision errors that might cause the decoded result to fall out of range */
#define NORMALIZE(x) (temp = (x), ( (temp < 0) ? 0 : ( (temp > 255) ? 255 : temp  ) ) )

void idct(pdct_block_t DCAC, pcolor_block_t block)
{
210c034c:	deffa904 	addi	sp,sp,-348
210c0350:	20800404 	addi	r2,r4,16
210c0354:	d8c03804 	addi	r3,sp,224
210c0358:	dc804f15 	stw	r18,316(sp)
210c035c:	d8804815 	stw	r2,288(sp)
210c0360:	1025883a 	mov	r18,r2
210c0364:	d8c04715 	stw	r3,284(sp)
210c0368:	d9c00804 	addi	r7,sp,32
210c036c:	da003004 	addi	r8,sp,192
210c0370:	dac01004 	addi	r11,sp,64
210c0374:	dbc02804 	addi	r15,sp,160
210c0378:	d8801804 	addi	r2,sp,96
210c037c:	d8c02004 	addi	r3,sp,128
210c0380:	df005515 	stw	fp,340(sp)
210c0384:	ddc05415 	stw	r23,336(sp)
210c0388:	dd805315 	stw	r22,332(sp)
210c038c:	dd405215 	stw	r21,328(sp)
210c0390:	dd005115 	stw	r20,324(sp)
210c0394:	dcc05015 	stw	r19,320(sp)
210c0398:	dfc05615 	stw	ra,344(sp)
210c039c:	dc404e15 	stw	r17,312(sp)
210c03a0:	dc004d15 	stw	r16,308(sp)
210c03a4:	d9404915 	stw	r5,292(sp)
210c03a8:	27000804 	addi	fp,r4,32
210c03ac:	25c01804 	addi	r23,r4,96
210c03b0:	25801004 	addi	r22,r4,64
210c03b4:	25401c04 	addi	r21,r4,112
210c03b8:	25001404 	addi	r20,r4,80
210c03bc:	24c00c04 	addi	r19,r4,48
210c03c0:	d9c04615 	stw	r7,280(sp)
210c03c4:	da004515 	stw	r8,276(sp)
210c03c8:	dac04415 	stw	r11,272(sp)
210c03cc:	dbc04315 	stw	r15,268(sp)
210c03d0:	d8804215 	stw	r2,264(sp)
210c03d4:	d8c04115 	stw	r3,260(sp)
    /* Pass 1: process columns from input, store into work array. */
    /* Note results are scaled up by sqrt(8) compared to a true IDCT; */
    /* furthermore, we scale the results by 2**PASS1_BITS. */
    
    inptr = DCAC[0];
    wsptr = workspace;
210c03d8:	dec04015 	stw	sp,256(sp)
        /* Odd part per figure 8; the matrix is unitary and hence its
         * transpose is its inverse.  i0..i3 are y7,y5,y3,y1 respectively.
         */
        
        tmp0 = inptr[DCTSIZE*7];
        tmp1 =inptr[DCTSIZE*5];
210c03dc:	a300000f 	ldh	r12,0(r20)
        
        /* Odd part per figure 8; the matrix is unitary and hence its
         * transpose is its inverse.  i0..i3 are y7,y5,y3,y1 respectively.
         */
        
        tmp0 = inptr[DCTSIZE*7];
210c03e0:	aac0000f 	ldh	r11,0(r21)
        tmp1 =inptr[DCTSIZE*5];
        tmp2 = inptr[DCTSIZE*3];
210c03e4:	9b80000f 	ldh	r14,0(r19)
        tmp3 = inptr[DCTSIZE*1];
210c03e8:	90c0000f 	ldh	r3,0(r18)
    for (ctr = DCTSIZE; ctr > 0; ctr--) {
        
        /* Even part: reverse the even part of the forward DCT. */
        /* The rotator is sqrt(2)*c(-6). */
        
        z2 = inptr[DCTSIZE*2];
210c03ec:	e240000f 	ldh	r9,0(fp)
        z3 = inptr[DCTSIZE*6];
210c03f0:	ba80000f 	ldh	r10,0(r23)
        tmp2 = inptr[DCTSIZE*3];
        tmp3 = inptr[DCTSIZE*1];
        
        z1 = tmp0 + tmp3;
        z2 = tmp1 + tmp2;
        z3 = tmp0 + tmp2;
210c03f4:	5b8d883a 	add	r6,r11,r14
        z4 = tmp1 + tmp3;
210c03f8:	60c5883a 	add	r2,r12,r3
        
        z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
        tmp2 = z1 + MULTIPLY(z3, - FIX_1_847759065);
        tmp3 = z1 + MULTIPLY(z2, FIX_0_765366865);
        
        z2 = inptr[DCTSIZE*0];
210c03fc:	2440000f 	ldh	r17,0(r4)
        z3 = inptr[DCTSIZE*4];
210c0400:	b200000f 	ldh	r8,0(r22)
        
        z1 = tmp0 + tmp3;
        z2 = tmp1 + tmp2;
        z3 = tmp0 + tmp2;
        z4 = tmp1 + tmp3;
        z5 = MULTIPLY(z3 + z4, FIX_1_175875602); /* sqrt(2) * c3 */
210c0404:	309b883a 	add	r13,r6,r2
210c0408:	6b496864 	muli	r13,r13,9633
        tmp0 = inptr[DCTSIZE*7];
        tmp1 =inptr[DCTSIZE*5];
        tmp2 = inptr[DCTSIZE*3];
        tmp3 = inptr[DCTSIZE*1];
        
        z1 = tmp0 + tmp3;
210c040c:	58df883a 	add	r15,r11,r3
        tmp2 = MULTIPLY(tmp2, FIX_3_072711026); /* sqrt(2) * ( c1+c3+c5-c7) */
        tmp3 = MULTIPLY(tmp3, FIX_1_501321110); /* sqrt(2) * ( c1+c3-c5-c7) */
        z1 = MULTIPLY(z1, - FIX_0_899976223); /* sqrt(2) * (c7-c3) */
        z2 = MULTIPLY(z2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
        z3 = MULTIPLY(z3, - FIX_1_961570560); /* sqrt(2) * (-c3-c5) */
        z4 = MULTIPLY(z4, - FIX_0_390180644); /* sqrt(2) * (c5-c3) */
210c0410:	10bce124 	muli	r2,r2,-3196
        /* The rotator is sqrt(2)*c(-6). */
        
        z2 = inptr[DCTSIZE*2];
        z3 = inptr[DCTSIZE*6];
        
        z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
210c0414:	4abf883a 	add	ra,r9,r10
        
        tmp0 = MULTIPLY(tmp0, FIX_0_298631336); /* sqrt(2) * (-c1+c3+c5-c7) */
        tmp1 = MULTIPLY(tmp1, FIX_2_053119869); /* sqrt(2) * ( c1+c3-c5+c7) */
        tmp2 = MULTIPLY(tmp2, FIX_3_072711026); /* sqrt(2) * ( c1+c3+c5-c7) */
        tmp3 = MULTIPLY(tmp3, FIX_1_501321110); /* sqrt(2) * ( c1+c3-c5-c7) */
        z1 = MULTIPLY(z1, - FIX_0_899976223); /* sqrt(2) * (c7-c3) */
210c0418:	7bf8cce4 	muli	r15,r15,-7373
        tmp1 =inptr[DCTSIZE*5];
        tmp2 = inptr[DCTSIZE*3];
        tmp3 = inptr[DCTSIZE*1];
        
        z1 = tmp0 + tmp3;
        z2 = tmp1 + tmp2;
210c041c:	63a1883a 	add	r16,r12,r14
        tmp1 = MULTIPLY(tmp1, FIX_2_053119869); /* sqrt(2) * ( c1+c3-c5+c7) */
        tmp2 = MULTIPLY(tmp2, FIX_3_072711026); /* sqrt(2) * ( c1+c3+c5-c7) */
        tmp3 = MULTIPLY(tmp3, FIX_1_501321110); /* sqrt(2) * ( c1+c3-c5-c7) */
        z1 = MULTIPLY(z1, - FIX_0_899976223); /* sqrt(2) * (c7-c3) */
        z2 = MULTIPLY(z2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
        z3 = MULTIPLY(z3, - FIX_1_961570560); /* sqrt(2) * (-c3-c5) */
210c0420:	31b04ee4 	muli	r6,r6,-16069
        /* The rotator is sqrt(2)*c(-6). */
        
        z2 = inptr[DCTSIZE*2];
        z3 = inptr[DCTSIZE*6];
        
        z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
210c0424:	ffc45464 	muli	ra,ra,4433
        tmp3 = z1 + MULTIPLY(z2, FIX_0_765366865);
        
        z2 = inptr[DCTSIZE*0];
        z3 = inptr[DCTSIZE*4];
        
        tmp0 = (z2 + z3) << CONST_BITS;
210c0428:	8a0b883a 	add	r5,r17,r8
        tmp0 = MULTIPLY(tmp0, FIX_0_298631336); /* sqrt(2) * (-c1+c3+c5-c7) */
        tmp1 = MULTIPLY(tmp1, FIX_2_053119869); /* sqrt(2) * ( c1+c3-c5+c7) */
        tmp2 = MULTIPLY(tmp2, FIX_3_072711026); /* sqrt(2) * ( c1+c3+c5-c7) */
        tmp3 = MULTIPLY(tmp3, FIX_1_501321110); /* sqrt(2) * ( c1+c3-c5-c7) */
        z1 = MULTIPLY(z1, - FIX_0_899976223); /* sqrt(2) * (c7-c3) */
        z2 = MULTIPLY(z2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
210c042c:	842b7f64 	muli	r16,r16,-20995
        
        z2 = inptr[DCTSIZE*0];
        z3 = inptr[DCTSIZE*4];
        
        tmp0 = (z2 + z3) << CONST_BITS;
        tmp1 = (z2 - z3) << CONST_BITS;
210c0430:	8a11c83a 	sub	r8,r17,r8
        z2 = inptr[DCTSIZE*2];
        z3 = inptr[DCTSIZE*6];
        
        z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
        tmp2 = z1 + MULTIPLY(z3, - FIX_1_847759065);
        tmp3 = z1 + MULTIPLY(z2, FIX_0_765366865);
210c0434:	4a461fa4 	muli	r9,r9,6270
        z5 = MULTIPLY(z3 + z4, FIX_1_175875602); /* sqrt(2) * c3 */
        
        tmp0 = MULTIPLY(tmp0, FIX_0_298631336); /* sqrt(2) * (-c1+c3+c5-c7) */
        tmp1 = MULTIPLY(tmp1, FIX_2_053119869); /* sqrt(2) * ( c1+c3-c5+c7) */
        tmp2 = MULTIPLY(tmp2, FIX_3_072711026); /* sqrt(2) * ( c1+c3+c5-c7) */
        tmp3 = MULTIPLY(tmp3, FIX_1_501321110); /* sqrt(2) * ( c1+c3-c5-c7) */
210c0438:	18cc02e4 	muli	r3,r3,12299
        
        z2 = inptr[DCTSIZE*2];
        z3 = inptr[DCTSIZE*6];
        
        z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
        tmp2 = z1 + MULTIPLY(z3, - FIX_1_847759065);
210c043c:	52b137e4 	muli	r10,r10,-15137
        z2 = MULTIPLY(z2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
        z3 = MULTIPLY(z3, - FIX_1_961570560); /* sqrt(2) * (-c3-c5) */
        z4 = MULTIPLY(z4, - FIX_0_390180644); /* sqrt(2) * (c5-c3) */
        
        z3 += z5;
        z4 += z5;
210c0440:	1345883a 	add	r2,r2,r13
        
        z2 = inptr[DCTSIZE*0];
        z3 = inptr[DCTSIZE*4];
        
        tmp0 = (z2 + z3) << CONST_BITS;
        tmp1 = (z2 - z3) << CONST_BITS;
210c0444:	4010937a 	slli	r8,r8,13
        tmp3 = z1 + MULTIPLY(z2, FIX_0_765366865);
        
        z2 = inptr[DCTSIZE*0];
        z3 = inptr[DCTSIZE*4];
        
        tmp0 = (z2 + z3) << CONST_BITS;
210c0448:	280a937a 	slli	r5,r5,13
        z4 = tmp1 + tmp3;
        z5 = MULTIPLY(z3 + z4, FIX_1_175875602); /* sqrt(2) * c3 */
        
        tmp0 = MULTIPLY(tmp0, FIX_0_298631336); /* sqrt(2) * (-c1+c3+c5-c7) */
        tmp1 = MULTIPLY(tmp1, FIX_2_053119869); /* sqrt(2) * ( c1+c3-c5+c7) */
        tmp2 = MULTIPLY(tmp2, FIX_3_072711026); /* sqrt(2) * ( c1+c3+c5-c7) */
210c044c:	73989524 	muli	r14,r14,25172
        z4 += z5;
        
        tmp0 += z1 + z3;
        tmp1 += z2 + z4;
        tmp2 += z2 + z3;
        tmp3 += z1 + z4;
210c0450:	788f883a 	add	r7,r15,r2
        z1 = MULTIPLY(z1, - FIX_0_899976223); /* sqrt(2) * (c7-c3) */
        z2 = MULTIPLY(z2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
        z3 = MULTIPLY(z3, - FIX_1_961570560); /* sqrt(2) * (-c3-c5) */
        z4 = MULTIPLY(z4, - FIX_0_390180644); /* sqrt(2) * (c5-c3) */
        
        z3 += z5;
210c0454:	334d883a 	add	r6,r6,r13
        z2 = inptr[DCTSIZE*2];
        z3 = inptr[DCTSIZE*6];
        
        z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
        tmp2 = z1 + MULTIPLY(z3, - FIX_1_847759065);
        tmp3 = z1 + MULTIPLY(z2, FIX_0_765366865);
210c0458:	4fd3883a 	add	r9,r9,ra
        z4 += z5;
        
        tmp0 += z1 + z3;
        tmp1 += z2 + z4;
        tmp2 += z2 + z3;
        tmp3 += z1 + z4;
210c045c:	38c7883a 	add	r3,r7,r3
        
        z2 = inptr[DCTSIZE*2];
        z3 = inptr[DCTSIZE*6];
        
        z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
        tmp2 = z1 + MULTIPLY(z3, - FIX_1_847759065);
210c0460:	57d5883a 	add	r10,r10,ra
        z3 += z5;
        z4 += z5;
        
        tmp0 += z1 + z3;
        tmp1 += z2 + z4;
        tmp2 += z2 + z3;
210c0464:	818f883a 	add	r7,r16,r6
        tmp0 = (z2 + z3) << CONST_BITS;
        tmp1 = (z2 - z3) << CONST_BITS;
        
        tmp10 = tmp0 + tmp3;
        tmp13 = tmp0 - tmp3;
        tmp11 = tmp1 + tmp2;
210c0468:	42bf883a 	add	ra,r8,r10
        z3 = inptr[DCTSIZE*4];
        
        tmp0 = (z2 + z3) << CONST_BITS;
        tmp1 = (z2 - z3) << CONST_BITS;
        
        tmp10 = tmp0 + tmp3;
210c046c:	2a63883a 	add	r17,r5,r9
        z3 += z5;
        z4 += z5;
        
        tmp0 += z1 + z3;
        tmp1 += z2 + z4;
        tmp2 += z2 + z3;
210c0470:	3b8f883a 	add	r7,r7,r14
        z3 = tmp0 + tmp2;
        z4 = tmp1 + tmp3;
        z5 = MULTIPLY(z3 + z4, FIX_1_175875602); /* sqrt(2) * c3 */
        
        tmp0 = MULTIPLY(tmp0, FIX_0_298631336); /* sqrt(2) * (-c1+c3+c5-c7) */
        tmp1 = MULTIPLY(tmp1, FIX_2_053119869); /* sqrt(2) * ( c1+c3-c5+c7) */
210c0474:	63506ce4 	muli	r13,r12,16819
        
        /* Final output stage: inputs are tmp10..tmp13, tmp0..tmp3 */
        
        wsptr[DCTSIZE*0] = (int32_t) DESCALE(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
        wsptr[DCTSIZE*7] = (int32_t) DESCALE(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
        wsptr[DCTSIZE*1] = (int32_t) DESCALE(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
210c0478:	f9dd883a 	add	r14,ra,r7
        tmp2 += z2 + z3;
        tmp3 += z1 + z4;
        
        /* Final output stage: inputs are tmp10..tmp13, tmp0..tmp3 */
        
        wsptr[DCTSIZE*0] = (int32_t) DESCALE(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
210c047c:	88d9883a 	add	r12,r17,r3
        tmp1 = (z2 - z3) << CONST_BITS;
        
        tmp10 = tmp0 + tmp3;
        tmp13 = tmp0 - tmp3;
        tmp11 = tmp1 + tmp2;
        tmp12 = tmp1 - tmp2;
210c0480:	4295c83a 	sub	r10,r8,r10
        tmp2 += z2 + z3;
        tmp3 += z1 + z4;
        
        /* Final output stage: inputs are tmp10..tmp13, tmp0..tmp3 */
        
        wsptr[DCTSIZE*0] = (int32_t) DESCALE(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
210c0484:	63010004 	addi	r12,r12,1024
        wsptr[DCTSIZE*7] = (int32_t) DESCALE(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
        wsptr[DCTSIZE*1] = (int32_t) DESCALE(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
210c0488:	72010004 	addi	r8,r14,1024
        tmp3 += z1 + z4;
        
        /* Final output stage: inputs are tmp10..tmp13, tmp0..tmp3 */
        
        wsptr[DCTSIZE*0] = (int32_t) DESCALE(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
        wsptr[DCTSIZE*7] = (int32_t) DESCALE(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
210c048c:	88c7c83a 	sub	r3,r17,r3
        wsptr[DCTSIZE*1] = (int32_t) DESCALE(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
210c0490:	401dd2fa 	srai	r14,r8,11
        tmp2 += z2 + z3;
        tmp3 += z1 + z4;
        
        /* Final output stage: inputs are tmp10..tmp13, tmp0..tmp3 */
        
        wsptr[DCTSIZE*0] = (int32_t) DESCALE(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
210c0494:	6019d2fa 	srai	r12,r12,11
210c0498:	da004017 	ldw	r8,256(sp)
        wsptr[DCTSIZE*7] = (int32_t) DESCALE(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
210c049c:	18c10004 	addi	r3,r3,1024
        z4 = MULTIPLY(z4, - FIX_0_390180644); /* sqrt(2) * (c5-c3) */
        
        z3 += z5;
        z4 += z5;
        
        tmp0 += z1 + z3;
210c04a0:	798d883a 	add	r6,r15,r6
        tmp3 += z1 + z4;
        
        /* Final output stage: inputs are tmp10..tmp13, tmp0..tmp3 */
        
        wsptr[DCTSIZE*0] = (int32_t) DESCALE(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
        wsptr[DCTSIZE*7] = (int32_t) DESCALE(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
210c04a4:	1807d2fa 	srai	r3,r3,11
210c04a8:	dbc04717 	ldw	r15,284(sp)
        z2 = tmp1 + tmp2;
        z3 = tmp0 + tmp2;
        z4 = tmp1 + tmp3;
        z5 = MULTIPLY(z3 + z4, FIX_1_175875602); /* sqrt(2) * c3 */
        
        tmp0 = MULTIPLY(tmp0, FIX_0_298631336); /* sqrt(2) * (-c1+c3+c5-c7) */
210c04ac:	5ac263a4 	muli	r11,r11,2446
        
        z3 += z5;
        z4 += z5;
        
        tmp0 += z1 + z3;
        tmp1 += z2 + z4;
210c04b0:	8085883a 	add	r2,r16,r2
        tmp2 += z2 + z3;
        tmp3 += z1 + z4;
        
        /* Final output stage: inputs are tmp10..tmp13, tmp0..tmp3 */
        
        wsptr[DCTSIZE*0] = (int32_t) DESCALE(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
210c04b4:	43000015 	stw	r12,0(r8)
        
        z3 += z5;
        z4 += z5;
        
        tmp0 += z1 + z3;
        tmp1 += z2 + z4;
210c04b8:	1345883a 	add	r2,r2,r13
        /* Final output stage: inputs are tmp10..tmp13, tmp0..tmp3 */
        
        wsptr[DCTSIZE*0] = (int32_t) DESCALE(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
        wsptr[DCTSIZE*7] = (int32_t) DESCALE(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
        wsptr[DCTSIZE*1] = (int32_t) DESCALE(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
        wsptr[DCTSIZE*6] = (int32_t) DESCALE(tmp11 - tmp2, CONST_BITS-PASS1_BITS);
210c04bc:	f9cfc83a 	sub	r7,ra,r7
        tmp3 += z1 + z4;
        
        /* Final output stage: inputs are tmp10..tmp13, tmp0..tmp3 */
        
        wsptr[DCTSIZE*0] = (int32_t) DESCALE(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
        wsptr[DCTSIZE*7] = (int32_t) DESCALE(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
210c04c0:	78c00015 	stw	r3,0(r15)
        wsptr[DCTSIZE*1] = (int32_t) DESCALE(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
        wsptr[DCTSIZE*6] = (int32_t) DESCALE(tmp11 - tmp2, CONST_BITS-PASS1_BITS);
        wsptr[DCTSIZE*2] = (int32_t) DESCALE(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
210c04c4:	509b883a 	add	r13,r10,r2
        
        /* Final output stage: inputs are tmp10..tmp13, tmp0..tmp3 */
        
        wsptr[DCTSIZE*0] = (int32_t) DESCALE(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
        wsptr[DCTSIZE*7] = (int32_t) DESCALE(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
        wsptr[DCTSIZE*1] = (int32_t) DESCALE(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
210c04c8:	d8c04617 	ldw	r3,280(sp)
        wsptr[DCTSIZE*6] = (int32_t) DESCALE(tmp11 - tmp2, CONST_BITS-PASS1_BITS);
210c04cc:	39c10004 	addi	r7,r7,1024
        z4 = MULTIPLY(z4, - FIX_0_390180644); /* sqrt(2) * (c5-c3) */
        
        z3 += z5;
        z4 += z5;
        
        tmp0 += z1 + z3;
210c04d0:	32d7883a 	add	r11,r6,r11
        /* Final output stage: inputs are tmp10..tmp13, tmp0..tmp3 */
        
        wsptr[DCTSIZE*0] = (int32_t) DESCALE(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
        wsptr[DCTSIZE*7] = (int32_t) DESCALE(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
        wsptr[DCTSIZE*1] = (int32_t) DESCALE(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
        wsptr[DCTSIZE*6] = (int32_t) DESCALE(tmp11 - tmp2, CONST_BITS-PASS1_BITS);
210c04d4:	da004517 	ldw	r8,276(sp)
        
        tmp0 = (z2 + z3) << CONST_BITS;
        tmp1 = (z2 - z3) << CONST_BITS;
        
        tmp10 = tmp0 + tmp3;
        tmp13 = tmp0 - tmp3;
210c04d8:	2a4bc83a 	sub	r5,r5,r9
        /* Final output stage: inputs are tmp10..tmp13, tmp0..tmp3 */
        
        wsptr[DCTSIZE*0] = (int32_t) DESCALE(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
        wsptr[DCTSIZE*7] = (int32_t) DESCALE(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
        wsptr[DCTSIZE*1] = (int32_t) DESCALE(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
        wsptr[DCTSIZE*6] = (int32_t) DESCALE(tmp11 - tmp2, CONST_BITS-PASS1_BITS);
210c04dc:	380fd2fa 	srai	r7,r7,11
        wsptr[DCTSIZE*2] = (int32_t) DESCALE(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
        wsptr[DCTSIZE*5] = (int32_t) DESCALE(tmp12 - tmp1, CONST_BITS-PASS1_BITS);
210c04e0:	5095c83a 	sub	r10,r10,r2
        
        wsptr[DCTSIZE*0] = (int32_t) DESCALE(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
        wsptr[DCTSIZE*7] = (int32_t) DESCALE(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
        wsptr[DCTSIZE*1] = (int32_t) DESCALE(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
        wsptr[DCTSIZE*6] = (int32_t) DESCALE(tmp11 - tmp2, CONST_BITS-PASS1_BITS);
        wsptr[DCTSIZE*2] = (int32_t) DESCALE(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
210c04e4:	69810004 	addi	r6,r13,1024
        wsptr[DCTSIZE*5] = (int32_t) DESCALE(tmp12 - tmp1, CONST_BITS-PASS1_BITS);
        wsptr[DCTSIZE*3] = (int32_t) DESCALE(tmp13 + tmp0, CONST_BITS-PASS1_BITS);
210c04e8:	2ac5883a 	add	r2,r5,r11
        
        wsptr[DCTSIZE*0] = (int32_t) DESCALE(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
        wsptr[DCTSIZE*7] = (int32_t) DESCALE(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
        wsptr[DCTSIZE*1] = (int32_t) DESCALE(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
        wsptr[DCTSIZE*6] = (int32_t) DESCALE(tmp11 - tmp2, CONST_BITS-PASS1_BITS);
        wsptr[DCTSIZE*2] = (int32_t) DESCALE(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
210c04ec:	301bd2fa 	srai	r13,r6,11
        wsptr[DCTSIZE*5] = (int32_t) DESCALE(tmp12 - tmp1, CONST_BITS-PASS1_BITS);
        wsptr[DCTSIZE*3] = (int32_t) DESCALE(tmp13 + tmp0, CONST_BITS-PASS1_BITS);
        wsptr[DCTSIZE*4] = (int32_t) DESCALE(tmp13 - tmp0, CONST_BITS-PASS1_BITS);
210c04f0:	2acbc83a 	sub	r5,r5,r11
        wsptr[DCTSIZE*0] = (int32_t) DESCALE(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
        wsptr[DCTSIZE*7] = (int32_t) DESCALE(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
        wsptr[DCTSIZE*1] = (int32_t) DESCALE(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
        wsptr[DCTSIZE*6] = (int32_t) DESCALE(tmp11 - tmp2, CONST_BITS-PASS1_BITS);
        wsptr[DCTSIZE*2] = (int32_t) DESCALE(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
        wsptr[DCTSIZE*5] = (int32_t) DESCALE(tmp12 - tmp1, CONST_BITS-PASS1_BITS);
210c04f4:	52810004 	addi	r10,r10,1024
        
        wsptr[DCTSIZE*0] = (int32_t) DESCALE(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
        wsptr[DCTSIZE*7] = (int32_t) DESCALE(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
        wsptr[DCTSIZE*1] = (int32_t) DESCALE(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
        wsptr[DCTSIZE*6] = (int32_t) DESCALE(tmp11 - tmp2, CONST_BITS-PASS1_BITS);
        wsptr[DCTSIZE*2] = (int32_t) DESCALE(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
210c04f8:	dac04417 	ldw	r11,272(sp)
        
        /* Final output stage: inputs are tmp10..tmp13, tmp0..tmp3 */
        
        wsptr[DCTSIZE*0] = (int32_t) DESCALE(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
        wsptr[DCTSIZE*7] = (int32_t) DESCALE(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
        wsptr[DCTSIZE*1] = (int32_t) DESCALE(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
210c04fc:	1b800015 	stw	r14,0(r3)
        wsptr[DCTSIZE*6] = (int32_t) DESCALE(tmp11 - tmp2, CONST_BITS-PASS1_BITS);
        wsptr[DCTSIZE*2] = (int32_t) DESCALE(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
        wsptr[DCTSIZE*5] = (int32_t) DESCALE(tmp12 - tmp1, CONST_BITS-PASS1_BITS);
210c0500:	dbc04317 	ldw	r15,268(sp)
210c0504:	5015d2fa 	srai	r10,r10,11
        wsptr[DCTSIZE*3] = (int32_t) DESCALE(tmp13 + tmp0, CONST_BITS-PASS1_BITS);
210c0508:	10810004 	addi	r2,r2,1024
        /* Final output stage: inputs are tmp10..tmp13, tmp0..tmp3 */
        
        wsptr[DCTSIZE*0] = (int32_t) DESCALE(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
        wsptr[DCTSIZE*7] = (int32_t) DESCALE(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
        wsptr[DCTSIZE*1] = (int32_t) DESCALE(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
        wsptr[DCTSIZE*6] = (int32_t) DESCALE(tmp11 - tmp2, CONST_BITS-PASS1_BITS);
210c050c:	41c00015 	stw	r7,0(r8)
        wsptr[DCTSIZE*2] = (int32_t) DESCALE(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
        wsptr[DCTSIZE*5] = (int32_t) DESCALE(tmp12 - tmp1, CONST_BITS-PASS1_BITS);
        wsptr[DCTSIZE*3] = (int32_t) DESCALE(tmp13 + tmp0, CONST_BITS-PASS1_BITS);
210c0510:	d8c04217 	ldw	r3,264(sp)
210c0514:	1005d2fa 	srai	r2,r2,11
        
        wsptr[DCTSIZE*0] = (int32_t) DESCALE(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
        wsptr[DCTSIZE*7] = (int32_t) DESCALE(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
        wsptr[DCTSIZE*1] = (int32_t) DESCALE(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
        wsptr[DCTSIZE*6] = (int32_t) DESCALE(tmp11 - tmp2, CONST_BITS-PASS1_BITS);
        wsptr[DCTSIZE*2] = (int32_t) DESCALE(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
210c0518:	5b400015 	stw	r13,0(r11)
        wsptr[DCTSIZE*5] = (int32_t) DESCALE(tmp12 - tmp1, CONST_BITS-PASS1_BITS);
210c051c:	7a800015 	stw	r10,0(r15)
        wsptr[DCTSIZE*3] = (int32_t) DESCALE(tmp13 + tmp0, CONST_BITS-PASS1_BITS);
210c0520:	18800015 	stw	r2,0(r3)
        wsptr[DCTSIZE*4] = (int32_t) DESCALE(tmp13 - tmp0, CONST_BITS-PASS1_BITS);
        
        inptr++;			/* advance pointers to next column */
        wsptr++;
210c0524:	da004017 	ldw	r8,256(sp)
210c0528:	dac04717 	ldw	r11,284(sp)
210c052c:	dbc04617 	ldw	r15,280(sp)
210c0530:	d8804517 	ldw	r2,276(sp)
        wsptr[DCTSIZE*1] = (int32_t) DESCALE(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
        wsptr[DCTSIZE*6] = (int32_t) DESCALE(tmp11 - tmp2, CONST_BITS-PASS1_BITS);
        wsptr[DCTSIZE*2] = (int32_t) DESCALE(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
        wsptr[DCTSIZE*5] = (int32_t) DESCALE(tmp12 - tmp1, CONST_BITS-PASS1_BITS);
        wsptr[DCTSIZE*3] = (int32_t) DESCALE(tmp13 + tmp0, CONST_BITS-PASS1_BITS);
        wsptr[DCTSIZE*4] = (int32_t) DESCALE(tmp13 - tmp0, CONST_BITS-PASS1_BITS);
210c0534:	29410004 	addi	r5,r5,1024
210c0538:	d9c04117 	ldw	r7,260(sp)
210c053c:	d8c04417 	ldw	r3,272(sp)
210c0540:	280bd2fa 	srai	r5,r5,11
        
        inptr++;			/* advance pointers to next column */
        wsptr++;
210c0544:	42000104 	addi	r8,r8,4
210c0548:	5ac00104 	addi	r11,r11,4
210c054c:	7bc00104 	addi	r15,r15,4
210c0550:	10800104 	addi	r2,r2,4
        wsptr[DCTSIZE*1] = (int32_t) DESCALE(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
        wsptr[DCTSIZE*6] = (int32_t) DESCALE(tmp11 - tmp2, CONST_BITS-PASS1_BITS);
        wsptr[DCTSIZE*2] = (int32_t) DESCALE(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
        wsptr[DCTSIZE*5] = (int32_t) DESCALE(tmp12 - tmp1, CONST_BITS-PASS1_BITS);
        wsptr[DCTSIZE*3] = (int32_t) DESCALE(tmp13 + tmp0, CONST_BITS-PASS1_BITS);
        wsptr[DCTSIZE*4] = (int32_t) DESCALE(tmp13 - tmp0, CONST_BITS-PASS1_BITS);
210c0554:	39400015 	stw	r5,0(r7)
        
        inptr++;			/* advance pointers to next column */
        wsptr++;
210c0558:	da004015 	stw	r8,256(sp)
210c055c:	dac04715 	stw	r11,284(sp)
210c0560:	dbc04615 	stw	r15,280(sp)
210c0564:	d8804515 	stw	r2,276(sp)
210c0568:	18c00104 	addi	r3,r3,4
210c056c:	d8c04415 	stw	r3,272(sp)
210c0570:	d9c04317 	ldw	r7,268(sp)
210c0574:	da004217 	ldw	r8,264(sp)
210c0578:	dac04117 	ldw	r11,260(sp)
    /* Note results are scaled up by sqrt(8) compared to a true IDCT; */
    /* furthermore, we scale the results by 2**PASS1_BITS. */
    
    inptr = DCAC[0];
    wsptr = workspace;
    for (ctr = DCTSIZE; ctr > 0; ctr--) {
210c057c:	dbc04817 	ldw	r15,288(sp)
210c0580:	39c00104 	addi	r7,r7,4
210c0584:	42000104 	addi	r8,r8,4
210c0588:	5ac00104 	addi	r11,r11,4
        wsptr[DCTSIZE*2] = (int32_t) DESCALE(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
        wsptr[DCTSIZE*5] = (int32_t) DESCALE(tmp12 - tmp1, CONST_BITS-PASS1_BITS);
        wsptr[DCTSIZE*3] = (int32_t) DESCALE(tmp13 + tmp0, CONST_BITS-PASS1_BITS);
        wsptr[DCTSIZE*4] = (int32_t) DESCALE(tmp13 - tmp0, CONST_BITS-PASS1_BITS);
        
        inptr++;			/* advance pointers to next column */
210c058c:	21000084 	addi	r4,r4,2
210c0590:	d9c04315 	stw	r7,268(sp)
210c0594:	da004215 	stw	r8,264(sp)
210c0598:	dac04115 	stw	r11,260(sp)
210c059c:	e7000084 	addi	fp,fp,2
210c05a0:	bdc00084 	addi	r23,r23,2
210c05a4:	b5800084 	addi	r22,r22,2
210c05a8:	ad400084 	addi	r21,r21,2
210c05ac:	a5000084 	addi	r20,r20,2
210c05b0:	9cc00084 	addi	r19,r19,2
210c05b4:	94800084 	addi	r18,r18,2
    /* Note results are scaled up by sqrt(8) compared to a true IDCT; */
    /* furthermore, we scale the results by 2**PASS1_BITS. */
    
    inptr = DCAC[0];
    wsptr = workspace;
    for (ctr = DCTSIZE; ctr > 0; ctr--) {
210c05b8:	23ff881e 	bne	r4,r15,210c03dc <__flash_rwdata_start+0xfffeeae4>
210c05bc:	dc404917 	ldw	r17,292(sp)
210c05c0:	d8800304 	addi	r2,sp,12
210c05c4:	d8c00104 	addi	r3,sp,4
210c05c8:	dfc00204 	addi	ra,sp,8
210c05cc:	d8804815 	stw	r2,288(sp)
210c05d0:	d8c04715 	stw	r3,284(sp)
210c05d4:	89000044 	addi	r4,r17,1
210c05d8:	89c00184 	addi	r7,r17,6
210c05dc:	8a000084 	addi	r8,r17,2
210c05e0:	8ac00144 	addi	r11,r17,5
210c05e4:	8bc000c4 	addi	r15,r17,3
210c05e8:	88800104 	addi	r2,r17,4
210c05ec:	88c011c4 	addi	r3,r17,71
210c05f0:	df000604 	addi	fp,sp,24
210c05f4:	ddc00404 	addi	r23,sp,16
210c05f8:	dd800704 	addi	r22,sp,28
210c05fc:	dd400504 	addi	r21,sp,20
210c0600:	8a4001c4 	addi	r9,r17,7
210c0604:	d9004615 	stw	r4,280(sp)
210c0608:	d9c04515 	stw	r7,276(sp)
210c060c:	da004415 	stw	r8,272(sp)
210c0610:	dac04315 	stw	r11,268(sp)
210c0614:	dbc04215 	stw	r15,264(sp)
210c0618:	d8804115 	stw	r2,260(sp)
210c061c:	d8c04a15 	stw	r3,296(sp)
210c0620:	d80d883a 	mov	r6,sp
        tmp1 += z2 + z4;
        tmp2 += z2 + z3;
        tmp3 += z1 + z4;
        
        /* Final output stage: inputs are tmp10..tmp13, tmp0..tmp3 */
        outptr[0] = NORMALIZE(DESCALE(tmp10 + tmp3, CONST_BITS+PASS1_BITS+3));
210c0624:	04c000b4 	movhi	r19,2
210c0628:	05003fc4 	movi	r20,255
210c062c:	f815883a 	mov	r10,ra
210c0630:	00005f06 	br	210c07b0 <idct+0x464>
210c0634:	a1c0010e 	bge	r20,r7,210c063c <idct+0x2f0>
210c0638:	01c03fc4 	movi	r7,255
        outptr[7] = NORMALIZE(DESCALE(tmp10 - tmp3, CONST_BITS+PASS1_BITS+3));
210c063c:	2309c83a 	sub	r4,r4,r12
210c0640:	24c9883a 	add	r4,r4,r19
        tmp1 += z2 + z4;
        tmp2 += z2 + z3;
        tmp3 += z1 + z4;
        
        /* Final output stage: inputs are tmp10..tmp13, tmp0..tmp3 */
        outptr[0] = NORMALIZE(DESCALE(tmp10 + tmp3, CONST_BITS+PASS1_BITS+3));
210c0644:	dbc04917 	ldw	r15,292(sp)
        outptr[7] = NORMALIZE(DESCALE(tmp10 - tmp3, CONST_BITS+PASS1_BITS+3));
210c0648:	2009d4ba 	srai	r4,r4,18
        tmp1 += z2 + z4;
        tmp2 += z2 + z3;
        tmp3 += z1 + z4;
        
        /* Final output stage: inputs are tmp10..tmp13, tmp0..tmp3 */
        outptr[0] = NORMALIZE(DESCALE(tmp10 + tmp3, CONST_BITS+PASS1_BITS+3));
210c064c:	79c00005 	stb	r7,0(r15)
210c0650:	2000a316 	blt	r4,zero,210c08e0 <idct+0x594>
        outptr[7] = NORMALIZE(DESCALE(tmp10 - tmp3, CONST_BITS+PASS1_BITS+3));
210c0654:	a100010e 	bge	r20,r4,210c065c <idct+0x310>
210c0658:	01003fc4 	movi	r4,255
        outptr[1] = NORMALIZE(DESCALE(tmp11 + tmp2, CONST_BITS+PASS1_BITS+3));
210c065c:	6947883a 	add	r3,r13,r5
210c0660:	1cc7883a 	add	r3,r3,r19
210c0664:	1807d4ba 	srai	r3,r3,18
        tmp2 += z2 + z3;
        tmp3 += z1 + z4;
        
        /* Final output stage: inputs are tmp10..tmp13, tmp0..tmp3 */
        outptr[0] = NORMALIZE(DESCALE(tmp10 + tmp3, CONST_BITS+PASS1_BITS+3));
        outptr[7] = NORMALIZE(DESCALE(tmp10 - tmp3, CONST_BITS+PASS1_BITS+3));
210c0668:	49000005 	stb	r4,0(r9)
210c066c:	18009e16 	blt	r3,zero,210c08e8 <idct+0x59c>
        outptr[1] = NORMALIZE(DESCALE(tmp11 + tmp2, CONST_BITS+PASS1_BITS+3));
210c0670:	a0c0010e 	bge	r20,r3,210c0678 <idct+0x32c>
210c0674:	00c03fc4 	movi	r3,255
        outptr[6] = NORMALIZE(DESCALE(tmp11 - tmp2,CONST_BITS+PASS1_BITS+3));
210c0678:	694bc83a 	sub	r5,r13,r5
210c067c:	2ccb883a 	add	r5,r5,r19
        tmp3 += z1 + z4;
        
        /* Final output stage: inputs are tmp10..tmp13, tmp0..tmp3 */
        outptr[0] = NORMALIZE(DESCALE(tmp10 + tmp3, CONST_BITS+PASS1_BITS+3));
        outptr[7] = NORMALIZE(DESCALE(tmp10 - tmp3, CONST_BITS+PASS1_BITS+3));
        outptr[1] = NORMALIZE(DESCALE(tmp11 + tmp2, CONST_BITS+PASS1_BITS+3));
210c0680:	d9004617 	ldw	r4,280(sp)
        outptr[6] = NORMALIZE(DESCALE(tmp11 - tmp2,CONST_BITS+PASS1_BITS+3));
210c0684:	280bd4ba 	srai	r5,r5,18
        tmp3 += z1 + z4;
        
        /* Final output stage: inputs are tmp10..tmp13, tmp0..tmp3 */
        outptr[0] = NORMALIZE(DESCALE(tmp10 + tmp3, CONST_BITS+PASS1_BITS+3));
        outptr[7] = NORMALIZE(DESCALE(tmp10 - tmp3, CONST_BITS+PASS1_BITS+3));
        outptr[1] = NORMALIZE(DESCALE(tmp11 + tmp2, CONST_BITS+PASS1_BITS+3));
210c0688:	20c00005 	stb	r3,0(r4)
210c068c:	28009216 	blt	r5,zero,210c08d8 <idct+0x58c>
        outptr[6] = NORMALIZE(DESCALE(tmp11 - tmp2,CONST_BITS+PASS1_BITS+3));
210c0690:	a140010e 	bge	r20,r5,210c0698 <idct+0x34c>
210c0694:	01403fc4 	movi	r5,255
        outptr[2] = NORMALIZE(DESCALE(tmp12 + tmp1,CONST_BITS+PASS1_BITS+3));
210c0698:	8207883a 	add	r3,r16,r8
210c069c:	1cc7883a 	add	r3,r3,r19
        
        /* Final output stage: inputs are tmp10..tmp13, tmp0..tmp3 */
        outptr[0] = NORMALIZE(DESCALE(tmp10 + tmp3, CONST_BITS+PASS1_BITS+3));
        outptr[7] = NORMALIZE(DESCALE(tmp10 - tmp3, CONST_BITS+PASS1_BITS+3));
        outptr[1] = NORMALIZE(DESCALE(tmp11 + tmp2, CONST_BITS+PASS1_BITS+3));
        outptr[6] = NORMALIZE(DESCALE(tmp11 - tmp2,CONST_BITS+PASS1_BITS+3));
210c06a0:	d9c04517 	ldw	r7,276(sp)
        outptr[2] = NORMALIZE(DESCALE(tmp12 + tmp1,CONST_BITS+PASS1_BITS+3));
210c06a4:	1807d4ba 	srai	r3,r3,18
        
        /* Final output stage: inputs are tmp10..tmp13, tmp0..tmp3 */
        outptr[0] = NORMALIZE(DESCALE(tmp10 + tmp3, CONST_BITS+PASS1_BITS+3));
        outptr[7] = NORMALIZE(DESCALE(tmp10 - tmp3, CONST_BITS+PASS1_BITS+3));
        outptr[1] = NORMALIZE(DESCALE(tmp11 + tmp2, CONST_BITS+PASS1_BITS+3));
        outptr[6] = NORMALIZE(DESCALE(tmp11 - tmp2,CONST_BITS+PASS1_BITS+3));
210c06a8:	39400005 	stb	r5,0(r7)
210c06ac:	18008816 	blt	r3,zero,210c08d0 <idct+0x584>
        outptr[2] = NORMALIZE(DESCALE(tmp12 + tmp1,CONST_BITS+PASS1_BITS+3));
210c06b0:	a0c0010e 	bge	r20,r3,210c06b8 <idct+0x36c>
210c06b4:	00c03fc4 	movi	r3,255
        outptr[5] = NORMALIZE(DESCALE(tmp12 - tmp1,CONST_BITS+PASS1_BITS+3));
210c06b8:	8221c83a 	sub	r16,r16,r8
210c06bc:	84e1883a 	add	r16,r16,r19
        /* Final output stage: inputs are tmp10..tmp13, tmp0..tmp3 */
        outptr[0] = NORMALIZE(DESCALE(tmp10 + tmp3, CONST_BITS+PASS1_BITS+3));
        outptr[7] = NORMALIZE(DESCALE(tmp10 - tmp3, CONST_BITS+PASS1_BITS+3));
        outptr[1] = NORMALIZE(DESCALE(tmp11 + tmp2, CONST_BITS+PASS1_BITS+3));
        outptr[6] = NORMALIZE(DESCALE(tmp11 - tmp2,CONST_BITS+PASS1_BITS+3));
        outptr[2] = NORMALIZE(DESCALE(tmp12 + tmp1,CONST_BITS+PASS1_BITS+3));
210c06c0:	da004417 	ldw	r8,272(sp)
        outptr[5] = NORMALIZE(DESCALE(tmp12 - tmp1,CONST_BITS+PASS1_BITS+3));
210c06c4:	8021d4ba 	srai	r16,r16,18
        /* Final output stage: inputs are tmp10..tmp13, tmp0..tmp3 */
        outptr[0] = NORMALIZE(DESCALE(tmp10 + tmp3, CONST_BITS+PASS1_BITS+3));
        outptr[7] = NORMALIZE(DESCALE(tmp10 - tmp3, CONST_BITS+PASS1_BITS+3));
        outptr[1] = NORMALIZE(DESCALE(tmp11 + tmp2, CONST_BITS+PASS1_BITS+3));
        outptr[6] = NORMALIZE(DESCALE(tmp11 - tmp2,CONST_BITS+PASS1_BITS+3));
        outptr[2] = NORMALIZE(DESCALE(tmp12 + tmp1,CONST_BITS+PASS1_BITS+3));
210c06c8:	40c00005 	stb	r3,0(r8)
210c06cc:	80007e16 	blt	r16,zero,210c08c8 <idct+0x57c>
        outptr[5] = NORMALIZE(DESCALE(tmp12 - tmp1,CONST_BITS+PASS1_BITS+3));
210c06d0:	a400010e 	bge	r20,r16,210c06d8 <idct+0x38c>
210c06d4:	04003fc4 	movi	r16,255
        outptr[3] = NORMALIZE(DESCALE(tmp13 + tmp0,CONST_BITS+PASS1_BITS+3));
210c06d8:	1387883a 	add	r3,r2,r14
210c06dc:	1cc7883a 	add	r3,r3,r19
        outptr[0] = NORMALIZE(DESCALE(tmp10 + tmp3, CONST_BITS+PASS1_BITS+3));
        outptr[7] = NORMALIZE(DESCALE(tmp10 - tmp3, CONST_BITS+PASS1_BITS+3));
        outptr[1] = NORMALIZE(DESCALE(tmp11 + tmp2, CONST_BITS+PASS1_BITS+3));
        outptr[6] = NORMALIZE(DESCALE(tmp11 - tmp2,CONST_BITS+PASS1_BITS+3));
        outptr[2] = NORMALIZE(DESCALE(tmp12 + tmp1,CONST_BITS+PASS1_BITS+3));
        outptr[5] = NORMALIZE(DESCALE(tmp12 - tmp1,CONST_BITS+PASS1_BITS+3));
210c06e0:	dac04317 	ldw	r11,268(sp)
        outptr[3] = NORMALIZE(DESCALE(tmp13 + tmp0,CONST_BITS+PASS1_BITS+3));
210c06e4:	1807d4ba 	srai	r3,r3,18
        outptr[0] = NORMALIZE(DESCALE(tmp10 + tmp3, CONST_BITS+PASS1_BITS+3));
        outptr[7] = NORMALIZE(DESCALE(tmp10 - tmp3, CONST_BITS+PASS1_BITS+3));
        outptr[1] = NORMALIZE(DESCALE(tmp11 + tmp2, CONST_BITS+PASS1_BITS+3));
        outptr[6] = NORMALIZE(DESCALE(tmp11 - tmp2,CONST_BITS+PASS1_BITS+3));
        outptr[2] = NORMALIZE(DESCALE(tmp12 + tmp1,CONST_BITS+PASS1_BITS+3));
        outptr[5] = NORMALIZE(DESCALE(tmp12 - tmp1,CONST_BITS+PASS1_BITS+3));
210c06e8:	5c000005 	stb	r16,0(r11)
210c06ec:	18007416 	blt	r3,zero,210c08c0 <idct+0x574>
        outptr[3] = NORMALIZE(DESCALE(tmp13 + tmp0,CONST_BITS+PASS1_BITS+3));
210c06f0:	a0c0010e 	bge	r20,r3,210c06f8 <idct+0x3ac>
210c06f4:	00c03fc4 	movi	r3,255
        outptr[4] = NORMALIZE(DESCALE(tmp13 - tmp0,CONST_BITS+PASS1_BITS+3));
210c06f8:	1385c83a 	sub	r2,r2,r14
210c06fc:	14c5883a 	add	r2,r2,r19
        outptr[7] = NORMALIZE(DESCALE(tmp10 - tmp3, CONST_BITS+PASS1_BITS+3));
        outptr[1] = NORMALIZE(DESCALE(tmp11 + tmp2, CONST_BITS+PASS1_BITS+3));
        outptr[6] = NORMALIZE(DESCALE(tmp11 - tmp2,CONST_BITS+PASS1_BITS+3));
        outptr[2] = NORMALIZE(DESCALE(tmp12 + tmp1,CONST_BITS+PASS1_BITS+3));
        outptr[5] = NORMALIZE(DESCALE(tmp12 - tmp1,CONST_BITS+PASS1_BITS+3));
        outptr[3] = NORMALIZE(DESCALE(tmp13 + tmp0,CONST_BITS+PASS1_BITS+3));
210c0700:	dbc04217 	ldw	r15,264(sp)
        outptr[4] = NORMALIZE(DESCALE(tmp13 - tmp0,CONST_BITS+PASS1_BITS+3));
210c0704:	1005d4ba 	srai	r2,r2,18
        outptr[7] = NORMALIZE(DESCALE(tmp10 - tmp3, CONST_BITS+PASS1_BITS+3));
        outptr[1] = NORMALIZE(DESCALE(tmp11 + tmp2, CONST_BITS+PASS1_BITS+3));
        outptr[6] = NORMALIZE(DESCALE(tmp11 - tmp2,CONST_BITS+PASS1_BITS+3));
        outptr[2] = NORMALIZE(DESCALE(tmp12 + tmp1,CONST_BITS+PASS1_BITS+3));
        outptr[5] = NORMALIZE(DESCALE(tmp12 - tmp1,CONST_BITS+PASS1_BITS+3));
        outptr[3] = NORMALIZE(DESCALE(tmp13 + tmp0,CONST_BITS+PASS1_BITS+3));
210c0708:	78c00005 	stb	r3,0(r15)
210c070c:	10006a16 	blt	r2,zero,210c08b8 <idct+0x56c>
        outptr[4] = NORMALIZE(DESCALE(tmp13 - tmp0,CONST_BITS+PASS1_BITS+3));
210c0710:	a080010e 	bge	r20,r2,210c0718 <idct+0x3cc>
210c0714:	00803fc4 	movi	r2,255
210c0718:	d9004817 	ldw	r4,288(sp)
210c071c:	d9c04717 	ldw	r7,284(sp)
210c0720:	d8c04117 	ldw	r3,260(sp)
210c0724:	da004917 	ldw	r8,292(sp)
210c0728:	21000804 	addi	r4,r4,32
210c072c:	39c00804 	addi	r7,r7,32
210c0730:	18800005 	stb	r2,0(r3)
210c0734:	dac04617 	ldw	r11,280(sp)
210c0738:	dbc04517 	ldw	r15,276(sp)
210c073c:	d8804417 	ldw	r2,272(sp)
210c0740:	d8c04317 	ldw	r3,268(sp)
210c0744:	d9004815 	stw	r4,288(sp)
210c0748:	d9c04715 	stw	r7,284(sp)
210c074c:	d9004217 	ldw	r4,264(sp)
210c0750:	d9c04117 	ldw	r7,260(sp)
210c0754:	42000204 	addi	r8,r8,8
210c0758:	da004915 	stw	r8,292(sp)
    /* Pass 2: process rows from work array, store into output array. */
    /* Note that we must descale the results by a factor of 8 == 2**3, */
    /* and also undo the PASS1_BITS scaling. */
    
    wsptr = workspace;
    for (ctr = 0; ctr < DCTSIZE; ctr++) {
210c075c:	da004a17 	ldw	r8,296(sp)
210c0760:	5ac00204 	addi	r11,r11,8
210c0764:	7bc00204 	addi	r15,r15,8
210c0768:	10800204 	addi	r2,r2,8
210c076c:	18c00204 	addi	r3,r3,8
210c0770:	21000204 	addi	r4,r4,8
210c0774:	39c00204 	addi	r7,r7,8
210c0778:	4a400204 	addi	r9,r9,8
210c077c:	dac04615 	stw	r11,280(sp)
210c0780:	dbc04515 	stw	r15,276(sp)
210c0784:	d8804415 	stw	r2,272(sp)
210c0788:	d8c04315 	stw	r3,268(sp)
210c078c:	d9004215 	stw	r4,264(sp)
210c0790:	d9c04115 	stw	r7,260(sp)
        outptr[2] = NORMALIZE(DESCALE(tmp12 + tmp1,CONST_BITS+PASS1_BITS+3));
        outptr[5] = NORMALIZE(DESCALE(tmp12 - tmp1,CONST_BITS+PASS1_BITS+3));
        outptr[3] = NORMALIZE(DESCALE(tmp13 + tmp0,CONST_BITS+PASS1_BITS+3));
        outptr[4] = NORMALIZE(DESCALE(tmp13 - tmp0,CONST_BITS+PASS1_BITS+3));
        
        wsptr += DCTSIZE;		/* advance pointer to next row */
210c0794:	31800804 	addi	r6,r6,32
210c0798:	52800804 	addi	r10,r10,32
210c079c:	e7000804 	addi	fp,fp,32
210c07a0:	bdc00804 	addi	r23,r23,32
210c07a4:	b5800804 	addi	r22,r22,32
210c07a8:	ad400804 	addi	r21,r21,32
    /* Pass 2: process rows from work array, store into output array. */
    /* Note that we must descale the results by a factor of 8 == 2**3, */
    /* and also undo the PASS1_BITS scaling. */
    
    wsptr = workspace;
    for (ctr = 0; ctr < DCTSIZE; ctr++) {
210c07ac:	4a005026 	beq	r9,r8,210c08f0 <idct+0x5a4>
         */
        
        tmp0 = (int32_t) wsptr[7];
        tmp1 = (int32_t) wsptr[5];
        tmp2 = (int32_t) wsptr[3];
        tmp3 = (int32_t) wsptr[1];
210c07b0:	d9c04717 	ldw	r7,284(sp)
         * transpose is its inverse.  i0..i3 are y7,y5,y3,y1 respectively.
         */
        
        tmp0 = (int32_t) wsptr[7];
        tmp1 = (int32_t) wsptr[5];
        tmp2 = (int32_t) wsptr[3];
210c07b4:	d9004817 	ldw	r4,288(sp)
        tmp3 = (int32_t) wsptr[1];
        
        z1 = tmp0 + tmp3;
        z2 = tmp1 + tmp2;
        z3 = tmp0 + tmp2;
        z4 = tmp1 + tmp3;
210c07b8:	aac00017 	ldw	r11,0(r21)
         */
        
        tmp0 = (int32_t) wsptr[7];
        tmp1 = (int32_t) wsptr[5];
        tmp2 = (int32_t) wsptr[3];
        tmp3 = (int32_t) wsptr[1];
210c07bc:	3b000017 	ldw	r12,0(r7)
         * transpose is its inverse.  i0..i3 are y7,y5,y3,y1 respectively.
         */
        
        tmp0 = (int32_t) wsptr[7];
        tmp1 = (int32_t) wsptr[5];
        tmp2 = (int32_t) wsptr[3];
210c07c0:	21000017 	ldw	r4,0(r4)
        tmp3 = (int32_t) wsptr[1];
        
        z1 = tmp0 + tmp3;
        z2 = tmp1 + tmp2;
        z3 = tmp0 + tmp2;
210c07c4:	b2000017 	ldw	r8,0(r22)
        tmp0 = (int32_t) wsptr[7];
        tmp1 = (int32_t) wsptr[5];
        tmp2 = (int32_t) wsptr[3];
        tmp3 = (int32_t) wsptr[1];
        
        z1 = tmp0 + tmp3;
210c07c8:	b3c00017 	ldw	r15,0(r22)
         * transpose is its inverse.  i0..i3 are y7,y5,y3,y1 respectively.
         */
        
        tmp0 = (int32_t) wsptr[7];
        tmp1 = (int32_t) wsptr[5];
        tmp2 = (int32_t) wsptr[3];
210c07cc:	d9004b15 	stw	r4,300(sp)
        tmp3 = (int32_t) wsptr[1];
        
        z1 = tmp0 + tmp3;
        z2 = tmp1 + tmp2;
        z3 = tmp0 + tmp2;
210c07d0:	413f883a 	add	ra,r8,r4
        z4 = tmp1 + tmp3;
210c07d4:	5b11883a 	add	r8,r11,r12
        z5 = MULTIPLY(z3 + z4, FIX_1_175875602); /* sqrt(2) * c3 */
210c07d8:	fa0b883a 	add	r5,ra,r8
        
        z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
        tmp2 = z1 + MULTIPLY(z3, - FIX_1_847759065);
        tmp3 = z1 + MULTIPLY(z2, FIX_0_765366865);
        
        tmp0 = ((int32_t) wsptr[0] + (int32_t) wsptr[4]) << CONST_BITS;
210c07dc:	30c00017 	ldw	r3,0(r6)
210c07e0:	b9000017 	ldw	r4,0(r23)
        tmp1 = (int32_t) wsptr[5];
        tmp2 = (int32_t) wsptr[3];
        tmp3 = (int32_t) wsptr[1];
        
        z1 = tmp0 + tmp3;
        z2 = tmp1 + tmp2;
210c07e4:	d9c04b17 	ldw	r7,300(sp)
        tmp0 = (int32_t) wsptr[7];
        tmp1 = (int32_t) wsptr[5];
        tmp2 = (int32_t) wsptr[3];
        tmp3 = (int32_t) wsptr[1];
        
        z1 = tmp0 + tmp3;
210c07e8:	7b1d883a 	add	r14,r15,r12
        z2 = tmp1 + tmp2;
        z3 = tmp0 + tmp2;
        z4 = tmp1 + tmp3;
        z5 = MULTIPLY(z3 + z4, FIX_1_175875602); /* sqrt(2) * c3 */
210c07ec:	29496864 	muli	r5,r5,9633
        tmp2 = MULTIPLY(tmp2, FIX_3_072711026); /* sqrt(2) * ( c1+c3+c5-c7) */
        tmp3 = MULTIPLY(tmp3, FIX_1_501321110); /* sqrt(2) * ( c1+c3-c5-c7) */
        z1 = MULTIPLY(z1, - FIX_0_899976223); /* sqrt(2) * (c7-c3) */
        z2 = MULTIPLY(z2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
        z3 = MULTIPLY(z3, - FIX_1_961570560); /* sqrt(2) * (-c3-c5) */
        z4 = MULTIPLY(z4, - FIX_0_390180644); /* sqrt(2) * (c5-c3) */
210c07f0:	423ce124 	muli	r8,r8,-3196
        
        tmp0 = MULTIPLY(tmp0, FIX_0_298631336); /* sqrt(2) * (-c1+c3+c5-c7) */
        tmp1 = MULTIPLY(tmp1, FIX_2_053119869); /* sqrt(2) * ( c1+c3-c5+c7) */
        tmp2 = MULTIPLY(tmp2, FIX_3_072711026); /* sqrt(2) * ( c1+c3+c5-c7) */
        tmp3 = MULTIPLY(tmp3, FIX_1_501321110); /* sqrt(2) * ( c1+c3-c5-c7) */
        z1 = MULTIPLY(z1, - FIX_0_899976223); /* sqrt(2) * (c7-c3) */
210c07f4:	73b8cce4 	muli	r14,r14,-7373
        
        z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
        tmp2 = z1 + MULTIPLY(z3, - FIX_1_847759065);
        tmp3 = z1 + MULTIPLY(z2, FIX_0_765366865);
        
        tmp0 = ((int32_t) wsptr[0] + (int32_t) wsptr[4]) << CONST_BITS;
210c07f8:	1905883a 	add	r2,r3,r4
        tmp1 = (int32_t) wsptr[5];
        tmp2 = (int32_t) wsptr[3];
        tmp3 = (int32_t) wsptr[1];
        
        z1 = tmp0 + tmp3;
        z2 = tmp1 + tmp2;
210c07fc:	59e3883a 	add	r17,r11,r7
        z5 = MULTIPLY(z3 + z4, FIX_1_175875602); /* sqrt(2) * c3 */
        
        tmp0 = MULTIPLY(tmp0, FIX_0_298631336); /* sqrt(2) * (-c1+c3+c5-c7) */
        tmp1 = MULTIPLY(tmp1, FIX_2_053119869); /* sqrt(2) * ( c1+c3-c5+c7) */
        tmp2 = MULTIPLY(tmp2, FIX_3_072711026); /* sqrt(2) * ( c1+c3+c5-c7) */
        tmp3 = MULTIPLY(tmp3, FIX_1_501321110); /* sqrt(2) * ( c1+c3-c5-c7) */
210c0800:	60cc02e4 	muli	r3,r12,12299
        z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
        tmp2 = z1 + MULTIPLY(z3, - FIX_1_847759065);
        tmp3 = z1 + MULTIPLY(z2, FIX_0_765366865);
        
        tmp0 = ((int32_t) wsptr[0] + (int32_t) wsptr[4]) << CONST_BITS;
        tmp1 = ((int32_t) wsptr[0] - (int32_t) wsptr[4]) << CONST_BITS;
210c0804:	32c00017 	ldw	r11,0(r6)
210c0808:	bbc00017 	ldw	r15,0(r23)
        z2 = MULTIPLY(z2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
        z3 = MULTIPLY(z3, - FIX_1_961570560); /* sqrt(2) * (-c3-c5) */
        z4 = MULTIPLY(z4, - FIX_0_390180644); /* sqrt(2) * (c5-c3) */
        
        z3 += z5;
        z4 += z5;
210c080c:	4151883a 	add	r8,r8,r5
        outptr = block[ctr];
        
        /* Even part: reverse the even part of the forward DCT. */
        /* The rotator is sqrt(2)*c(-6). */
        
        z2 = (int32_t) wsptr[2];
210c0810:	53400017 	ldw	r13,0(r10)
        z3 = (int32_t) wsptr[6];
210c0814:	e4000017 	ldw	r16,0(fp)
        z4 += z5;
        
        tmp0 += z1 + z3;
        tmp1 += z2 + z4;
        tmp2 += z2 + z3;
        tmp3 += z1 + z4;
210c0818:	7219883a 	add	r12,r14,r8
210c081c:	60d9883a 	add	r12,r12,r3
        z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
        tmp2 = z1 + MULTIPLY(z3, - FIX_1_847759065);
        tmp3 = z1 + MULTIPLY(z2, FIX_0_765366865);
        
        tmp0 = ((int32_t) wsptr[0] + (int32_t) wsptr[4]) << CONST_BITS;
        tmp1 = ((int32_t) wsptr[0] - (int32_t) wsptr[4]) << CONST_BITS;
210c0820:	5bc7c83a 	sub	r3,r11,r15
        z2 = tmp1 + tmp2;
        z3 = tmp0 + tmp2;
        z4 = tmp1 + tmp3;
        z5 = MULTIPLY(z3 + z4, FIX_1_175875602); /* sqrt(2) * c3 */
        
        tmp0 = MULTIPLY(tmp0, FIX_0_298631336); /* sqrt(2) * (-c1+c3+c5-c7) */
210c0824:	b2c00017 	ldw	r11,0(r22)
        /* The rotator is sqrt(2)*c(-6). */
        
        z2 = (int32_t) wsptr[2];
        z3 = (int32_t) wsptr[6];
        
        z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
210c0828:	6c25883a 	add	r18,r13,r16
210c082c:	94845464 	muli	r18,r18,4433
        tmp2 = z1 + MULTIPLY(z3, - FIX_1_847759065);
        tmp3 = z1 + MULTIPLY(z2, FIX_0_765366865);
210c0830:	6b461fa4 	muli	r13,r13,6270
        z3 = tmp0 + tmp2;
        z4 = tmp1 + tmp3;
        z5 = MULTIPLY(z3 + z4, FIX_1_175875602); /* sqrt(2) * c3 */
        
        tmp0 = MULTIPLY(tmp0, FIX_0_298631336); /* sqrt(2) * (-c1+c3+c5-c7) */
        tmp1 = MULTIPLY(tmp1, FIX_2_053119869); /* sqrt(2) * ( c1+c3-c5+c7) */
210c0834:	abc00017 	ldw	r15,0(r21)
        
        z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
        tmp2 = z1 + MULTIPLY(z3, - FIX_1_847759065);
        tmp3 = z1 + MULTIPLY(z2, FIX_0_765366865);
        
        tmp0 = ((int32_t) wsptr[0] + (int32_t) wsptr[4]) << CONST_BITS;
210c0838:	1004937a 	slli	r2,r2,13
        z2 = tmp1 + tmp2;
        z3 = tmp0 + tmp2;
        z4 = tmp1 + tmp3;
        z5 = MULTIPLY(z3 + z4, FIX_1_175875602); /* sqrt(2) * c3 */
        
        tmp0 = MULTIPLY(tmp0, FIX_0_298631336); /* sqrt(2) * (-c1+c3+c5-c7) */
210c083c:	5ac263a4 	muli	r11,r11,2446
        z2 = (int32_t) wsptr[2];
        z3 = (int32_t) wsptr[6];
        
        z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
        tmp2 = z1 + MULTIPLY(z3, - FIX_1_847759065);
        tmp3 = z1 + MULTIPLY(z2, FIX_0_765366865);
210c0840:	6c9b883a 	add	r13,r13,r18
        z3 = tmp0 + tmp2;
        z4 = tmp1 + tmp3;
        z5 = MULTIPLY(z3 + z4, FIX_1_175875602); /* sqrt(2) * c3 */
        
        tmp0 = MULTIPLY(tmp0, FIX_0_298631336); /* sqrt(2) * (-c1+c3+c5-c7) */
        tmp1 = MULTIPLY(tmp1, FIX_2_053119869); /* sqrt(2) * ( c1+c3-c5+c7) */
210c0844:	7bd06ce4 	muli	r15,r15,16819
        
        z2 = (int32_t) wsptr[2];
        z3 = (int32_t) wsptr[6];
        
        z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
        tmp2 = z1 + MULTIPLY(z3, - FIX_1_847759065);
210c0848:	843137e4 	muli	r16,r16,-15137
        tmp3 = z1 + MULTIPLY(z2, FIX_0_765366865);
        
        tmp0 = ((int32_t) wsptr[0] + (int32_t) wsptr[4]) << CONST_BITS;
        tmp1 = ((int32_t) wsptr[0] - (int32_t) wsptr[4]) << CONST_BITS;
        
        tmp10 = tmp0 + tmp3;
210c084c:	1349883a 	add	r4,r2,r13
        z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
        tmp2 = z1 + MULTIPLY(z3, - FIX_1_847759065);
        tmp3 = z1 + MULTIPLY(z2, FIX_0_765366865);
        
        tmp0 = ((int32_t) wsptr[0] + (int32_t) wsptr[4]) << CONST_BITS;
        tmp1 = ((int32_t) wsptr[0] - (int32_t) wsptr[4]) << CONST_BITS;
210c0850:	1806937a 	slli	r3,r3,13
        z2 = tmp1 + tmp2;
        z3 = tmp0 + tmp2;
        z4 = tmp1 + tmp3;
        z5 = MULTIPLY(z3 + z4, FIX_1_175875602); /* sqrt(2) * c3 */
        
        tmp0 = MULTIPLY(tmp0, FIX_0_298631336); /* sqrt(2) * (-c1+c3+c5-c7) */
210c0854:	dac04015 	stw	r11,256(sp)
        tmp1 = MULTIPLY(tmp1, FIX_2_053119869); /* sqrt(2) * ( c1+c3-c5+c7) */
        tmp2 = MULTIPLY(tmp2, FIX_3_072711026); /* sqrt(2) * ( c1+c3+c5-c7) */
210c0858:	dac04b17 	ldw	r11,300(sp)
        tmp3 = MULTIPLY(tmp3, FIX_1_501321110); /* sqrt(2) * ( c1+c3-c5-c7) */
        z1 = MULTIPLY(z1, - FIX_0_899976223); /* sqrt(2) * (c7-c3) */
        z2 = MULTIPLY(z2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
        z3 = MULTIPLY(z3, - FIX_1_961570560); /* sqrt(2) * (-c3-c5) */
210c085c:	fff04ee4 	muli	ra,ra,-16069
        tmp1 += z2 + z4;
        tmp2 += z2 + z3;
        tmp3 += z1 + z4;
        
        /* Final output stage: inputs are tmp10..tmp13, tmp0..tmp3 */
        outptr[0] = NORMALIZE(DESCALE(tmp10 + tmp3, CONST_BITS+PASS1_BITS+3));
210c0860:	230f883a 	add	r7,r4,r12
        tmp0 = MULTIPLY(tmp0, FIX_0_298631336); /* sqrt(2) * (-c1+c3+c5-c7) */
        tmp1 = MULTIPLY(tmp1, FIX_2_053119869); /* sqrt(2) * ( c1+c3-c5+c7) */
        tmp2 = MULTIPLY(tmp2, FIX_3_072711026); /* sqrt(2) * ( c1+c3+c5-c7) */
        tmp3 = MULTIPLY(tmp3, FIX_1_501321110); /* sqrt(2) * ( c1+c3-c5-c7) */
        z1 = MULTIPLY(z1, - FIX_0_899976223); /* sqrt(2) * (c7-c3) */
        z2 = MULTIPLY(z2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
210c0864:	8c6b7f64 	muli	r17,r17,-20995
        z3 = tmp0 + tmp2;
        z4 = tmp1 + tmp3;
        z5 = MULTIPLY(z3 + z4, FIX_1_175875602); /* sqrt(2) * c3 */
        
        tmp0 = MULTIPLY(tmp0, FIX_0_298631336); /* sqrt(2) * (-c1+c3+c5-c7) */
        tmp1 = MULTIPLY(tmp1, FIX_2_053119869); /* sqrt(2) * ( c1+c3-c5+c7) */
210c0868:	dbc04c15 	stw	r15,304(sp)
        
        z2 = (int32_t) wsptr[2];
        z3 = (int32_t) wsptr[6];
        
        z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
        tmp2 = z1 + MULTIPLY(z3, - FIX_1_847759065);
210c086c:	84a1883a 	add	r16,r16,r18
        tmp1 += z2 + z4;
        tmp2 += z2 + z3;
        tmp3 += z1 + z4;
        
        /* Final output stage: inputs are tmp10..tmp13, tmp0..tmp3 */
        outptr[0] = NORMALIZE(DESCALE(tmp10 + tmp3, CONST_BITS+PASS1_BITS+3));
210c0870:	3ccf883a 	add	r7,r7,r19
        z4 = tmp1 + tmp3;
        z5 = MULTIPLY(z3 + z4, FIX_1_175875602); /* sqrt(2) * c3 */
        
        tmp0 = MULTIPLY(tmp0, FIX_0_298631336); /* sqrt(2) * (-c1+c3+c5-c7) */
        tmp1 = MULTIPLY(tmp1, FIX_2_053119869); /* sqrt(2) * ( c1+c3-c5+c7) */
        tmp2 = MULTIPLY(tmp2, FIX_3_072711026); /* sqrt(2) * ( c1+c3+c5-c7) */
210c0874:	5bd89524 	muli	r15,r11,25172
        
        tmp0 = ((int32_t) wsptr[0] + (int32_t) wsptr[4]) << CONST_BITS;
        tmp1 = ((int32_t) wsptr[0] - (int32_t) wsptr[4]) << CONST_BITS;
        
        tmp10 = tmp0 + tmp3;
        tmp13 = tmp0 - tmp3;
210c0878:	1345c83a 	sub	r2,r2,r13
        
        z3 += z5;
        z4 += z5;
        
        tmp0 += z1 + z3;
        tmp1 += z2 + z4;
210c087c:	dac04c17 	ldw	r11,304(sp)
        tmp0 = ((int32_t) wsptr[0] + (int32_t) wsptr[4]) << CONST_BITS;
        tmp1 = ((int32_t) wsptr[0] - (int32_t) wsptr[4]) << CONST_BITS;
        
        tmp10 = tmp0 + tmp3;
        tmp13 = tmp0 - tmp3;
        tmp11 = tmp1 + tmp2;
210c0880:	1c1b883a 	add	r13,r3,r16
        tmp1 += z2 + z4;
        tmp2 += z2 + z3;
        tmp3 += z1 + z4;
        
        /* Final output stage: inputs are tmp10..tmp13, tmp0..tmp3 */
        outptr[0] = NORMALIZE(DESCALE(tmp10 + tmp3, CONST_BITS+PASS1_BITS+3));
210c0884:	380fd4ba 	srai	r7,r7,18
        tmp1 = ((int32_t) wsptr[0] - (int32_t) wsptr[4]) << CONST_BITS;
        
        tmp10 = tmp0 + tmp3;
        tmp13 = tmp0 - tmp3;
        tmp11 = tmp1 + tmp2;
        tmp12 = tmp1 - tmp2;
210c0888:	1c21c83a 	sub	r16,r3,r16
        z4 = MULTIPLY(z4, - FIX_0_390180644); /* sqrt(2) * (c5-c3) */
        
        z3 += z5;
        z4 += z5;
        
        tmp0 += z1 + z3;
210c088c:	d8c04017 	ldw	r3,256(sp)
        z1 = MULTIPLY(z1, - FIX_0_899976223); /* sqrt(2) * (c7-c3) */
        z2 = MULTIPLY(z2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
        z3 = MULTIPLY(z3, - FIX_1_961570560); /* sqrt(2) * (-c3-c5) */
        z4 = MULTIPLY(z4, - FIX_0_390180644); /* sqrt(2) * (c5-c3) */
        
        z3 += z5;
210c0890:	f94b883a 	add	r5,ra,r5
        z4 += z5;
        
        tmp0 += z1 + z3;
210c0894:	715d883a 	add	r14,r14,r5
        tmp1 += z2 + z4;
210c0898:	8a11883a 	add	r8,r17,r8
        tmp2 += z2 + z3;
210c089c:	894b883a 	add	r5,r17,r5
        z4 = MULTIPLY(z4, - FIX_0_390180644); /* sqrt(2) * (c5-c3) */
        
        z3 += z5;
        z4 += z5;
        
        tmp0 += z1 + z3;
210c08a0:	70dd883a 	add	r14,r14,r3
        tmp1 += z2 + z4;
210c08a4:	42d1883a 	add	r8,r8,r11
        tmp2 += z2 + z3;
210c08a8:	2bcb883a 	add	r5,r5,r15
210c08ac:	383f610e 	bge	r7,zero,210c0634 <__flash_rwdata_start+0xfffeed3c>
210c08b0:	000f883a 	mov	r7,zero
210c08b4:	003f6106 	br	210c063c <__flash_rwdata_start+0xfffeed44>
210c08b8:	0005883a 	mov	r2,zero
210c08bc:	003f9606 	br	210c0718 <__flash_rwdata_start+0xfffeee20>
210c08c0:	0007883a 	mov	r3,zero
210c08c4:	003f8c06 	br	210c06f8 <__flash_rwdata_start+0xfffeee00>
210c08c8:	0021883a 	mov	r16,zero
210c08cc:	003f8206 	br	210c06d8 <__flash_rwdata_start+0xfffeede0>
210c08d0:	0007883a 	mov	r3,zero
210c08d4:	003f7806 	br	210c06b8 <__flash_rwdata_start+0xfffeedc0>
210c08d8:	000b883a 	mov	r5,zero
210c08dc:	003f6e06 	br	210c0698 <__flash_rwdata_start+0xfffeeda0>
210c08e0:	0009883a 	mov	r4,zero
210c08e4:	003f5d06 	br	210c065c <__flash_rwdata_start+0xfffeed64>
210c08e8:	0007883a 	mov	r3,zero
210c08ec:	003f6206 	br	210c0678 <__flash_rwdata_start+0xfffeed80>
        outptr[3] = NORMALIZE(DESCALE(tmp13 + tmp0,CONST_BITS+PASS1_BITS+3));
        outptr[4] = NORMALIZE(DESCALE(tmp13 - tmp0,CONST_BITS+PASS1_BITS+3));
        
        wsptr += DCTSIZE;		/* advance pointer to next row */
    }
}
210c08f0:	dfc05617 	ldw	ra,344(sp)
210c08f4:	df005517 	ldw	fp,340(sp)
210c08f8:	ddc05417 	ldw	r23,336(sp)
210c08fc:	dd805317 	ldw	r22,332(sp)
210c0900:	dd405217 	ldw	r21,328(sp)
210c0904:	dd005117 	ldw	r20,324(sp)
210c0908:	dcc05017 	ldw	r19,320(sp)
210c090c:	dc804f17 	ldw	r18,316(sp)
210c0910:	dc404e17 	ldw	r17,312(sp)
210c0914:	dc004d17 	ldw	r16,308(sp)
210c0918:	dec05704 	addi	sp,sp,348
210c091c:	f800283a 	ret

210c0920 <lossless_decode>:
 To perform the update, the bitstream pointer is incremented every
 time a new byte in the bistream is shifted in.
 
******************************** */
void lossless_decode(int num_blocks, void* bitstream, dct_block_t* DCACq, dct_block_t quant, BOOL P)
{
210c0920:	defff604 	addi	sp,sp,-40
210c0924:	dc400115 	stw	r17,4(sp)
210c0928:	dfc00915 	stw	ra,36(sp)
210c092c:	df000815 	stw	fp,32(sp)
210c0930:	ddc00715 	stw	r23,28(sp)
210c0934:	dd800615 	stw	r22,24(sp)
210c0938:	dd400515 	stw	r21,20(sp)
210c093c:	dd000415 	stw	r20,16(sp)
210c0940:	dcc00315 	stw	r19,12(sp)
210c0944:	dc800215 	stw	r18,8(sp)
210c0948:	dc000015 	stw	r16,0(sp)
    //remove decoded bits
    (*pbitbuffer) <<= size;
    //total number of bits to be shifted in
    *pbitcount += size;
    if(*pbitcount >= 8){ //we need to shift in at least 1 byte
        *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 8);
210c094c:	2a400003 	ldbu	r9,0(r5)
        *pbitstream = ((uint8_t*)*pbitstream) + 1;
        if(*pbitcount >= 16){ //at least 2 bytes
            *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 16);
210c0950:	28800043 	ldbu	r2,1(r5)
            *pbitstream = ((uint8_t*)*pbitstream) + 1;
            if(*pbitcount >= 24){ //at least 3 bytes
                *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 24);
210c0954:	28c00083 	ldbu	r3,2(r5)
    //remove decoded bits
    (*pbitbuffer) <<= size;
    //total number of bits to be shifted in
    *pbitcount += size;
    if(*pbitcount >= 8){ //we need to shift in at least 1 byte
        *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 8);
210c0958:	4812963a 	slli	r9,r9,24
        *pbitstream = ((uint8_t*)*pbitstream) + 1;
        if(*pbitcount >= 16){ //at least 2 bytes
            *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 16);
210c095c:	1004943a 	slli	r2,r2,16
            *pbitstream = ((uint8_t*)*pbitstream) + 1;
            if(*pbitcount >= 24){ //at least 3 bytes
                *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 24);
                *pbitstream = ((uint8_t*)*pbitstream) + 1;
                if(*pbitcount == 32){ //all 4 bytes shifted in
                    *pbitbuffer |= *((uint8_t*)(*pbitstream));
210c0960:	2a0000c3 	ldbu	r8,3(r5)
        *pbitstream = ((uint8_t*)*pbitstream) + 1;
        if(*pbitcount >= 16){ //at least 2 bytes
            *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 16);
            *pbitstream = ((uint8_t*)*pbitstream) + 1;
            if(*pbitcount >= 24){ //at least 3 bytes
                *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 24);
210c0964:	1806923a 	slli	r3,r3,8
    *pbitcount += size;
    if(*pbitcount >= 8){ //we need to shift in at least 1 byte
        *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 8);
        *pbitstream = ((uint8_t*)*pbitstream) + 1;
        if(*pbitcount >= 16){ //at least 2 bytes
            *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 16);
210c0968:	4884b03a 	or	r2,r9,r2
210c096c:	1204b03a 	or	r2,r2,r8
 To perform the update, the bitstream pointer is incremented every
 time a new byte in the bistream is shifted in.
 
******************************** */
void lossless_decode(int num_blocks, void* bitstream, dct_block_t* DCACq, dct_block_t quant, BOOL P)
{
210c0970:	dc400a17 	ldw	r17,40(sp)
            *pbitstream = ((uint8_t*)*pbitstream) + 1;
            if(*pbitcount >= 24){ //at least 3 bytes
                *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 24);
                *pbitstream = ((uint8_t*)*pbitstream) + 1;
                if(*pbitcount == 32){ //all 4 bytes shifted in
                    *pbitbuffer |= *((uint8_t*)(*pbitstream));
210c0974:	10d0b03a 	or	r8,r2,r3
                    *pbitstream = ((uint8_t*)*pbitstream) + 1;
210c0978:	2b400104 	addi	r13,r5,4
    
    huff_input_t ib;
    //Used for I frame DC differential encoding
    DCTELEM cur = 0;
    
    for(int count = 0; count < num_blocks; count ++){
210c097c:	0100980e 	bge	zero,r4,210c0be0 <lossless_decode+0x2c0>
210c0980:	200891fa 	slli	r4,r4,7
210c0984:	02840034 	movhi	r10,4096
210c0988:	5281a304 	addi	r10,r10,1676
210c098c:	3013883a 	mov	r9,r6
210c0990:	312f883a 	add	r23,r6,r4
210c0994:	003f883a 	mov	ra,zero
210c0998:	000d883a 	mov	r6,zero
        ib.e = 0;
        ib.bits = 4;
    }
    else{
        bitbuffer <<= 4;
        ib.e = HUFF_EXTEND(INPUT_BITS(bitbuffer,size),size);
210c099c:	04800804 	movi	r18,32
210c09a0:	057fffc4 	movi	r21,-1
{
    //remove decoded bits
    (*pbitbuffer) <<= size;
    //total number of bits to be shifted in
    *pbitcount += size;
    if(*pbitcount >= 8){ //we need to shift in at least 1 byte
210c09a4:	070001c4 	movi	fp,7
        *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 8);
        *pbitstream = ((uint8_t*)*pbitstream) + 1;
        if(*pbitcount >= 16){ //at least 2 bytes
210c09a8:	03c003c4 	movi	r15,15
            *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 16);
            *pbitstream = ((uint8_t*)*pbitstream) + 1;
            if(*pbitcount >= 24){ //at least 3 bytes
210c09ac:	050005c4 	movi	r20,23
                    pe[zigzag_table[index]] = ib.e * (((DCTELEM*)quant)[zigzag_table[index]]);
                }
#else
                pe[zigzag_table[index]] = ib.e;
#endif
                if(index >= 63) break;
210c09b0:	04c00f84 	movi	r19,62
                    if(P) //sum 0 to the next 16 values. This is equivalent to skipping 16.
                        index += 16;
                    else{ //add 16 zeros
                        uint8_t terminal = index + 16;
                        for(; index < terminal; index++)
                            pe[zigzag_table[index]] = 0;
210c09b4:	5021883a 	mov	r16,r10
                }
                else {
                    //END
                    if(P == 0){
                        //output all zeros
                        for(; index < 64; index++)
210c09b8:	05801004 	movi	r22,64

//DC decode function
huff_input_t input_DC(uint32_t bitbuffer)
{
    huff_input_t ib;
    uint8_t size = INPUT_BITS(bitbuffer, 4);
210c09bc:	4006d73a 	srli	r3,r8,28
    if(size == 0){
210c09c0:	18015626 	beq	r3,zero,210c0f1c <lossless_decode+0x5fc>
        ib.e = 0;
        ib.bits = 4;
    }
    else{
        bitbuffer <<= 4;
210c09c4:	4004913a 	slli	r2,r8,4
        ib.e = HUFF_EXTEND(INPUT_BITS(bitbuffer,size),size);
210c09c8:	90d7c83a 	sub	r11,r18,r3
210c09cc:	197fffc4 	addi	r5,r3,-1
210c09d0:	1009883a 	mov	r4,r2
210c09d4:	22c4d83a 	srl	r2,r4,r11
210c09d8:	1148d83a 	srl	r4,r2,r5
210c09dc:	2000031e 	bne	r4,zero,210c09ec <lossless_decode+0xcc>
210c09e0:	a8c8983a 	sll	r4,r21,r3
210c09e4:	21000044 	addi	r4,r4,1
210c09e8:	2085883a 	add	r2,r4,r2
210c09ec:	18c00104 	addi	r3,r3,4
void update_buffer(uint32_t* pbitbuffer, void** pbitstream, int* pbitcount, uint8_t size)
{
    //remove decoded bits
    (*pbitbuffer) <<= size;
    //total number of bits to be shifted in
    *pbitcount += size;
210c09f0:	30cd883a 	add	r6,r6,r3
//update buffer
//The function is written to be endianess - independent
void update_buffer(uint32_t* pbitbuffer, void** pbitstream, int* pbitcount, uint8_t size)
{
    //remove decoded bits
    (*pbitbuffer) <<= size;
210c09f4:	40d0983a 	sll	r8,r8,r3
    //total number of bits to be shifted in
    *pbitcount += size;
    if(*pbitcount >= 8){ //we need to shift in at least 1 byte
210c09f8:	e180100e 	bge	fp,r6,210c0a3c <lossless_decode+0x11c>
        *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 8);
210c09fc:	68c00003 	ldbu	r3,0(r13)
210c0a00:	313ffe04 	addi	r4,r6,-8
210c0a04:	1906983a 	sll	r3,r3,r4
210c0a08:	40d0b03a 	or	r8,r8,r3
        *pbitstream = ((uint8_t*)*pbitstream) + 1;
        if(*pbitcount >= 16){ //at least 2 bytes
210c0a0c:	7981460e 	bge	r15,r6,210c0f28 <lossless_decode+0x608>
            *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 16);
210c0a10:	68c00043 	ldbu	r3,1(r13)
210c0a14:	313ffc04 	addi	r4,r6,-16
210c0a18:	1906983a 	sll	r3,r3,r4
210c0a1c:	40d0b03a 	or	r8,r8,r3
            *pbitstream = ((uint8_t*)*pbitstream) + 1;
            if(*pbitcount >= 24){ //at least 3 bytes
210c0a20:	a181430e 	bge	r20,r6,210c0f30 <lossless_decode+0x610>
                *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 24);
210c0a24:	68c00083 	ldbu	r3,2(r13)
210c0a28:	313ffa04 	addi	r4,r6,-24
210c0a2c:	1906983a 	sll	r3,r3,r4
210c0a30:	40d0b03a 	or	r8,r8,r3
                *pbitstream = ((uint8_t*)*pbitstream) + 1;
                if(*pbitcount == 32){ //all 4 bytes shifted in
210c0a34:	34814026 	beq	r6,r18,210c0f38 <lossless_decode+0x618>
        if(*pbitcount >= 16){ //at least 2 bytes
            *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 16);
            *pbitstream = ((uint8_t*)*pbitstream) + 1;
            if(*pbitcount >= 24){ //at least 3 bytes
                *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 24);
                *pbitstream = ((uint8_t*)*pbitstream) + 1;
210c0a38:	6b4000c4 	addi	r13,r13,3
                    *pbitstream = ((uint8_t*)*pbitstream) + 1;
                }
            }
        }
    }
    *pbitcount &= 7; //the resulting *pbitcount should be between 0 and 7
210c0a3c:	318001cc 	andi	r6,r6,7
        
        //decode DC coefficients
        ib = input_DC(bitbuffer);
        update_buffer(&bitbuffer, &bitstream, &bitcount, ib.bits);
#ifndef NULL_QUANT
        if(P){ //differential decoding based on previous frame
210c0a40:	88013026 	beq	r17,zero,210c0f04 <lossless_decode+0x5e4>
            pe[0] += (ib.e * (((DCTELEM*)quant)[0]) );
210c0a44:	3900000b 	ldhu	r4,0(r7)
210c0a48:	48c0000b 	ldhu	r3,0(r9)
210c0a4c:	1105383a 	mul	r2,r2,r4
210c0a50:	10c5883a 	add	r2,r2,r3
210c0a54:	4880000d 	sth	r2,0(r9)
        }
#else   //null dequantization, no differential
        pe[0] = ib.e;
#endif
        
        uint8_t index = 1; //zig-zag order index for AC values in the 8x8 matrix, [0, 63]
210c0a58:	00800044 	movi	r2,1
huff_input_t input_AC(uint32_t bitbuffer)
{
    huff_input_t ib;
    uint8_t size;
    ib.runlength  = INPUT_BITS(bitbuffer, 4);
    bitbuffer <<= 4;
210c0a5c:	4006913a 	slli	r3,r8,4
//AC decode function
huff_input_t input_AC(uint32_t bitbuffer)
{
    huff_input_t ib;
    uint8_t size;
    ib.runlength  = INPUT_BITS(bitbuffer, 4);
210c0a60:	400ad73a 	srli	r5,r8,28
    bitbuffer <<= 4;
    size  = INPUT_BITS(bitbuffer, 4);
210c0a64:	1806d73a 	srli	r3,r3,28
    if(size == 0) {
210c0a68:	18002726 	beq	r3,zero,210c0b08 <lossless_decode+0x1e8>
        //and if size > 0, the amplitude cannot be 0.
        ib.e = 0;
        ib.bits = 8;
    }
    else{
        bitbuffer <<= 4;
210c0a6c:	4018923a 	slli	r12,r8,8
        ib.e = HUFF_EXTEND(INPUT_BITS(bitbuffer,size),size);
210c0a70:	90c9c83a 	sub	r4,r18,r3
210c0a74:	1affffc4 	addi	r11,r3,-1
210c0a78:	6108d83a 	srl	r4,r12,r4
210c0a7c:	22d6d83a 	srl	r11,r4,r11
210c0a80:	5800031e 	bne	r11,zero,210c0a90 <lossless_decode+0x170>
210c0a84:	a8d6983a 	sll	r11,r21,r3
210c0a88:	5ac00044 	addi	r11,r11,1
210c0a8c:	5909883a 	add	r4,r11,r4
210c0a90:	18c00204 	addi	r3,r3,8
    //remove decoded bits
    (*pbitbuffer) <<= size;
    //total number of bits to be shifted in
    *pbitcount += size;
    if(*pbitcount >= 8){ //we need to shift in at least 1 byte
        *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 8);
210c0a94:	6ac00003 	ldbu	r11,0(r13)
void update_buffer(uint32_t* pbitbuffer, void** pbitstream, int* pbitcount, uint8_t size)
{
    //remove decoded bits
    (*pbitbuffer) <<= size;
    //total number of bits to be shifted in
    *pbitcount += size;
210c0a98:	30cd883a 	add	r6,r6,r3
    if(*pbitcount >= 8){ //we need to shift in at least 1 byte
        *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 8);
210c0a9c:	333ffe04 	addi	r12,r6,-8
//update buffer
//The function is written to be endianess - independent
void update_buffer(uint32_t* pbitbuffer, void** pbitstream, int* pbitcount, uint8_t size)
{
    //remove decoded bits
    (*pbitbuffer) <<= size;
210c0aa0:	40c6983a 	sll	r3,r8,r3
    //total number of bits to be shifted in
    *pbitcount += size;
    if(*pbitcount >= 8){ //we need to shift in at least 1 byte
        *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 8);
210c0aa4:	5b10983a 	sll	r8,r11,r12
210c0aa8:	40d0b03a 	or	r8,r8,r3
        *pbitstream = ((uint8_t*)*pbitstream) + 1;
        if(*pbitcount >= 16){ //at least 2 bytes
210c0aac:	79802c0e 	bge	r15,r6,210c0b60 <lossless_decode+0x240>
            *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 16);
210c0ab0:	68c00043 	ldbu	r3,1(r13)
210c0ab4:	32fffc04 	addi	r11,r6,-16
210c0ab8:	1ac6983a 	sll	r3,r3,r11
210c0abc:	40d0b03a 	or	r8,r8,r3
            *pbitstream = ((uint8_t*)*pbitstream) + 1;
            if(*pbitcount >= 24){ //at least 3 bytes
210c0ac0:	a180f80e 	bge	r20,r6,210c0ea4 <lossless_decode+0x584>
                *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 24);
210c0ac4:	6ac00083 	ldbu	r11,2(r13)
210c0ac8:	30fffa04 	addi	r3,r6,-24
                *pbitstream = ((uint8_t*)*pbitstream) + 1;
210c0acc:	6b4000c4 	addi	r13,r13,3
        *pbitstream = ((uint8_t*)*pbitstream) + 1;
        if(*pbitcount >= 16){ //at least 2 bytes
            *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 16);
            *pbitstream = ((uint8_t*)*pbitstream) + 1;
            if(*pbitcount >= 24){ //at least 3 bytes
                *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 24);
210c0ad0:	58c6983a 	sll	r3,r11,r3
210c0ad4:	40d0b03a 	or	r8,r8,r3
        uint8_t index = 1; //zig-zag order index for AC values in the 8x8 matrix, [0, 63]
        while(1){
            //decode AC coefficient
            ib = input_AC(bitbuffer);
            update_buffer(&bitbuffer, &bitstream, &bitcount, ib.bits);
            if(ib.e == 0){
210c0ad8:	20ffffcc 	andi	r3,r4,65535
210c0adc:	18e0001c 	xori	r3,r3,32768
210c0ae0:	18e00004 	addi	r3,r3,-32768
                    *pbitstream = ((uint8_t*)*pbitstream) + 1;
                }
            }
        }
    }
    *pbitcount &= 7; //the resulting *pbitcount should be between 0 and 7
210c0ae4:	318001cc 	andi	r6,r6,7
        uint8_t index = 1; //zig-zag order index for AC values in the 8x8 matrix, [0, 63]
        while(1){
            //decode AC coefficient
            ib = input_AC(bitbuffer);
            update_buffer(&bitbuffer, &bitstream, &bitcount, ib.bits);
            if(ib.e == 0){
210c0ae8:	18000a1e 	bne	r3,zero,210c0b14 <lossless_decode+0x1f4>
                if(ib.runlength == 15){
210c0aec:	2bc0f21e 	bne	r5,r15,210c0eb8 <lossless_decode+0x598>
                    //EZL
                    if(P) //sum 0 to the next 16 values. This is equivalent to skipping 16.
210c0af0:	88004726 	beq	r17,zero,210c0c10 <lossless_decode+0x2f0>
huff_input_t input_AC(uint32_t bitbuffer)
{
    huff_input_t ib;
    uint8_t size;
    ib.runlength  = INPUT_BITS(bitbuffer, 4);
    bitbuffer <<= 4;
210c0af4:	4006913a 	slli	r3,r8,4
            update_buffer(&bitbuffer, &bitstream, &bitcount, ib.bits);
            if(ib.e == 0){
                if(ib.runlength == 15){
                    //EZL
                    if(P) //sum 0 to the next 16 values. This is equivalent to skipping 16.
                        index += 16;
210c0af8:	10800404 	addi	r2,r2,16
//AC decode function
huff_input_t input_AC(uint32_t bitbuffer)
{
    huff_input_t ib;
    uint8_t size;
    ib.runlength  = INPUT_BITS(bitbuffer, 4);
210c0afc:	400ad73a 	srli	r5,r8,28
    bitbuffer <<= 4;
    size  = INPUT_BITS(bitbuffer, 4);
210c0b00:	1806d73a 	srli	r3,r3,28
    if(size == 0) {
210c0b04:	183fd91e 	bne	r3,zero,210c0a6c <__flash_rwdata_start+0xfffef174>
210c0b08:	00c00204 	movi	r3,8
        //return a value of 0. Notice this is ok size if size == 0, then it's either a END or ZRL,
        //and if size > 0, the amplitude cannot be 0.
        ib.e = 0;
210c0b0c:	0009883a 	mov	r4,zero
210c0b10:	003fe006 	br	210c0a94 <__flash_rwdata_start+0xfffef19c>
                    break; //break from while and go to next block
                }
            }
            else{ //ib.e != 0
                if(P) //sum 0 to the next runlength values. This is equivalent to skipping runlength.
                    index += ib.runlength;
210c0b14:	288b883a 	add	r5,r5,r2
                    //if P == 1, then don't change the values
                    break; //break from while and go to next block
                }
            }
            else{ //ib.e != 0
                if(P) //sum 0 to the next runlength values. This is equivalent to skipping runlength.
210c0b18:	88001326 	beq	r17,zero,210c0b68 <lossless_decode+0x248>
                        pe[zigzag_table[index]] = 0;
                }
                //now add the actual value
#ifndef NULL_QUANT
                if(P){ //differential decoding based on previous frame 
                    pe[zigzag_table[index]] += ib.e * (((DCTELEM*)quant)[zigzag_table[index]]);
210c0b1c:	28c03fcc 	andi	r3,r5,255
210c0b20:	18c7883a 	add	r3,r3,r3
210c0b24:	18c7883a 	add	r3,r3,r3
210c0b28:	50c7883a 	add	r3,r10,r3
210c0b2c:	18800017 	ldw	r2,0(r3)
210c0b30:	2ac03fcc 	andi	r11,r5,255
210c0b34:	1085883a 	add	r2,r2,r2
210c0b38:	3887883a 	add	r3,r7,r2
210c0b3c:	1b00000b 	ldhu	r12,0(r3)
210c0b40:	4885883a 	add	r2,r9,r2
210c0b44:	10c0000b 	ldhu	r3,0(r2)
210c0b48:	2309383a 	mul	r4,r4,r12
210c0b4c:	20c9883a 	add	r4,r4,r3
210c0b50:	1100000d 	sth	r4,0(r2)
                    pe[zigzag_table[index]] = ib.e * (((DCTELEM*)quant)[zigzag_table[index]]);
                }
#else
                pe[zigzag_table[index]] = ib.e;
#endif
                if(index >= 63) break;
210c0b54:	9ac02036 	bltu	r19,r11,210c0bd8 <lossless_decode+0x2b8>
                index++;
210c0b58:	28800044 	addi	r2,r5,1
210c0b5c:	003fbf06 	br	210c0a5c <__flash_rwdata_start+0xfffef164>
    (*pbitbuffer) <<= size;
    //total number of bits to be shifted in
    *pbitcount += size;
    if(*pbitcount >= 8){ //we need to shift in at least 1 byte
        *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 8);
        *pbitstream = ((uint8_t*)*pbitstream) + 1;
210c0b60:	6b400044 	addi	r13,r13,1
210c0b64:	003fdc06 	br	210c0ad8 <__flash_rwdata_start+0xfffef1e0>
210c0b68:	03040034 	movhi	r12,4096
            else{ //ib.e != 0
                if(P) //sum 0 to the next runlength values. This is equivalent to skipping runlength.
                    index += ib.runlength;
                else{ //add runlength zeros 
                    uint8_t terminal = index + ib.runlength;
                    for(; index < terminal; index++)
210c0b6c:	10c03fcc 	andi	r3,r2,255
210c0b70:	2ac03fcc 	andi	r11,r5,255
210c0b74:	6301a304 	addi	r12,r12,1676
210c0b78:	1ac00236 	bltu	r3,r11,210c0b84 <lossless_decode+0x264>
210c0b7c:	0000cb06 	br	210c0eac <lossless_decode+0x58c>
210c0b80:	7007883a 	mov	r3,r14
                        pe[zigzag_table[index]] = 0;
210c0b84:	18c7883a 	add	r3,r3,r3
210c0b88:	18c7883a 	add	r3,r3,r3
210c0b8c:	50c7883a 	add	r3,r10,r3
210c0b90:	18c00017 	ldw	r3,0(r3)
            else{ //ib.e != 0
                if(P) //sum 0 to the next runlength values. This is equivalent to skipping runlength.
                    index += ib.runlength;
                else{ //add runlength zeros 
                    uint8_t terminal = index + ib.runlength;
                    for(; index < terminal; index++)
210c0b94:	10800044 	addi	r2,r2,1
210c0b98:	13803fcc 	andi	r14,r2,255
                        pe[zigzag_table[index]] = 0;
210c0b9c:	18c7883a 	add	r3,r3,r3
210c0ba0:	48c7883a 	add	r3,r9,r3
210c0ba4:	1800000d 	sth	zero,0(r3)
            else{ //ib.e != 0
                if(P) //sum 0 to the next runlength values. This is equivalent to skipping runlength.
                    index += ib.runlength;
                else{ //add runlength zeros 
                    uint8_t terminal = index + ib.runlength;
                    for(; index < terminal; index++)
210c0ba8:	72fff51e 	bne	r14,r11,210c0b80 <__flash_rwdata_start+0xfffef288>
#ifndef NULL_QUANT
                if(P){ //differential decoding based on previous frame 
                    pe[zigzag_table[index]] += ib.e * (((DCTELEM*)quant)[zigzag_table[index]]);
                }
                else{ //no differential decoding
                    pe[zigzag_table[index]] = ib.e * (((DCTELEM*)quant)[zigzag_table[index]]);
210c0bac:	5ac5883a 	add	r2,r11,r11
210c0bb0:	1085883a 	add	r2,r2,r2
210c0bb4:	6099883a 	add	r12,r12,r2
210c0bb8:	60800017 	ldw	r2,0(r12)
210c0bbc:	1085883a 	add	r2,r2,r2
210c0bc0:	3887883a 	add	r3,r7,r2
210c0bc4:	18c0000b 	ldhu	r3,0(r3)
210c0bc8:	4885883a 	add	r2,r9,r2
210c0bcc:	1909383a 	mul	r4,r3,r4
210c0bd0:	1100000d 	sth	r4,0(r2)
                }
#else
                pe[zigzag_table[index]] = ib.e;
#endif
                if(index >= 63) break;
210c0bd4:	9affe02e 	bgeu	r19,r11,210c0b58 <__flash_rwdata_start+0xfffef260>
210c0bd8:	4a402004 	addi	r9,r9,128
    
    huff_input_t ib;
    //Used for I frame DC differential encoding
    DCTELEM cur = 0;
    
    for(int count = 0; count < num_blocks; count ++){
210c0bdc:	4dff771e 	bne	r9,r23,210c09bc <__flash_rwdata_start+0xfffef0c4>
                if(index >= 63) break;
                index++;
            }
        }
    }
}
210c0be0:	dfc00917 	ldw	ra,36(sp)
210c0be4:	df000817 	ldw	fp,32(sp)
210c0be8:	ddc00717 	ldw	r23,28(sp)
210c0bec:	dd800617 	ldw	r22,24(sp)
210c0bf0:	dd400517 	ldw	r21,20(sp)
210c0bf4:	dd000417 	ldw	r20,16(sp)
210c0bf8:	dcc00317 	ldw	r19,12(sp)
210c0bfc:	dc800217 	ldw	r18,8(sp)
210c0c00:	dc400117 	ldw	r17,4(sp)
210c0c04:	dc000017 	ldw	r16,0(sp)
210c0c08:	dec00a04 	addi	sp,sp,40
210c0c0c:	f800283a 	ret
                if(ib.runlength == 15){
                    //EZL
                    if(P) //sum 0 to the next 16 values. This is equivalent to skipping 16.
                        index += 16;
                    else{ //add 16 zeros
                        uint8_t terminal = index + 16;
210c0c10:	11400404 	addi	r5,r2,16
                        for(; index < terminal; index++)
210c0c14:	11003fcc 	andi	r4,r2,255
210c0c18:	28c03fcc 	andi	r3,r5,255
210c0c1c:	20ff8f2e 	bgeu	r4,r3,210c0a5c <__flash_rwdata_start+0xfffef164>
                            pe[zigzag_table[index]] = 0;
210c0c20:	2109883a 	add	r4,r4,r4
210c0c24:	2109883a 	add	r4,r4,r4
210c0c28:	5109883a 	add	r4,r10,r4
210c0c2c:	22c00017 	ldw	r11,0(r4)
                    //EZL
                    if(P) //sum 0 to the next 16 values. This is equivalent to skipping 16.
                        index += 16;
                    else{ //add 16 zeros
                        uint8_t terminal = index + 16;
                        for(; index < terminal; index++)
210c0c30:	13000044 	addi	r12,r2,1
210c0c34:	61003fcc 	andi	r4,r12,255
                            pe[zigzag_table[index]] = 0;
210c0c38:	5ad7883a 	add	r11,r11,r11
210c0c3c:	4ad7883a 	add	r11,r9,r11
210c0c40:	5800000d 	sth	zero,0(r11)
                    //EZL
                    if(P) //sum 0 to the next 16 values. This is equivalent to skipping 16.
                        index += 16;
                    else{ //add 16 zeros
                        uint8_t terminal = index + 16;
                        for(; index < terminal; index++)
210c0c44:	20c0952e 	bgeu	r4,r3,210c0e9c <lossless_decode+0x57c>
                            pe[zigzag_table[index]] = 0;
210c0c48:	2109883a 	add	r4,r4,r4
210c0c4c:	2109883a 	add	r4,r4,r4
210c0c50:	8109883a 	add	r4,r16,r4
210c0c54:	22c00017 	ldw	r11,0(r4)
                    //EZL
                    if(P) //sum 0 to the next 16 values. This is equivalent to skipping 16.
                        index += 16;
                    else{ //add 16 zeros
                        uint8_t terminal = index + 16;
                        for(; index < terminal; index++)
210c0c58:	13000084 	addi	r12,r2,2
210c0c5c:	61003fcc 	andi	r4,r12,255
                            pe[zigzag_table[index]] = 0;
210c0c60:	5ad7883a 	add	r11,r11,r11
210c0c64:	4ad7883a 	add	r11,r9,r11
210c0c68:	5800000d 	sth	zero,0(r11)
                    //EZL
                    if(P) //sum 0 to the next 16 values. This is equivalent to skipping 16.
                        index += 16;
                    else{ //add 16 zeros
                        uint8_t terminal = index + 16;
                        for(; index < terminal; index++)
210c0c6c:	20c08b2e 	bgeu	r4,r3,210c0e9c <lossless_decode+0x57c>
                            pe[zigzag_table[index]] = 0;
210c0c70:	2109883a 	add	r4,r4,r4
210c0c74:	2109883a 	add	r4,r4,r4
210c0c78:	8109883a 	add	r4,r16,r4
210c0c7c:	22c00017 	ldw	r11,0(r4)
                    //EZL
                    if(P) //sum 0 to the next 16 values. This is equivalent to skipping 16.
                        index += 16;
                    else{ //add 16 zeros
                        uint8_t terminal = index + 16;
                        for(; index < terminal; index++)
210c0c80:	130000c4 	addi	r12,r2,3
210c0c84:	61003fcc 	andi	r4,r12,255
                            pe[zigzag_table[index]] = 0;
210c0c88:	5ad7883a 	add	r11,r11,r11
210c0c8c:	4ad7883a 	add	r11,r9,r11
210c0c90:	5800000d 	sth	zero,0(r11)
                    //EZL
                    if(P) //sum 0 to the next 16 values. This is equivalent to skipping 16.
                        index += 16;
                    else{ //add 16 zeros
                        uint8_t terminal = index + 16;
                        for(; index < terminal; index++)
210c0c94:	20c0812e 	bgeu	r4,r3,210c0e9c <lossless_decode+0x57c>
                            pe[zigzag_table[index]] = 0;
210c0c98:	2109883a 	add	r4,r4,r4
210c0c9c:	2109883a 	add	r4,r4,r4
210c0ca0:	8109883a 	add	r4,r16,r4
210c0ca4:	22c00017 	ldw	r11,0(r4)
                    //EZL
                    if(P) //sum 0 to the next 16 values. This is equivalent to skipping 16.
                        index += 16;
                    else{ //add 16 zeros
                        uint8_t terminal = index + 16;
                        for(; index < terminal; index++)
210c0ca8:	13000104 	addi	r12,r2,4
210c0cac:	61003fcc 	andi	r4,r12,255
                            pe[zigzag_table[index]] = 0;
210c0cb0:	5ad7883a 	add	r11,r11,r11
210c0cb4:	4ad7883a 	add	r11,r9,r11
210c0cb8:	5800000d 	sth	zero,0(r11)
                    //EZL
                    if(P) //sum 0 to the next 16 values. This is equivalent to skipping 16.
                        index += 16;
                    else{ //add 16 zeros
                        uint8_t terminal = index + 16;
                        for(; index < terminal; index++)
210c0cbc:	20c0772e 	bgeu	r4,r3,210c0e9c <lossless_decode+0x57c>
                            pe[zigzag_table[index]] = 0;
210c0cc0:	2109883a 	add	r4,r4,r4
210c0cc4:	2109883a 	add	r4,r4,r4
210c0cc8:	8109883a 	add	r4,r16,r4
210c0ccc:	22c00017 	ldw	r11,0(r4)
                    //EZL
                    if(P) //sum 0 to the next 16 values. This is equivalent to skipping 16.
                        index += 16;
                    else{ //add 16 zeros
                        uint8_t terminal = index + 16;
                        for(; index < terminal; index++)
210c0cd0:	13000144 	addi	r12,r2,5
210c0cd4:	61003fcc 	andi	r4,r12,255
                            pe[zigzag_table[index]] = 0;
210c0cd8:	5ad7883a 	add	r11,r11,r11
210c0cdc:	4ad7883a 	add	r11,r9,r11
210c0ce0:	5800000d 	sth	zero,0(r11)
                    //EZL
                    if(P) //sum 0 to the next 16 values. This is equivalent to skipping 16.
                        index += 16;
                    else{ //add 16 zeros
                        uint8_t terminal = index + 16;
                        for(; index < terminal; index++)
210c0ce4:	20c06d2e 	bgeu	r4,r3,210c0e9c <lossless_decode+0x57c>
                            pe[zigzag_table[index]] = 0;
210c0ce8:	2109883a 	add	r4,r4,r4
210c0cec:	2109883a 	add	r4,r4,r4
210c0cf0:	8109883a 	add	r4,r16,r4
210c0cf4:	22c00017 	ldw	r11,0(r4)
                    //EZL
                    if(P) //sum 0 to the next 16 values. This is equivalent to skipping 16.
                        index += 16;
                    else{ //add 16 zeros
                        uint8_t terminal = index + 16;
                        for(; index < terminal; index++)
210c0cf8:	13000184 	addi	r12,r2,6
210c0cfc:	61003fcc 	andi	r4,r12,255
                            pe[zigzag_table[index]] = 0;
210c0d00:	5ad7883a 	add	r11,r11,r11
210c0d04:	4ad7883a 	add	r11,r9,r11
210c0d08:	5800000d 	sth	zero,0(r11)
                    //EZL
                    if(P) //sum 0 to the next 16 values. This is equivalent to skipping 16.
                        index += 16;
                    else{ //add 16 zeros
                        uint8_t terminal = index + 16;
                        for(; index < terminal; index++)
210c0d0c:	20c0632e 	bgeu	r4,r3,210c0e9c <lossless_decode+0x57c>
                            pe[zigzag_table[index]] = 0;
210c0d10:	2109883a 	add	r4,r4,r4
210c0d14:	2109883a 	add	r4,r4,r4
210c0d18:	5109883a 	add	r4,r10,r4
210c0d1c:	22c00017 	ldw	r11,0(r4)
                    //EZL
                    if(P) //sum 0 to the next 16 values. This is equivalent to skipping 16.
                        index += 16;
                    else{ //add 16 zeros
                        uint8_t terminal = index + 16;
                        for(; index < terminal; index++)
210c0d20:	130001c4 	addi	r12,r2,7
210c0d24:	61003fcc 	andi	r4,r12,255
                            pe[zigzag_table[index]] = 0;
210c0d28:	5ad7883a 	add	r11,r11,r11
210c0d2c:	4ad7883a 	add	r11,r9,r11
210c0d30:	5800000d 	sth	zero,0(r11)
                    //EZL
                    if(P) //sum 0 to the next 16 values. This is equivalent to skipping 16.
                        index += 16;
                    else{ //add 16 zeros
                        uint8_t terminal = index + 16;
                        for(; index < terminal; index++)
210c0d34:	20c0592e 	bgeu	r4,r3,210c0e9c <lossless_decode+0x57c>
                            pe[zigzag_table[index]] = 0;
210c0d38:	2109883a 	add	r4,r4,r4
210c0d3c:	2109883a 	add	r4,r4,r4
210c0d40:	5109883a 	add	r4,r10,r4
210c0d44:	22c00017 	ldw	r11,0(r4)
                    //EZL
                    if(P) //sum 0 to the next 16 values. This is equivalent to skipping 16.
                        index += 16;
                    else{ //add 16 zeros
                        uint8_t terminal = index + 16;
                        for(; index < terminal; index++)
210c0d48:	13000204 	addi	r12,r2,8
210c0d4c:	61003fcc 	andi	r4,r12,255
                            pe[zigzag_table[index]] = 0;
210c0d50:	5ad7883a 	add	r11,r11,r11
210c0d54:	4ad7883a 	add	r11,r9,r11
210c0d58:	5800000d 	sth	zero,0(r11)
                    //EZL
                    if(P) //sum 0 to the next 16 values. This is equivalent to skipping 16.
                        index += 16;
                    else{ //add 16 zeros
                        uint8_t terminal = index + 16;
                        for(; index < terminal; index++)
210c0d5c:	20c04f2e 	bgeu	r4,r3,210c0e9c <lossless_decode+0x57c>
                            pe[zigzag_table[index]] = 0;
210c0d60:	2109883a 	add	r4,r4,r4
210c0d64:	2109883a 	add	r4,r4,r4
210c0d68:	5109883a 	add	r4,r10,r4
210c0d6c:	22c00017 	ldw	r11,0(r4)
                    //EZL
                    if(P) //sum 0 to the next 16 values. This is equivalent to skipping 16.
                        index += 16;
                    else{ //add 16 zeros
                        uint8_t terminal = index + 16;
                        for(; index < terminal; index++)
210c0d70:	13000244 	addi	r12,r2,9
210c0d74:	61003fcc 	andi	r4,r12,255
                            pe[zigzag_table[index]] = 0;
210c0d78:	5ad7883a 	add	r11,r11,r11
210c0d7c:	4ad7883a 	add	r11,r9,r11
210c0d80:	5800000d 	sth	zero,0(r11)
                    //EZL
                    if(P) //sum 0 to the next 16 values. This is equivalent to skipping 16.
                        index += 16;
                    else{ //add 16 zeros
                        uint8_t terminal = index + 16;
                        for(; index < terminal; index++)
210c0d84:	20c0452e 	bgeu	r4,r3,210c0e9c <lossless_decode+0x57c>
                            pe[zigzag_table[index]] = 0;
210c0d88:	2109883a 	add	r4,r4,r4
210c0d8c:	2109883a 	add	r4,r4,r4
210c0d90:	5109883a 	add	r4,r10,r4
210c0d94:	22c00017 	ldw	r11,0(r4)
                    //EZL
                    if(P) //sum 0 to the next 16 values. This is equivalent to skipping 16.
                        index += 16;
                    else{ //add 16 zeros
                        uint8_t terminal = index + 16;
                        for(; index < terminal; index++)
210c0d98:	13000284 	addi	r12,r2,10
210c0d9c:	61003fcc 	andi	r4,r12,255
                            pe[zigzag_table[index]] = 0;
210c0da0:	5ad7883a 	add	r11,r11,r11
210c0da4:	4ad7883a 	add	r11,r9,r11
210c0da8:	5800000d 	sth	zero,0(r11)
                    //EZL
                    if(P) //sum 0 to the next 16 values. This is equivalent to skipping 16.
                        index += 16;
                    else{ //add 16 zeros
                        uint8_t terminal = index + 16;
                        for(; index < terminal; index++)
210c0dac:	20c03b2e 	bgeu	r4,r3,210c0e9c <lossless_decode+0x57c>
                            pe[zigzag_table[index]] = 0;
210c0db0:	2109883a 	add	r4,r4,r4
210c0db4:	2109883a 	add	r4,r4,r4
210c0db8:	5109883a 	add	r4,r10,r4
210c0dbc:	22c00017 	ldw	r11,0(r4)
                    //EZL
                    if(P) //sum 0 to the next 16 values. This is equivalent to skipping 16.
                        index += 16;
                    else{ //add 16 zeros
                        uint8_t terminal = index + 16;
                        for(; index < terminal; index++)
210c0dc0:	130002c4 	addi	r12,r2,11
210c0dc4:	61003fcc 	andi	r4,r12,255
                            pe[zigzag_table[index]] = 0;
210c0dc8:	5ad7883a 	add	r11,r11,r11
210c0dcc:	4ad7883a 	add	r11,r9,r11
210c0dd0:	5800000d 	sth	zero,0(r11)
                    //EZL
                    if(P) //sum 0 to the next 16 values. This is equivalent to skipping 16.
                        index += 16;
                    else{ //add 16 zeros
                        uint8_t terminal = index + 16;
                        for(; index < terminal; index++)
210c0dd4:	20c0312e 	bgeu	r4,r3,210c0e9c <lossless_decode+0x57c>
                            pe[zigzag_table[index]] = 0;
210c0dd8:	2109883a 	add	r4,r4,r4
210c0ddc:	2109883a 	add	r4,r4,r4
210c0de0:	5109883a 	add	r4,r10,r4
210c0de4:	22c00017 	ldw	r11,0(r4)
                    //EZL
                    if(P) //sum 0 to the next 16 values. This is equivalent to skipping 16.
                        index += 16;
                    else{ //add 16 zeros
                        uint8_t terminal = index + 16;
                        for(; index < terminal; index++)
210c0de8:	13000304 	addi	r12,r2,12
210c0dec:	61003fcc 	andi	r4,r12,255
                            pe[zigzag_table[index]] = 0;
210c0df0:	5ad7883a 	add	r11,r11,r11
210c0df4:	4ad7883a 	add	r11,r9,r11
210c0df8:	5800000d 	sth	zero,0(r11)
                    //EZL
                    if(P) //sum 0 to the next 16 values. This is equivalent to skipping 16.
                        index += 16;
                    else{ //add 16 zeros
                        uint8_t terminal = index + 16;
                        for(; index < terminal; index++)
210c0dfc:	20c0272e 	bgeu	r4,r3,210c0e9c <lossless_decode+0x57c>
                            pe[zigzag_table[index]] = 0;
210c0e00:	2109883a 	add	r4,r4,r4
210c0e04:	2109883a 	add	r4,r4,r4
210c0e08:	5109883a 	add	r4,r10,r4
210c0e0c:	22c00017 	ldw	r11,0(r4)
                    //EZL
                    if(P) //sum 0 to the next 16 values. This is equivalent to skipping 16.
                        index += 16;
                    else{ //add 16 zeros
                        uint8_t terminal = index + 16;
                        for(; index < terminal; index++)
210c0e10:	13000344 	addi	r12,r2,13
210c0e14:	61003fcc 	andi	r4,r12,255
                            pe[zigzag_table[index]] = 0;
210c0e18:	5ad7883a 	add	r11,r11,r11
210c0e1c:	4ad7883a 	add	r11,r9,r11
210c0e20:	5800000d 	sth	zero,0(r11)
                    //EZL
                    if(P) //sum 0 to the next 16 values. This is equivalent to skipping 16.
                        index += 16;
                    else{ //add 16 zeros
                        uint8_t terminal = index + 16;
                        for(; index < terminal; index++)
210c0e24:	20c01d2e 	bgeu	r4,r3,210c0e9c <lossless_decode+0x57c>
                            pe[zigzag_table[index]] = 0;
210c0e28:	2109883a 	add	r4,r4,r4
210c0e2c:	2109883a 	add	r4,r4,r4
210c0e30:	5109883a 	add	r4,r10,r4
210c0e34:	22c00017 	ldw	r11,0(r4)
                    //EZL
                    if(P) //sum 0 to the next 16 values. This is equivalent to skipping 16.
                        index += 16;
                    else{ //add 16 zeros
                        uint8_t terminal = index + 16;
                        for(; index < terminal; index++)
210c0e38:	13000384 	addi	r12,r2,14
210c0e3c:	61003fcc 	andi	r4,r12,255
                            pe[zigzag_table[index]] = 0;
210c0e40:	5ad7883a 	add	r11,r11,r11
210c0e44:	4ad7883a 	add	r11,r9,r11
210c0e48:	5800000d 	sth	zero,0(r11)
                    //EZL
                    if(P) //sum 0 to the next 16 values. This is equivalent to skipping 16.
                        index += 16;
                    else{ //add 16 zeros
                        uint8_t terminal = index + 16;
                        for(; index < terminal; index++)
210c0e4c:	20c0132e 	bgeu	r4,r3,210c0e9c <lossless_decode+0x57c>
                            pe[zigzag_table[index]] = 0;
210c0e50:	2109883a 	add	r4,r4,r4
210c0e54:	2109883a 	add	r4,r4,r4
210c0e58:	5109883a 	add	r4,r10,r4
210c0e5c:	22c00017 	ldw	r11,0(r4)
                    //EZL
                    if(P) //sum 0 to the next 16 values. This is equivalent to skipping 16.
                        index += 16;
                    else{ //add 16 zeros
                        uint8_t terminal = index + 16;
                        for(; index < terminal; index++)
210c0e60:	108003c4 	addi	r2,r2,15
210c0e64:	11003fcc 	andi	r4,r2,255
                            pe[zigzag_table[index]] = 0;
210c0e68:	5ad7883a 	add	r11,r11,r11
210c0e6c:	4ad7883a 	add	r11,r9,r11
210c0e70:	5800000d 	sth	zero,0(r11)
                    //EZL
                    if(P) //sum 0 to the next 16 values. This is equivalent to skipping 16.
                        index += 16;
                    else{ //add 16 zeros
                        uint8_t terminal = index + 16;
                        for(; index < terminal; index++)
210c0e74:	20fef92e 	bgeu	r4,r3,210c0a5c <__flash_rwdata_start+0xfffef164>
                            pe[zigzag_table[index]] = 0;
210c0e78:	2109883a 	add	r4,r4,r4
210c0e7c:	2109883a 	add	r4,r4,r4
210c0e80:	5109883a 	add	r4,r10,r4
210c0e84:	20c00017 	ldw	r3,0(r4)
210c0e88:	2805883a 	mov	r2,r5
210c0e8c:	18c7883a 	add	r3,r3,r3
210c0e90:	48c7883a 	add	r3,r9,r3
210c0e94:	1800000d 	sth	zero,0(r3)
210c0e98:	003ef006 	br	210c0a5c <__flash_rwdata_start+0xfffef164>
                    //EZL
                    if(P) //sum 0 to the next 16 values. This is equivalent to skipping 16.
                        index += 16;
                    else{ //add 16 zeros
                        uint8_t terminal = index + 16;
                        for(; index < terminal; index++)
210c0e9c:	6005883a 	mov	r2,r12
210c0ea0:	003eee06 	br	210c0a5c <__flash_rwdata_start+0xfffef164>
    if(*pbitcount >= 8){ //we need to shift in at least 1 byte
        *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 8);
        *pbitstream = ((uint8_t*)*pbitstream) + 1;
        if(*pbitcount >= 16){ //at least 2 bytes
            *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 16);
            *pbitstream = ((uint8_t*)*pbitstream) + 1;
210c0ea4:	6b400084 	addi	r13,r13,2
210c0ea8:	003f0b06 	br	210c0ad8 <__flash_rwdata_start+0xfffef1e0>
            else{ //ib.e != 0
                if(P) //sum 0 to the next runlength values. This is equivalent to skipping runlength.
                    index += ib.runlength;
                else{ //add runlength zeros 
                    uint8_t terminal = index + ib.runlength;
                    for(; index < terminal; index++)
210c0eac:	100b883a 	mov	r5,r2
210c0eb0:	1817883a 	mov	r11,r3
210c0eb4:	003f3d06 	br	210c0bac <__flash_rwdata_start+0xfffef2b4>
                            pe[zigzag_table[index]] = 0;
                    }
                }
                else {
                    //END
                    if(P == 0){
210c0eb8:	883f471e 	bne	r17,zero,210c0bd8 <__flash_rwdata_start+0xfffef2e0>
                        //output all zeros
                        for(; index < 64; index++)
210c0ebc:	10c03fcc 	andi	r3,r2,255
210c0ec0:	01000fc4 	movi	r4,63
210c0ec4:	20c0022e 	bgeu	r4,r3,210c0ed0 <lossless_decode+0x5b0>
210c0ec8:	003f4306 	br	210c0bd8 <__flash_rwdata_start+0xfffef2e0>
210c0ecc:	2007883a 	mov	r3,r4
                            pe[zigzag_table[index]] = 0;
210c0ed0:	18c7883a 	add	r3,r3,r3
210c0ed4:	18c7883a 	add	r3,r3,r3
210c0ed8:	50c7883a 	add	r3,r10,r3
210c0edc:	18c00017 	ldw	r3,0(r3)
                }
                else {
                    //END
                    if(P == 0){
                        //output all zeros
                        for(; index < 64; index++)
210c0ee0:	10800044 	addi	r2,r2,1
210c0ee4:	11003fcc 	andi	r4,r2,255
                            pe[zigzag_table[index]] = 0;
210c0ee8:	18c7883a 	add	r3,r3,r3
210c0eec:	48c7883a 	add	r3,r9,r3
210c0ef0:	1800000d 	sth	zero,0(r3)
                }
                else {
                    //END
                    if(P == 0){
                        //output all zeros
                        for(; index < 64; index++)
210c0ef4:	25bff51e 	bne	r4,r22,210c0ecc <__flash_rwdata_start+0xfffef5d4>
210c0ef8:	4a402004 	addi	r9,r9,128
    
    huff_input_t ib;
    //Used for I frame DC differential encoding
    DCTELEM cur = 0;
    
    for(int count = 0; count < num_blocks; count ++){
210c0efc:	4dfeaf1e 	bne	r9,r23,210c09bc <__flash_rwdata_start+0xfffef0c4>
210c0f00:	003f3706 	br	210c0be0 <__flash_rwdata_start+0xfffef2e8>
        if(P){ //differential decoding based on previous frame
            pe[0] += (ib.e * (((DCTELEM*)quant)[0]) );
        }
        else{ //differential decoding based on previous block
            cur += ib.e;
            pe[0] = cur * (((DCTELEM*)quant)[0]);
210c0f04:	38c0000b 	ldhu	r3,0(r7)
#ifndef NULL_QUANT
        if(P){ //differential decoding based on previous frame
            pe[0] += (ib.e * (((DCTELEM*)quant)[0]) );
        }
        else{ //differential decoding based on previous block
            cur += ib.e;
210c0f08:	17c5883a 	add	r2,r2,ra
210c0f0c:	103f883a 	mov	ra,r2
            pe[0] = cur * (((DCTELEM*)quant)[0]);
210c0f10:	10c5383a 	mul	r2,r2,r3
210c0f14:	4880000d 	sth	r2,0(r9)
210c0f18:	003ecf06 	br	210c0a58 <__flash_rwdata_start+0xfffef160>
//DC decode function
huff_input_t input_DC(uint32_t bitbuffer)
{
    huff_input_t ib;
    uint8_t size = INPUT_BITS(bitbuffer, 4);
    if(size == 0){
210c0f1c:	00c00104 	movi	r3,4
210c0f20:	0005883a 	mov	r2,zero
210c0f24:	003eb206 	br	210c09f0 <__flash_rwdata_start+0xfffef0f8>
    (*pbitbuffer) <<= size;
    //total number of bits to be shifted in
    *pbitcount += size;
    if(*pbitcount >= 8){ //we need to shift in at least 1 byte
        *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 8);
        *pbitstream = ((uint8_t*)*pbitstream) + 1;
210c0f28:	6b400044 	addi	r13,r13,1
210c0f2c:	003ec306 	br	210c0a3c <__flash_rwdata_start+0xfffef144>
        if(*pbitcount >= 16){ //at least 2 bytes
            *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 16);
            *pbitstream = ((uint8_t*)*pbitstream) + 1;
210c0f30:	6b400084 	addi	r13,r13,2
210c0f34:	003ec106 	br	210c0a3c <__flash_rwdata_start+0xfffef144>
            if(*pbitcount >= 24){ //at least 3 bytes
                *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 24);
                *pbitstream = ((uint8_t*)*pbitstream) + 1;
                if(*pbitcount == 32){ //all 4 bytes shifted in
                    *pbitbuffer |= *((uint8_t*)(*pbitstream));
210c0f38:	68c000c3 	ldbu	r3,3(r13)
                    *pbitstream = ((uint8_t*)*pbitstream) + 1;
210c0f3c:	6b400104 	addi	r13,r13,4
            *pbitstream = ((uint8_t*)*pbitstream) + 1;
            if(*pbitcount >= 24){ //at least 3 bytes
                *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 24);
                *pbitstream = ((uint8_t*)*pbitstream) + 1;
                if(*pbitcount == 32){ //all 4 bytes shifted in
                    *pbitbuffer |= *((uint8_t*)(*pbitstream));
210c0f40:	40d0b03a 	or	r8,r8,r3
210c0f44:	003ebd06 	br	210c0a3c <__flash_rwdata_start+0xfffef144>

210c0f48 <update_buffer>:
//update buffer
//The function is written to be endianess - independent
void update_buffer(uint32_t* pbitbuffer, void** pbitstream, int* pbitcount, uint8_t size)
{
    //remove decoded bits
    (*pbitbuffer) <<= size;
210c0f48:	20800017 	ldw	r2,0(r4)
210c0f4c:	39c03fcc 	andi	r7,r7,255
    //total number of bits to be shifted in
    *pbitcount += size;
210c0f50:	30c00017 	ldw	r3,0(r6)
//update buffer
//The function is written to be endianess - independent
void update_buffer(uint32_t* pbitbuffer, void** pbitstream, int* pbitcount, uint8_t size)
{
    //remove decoded bits
    (*pbitbuffer) <<= size;
210c0f54:	11c4983a 	sll	r2,r2,r7
    //total number of bits to be shifted in
    *pbitcount += size;
210c0f58:	38cf883a 	add	r7,r7,r3
//update buffer
//The function is written to be endianess - independent
void update_buffer(uint32_t* pbitbuffer, void** pbitstream, int* pbitcount, uint8_t size)
{
    //remove decoded bits
    (*pbitbuffer) <<= size;
210c0f5c:	20800015 	stw	r2,0(r4)
    //total number of bits to be shifted in
    *pbitcount += size;
210c0f60:	31c00015 	stw	r7,0(r6)
    if(*pbitcount >= 8){ //we need to shift in at least 1 byte
210c0f64:	00c001c4 	movi	r3,7
210c0f68:	19c01c0e 	bge	r3,r7,210c0fdc <update_buffer+0x94>
        *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 8);
210c0f6c:	28c00017 	ldw	r3,0(r5)
210c0f70:	3a3ffe04 	addi	r8,r7,-8
210c0f74:	1a400003 	ldbu	r9,0(r3)
        *pbitstream = ((uint8_t*)*pbitstream) + 1;
210c0f78:	1a800044 	addi	r10,r3,1
    //remove decoded bits
    (*pbitbuffer) <<= size;
    //total number of bits to be shifted in
    *pbitcount += size;
    if(*pbitcount >= 8){ //we need to shift in at least 1 byte
        *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 8);
210c0f7c:	4a10983a 	sll	r8,r9,r8
210c0f80:	4084b03a 	or	r2,r8,r2
210c0f84:	20800015 	stw	r2,0(r4)
        *pbitstream = ((uint8_t*)*pbitstream) + 1;
210c0f88:	2a800015 	stw	r10,0(r5)
        if(*pbitcount >= 16){ //at least 2 bytes
210c0f8c:	020003c4 	movi	r8,15
210c0f90:	41c0120e 	bge	r8,r7,210c0fdc <update_buffer+0x94>
            *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 16);
210c0f94:	1a400043 	ldbu	r9,1(r3)
210c0f98:	3a3ffc04 	addi	r8,r7,-16
            *pbitstream = ((uint8_t*)*pbitstream) + 1;
210c0f9c:	1a800084 	addi	r10,r3,2
    *pbitcount += size;
    if(*pbitcount >= 8){ //we need to shift in at least 1 byte
        *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 8);
        *pbitstream = ((uint8_t*)*pbitstream) + 1;
        if(*pbitcount >= 16){ //at least 2 bytes
            *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 16);
210c0fa0:	4a10983a 	sll	r8,r9,r8
210c0fa4:	1204b03a 	or	r2,r2,r8
210c0fa8:	20800015 	stw	r2,0(r4)
            *pbitstream = ((uint8_t*)*pbitstream) + 1;
210c0fac:	2a800015 	stw	r10,0(r5)
            if(*pbitcount >= 24){ //at least 3 bytes
210c0fb0:	020005c4 	movi	r8,23
210c0fb4:	41c0090e 	bge	r8,r7,210c0fdc <update_buffer+0x94>
                *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 24);
210c0fb8:	1a400083 	ldbu	r9,2(r3)
210c0fbc:	3a3ffa04 	addi	r8,r7,-24
                *pbitstream = ((uint8_t*)*pbitstream) + 1;
210c0fc0:	1a8000c4 	addi	r10,r3,3
        *pbitstream = ((uint8_t*)*pbitstream) + 1;
        if(*pbitcount >= 16){ //at least 2 bytes
            *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 16);
            *pbitstream = ((uint8_t*)*pbitstream) + 1;
            if(*pbitcount >= 24){ //at least 3 bytes
                *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 24);
210c0fc4:	4a10983a 	sll	r8,r9,r8
210c0fc8:	1204b03a 	or	r2,r2,r8
210c0fcc:	20800015 	stw	r2,0(r4)
                *pbitstream = ((uint8_t*)*pbitstream) + 1;
210c0fd0:	2a800015 	stw	r10,0(r5)
                if(*pbitcount == 32){ //all 4 bytes shifted in
210c0fd4:	02000804 	movi	r8,32
210c0fd8:	3a000326 	beq	r7,r8,210c0fe8 <update_buffer+0xa0>
                    *pbitstream = ((uint8_t*)*pbitstream) + 1;
                }
            }
        }
    }
    *pbitcount &= 7; //the resulting *pbitcount should be between 0 and 7
210c0fdc:	39c001cc 	andi	r7,r7,7
210c0fe0:	31c00015 	stw	r7,0(r6)
210c0fe4:	f800283a 	ret
            *pbitstream = ((uint8_t*)*pbitstream) + 1;
            if(*pbitcount >= 24){ //at least 3 bytes
                *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 24);
                *pbitstream = ((uint8_t*)*pbitstream) + 1;
                if(*pbitcount == 32){ //all 4 bytes shifted in
                    *pbitbuffer |= *((uint8_t*)(*pbitstream));
210c0fe8:	1a0000c3 	ldbu	r8,3(r3)
                    *pbitstream = ((uint8_t*)*pbitstream) + 1;
210c0fec:	18c00104 	addi	r3,r3,4
            *pbitstream = ((uint8_t*)*pbitstream) + 1;
            if(*pbitcount >= 24){ //at least 3 bytes
                *pbitbuffer |= *((uint8_t*)(*pbitstream)) << (*pbitcount - 24);
                *pbitstream = ((uint8_t*)*pbitstream) + 1;
                if(*pbitcount == 32){ //all 4 bytes shifted in
                    *pbitbuffer |= *((uint8_t*)(*pbitstream));
210c0ff0:	1204b03a 	or	r2,r2,r8
210c0ff4:	20800015 	stw	r2,0(r4)
                    *pbitstream = ((uint8_t*)*pbitstream) + 1;
210c0ff8:	28c00015 	stw	r3,0(r5)
210c0ffc:	003ff706 	br	210c0fdc <__flash_rwdata_start+0xfffef6e4>

210c1000 <input_DC>:

//DC decode function
huff_input_t input_DC(uint32_t bitbuffer)
{
    huff_input_t ib;
    uint8_t size = INPUT_BITS(bitbuffer, 4);
210c1000:	2006d73a 	srli	r3,r4,28
//extract num bits from the buffer and returns them
#define INPUT_BITS(buffer, num) (buffer) >> (32 - (num))

//DC decode function
huff_input_t input_DC(uint32_t bitbuffer)
{
210c1004:	deffff04 	addi	sp,sp,-4
    huff_input_t ib;
    uint8_t size = INPUT_BITS(bitbuffer, 4);
    if(size == 0){
210c1008:	18001426 	beq	r3,zero,210c105c <input_DC+0x5c>
        ib.e = 0;
        ib.bits = 4;
    }
    else{
        bitbuffer <<= 4;
210c100c:	2008913a 	slli	r4,r4,4
        ib.e = HUFF_EXTEND(INPUT_BITS(bitbuffer,size),size);
210c1010:	00800804 	movi	r2,32
210c1014:	10c5c83a 	sub	r2,r2,r3
210c1018:	2088d83a 	srl	r4,r4,r2
210c101c:	18bfffc4 	addi	r2,r3,-1
210c1020:	2084d83a 	srl	r2,r4,r2
210c1024:	10000826 	beq	r2,zero,210c1048 <input_DC+0x48>
        ib.bits = size + 4;
210c1028:	18c00104 	addi	r3,r3,4
    }
    return ib;
210c102c:	d8c00005 	stb	r3,0(sp)
210c1030:	d8000045 	stb	zero,1(sp)
210c1034:	d880000b 	ldhu	r2,0(sp)
210c1038:	2008943a 	slli	r4,r4,16
}
210c103c:	1104b03a 	or	r2,r2,r4
210c1040:	dec00104 	addi	sp,sp,4
210c1044:	f800283a 	ret
        ib.e = 0;
        ib.bits = 4;
    }
    else{
        bitbuffer <<= 4;
        ib.e = HUFF_EXTEND(INPUT_BITS(bitbuffer,size),size);
210c1048:	00bfffc4 	movi	r2,-1
210c104c:	10c4983a 	sll	r2,r2,r3
210c1050:	10800044 	addi	r2,r2,1
210c1054:	1109883a 	add	r4,r2,r4
210c1058:	003ff306 	br	210c1028 <__flash_rwdata_start+0xfffef730>
huff_input_t input_DC(uint32_t bitbuffer)
{
    huff_input_t ib;
    uint8_t size = INPUT_BITS(bitbuffer, 4);
    if(size == 0){
        ib.e = 0;
210c105c:	0009883a 	mov	r4,zero
        ib.bits = 4;
210c1060:	00c00104 	movi	r3,4
210c1064:	003ff106 	br	210c102c <__flash_rwdata_start+0xfffef734>

210c1068 <input_AC>:
huff_input_t input_AC(uint32_t bitbuffer)
{
    huff_input_t ib;
    uint8_t size;
    ib.runlength  = INPUT_BITS(bitbuffer, 4);
    bitbuffer <<= 4;
210c1068:	2006913a 	slli	r3,r4,4
    return ib;
}

//AC decode function
huff_input_t input_AC(uint32_t bitbuffer)
{
210c106c:	deffff04 	addi	sp,sp,-4
    huff_input_t ib;
    uint8_t size;
    ib.runlength  = INPUT_BITS(bitbuffer, 4);
210c1070:	200ad73a 	srli	r5,r4,28
    bitbuffer <<= 4;
    size  = INPUT_BITS(bitbuffer, 4);
210c1074:	1806d73a 	srli	r3,r3,28
    if(size == 0) {
210c1078:	18001426 	beq	r3,zero,210c10cc <input_AC+0x64>
        //and if size > 0, the amplitude cannot be 0.
        ib.e = 0;
        ib.bits = 8;
    }
    else{
        bitbuffer <<= 4;
210c107c:	2008923a 	slli	r4,r4,8
        ib.e = HUFF_EXTEND(INPUT_BITS(bitbuffer,size),size);
210c1080:	00800804 	movi	r2,32
210c1084:	10c5c83a 	sub	r2,r2,r3
210c1088:	2088d83a 	srl	r4,r4,r2
210c108c:	18bfffc4 	addi	r2,r3,-1
210c1090:	2084d83a 	srl	r2,r4,r2
210c1094:	10000826 	beq	r2,zero,210c10b8 <input_AC+0x50>
        ib.bits = size + 8;
210c1098:	18c00204 	addi	r3,r3,8
    }
    return ib;
210c109c:	d8c00005 	stb	r3,0(sp)
210c10a0:	d9400045 	stb	r5,1(sp)
210c10a4:	d880000b 	ldhu	r2,0(sp)
210c10a8:	2008943a 	slli	r4,r4,16
}
210c10ac:	1104b03a 	or	r2,r2,r4
210c10b0:	dec00104 	addi	sp,sp,4
210c10b4:	f800283a 	ret
        ib.e = 0;
        ib.bits = 8;
    }
    else{
        bitbuffer <<= 4;
        ib.e = HUFF_EXTEND(INPUT_BITS(bitbuffer,size),size);
210c10b8:	00bfffc4 	movi	r2,-1
210c10bc:	10c4983a 	sll	r2,r2,r3
210c10c0:	10800044 	addi	r2,r2,1
210c10c4:	1109883a 	add	r4,r2,r4
210c10c8:	003ff306 	br	210c1098 <__flash_rwdata_start+0xfffef7a0>
    bitbuffer <<= 4;
    size  = INPUT_BITS(bitbuffer, 4);
    if(size == 0) {
        //return a value of 0. Notice this is ok size if size == 0, then it's either a END or ZRL,
        //and if size > 0, the amplitude cannot be 0.
        ib.e = 0;
210c10cc:	0009883a 	mov	r4,zero
        ib.bits = 8;
210c10d0:	00c00204 	movi	r3,8
210c10d4:	003ff106 	br	210c109c <__flash_rwdata_start+0xfffef7a4>

210c10d8 <mjpeg423_decode>:
	}
}

// main decoder function
void mjpeg423_decode(alt_msgdma_dev *read_dma_cb, alt_msgdma_dev *read_dma_cr)
{
210c10d8:	deffed04 	addi	sp,sp,-76
210c10dc:	dd800f15 	stw	r22,60(sp)
210c10e0:	202d883a 	mov	r22,r4
	message_t *msg;
	altera_avalon_mailbox_dev *signal_cpu0;
	altera_avalon_mailbox_dev *receive_cpu0;

	// setup the mailboxes
	signal_cpu0 = altera_avalon_mailbox_open(MAILBOX_SIMPLE_1_0_NAME, NULL, NULL);
210c10e4:	01040034 	movhi	r4,4096
	}
}

// main decoder function
void mjpeg423_decode(alt_msgdma_dev *read_dma_cb, alt_msgdma_dev *read_dma_cr)
{
210c10e8:	ddc01015 	stw	r23,64(sp)
	message_t *msg;
	altera_avalon_mailbox_dev *signal_cpu0;
	altera_avalon_mailbox_dev *receive_cpu0;

	// setup the mailboxes
	signal_cpu0 = altera_avalon_mailbox_open(MAILBOX_SIMPLE_1_0_NAME, NULL, NULL);
210c10ec:	21000704 	addi	r4,r4,28
210c10f0:	000d883a 	mov	r6,zero
	}
}

// main decoder function
void mjpeg423_decode(alt_msgdma_dev *read_dma_cb, alt_msgdma_dev *read_dma_cr)
{
210c10f4:	282f883a 	mov	r23,r5
	message_t *msg;
	altera_avalon_mailbox_dev *signal_cpu0;
	altera_avalon_mailbox_dev *receive_cpu0;

	// setup the mailboxes
	signal_cpu0 = altera_avalon_mailbox_open(MAILBOX_SIMPLE_1_0_NAME, NULL, NULL);
210c10f8:	000b883a 	mov	r5,zero
	}
}

// main decoder function
void mjpeg423_decode(alt_msgdma_dev *read_dma_cb, alt_msgdma_dev *read_dma_cr)
{
210c10fc:	dfc01215 	stw	ra,72(sp)
210c1100:	dc000915 	stw	r16,36(sp)
210c1104:	df001115 	stw	fp,68(sp)
210c1108:	dd400e15 	stw	r21,56(sp)
210c110c:	dd000d15 	stw	r20,52(sp)
210c1110:	dcc00c15 	stw	r19,48(sp)
210c1114:	dc800b15 	stw	r18,44(sp)
210c1118:	dc400a15 	stw	r17,40(sp)
	message_t *msg;
	altera_avalon_mailbox_dev *signal_cpu0;
	altera_avalon_mailbox_dev *receive_cpu0;

	// setup the mailboxes
	signal_cpu0 = altera_avalon_mailbox_open(MAILBOX_SIMPLE_1_0_NAME, NULL, NULL);
210c111c:	10cef000 	call	210cef00 <altera_avalon_mailbox_open>
	receive_cpu0 = altera_avalon_mailbox_open(MAILBOX_SIMPLE_0_1_NAME, NULL, NULL);
210c1120:	01040034 	movhi	r4,4096
210c1124:	21000d04 	addi	r4,r4,52
210c1128:	000b883a 	mov	r5,zero
210c112c:	000d883a 	mov	r6,zero
	message_t *msg;
	altera_avalon_mailbox_dev *signal_cpu0;
	altera_avalon_mailbox_dev *receive_cpu0;

	// setup the mailboxes
	signal_cpu0 = altera_avalon_mailbox_open(MAILBOX_SIMPLE_1_0_NAME, NULL, NULL);
210c1130:	1021883a 	mov	r16,r2
	receive_cpu0 = altera_avalon_mailbox_open(MAILBOX_SIMPLE_0_1_NAME, NULL, NULL);
210c1134:	10cef000 	call	210cef00 <altera_avalon_mailbox_open>
210c1138:	d8800515 	stw	r2,20(sp)

	if (!signal_cpu0 || !receive_cpu0)
210c113c:	80007426 	beq	r16,zero,210c1310 <mjpeg423_decode+0x238>
210c1140:	10007326 	beq	r2,zero,210c1310 <mjpeg423_decode+0x238>
	{
		fprintf(stderr, "ERROR: failed to open mailbox\n");
		return;
	}

	alt_msgdma_standard_descriptor *read_descriptor_cb = (alt_msgdma_standard_descriptor*)malloc(sizeof(alt_msgdma_standard_descriptor));
210c1144:	01000404 	movi	r4,16
210c1148:	10c1a000 	call	210c1a00 <malloc>
	alt_msgdma_standard_descriptor *read_descriptor_cr = (alt_msgdma_standard_descriptor*)malloc(sizeof(alt_msgdma_standard_descriptor));
210c114c:	01000404 	movi	r4,16
	{
		fprintf(stderr, "ERROR: failed to open mailbox\n");
		return;
	}

	alt_msgdma_standard_descriptor *read_descriptor_cb = (alt_msgdma_standard_descriptor*)malloc(sizeof(alt_msgdma_standard_descriptor));
210c1150:	d8800315 	stw	r2,12(sp)
	alt_msgdma_standard_descriptor *read_descriptor_cr = (alt_msgdma_standard_descriptor*)malloc(sizeof(alt_msgdma_standard_descriptor));
210c1154:	10c1a000 	call	210c1a00 <malloc>
210c1158:	d8800415 	stw	r2,16(sp)

	// wait for 1st message
	while (1)
	{
		alt_dcache_flush_all();
210c115c:	10ce1dc0 	call	210ce1dc <alt_dcache_flush_all>
		altera_avalon_mailbox_retrieve_poll(receive_cpu0, message, 0);
210c1160:	d9000517 	ldw	r4,20(sp)
210c1164:	d9400104 	addi	r5,sp,4
210c1168:	000d883a 	mov	r6,zero
210c116c:	10cf2780 	call	210cf278 <altera_avalon_mailbox_retrieve_poll>
		{

			frame_index = message[0];
			msg = (message_t*)message[1];

			block_size = msg->block_size;
210c1170:	d8800217 	ldw	r2,8(sp)
			printf("Received 1st message  number: %d  size %d \n", message[0], msg->block_size);
210c1174:	d9400117 	ldw	r5,4(sp)
210c1178:	01040034 	movhi	r4,4096
		{

			frame_index = message[0];
			msg = (message_t*)message[1];

			block_size = msg->block_size;
210c117c:	14800317 	ldw	r18,12(r2)
			printf("Received 1st message  number: %d  size %d \n", message[0], msg->block_size);
210c1180:	21001b04 	addi	r4,r4,108
210c1184:	900d883a 	mov	r6,r18
210c1188:	10c21fc0 	call	210c21fc <printf>
			break;
		}
	}
	//send framesize ack
//	alt_dcache_flush_all();
	while (altera_avalon_mailbox_send(signal_cpu0, message, 0, POLL));
210c118c:	8009883a 	mov	r4,r16
210c1190:	d9400104 	addi	r5,sp,4
210c1194:	000d883a 	mov	r6,zero
210c1198:	01c00044 	movi	r7,1
210c119c:	10cf12c0 	call	210cf12c <altera_avalon_mailbox_send>
210c11a0:	103ffa1e 	bne	r2,zero,210c118c <__flash_rwdata_start+0xfffef894>

    dct_block_t* CbDCAC;
    if((CbDCAC = (dct_block_t*)memalign(128, block_size * 64 * sizeof(DCTELEM))) == NULL)
210c11a4:	902691fa 	slli	r19,r18,7
210c11a8:	01002004 	movi	r4,128
210c11ac:	980b883a 	mov	r5,r19
210c11b0:	10c18300 	call	210c1830 <memalign>
210c11b4:	1029883a 	mov	r20,r2
210c11b8:	1000031e 	bne	r2,zero,210c11c8 <mjpeg423_decode+0xf0>
    {
    	error_and_exit("cannot allocate CbDCAC");
210c11bc:	01040034 	movhi	r4,4096
210c11c0:	21002604 	addi	r4,r4,152
210c11c4:	10c01dc0 	call	210c01dc <error_and_exit>
    }
    dct_block_t* CrDCAC;
    if((CrDCAC = (dct_block_t*)memalign(128, block_size * 64 * sizeof(DCTELEM))) == NULL)
210c11c8:	01002004 	movi	r4,128
210c11cc:	980b883a 	mov	r5,r19
210c11d0:	10c18300 	call	210c1830 <memalign>
210c11d4:	102b883a 	mov	r21,r2
210c11d8:	1000031e 	bne	r2,zero,210c11e8 <mjpeg423_decode+0x110>
    {
    	error_and_exit("cannot allocate CrDCAC");
210c11dc:	01040034 	movhi	r4,4096
210c11e0:	21002c04 	addi	r4,r4,176
210c11e4:	10c01dc0 	call	210c01dc <error_and_exit>
210c11e8:	07040034 	movhi	fp,4096
210c11ec:	e7092304 	addi	fp,fp,9356
    while (1)
    {
    	// wait for message from cpu0
    	while (1)
    	{
    		alt_dcache_flush_all();
210c11f0:	10ce1dc0 	call	210ce1dc <alt_dcache_flush_all>
    		altera_avalon_mailbox_retrieve_poll(receive_cpu0, message, 0);
210c11f4:	d9000517 	ldw	r4,20(sp)
210c11f8:	d9400104 	addi	r5,sp,4
210c11fc:	000d883a 	mov	r6,zero
210c1200:	10cf2780 	call	210cf278 <altera_avalon_mailbox_retrieve_poll>
    		}
    		else
    		{
//    			alt_dcache_flush_all();
    			frame_index = message[0];
    			msg = (message_t*)message[1];
210c1204:	d8800217 	ldw	r2,8(sp)
    			printf("Receive Error\n");
    		}
    		else
    		{
//    			alt_dcache_flush_all();
    			frame_index = message[0];
210c1208:	d8c00117 	ldw	r3,4(sp)
    			msg = (message_t*)message[1];

    			Cbbitstream = msg->Cbbitstream;
    			Crbitstream = msg->Crbitstream;
    			frame_type = msg->frame_type;
    			printf("received frame number %d, cb: %d \n", message[0], msg->Cbbitstream);
210c120c:	01040034 	movhi	r4,4096
    		{
//    			alt_dcache_flush_all();
    			frame_index = message[0];
    			msg = (message_t*)message[1];

    			Cbbitstream = msg->Cbbitstream;
210c1210:	12000017 	ldw	r8,0(r2)
    			Crbitstream = msg->Crbitstream;
210c1214:	12400117 	ldw	r9,4(r2)
    			frame_type = msg->frame_type;
    			printf("received frame number %d, cb: %d \n", message[0], msg->Cbbitstream);
210c1218:	180b883a 	mov	r5,r3
210c121c:	400d883a 	mov	r6,r8
210c1220:	21003204 	addi	r4,r4,200
    			frame_index = message[0];
    			msg = (message_t*)message[1];

    			Cbbitstream = msg->Cbbitstream;
    			Crbitstream = msg->Crbitstream;
    			frame_type = msg->frame_type;
210c1224:	14400217 	ldw	r17,8(r2)
    			printf("received frame number %d, cb: %d \n", message[0], msg->Cbbitstream);
210c1228:	d8c00815 	stw	r3,32(sp)
210c122c:	da400715 	stw	r9,28(sp)
210c1230:	da000615 	stw	r8,24(sp)
210c1234:	10c21fc0 	call	210c21fc <printf>
    			break;
    		}
    	}

        // lossless decoding
        lossless_decode(block_size, Cbbitstream, CbDCAC, Cquant, frame_type);
210c1238:	da000617 	ldw	r8,24(sp)
210c123c:	01c40034 	movhi	r7,4096
210c1240:	39c1e304 	addi	r7,r7,1932
210c1244:	400b883a 	mov	r5,r8
210c1248:	9009883a 	mov	r4,r18
210c124c:	a00d883a 	mov	r6,r20
210c1250:	dc400015 	stw	r17,0(sp)
210c1254:	10c09200 	call	210c0920 <lossless_decode>
        lossless_decode(block_size, Crbitstream, CrDCAC, Cquant, frame_type);
210c1258:	da400717 	ldw	r9,28(sp)
210c125c:	01c40034 	movhi	r7,4096
210c1260:	39c1e304 	addi	r7,r7,1932
210c1264:	dc400015 	stw	r17,0(sp)
210c1268:	9009883a 	mov	r4,r18
210c126c:	480b883a 	mov	r5,r9
210c1270:	a80d883a 	mov	r6,r21
210c1274:	10c09200 	call	210c0920 <lossless_decode>

        // signal cpu0 that we're ready for new data
        message[0] = frame_index;
210c1278:	d8c00817 	ldw	r3,32(sp)
        message[1] = 0;
210c127c:	d8000215 	stw	zero,8(sp)
        // lossless decoding
        lossless_decode(block_size, Cbbitstream, CbDCAC, Cquant, frame_type);
        lossless_decode(block_size, Crbitstream, CrDCAC, Cquant, frame_type);

        // signal cpu0 that we're ready for new data
        message[0] = frame_index;
210c1280:	d8c00115 	stw	r3,4(sp)
        message[1] = 0;

        while (altera_avalon_mailbox_send(signal_cpu0, message, 0, POLL));
210c1284:	8009883a 	mov	r4,r16
210c1288:	d9400104 	addi	r5,sp,4
210c128c:	000d883a 	mov	r6,zero
210c1290:	01c00044 	movi	r7,1
210c1294:	10cf12c0 	call	210cf12c <altera_avalon_mailbox_send>
210c1298:	103ffa1e 	bne	r2,zero,210c1284 <__flash_rwdata_start+0xfffef98c>

static void dma_read(alt_msgdma_dev *device, alt_msgdma_standard_descriptor *descriptor, alt_u32 *address, alt_u32 len, bool is_sync)
{
	int ret;

	ret = alt_msgdma_construct_standard_mm_to_st_descriptor(device, descriptor, address, len, 0);
210c129c:	d9400317 	ldw	r5,12(sp)
210c12a0:	d8000015 	stw	zero,0(sp)
210c12a4:	b009883a 	mov	r4,r22
210c12a8:	a00d883a 	mov	r6,r20
210c12ac:	980f883a 	mov	r7,r19
210c12b0:	10cf4980 	call	210cf498 <alt_msgdma_construct_standard_mm_to_st_descriptor>
	if (ret != 0)
210c12b4:	1000391e 	bne	r2,zero,210c139c <mjpeg423_decode+0x2c4>
	{
		fprintf(stderr, "ERROR CPU1: dma_read can't make descriptor\n");
	}

	ret = is_sync ? alt_msgdma_standard_descriptor_sync_transfer(device, descriptor) : alt_msgdma_standard_descriptor_async_transfer(device, descriptor);
210c12b8:	d9400317 	ldw	r5,12(sp)
210c12bc:	b009883a 	mov	r4,r22
210c12c0:	10cfeec0 	call	210cfeec <alt_msgdma_standard_descriptor_async_transfer>
	if (ret != 0)
210c12c4:	1000271e 	bne	r2,zero,210c1364 <mjpeg423_decode+0x28c>
	{
		fprintf(stderr, "ERROR CPU1: dma_read can't transfer: %d\n", ret);
	}
	else
	{
		printf("CPU1: dma_read success.\n");
210c12c8:	01040034 	movhi	r4,4096
210c12cc:	21005104 	addi	r4,r4,324
210c12d0:	10c23000 	call	210c2300 <puts>

static void dma_read(alt_msgdma_dev *device, alt_msgdma_standard_descriptor *descriptor, alt_u32 *address, alt_u32 len, bool is_sync)
{
	int ret;

	ret = alt_msgdma_construct_standard_mm_to_st_descriptor(device, descriptor, address, len, 0);
210c12d4:	d9400417 	ldw	r5,16(sp)
210c12d8:	d8000015 	stw	zero,0(sp)
210c12dc:	b809883a 	mov	r4,r23
210c12e0:	a80d883a 	mov	r6,r21
210c12e4:	980f883a 	mov	r7,r19
210c12e8:	10cf4980 	call	210cf498 <alt_msgdma_construct_standard_mm_to_st_descriptor>
	if (ret != 0)
210c12ec:	1000331e 	bne	r2,zero,210c13bc <mjpeg423_decode+0x2e4>
	{
		fprintf(stderr, "ERROR CPU1: dma_read can't make descriptor\n");
	}

	ret = is_sync ? alt_msgdma_standard_descriptor_sync_transfer(device, descriptor) : alt_msgdma_standard_descriptor_async_transfer(device, descriptor);
210c12f0:	d9400417 	ldw	r5,16(sp)
210c12f4:	b809883a 	mov	r4,r23
210c12f8:	10cfeec0 	call	210cfeec <alt_msgdma_standard_descriptor_async_transfer>
	if (ret != 0)
210c12fc:	1000201e 	bne	r2,zero,210c1380 <mjpeg423_decode+0x2a8>
	{
		fprintf(stderr, "ERROR CPU1: dma_read can't transfer: %d\n", ret);
	}
	else
	{
		printf("CPU1: dma_read success.\n");
210c1300:	01040034 	movhi	r4,4096
210c1304:	21005104 	addi	r4,r4,324
210c1308:	10c23000 	call	210c2300 <puts>
210c130c:	003fb806 	br	210c11f0 <__flash_rwdata_start+0xfffef8f8>
	signal_cpu0 = altera_avalon_mailbox_open(MAILBOX_SIMPLE_1_0_NAME, NULL, NULL);
	receive_cpu0 = altera_avalon_mailbox_open(MAILBOX_SIMPLE_0_1_NAME, NULL, NULL);

	if (!signal_cpu0 || !receive_cpu0)
	{
		fprintf(stderr, "ERROR: failed to open mailbox\n");
210c1310:	00840034 	movhi	r2,4096
210c1314:	10892304 	addi	r2,r2,9356
210c1318:	10800017 	ldw	r2,0(r2)
210c131c:	01040034 	movhi	r4,4096
210c1320:	21001304 	addi	r4,r4,76
210c1324:	11c00317 	ldw	r7,12(r2)
210c1328:	01400044 	movi	r5,1
210c132c:	01800784 	movi	r6,30
210c1330:	10c17f00 	call	210c17f0 <fwrite>
    free(CrDCAC);
    free(read_descriptor_cb);
    free(read_descriptor_cr);

    return;
}
210c1334:	dfc01217 	ldw	ra,72(sp)
210c1338:	df001117 	ldw	fp,68(sp)
210c133c:	ddc01017 	ldw	r23,64(sp)
210c1340:	dd800f17 	ldw	r22,60(sp)
210c1344:	dd400e17 	ldw	r21,56(sp)
210c1348:	dd000d17 	ldw	r20,52(sp)
210c134c:	dcc00c17 	ldw	r19,48(sp)
210c1350:	dc800b17 	ldw	r18,44(sp)
210c1354:	dc400a17 	ldw	r17,40(sp)
210c1358:	dc000917 	ldw	r16,36(sp)
210c135c:	dec01304 	addi	sp,sp,76
210c1360:	f800283a 	ret
	}

	ret = is_sync ? alt_msgdma_standard_descriptor_sync_transfer(device, descriptor) : alt_msgdma_standard_descriptor_async_transfer(device, descriptor);
	if (ret != 0)
	{
		fprintf(stderr, "ERROR CPU1: dma_read can't transfer: %d\n", ret);
210c1364:	e0c00017 	ldw	r3,0(fp)
210c1368:	01440034 	movhi	r5,4096
210c136c:	29404604 	addi	r5,r5,280
210c1370:	19000317 	ldw	r4,12(r3)
210c1374:	100d883a 	mov	r6,r2
210c1378:	10c17000 	call	210c1700 <fprintf>
210c137c:	003fd506 	br	210c12d4 <__flash_rwdata_start+0xfffef9dc>
210c1380:	e0c00017 	ldw	r3,0(fp)
210c1384:	01440034 	movhi	r5,4096
210c1388:	29404604 	addi	r5,r5,280
210c138c:	19000317 	ldw	r4,12(r3)
210c1390:	100d883a 	mov	r6,r2
210c1394:	10c17000 	call	210c1700 <fprintf>
210c1398:	003f9506 	br	210c11f0 <__flash_rwdata_start+0xfffef8f8>
	int ret;

	ret = alt_msgdma_construct_standard_mm_to_st_descriptor(device, descriptor, address, len, 0);
	if (ret != 0)
	{
		fprintf(stderr, "ERROR CPU1: dma_read can't make descriptor\n");
210c139c:	e0800017 	ldw	r2,0(fp)
210c13a0:	01040034 	movhi	r4,4096
210c13a4:	21003b04 	addi	r4,r4,236
210c13a8:	11c00317 	ldw	r7,12(r2)
210c13ac:	01400044 	movi	r5,1
210c13b0:	01800ac4 	movi	r6,43
210c13b4:	10c17f00 	call	210c17f0 <fwrite>
210c13b8:	003fbf06 	br	210c12b8 <__flash_rwdata_start+0xfffef9c0>
210c13bc:	e0800017 	ldw	r2,0(fp)
210c13c0:	01040034 	movhi	r4,4096
210c13c4:	21003b04 	addi	r4,r4,236
210c13c8:	11c00317 	ldw	r7,12(r2)
210c13cc:	01400044 	movi	r5,1
210c13d0:	01800ac4 	movi	r6,43
210c13d4:	10c17f00 	call	210c17f0 <fwrite>
210c13d8:	003fc506 	br	210c12f0 <__flash_rwdata_start+0xfffef9f8>

210c13dc <ycbcr_to_rgb>:

#else

//null implementation
void ycbcr_to_rgb(int h, int w, uint32_t w_size, pcolor_block_t Y, pcolor_block_t Cb, pcolor_block_t Cr, rgb_pixel_t* rgbblock)
{
210c13dc:	2189383a 	mul	r4,r4,r6
210c13e0:	3185883a 	add	r2,r6,r6
210c13e4:	defff404 	addi	sp,sp,-48
210c13e8:	1085883a 	add	r2,r2,r2
210c13ec:	da800c17 	ldw	r10,48(sp)
210c13f0:	da400d17 	ldw	r9,52(sp)
210c13f4:	290b883a 	add	r5,r5,r4
210c13f8:	d8800015 	stw	r2,0(sp)
210c13fc:	d8800e17 	ldw	r2,56(sp)
210c1400:	2957883a 	add	r11,r5,r5
210c1404:	5ad7883a 	add	r11,r11,r11
210c1408:	dfc00b15 	stw	ra,44(sp)
210c140c:	df000a15 	stw	fp,40(sp)
210c1410:	ddc00915 	stw	r23,36(sp)
210c1414:	dd800815 	stw	r22,32(sp)
210c1418:	dd400715 	stw	r21,28(sp)
210c141c:	dd000615 	stw	r20,24(sp)
210c1420:	dcc00515 	stw	r19,20(sp)
210c1424:	dc800415 	stw	r18,16(sp)
210c1428:	dc400315 	stw	r17,12(sp)
210c142c:	dc000215 	stw	r16,8(sp)
210c1430:	12d7883a 	add	r11,r2,r11
210c1434:	57c00044 	addi	ra,r10,1
210c1438:	3f000044 	addi	fp,r7,1
210c143c:	4dc00044 	addi	r23,r9,1
210c1440:	55800084 	addi	r22,r10,2
210c1444:	3d400084 	addi	r21,r7,2
210c1448:	4d000084 	addi	r20,r9,2
210c144c:	54c000c4 	addi	r19,r10,3
210c1450:	3c8000c4 	addi	r18,r7,3
210c1454:	4c4000c4 	addi	r17,r9,3
210c1458:	54000104 	addi	r16,r10,4
210c145c:	3bc00104 	addi	r15,r7,4
210c1460:	4b800104 	addi	r14,r9,4
210c1464:	53400144 	addi	r13,r10,5
210c1468:	03000204 	movi	r12,8
210c146c:	d9800115 	stw	r6,4(sp)
        index = (h+y) * w_size + w;
        for(int x = 0; x < 8; x++)
        {
        	pixel = &rgbblock[index];
        	*pixel = Cb[y][x]  |
        			 Y[y][x] << 8 |
210c1470:	3a000003 	ldbu	r8,0(r7)
        		     Cr[y][x] << 16  |
210c1474:	48c00003 	ldbu	r3,0(r9)
    for (int y = 0; y < 8; y++){
        index = (h+y) * w_size + w;
        for(int x = 0; x < 8; x++)
        {
        	pixel = &rgbblock[index];
        	*pixel = Cb[y][x]  |
210c1478:	51000003 	ldbu	r4,0(r10)
        			 Y[y][x] << 8 |
210c147c:	4010923a 	slli	r8,r8,8
        		     Cr[y][x] << 16  |
210c1480:	1806943a 	slli	r3,r3,16
    for (int y = 0; y < 8; y++){
        index = (h+y) * w_size + w;
        for(int x = 0; x < 8; x++)
        {
        	pixel = &rgbblock[index];
        	*pixel = Cb[y][x]  |
210c1484:	d9800e17 	ldw	r6,56(sp)
        			 Y[y][x] << 8 |
        		     Cr[y][x] << 16  |
        			 0 << 24;

            index++;
210c1488:	28800044 	addi	r2,r5,1
210c148c:	40c6b03a 	or	r3,r8,r3
        for(int x = 0; x < 8; x++)
        {
        	pixel = &rgbblock[index];
        	*pixel = Cb[y][x]  |
        			 Y[y][x] << 8 |
        		     Cr[y][x] << 16  |
210c1490:	1906b03a 	or	r3,r3,r4
    for (int y = 0; y < 8; y++){
        index = (h+y) * w_size + w;
        for(int x = 0; x < 8; x++)
        {
        	pixel = &rgbblock[index];
        	*pixel = Cb[y][x]  |
210c1494:	58c00015 	stw	r3,0(r11)
        			 Y[y][x] << 8 |
210c1498:	e2000003 	ldbu	r8,0(fp)
        		     Cr[y][x] << 16  |
210c149c:	b8c00003 	ldbu	r3,0(r23)
    for (int y = 0; y < 8; y++){
        index = (h+y) * w_size + w;
        for(int x = 0; x < 8; x++)
        {
        	pixel = &rgbblock[index];
        	*pixel = Cb[y][x]  |
210c14a0:	f9000003 	ldbu	r4,0(ra)
        			 Y[y][x] << 8 |
210c14a4:	4010923a 	slli	r8,r8,8
        		     Cr[y][x] << 16  |
210c14a8:	1806943a 	slli	r3,r3,16

    for (int y = 0; y < 8; y++){
        index = (h+y) * w_size + w;
        for(int x = 0; x < 8; x++)
        {
        	pixel = &rgbblock[index];
210c14ac:	1085883a 	add	r2,r2,r2
210c14b0:	1085883a 	add	r2,r2,r2
210c14b4:	40c6b03a 	or	r3,r8,r3
        	*pixel = Cb[y][x]  |
210c14b8:	3085883a 	add	r2,r6,r2
        			 Y[y][x] << 8 |
        		     Cr[y][x] << 16  |
210c14bc:	1906b03a 	or	r3,r3,r4
    for (int y = 0; y < 8; y++){
        index = (h+y) * w_size + w;
        for(int x = 0; x < 8; x++)
        {
        	pixel = &rgbblock[index];
        	*pixel = Cb[y][x]  |
210c14c0:	10c00015 	stw	r3,0(r2)
        			 Y[y][x] << 8 |
210c14c4:	aa000003 	ldbu	r8,0(r21)
        		     Cr[y][x] << 16  |
210c14c8:	a0c00003 	ldbu	r3,0(r20)
    for (int y = 0; y < 8; y++){
        index = (h+y) * w_size + w;
        for(int x = 0; x < 8; x++)
        {
        	pixel = &rgbblock[index];
        	*pixel = Cb[y][x]  |
210c14cc:	b1000003 	ldbu	r4,0(r22)
        			 Y[y][x] << 8 |
210c14d0:	4010923a 	slli	r8,r8,8
        		     Cr[y][x] << 16  |
210c14d4:	1806943a 	slli	r3,r3,16
210c14d8:	39c00204 	addi	r7,r7,8
210c14dc:	4a400204 	addi	r9,r9,8
210c14e0:	40c6b03a 	or	r3,r8,r3
210c14e4:	1906b03a 	or	r3,r3,r4
    for (int y = 0; y < 8; y++){
        index = (h+y) * w_size + w;
        for(int x = 0; x < 8; x++)
        {
        	pixel = &rgbblock[index];
        	*pixel = Cb[y][x]  |
210c14e8:	10c00115 	stw	r3,4(r2)
        			 Y[y][x] << 8 |
210c14ec:	92000003 	ldbu	r8,0(r18)
        		     Cr[y][x] << 16  |
210c14f0:	88c00003 	ldbu	r3,0(r17)
    for (int y = 0; y < 8; y++){
        index = (h+y) * w_size + w;
        for(int x = 0; x < 8; x++)
        {
        	pixel = &rgbblock[index];
        	*pixel = Cb[y][x]  |
210c14f4:	99000003 	ldbu	r4,0(r19)
        			 Y[y][x] << 8 |
210c14f8:	4010923a 	slli	r8,r8,8
        		     Cr[y][x] << 16  |
210c14fc:	1806943a 	slli	r3,r3,16
210c1500:	52800204 	addi	r10,r10,8
210c1504:	d9800017 	ldw	r6,0(sp)
210c1508:	40c6b03a 	or	r3,r8,r3
210c150c:	1906b03a 	or	r3,r3,r4
    for (int y = 0; y < 8; y++){
        index = (h+y) * w_size + w;
        for(int x = 0; x < 8; x++)
        {
        	pixel = &rgbblock[index];
        	*pixel = Cb[y][x]  |
210c1510:	10c00215 	stw	r3,8(r2)
        			 Y[y][x] << 8 |
210c1514:	7a000003 	ldbu	r8,0(r15)
        		     Cr[y][x] << 16  |
210c1518:	70c00003 	ldbu	r3,0(r14)
    for (int y = 0; y < 8; y++){
        index = (h+y) * w_size + w;
        for(int x = 0; x < 8; x++)
        {
        	pixel = &rgbblock[index];
        	*pixel = Cb[y][x]  |
210c151c:	81000003 	ldbu	r4,0(r16)
        			 Y[y][x] << 8 |
210c1520:	4010923a 	slli	r8,r8,8
        		     Cr[y][x] << 16  |
210c1524:	1806943a 	slli	r3,r3,16
210c1528:	5997883a 	add	r11,r11,r6
210c152c:	d9800117 	ldw	r6,4(sp)
210c1530:	40c6b03a 	or	r3,r8,r3
210c1534:	1906b03a 	or	r3,r3,r4
    for (int y = 0; y < 8; y++){
        index = (h+y) * w_size + w;
        for(int x = 0; x < 8; x++)
        {
        	pixel = &rgbblock[index];
        	*pixel = Cb[y][x]  |
210c1538:	10c00315 	stw	r3,12(r2)
        			 Y[y][x] << 8 |
210c153c:	3a3fff43 	ldbu	r8,-3(r7)
        		     Cr[y][x] << 16  |
210c1540:	48ffff43 	ldbu	r3,-3(r9)
    for (int y = 0; y < 8; y++){
        index = (h+y) * w_size + w;
        for(int x = 0; x < 8; x++)
        {
        	pixel = &rgbblock[index];
        	*pixel = Cb[y][x]  |
210c1544:	69000003 	ldbu	r4,0(r13)
        			 Y[y][x] << 8 |
210c1548:	4010923a 	slli	r8,r8,8
        		     Cr[y][x] << 16  |
210c154c:	1806943a 	slli	r3,r3,16
210c1550:	633fffc4 	addi	r12,r12,-1
210c1554:	298b883a 	add	r5,r5,r6
210c1558:	40c6b03a 	or	r3,r8,r3
210c155c:	1906b03a 	or	r3,r3,r4
    for (int y = 0; y < 8; y++){
        index = (h+y) * w_size + w;
        for(int x = 0; x < 8; x++)
        {
        	pixel = &rgbblock[index];
        	*pixel = Cb[y][x]  |
210c1560:	10c00415 	stw	r3,16(r2)
        			 Y[y][x] << 8 |
210c1564:	3a3fff83 	ldbu	r8,-2(r7)
        		     Cr[y][x] << 16  |
210c1568:	48ffff83 	ldbu	r3,-2(r9)
    for (int y = 0; y < 8; y++){
        index = (h+y) * w_size + w;
        for(int x = 0; x < 8; x++)
        {
        	pixel = &rgbblock[index];
        	*pixel = Cb[y][x]  |
210c156c:	513fff83 	ldbu	r4,-2(r10)
        			 Y[y][x] << 8 |
210c1570:	4010923a 	slli	r8,r8,8
        		     Cr[y][x] << 16  |
210c1574:	1806943a 	slli	r3,r3,16
210c1578:	ffc00204 	addi	ra,ra,8
210c157c:	e7000204 	addi	fp,fp,8
210c1580:	40c6b03a 	or	r3,r8,r3
210c1584:	1906b03a 	or	r3,r3,r4
    for (int y = 0; y < 8; y++){
        index = (h+y) * w_size + w;
        for(int x = 0; x < 8; x++)
        {
        	pixel = &rgbblock[index];
        	*pixel = Cb[y][x]  |
210c1588:	10c00515 	stw	r3,20(r2)
        			 Y[y][x] << 8 |
210c158c:	3a3fffc3 	ldbu	r8,-1(r7)
        		     Cr[y][x] << 16  |
210c1590:	48ffffc3 	ldbu	r3,-1(r9)
    for (int y = 0; y < 8; y++){
        index = (h+y) * w_size + w;
        for(int x = 0; x < 8; x++)
        {
        	pixel = &rgbblock[index];
        	*pixel = Cb[y][x]  |
210c1594:	513fffc3 	ldbu	r4,-1(r10)
        			 Y[y][x] << 8 |
210c1598:	4010923a 	slli	r8,r8,8
        		     Cr[y][x] << 16  |
210c159c:	1806943a 	slli	r3,r3,16
210c15a0:	bdc00204 	addi	r23,r23,8
210c15a4:	b5800204 	addi	r22,r22,8
210c15a8:	40c6b03a 	or	r3,r8,r3
210c15ac:	1906b03a 	or	r3,r3,r4
    for (int y = 0; y < 8; y++){
        index = (h+y) * w_size + w;
        for(int x = 0; x < 8; x++)
        {
        	pixel = &rgbblock[index];
        	*pixel = Cb[y][x]  |
210c15b0:	10c00615 	stw	r3,24(r2)
210c15b4:	ad400204 	addi	r21,r21,8
210c15b8:	a5000204 	addi	r20,r20,8
210c15bc:	9cc00204 	addi	r19,r19,8
210c15c0:	94800204 	addi	r18,r18,8
210c15c4:	8c400204 	addi	r17,r17,8
210c15c8:	84000204 	addi	r16,r16,8
210c15cc:	7bc00204 	addi	r15,r15,8
210c15d0:	73800204 	addi	r14,r14,8
210c15d4:	6b400204 	addi	r13,r13,8
void ycbcr_to_rgb(int h, int w, uint32_t w_size, pcolor_block_t Y, pcolor_block_t Cb, pcolor_block_t Cr, rgb_pixel_t* rgbblock)
{
    int index;
    uint32_t *pixel;

    for (int y = 0; y < 8; y++){
210c15d8:	603fa51e 	bne	r12,zero,210c1470 <__flash_rwdata_start+0xfffefb78>
        			 0 << 24;

            index++;
        }
    }
}
210c15dc:	dfc00b17 	ldw	ra,44(sp)
210c15e0:	df000a17 	ldw	fp,40(sp)
210c15e4:	ddc00917 	ldw	r23,36(sp)
210c15e8:	dd800817 	ldw	r22,32(sp)
210c15ec:	dd400717 	ldw	r21,28(sp)
210c15f0:	dd000617 	ldw	r20,24(sp)
210c15f4:	dcc00517 	ldw	r19,20(sp)
210c15f8:	dc800417 	ldw	r18,16(sp)
210c15fc:	dc400317 	ldw	r17,12(sp)
210c1600:	dc000217 	ldw	r16,8(sp)
210c1604:	dec00c04 	addi	sp,sp,48
210c1608:	f800283a 	ret

210c160c <main>:
}*/


int main()
{
	printf("Hi, I'm CPU 1 :)\n");
210c160c:	01040034 	movhi	r4,4096
    return;
}*/


int main()
{
210c1610:	defffe04 	addi	sp,sp,-8
	printf("Hi, I'm CPU 1 :)\n");
210c1614:	21005704 	addi	r4,r4,348
    return;
}*/


int main()
{
210c1618:	dfc00115 	stw	ra,4(sp)
210c161c:	dc000015 	stw	r16,0(sp)
	printf("Hi, I'm CPU 1 :)\n");
210c1620:	10c23000 	call	210c2300 <puts>
#include <unistd.h>

static void setup()
{
	// initialize DMA
	state.read_dma_cb = alt_msgdma_open(READ_DMA_CB_CSR_NAME);
210c1624:	01040034 	movhi	r4,4096
210c1628:	21005c04 	addi	r4,r4,368
210c162c:	10cfda00 	call	210cfda0 <alt_msgdma_open>
	state.read_dma_cr = alt_msgdma_open(READ_DMA_CR_CSR_NAME);
210c1630:	01040034 	movhi	r4,4096
210c1634:	21006204 	addi	r4,r4,392
#include <unistd.h>

static void setup()
{
	// initialize DMA
	state.read_dma_cb = alt_msgdma_open(READ_DMA_CB_CSR_NAME);
210c1638:	d4201404 	addi	r16,gp,-32688
210c163c:	d0a01415 	stw	r2,-32688(gp)
	state.read_dma_cr = alt_msgdma_open(READ_DMA_CR_CSR_NAME);
210c1640:	10cfda00 	call	210cfda0 <alt_msgdma_open>
210c1644:	80800115 	stw	r2,4(r16)

	if (state.read_dma_cb == NULL || state.read_dma_cr == NULL)
210c1648:	d0a01417 	ldw	r2,-32688(gp)
210c164c:	10000a26 	beq	r2,zero,210c1678 <main+0x6c>
210c1650:	80800117 	ldw	r2,4(r16)
210c1654:	10000826 	beq	r2,zero,210c1678 <main+0x6c>
{
	printf("Hi, I'm CPU 1 :)\n");
	setup();
	// loop();

	mjpeg423_decode(state.read_dma_cb, state.read_dma_cr);
210c1658:	d1201417 	ldw	r4,-32688(gp)
210c165c:	81400117 	ldw	r5,4(r16)
210c1660:	10c10d80 	call	210c10d8 <mjpeg423_decode>

	return 0;
}
210c1664:	0005883a 	mov	r2,zero
210c1668:	dfc00117 	ldw	ra,4(sp)
210c166c:	dc000017 	ldw	r16,0(sp)
210c1670:	dec00204 	addi	sp,sp,8
210c1674:	f800283a 	ret
	state.read_dma_cb = alt_msgdma_open(READ_DMA_CB_CSR_NAME);
	state.read_dma_cr = alt_msgdma_open(READ_DMA_CR_CSR_NAME);

	if (state.read_dma_cb == NULL || state.read_dma_cr == NULL)
	{
		fprintf(stderr, "ERROR: Could not open DMA.\n");
210c1678:	00840034 	movhi	r2,4096
210c167c:	10892304 	addi	r2,r2,9356
210c1680:	10800017 	ldw	r2,0(r2)
210c1684:	01040034 	movhi	r4,4096
210c1688:	21006804 	addi	r4,r4,416
210c168c:	11c00317 	ldw	r7,12(r2)
210c1690:	01400044 	movi	r5,1
210c1694:	018006c4 	movi	r6,27
210c1698:	10c17f00 	call	210c17f0 <fwrite>
210c169c:	003fee06 	br	210c1658 <__flash_rwdata_start+0xfffefd60>

210c16a0 <exit>:
210c16a0:	defffe04 	addi	sp,sp,-8
210c16a4:	000b883a 	mov	r5,zero
210c16a8:	dc000015 	stw	r16,0(sp)
210c16ac:	dfc00115 	stw	ra,4(sp)
210c16b0:	2021883a 	mov	r16,r4
210c16b4:	10c45840 	call	210c4584 <__call_exitprocs>
210c16b8:	00840034 	movhi	r2,4096
210c16bc:	10892204 	addi	r2,r2,9352
210c16c0:	11000017 	ldw	r4,0(r2)
210c16c4:	20800f17 	ldw	r2,60(r4)
210c16c8:	10000126 	beq	r2,zero,210c16d0 <exit+0x30>
210c16cc:	103ee83a 	callr	r2
210c16d0:	8009883a 	mov	r4,r16
210c16d4:	10ce1fc0 	call	210ce1fc <_exit>

210c16d8 <_fprintf_r>:
210c16d8:	defffe04 	addi	sp,sp,-8
210c16dc:	2809883a 	mov	r4,r5
210c16e0:	dfc00015 	stw	ra,0(sp)
210c16e4:	d9c00115 	stw	r7,4(sp)
210c16e8:	300b883a 	mov	r5,r6
210c16ec:	d9800104 	addi	r6,sp,4
210c16f0:	10c43500 	call	210c4350 <__vfprintf_internal>
210c16f4:	dfc00017 	ldw	ra,0(sp)
210c16f8:	dec00204 	addi	sp,sp,8
210c16fc:	f800283a 	ret

210c1700 <fprintf>:
210c1700:	defffd04 	addi	sp,sp,-12
210c1704:	dfc00015 	stw	ra,0(sp)
210c1708:	d9800115 	stw	r6,4(sp)
210c170c:	d9c00215 	stw	r7,8(sp)
210c1710:	d9800104 	addi	r6,sp,4
210c1714:	10c43500 	call	210c4350 <__vfprintf_internal>
210c1718:	dfc00017 	ldw	ra,0(sp)
210c171c:	dec00304 	addi	sp,sp,12
210c1720:	f800283a 	ret

210c1724 <_fwrite_r>:
210c1724:	defff504 	addi	sp,sp,-44
210c1728:	dcc00815 	stw	r19,32(sp)
210c172c:	39a7383a 	mul	r19,r7,r6
210c1730:	d8800304 	addi	r2,sp,12
210c1734:	d8800015 	stw	r2,0(sp)
210c1738:	00800044 	movi	r2,1
210c173c:	dd000915 	stw	r20,36(sp)
210c1740:	dc800715 	stw	r18,28(sp)
210c1744:	dc400615 	stw	r17,24(sp)
210c1748:	d9400315 	stw	r5,12(sp)
210c174c:	dfc00a15 	stw	ra,40(sp)
210c1750:	dcc00415 	stw	r19,16(sp)
210c1754:	dcc00215 	stw	r19,8(sp)
210c1758:	d8800115 	stw	r2,4(sp)
210c175c:	3029883a 	mov	r20,r6
210c1760:	3823883a 	mov	r17,r7
210c1764:	2025883a 	mov	r18,r4
210c1768:	d9400b17 	ldw	r5,44(sp)
210c176c:	20000226 	beq	r4,zero,210c1778 <_fwrite_r+0x54>
210c1770:	20800e17 	ldw	r2,56(r4)
210c1774:	10001a26 	beq	r2,zero,210c17e0 <_fwrite_r+0xbc>
210c1778:	2880030b 	ldhu	r2,12(r5)
210c177c:	10c8000c 	andi	r3,r2,8192
210c1780:	1800061e 	bne	r3,zero,210c179c <_fwrite_r+0x78>
210c1784:	29001917 	ldw	r4,100(r5)
210c1788:	00f7ffc4 	movi	r3,-8193
210c178c:	10880014 	ori	r2,r2,8192
210c1790:	20c6703a 	and	r3,r4,r3
210c1794:	2880030d 	sth	r2,12(r5)
210c1798:	28c01915 	stw	r3,100(r5)
210c179c:	9009883a 	mov	r4,r18
210c17a0:	d80d883a 	mov	r6,sp
210c17a4:	10c6a880 	call	210c6a88 <__sfvwrite_r>
210c17a8:	10000b26 	beq	r2,zero,210c17d8 <_fwrite_r+0xb4>
210c17ac:	d9000217 	ldw	r4,8(sp)
210c17b0:	a00b883a 	mov	r5,r20
210c17b4:	9909c83a 	sub	r4,r19,r4
210c17b8:	10cbaf80 	call	210cbaf8 <__udivsi3>
210c17bc:	dfc00a17 	ldw	ra,40(sp)
210c17c0:	dd000917 	ldw	r20,36(sp)
210c17c4:	dcc00817 	ldw	r19,32(sp)
210c17c8:	dc800717 	ldw	r18,28(sp)
210c17cc:	dc400617 	ldw	r17,24(sp)
210c17d0:	dec00b04 	addi	sp,sp,44
210c17d4:	f800283a 	ret
210c17d8:	8805883a 	mov	r2,r17
210c17dc:	003ff706 	br	210c17bc <__flash_rwdata_start+0xfffefec4>
210c17e0:	d9400515 	stw	r5,20(sp)
210c17e4:	10c66240 	call	210c6624 <__sinit>
210c17e8:	d9400517 	ldw	r5,20(sp)
210c17ec:	003fe206 	br	210c1778 <__flash_rwdata_start+0xfffefe80>

210c17f0 <fwrite>:
210c17f0:	00840034 	movhi	r2,4096
210c17f4:	10892304 	addi	r2,r2,9356
210c17f8:	2011883a 	mov	r8,r4
210c17fc:	11000017 	ldw	r4,0(r2)
210c1800:	defffe04 	addi	sp,sp,-8
210c1804:	2807883a 	mov	r3,r5
210c1808:	3005883a 	mov	r2,r6
210c180c:	d9c00015 	stw	r7,0(sp)
210c1810:	400b883a 	mov	r5,r8
210c1814:	180d883a 	mov	r6,r3
210c1818:	100f883a 	mov	r7,r2
210c181c:	dfc00115 	stw	ra,4(sp)
210c1820:	10c17240 	call	210c1724 <_fwrite_r>
210c1824:	dfc00117 	ldw	ra,4(sp)
210c1828:	dec00204 	addi	sp,sp,8
210c182c:	f800283a 	ret

210c1830 <memalign>:
210c1830:	00c40034 	movhi	r3,4096
210c1834:	18c92304 	addi	r3,r3,9356
210c1838:	2005883a 	mov	r2,r4
210c183c:	19000017 	ldw	r4,0(r3)
210c1840:	280d883a 	mov	r6,r5
210c1844:	100b883a 	mov	r5,r2
210c1848:	10c184c1 	jmpi	210c184c <_memalign_r>

210c184c <_memalign_r>:
210c184c:	defffa04 	addi	sp,sp,-24
210c1850:	dc400115 	stw	r17,4(sp)
210c1854:	dfc00515 	stw	ra,20(sp)
210c1858:	dd000415 	stw	r20,16(sp)
210c185c:	dcc00315 	stw	r19,12(sp)
210c1860:	dc800215 	stw	r18,8(sp)
210c1864:	dc000015 	stw	r16,0(sp)
210c1868:	00800204 	movi	r2,8
210c186c:	2823883a 	mov	r17,r5
210c1870:	11404b2e 	bgeu	r2,r5,210c19a0 <_memalign_r+0x154>
210c1874:	008003c4 	movi	r2,15
210c1878:	2029883a 	mov	r20,r4
210c187c:	11400136 	bltu	r2,r5,210c1884 <_memalign_r+0x38>
210c1880:	04400404 	movi	r17,16
210c1884:	308002c4 	addi	r2,r6,11
210c1888:	00c00584 	movi	r3,22
210c188c:	18803e2e 	bgeu	r3,r2,210c1988 <_memalign_r+0x13c>
210c1890:	04bffe04 	movi	r18,-8
210c1894:	14a4703a 	and	r18,r2,r18
210c1898:	90003d16 	blt	r18,zero,210c1990 <_memalign_r+0x144>
210c189c:	91803c36 	bltu	r18,r6,210c1990 <_memalign_r+0x144>
210c18a0:	89400404 	addi	r5,r17,16
210c18a4:	a009883a 	mov	r4,r20
210c18a8:	2c8b883a 	add	r5,r5,r18
210c18ac:	10c1a280 	call	210c1a28 <_malloc_r>
210c18b0:	1027883a 	mov	r19,r2
210c18b4:	10005026 	beq	r2,zero,210c19f8 <_memalign_r+0x1ac>
210c18b8:	a009883a 	mov	r4,r20
210c18bc:	10ce4d80 	call	210ce4d8 <__malloc_lock>
210c18c0:	9809883a 	mov	r4,r19
210c18c4:	880b883a 	mov	r5,r17
210c18c8:	9c3ffe04 	addi	r16,r19,-8
210c18cc:	10cbb000 	call	210cbb00 <__umodsi3>
210c18d0:	10001c26 	beq	r2,zero,210c1944 <_memalign_r+0xf8>
210c18d4:	88bfffc4 	addi	r2,r17,-1
210c18d8:	9887883a 	add	r3,r19,r2
210c18dc:	0445c83a 	sub	r2,zero,r17
210c18e0:	1884703a 	and	r2,r3,r2
210c18e4:	10bffe04 	addi	r2,r2,-8
210c18e8:	1409c83a 	sub	r4,r2,r16
210c18ec:	014003c4 	movi	r5,15
210c18f0:	8007883a 	mov	r3,r16
210c18f4:	2900330e 	bge	r5,r4,210c19c4 <_memalign_r+0x178>
210c18f8:	1021883a 	mov	r16,r2
210c18fc:	993fff17 	ldw	r4,-4(r19)
210c1900:	00bfff04 	movi	r2,-4
210c1904:	80c7c83a 	sub	r3,r16,r3
210c1908:	2084703a 	and	r2,r4,r2
210c190c:	10c5c83a 	sub	r2,r2,r3
210c1910:	11000054 	ori	r4,r2,1
210c1914:	81000115 	stw	r4,4(r16)
210c1918:	8085883a 	add	r2,r16,r2
210c191c:	11800117 	ldw	r6,4(r2)
210c1920:	a009883a 	mov	r4,r20
210c1924:	980b883a 	mov	r5,r19
210c1928:	31800054 	ori	r6,r6,1
210c192c:	11800115 	stw	r6,4(r2)
210c1930:	98bfff17 	ldw	r2,-4(r19)
210c1934:	1080004c 	andi	r2,r2,1
210c1938:	1884b03a 	or	r2,r3,r2
210c193c:	98bfff15 	stw	r2,-4(r19)
210c1940:	10c67980 	call	210c6798 <_free_r>
210c1944:	80c00117 	ldw	r3,4(r16)
210c1948:	00bfff04 	movi	r2,-4
210c194c:	1884703a 	and	r2,r3,r2
210c1950:	1485c83a 	sub	r2,r2,r18
210c1954:	00c003c4 	movi	r3,15
210c1958:	18801c16 	blt	r3,r2,210c19cc <_memalign_r+0x180>
210c195c:	a009883a 	mov	r4,r20
210c1960:	10ce4dc0 	call	210ce4dc <__malloc_unlock>
210c1964:	80800204 	addi	r2,r16,8
210c1968:	dfc00517 	ldw	ra,20(sp)
210c196c:	dd000417 	ldw	r20,16(sp)
210c1970:	dcc00317 	ldw	r19,12(sp)
210c1974:	dc800217 	ldw	r18,8(sp)
210c1978:	dc400117 	ldw	r17,4(sp)
210c197c:	dc000017 	ldw	r16,0(sp)
210c1980:	dec00604 	addi	sp,sp,24
210c1984:	f800283a 	ret
210c1988:	04800404 	movi	r18,16
210c198c:	91bfc42e 	bgeu	r18,r6,210c18a0 <__flash_rwdata_start+0xfffeffa8>
210c1990:	00800304 	movi	r2,12
210c1994:	a0800015 	stw	r2,0(r20)
210c1998:	0005883a 	mov	r2,zero
210c199c:	003ff206 	br	210c1968 <__flash_rwdata_start+0xffff0070>
210c19a0:	300b883a 	mov	r5,r6
210c19a4:	dfc00517 	ldw	ra,20(sp)
210c19a8:	dd000417 	ldw	r20,16(sp)
210c19ac:	dcc00317 	ldw	r19,12(sp)
210c19b0:	dc800217 	ldw	r18,8(sp)
210c19b4:	dc400117 	ldw	r17,4(sp)
210c19b8:	dc000017 	ldw	r16,0(sp)
210c19bc:	dec00604 	addi	sp,sp,24
210c19c0:	10c1a281 	jmpi	210c1a28 <_malloc_r>
210c19c4:	1461883a 	add	r16,r2,r17
210c19c8:	003fcc06 	br	210c18fc <__flash_rwdata_start+0xffff0004>
210c19cc:	848b883a 	add	r5,r16,r18
210c19d0:	10800054 	ori	r2,r2,1
210c19d4:	28800115 	stw	r2,4(r5)
210c19d8:	80800117 	ldw	r2,4(r16)
210c19dc:	a009883a 	mov	r4,r20
210c19e0:	29400204 	addi	r5,r5,8
210c19e4:	1080004c 	andi	r2,r2,1
210c19e8:	90a4b03a 	or	r18,r18,r2
210c19ec:	84800115 	stw	r18,4(r16)
210c19f0:	10c67980 	call	210c6798 <_free_r>
210c19f4:	003fd906 	br	210c195c <__flash_rwdata_start+0xffff0064>
210c19f8:	0005883a 	mov	r2,zero
210c19fc:	003fda06 	br	210c1968 <__flash_rwdata_start+0xffff0070>

210c1a00 <malloc>:
210c1a00:	00840034 	movhi	r2,4096
210c1a04:	10892304 	addi	r2,r2,9356
210c1a08:	200b883a 	mov	r5,r4
210c1a0c:	11000017 	ldw	r4,0(r2)
210c1a10:	10c1a281 	jmpi	210c1a28 <_malloc_r>

210c1a14 <free>:
210c1a14:	00840034 	movhi	r2,4096
210c1a18:	10892304 	addi	r2,r2,9356
210c1a1c:	200b883a 	mov	r5,r4
210c1a20:	11000017 	ldw	r4,0(r2)
210c1a24:	10c67981 	jmpi	210c6798 <_free_r>

210c1a28 <_malloc_r>:
210c1a28:	defff504 	addi	sp,sp,-44
210c1a2c:	dc800315 	stw	r18,12(sp)
210c1a30:	dfc00a15 	stw	ra,40(sp)
210c1a34:	df000915 	stw	fp,36(sp)
210c1a38:	ddc00815 	stw	r23,32(sp)
210c1a3c:	dd800715 	stw	r22,28(sp)
210c1a40:	dd400615 	stw	r21,24(sp)
210c1a44:	dd000515 	stw	r20,20(sp)
210c1a48:	dcc00415 	stw	r19,16(sp)
210c1a4c:	dc400215 	stw	r17,8(sp)
210c1a50:	dc000115 	stw	r16,4(sp)
210c1a54:	288002c4 	addi	r2,r5,11
210c1a58:	00c00584 	movi	r3,22
210c1a5c:	2025883a 	mov	r18,r4
210c1a60:	18802a2e 	bgeu	r3,r2,210c1b0c <_malloc_r+0xe4>
210c1a64:	047ffe04 	movi	r17,-8
210c1a68:	1462703a 	and	r17,r2,r17
210c1a6c:	88009e16 	blt	r17,zero,210c1ce8 <_malloc_r+0x2c0>
210c1a70:	89409d36 	bltu	r17,r5,210c1ce8 <_malloc_r+0x2c0>
210c1a74:	10ce4d80 	call	210ce4d8 <__malloc_lock>
210c1a78:	00807dc4 	movi	r2,503
210c1a7c:	14402736 	bltu	r2,r17,210c1b1c <_malloc_r+0xf4>
210c1a80:	8806d0fa 	srli	r3,r17,3
210c1a84:	04c40034 	movhi	r19,4096
210c1a88:	9cc32c04 	addi	r19,r19,3248
210c1a8c:	18c5883a 	add	r2,r3,r3
210c1a90:	1085883a 	add	r2,r2,r2
210c1a94:	1085883a 	add	r2,r2,r2
210c1a98:	9885883a 	add	r2,r19,r2
210c1a9c:	14000317 	ldw	r16,12(r2)
210c1aa0:	80814a26 	beq	r16,r2,210c1fcc <_malloc_r+0x5a4>
210c1aa4:	80c00117 	ldw	r3,4(r16)
210c1aa8:	81000317 	ldw	r4,12(r16)
210c1aac:	00bfff04 	movi	r2,-4
210c1ab0:	1884703a 	and	r2,r3,r2
210c1ab4:	81400217 	ldw	r5,8(r16)
210c1ab8:	8085883a 	add	r2,r16,r2
210c1abc:	10c00117 	ldw	r3,4(r2)
210c1ac0:	29000315 	stw	r4,12(r5)
210c1ac4:	21400215 	stw	r5,8(r4)
210c1ac8:	18c00054 	ori	r3,r3,1
210c1acc:	10c00115 	stw	r3,4(r2)
210c1ad0:	9009883a 	mov	r4,r18
210c1ad4:	10ce4dc0 	call	210ce4dc <__malloc_unlock>
210c1ad8:	80800204 	addi	r2,r16,8
210c1adc:	dfc00a17 	ldw	ra,40(sp)
210c1ae0:	df000917 	ldw	fp,36(sp)
210c1ae4:	ddc00817 	ldw	r23,32(sp)
210c1ae8:	dd800717 	ldw	r22,28(sp)
210c1aec:	dd400617 	ldw	r21,24(sp)
210c1af0:	dd000517 	ldw	r20,20(sp)
210c1af4:	dcc00417 	ldw	r19,16(sp)
210c1af8:	dc800317 	ldw	r18,12(sp)
210c1afc:	dc400217 	ldw	r17,8(sp)
210c1b00:	dc000117 	ldw	r16,4(sp)
210c1b04:	dec00b04 	addi	sp,sp,44
210c1b08:	f800283a 	ret
210c1b0c:	04400404 	movi	r17,16
210c1b10:	89407536 	bltu	r17,r5,210c1ce8 <_malloc_r+0x2c0>
210c1b14:	10ce4d80 	call	210ce4d8 <__malloc_lock>
210c1b18:	003fd906 	br	210c1a80 <__flash_rwdata_start+0xffff0188>
210c1b1c:	8806d27a 	srli	r3,r17,9
210c1b20:	18007526 	beq	r3,zero,210c1cf8 <_malloc_r+0x2d0>
210c1b24:	00800104 	movi	r2,4
210c1b28:	10c0ef36 	bltu	r2,r3,210c1ee8 <_malloc_r+0x4c0>
210c1b2c:	8806d1ba 	srli	r3,r17,6
210c1b30:	19c00e04 	addi	r7,r3,56
210c1b34:	39cb883a 	add	r5,r7,r7
210c1b38:	04c40034 	movhi	r19,4096
210c1b3c:	294b883a 	add	r5,r5,r5
210c1b40:	9cc32c04 	addi	r19,r19,3248
210c1b44:	294b883a 	add	r5,r5,r5
210c1b48:	994b883a 	add	r5,r19,r5
210c1b4c:	2c000317 	ldw	r16,12(r5)
210c1b50:	2c000e26 	beq	r5,r16,210c1b8c <_malloc_r+0x164>
210c1b54:	80800117 	ldw	r2,4(r16)
210c1b58:	01bfff04 	movi	r6,-4
210c1b5c:	010003c4 	movi	r4,15
210c1b60:	1184703a 	and	r2,r2,r6
210c1b64:	1447c83a 	sub	r3,r2,r17
210c1b68:	20c00716 	blt	r4,r3,210c1b88 <_malloc_r+0x160>
210c1b6c:	1800650e 	bge	r3,zero,210c1d04 <_malloc_r+0x2dc>
210c1b70:	84000317 	ldw	r16,12(r16)
210c1b74:	2c000526 	beq	r5,r16,210c1b8c <_malloc_r+0x164>
210c1b78:	80800117 	ldw	r2,4(r16)
210c1b7c:	1184703a 	and	r2,r2,r6
210c1b80:	1447c83a 	sub	r3,r2,r17
210c1b84:	20fff90e 	bge	r4,r3,210c1b6c <__flash_rwdata_start+0xffff0274>
210c1b88:	39ffffc4 	addi	r7,r7,-1
210c1b8c:	38c00044 	addi	r3,r7,1
210c1b90:	01840034 	movhi	r6,4096
210c1b94:	9c000417 	ldw	r16,16(r19)
210c1b98:	31832c04 	addi	r6,r6,3248
210c1b9c:	32400204 	addi	r9,r6,8
210c1ba0:	82410326 	beq	r16,r9,210c1fb0 <_malloc_r+0x588>
210c1ba4:	81000117 	ldw	r4,4(r16)
210c1ba8:	00bfff04 	movi	r2,-4
210c1bac:	208e703a 	and	r7,r4,r2
210c1bb0:	3c45c83a 	sub	r2,r7,r17
210c1bb4:	010003c4 	movi	r4,15
210c1bb8:	2080ee16 	blt	r4,r2,210c1f74 <_malloc_r+0x54c>
210c1bbc:	32400515 	stw	r9,20(r6)
210c1bc0:	32400415 	stw	r9,16(r6)
210c1bc4:	1000510e 	bge	r2,zero,210c1d0c <_malloc_r+0x2e4>
210c1bc8:	00807fc4 	movi	r2,511
210c1bcc:	11c0ce36 	bltu	r2,r7,210c1f08 <_malloc_r+0x4e0>
210c1bd0:	3808d0fa 	srli	r4,r7,3
210c1bd4:	01c00044 	movi	r7,1
210c1bd8:	30800117 	ldw	r2,4(r6)
210c1bdc:	210b883a 	add	r5,r4,r4
210c1be0:	294b883a 	add	r5,r5,r5
210c1be4:	2009d0ba 	srai	r4,r4,2
210c1be8:	294b883a 	add	r5,r5,r5
210c1bec:	298b883a 	add	r5,r5,r6
210c1bf0:	2a000217 	ldw	r8,8(r5)
210c1bf4:	3908983a 	sll	r4,r7,r4
210c1bf8:	81400315 	stw	r5,12(r16)
210c1bfc:	82000215 	stw	r8,8(r16)
210c1c00:	2088b03a 	or	r4,r4,r2
210c1c04:	2c000215 	stw	r16,8(r5)
210c1c08:	31000115 	stw	r4,4(r6)
210c1c0c:	44000315 	stw	r16,12(r8)
210c1c10:	1805d0ba 	srai	r2,r3,2
210c1c14:	01400044 	movi	r5,1
210c1c18:	288a983a 	sll	r5,r5,r2
210c1c1c:	21404336 	bltu	r4,r5,210c1d2c <_malloc_r+0x304>
210c1c20:	2144703a 	and	r2,r4,r5
210c1c24:	10000a1e 	bne	r2,zero,210c1c50 <_malloc_r+0x228>
210c1c28:	00bfff04 	movi	r2,-4
210c1c2c:	294b883a 	add	r5,r5,r5
210c1c30:	1886703a 	and	r3,r3,r2
210c1c34:	2144703a 	and	r2,r4,r5
210c1c38:	18c00104 	addi	r3,r3,4
210c1c3c:	1000041e 	bne	r2,zero,210c1c50 <_malloc_r+0x228>
210c1c40:	294b883a 	add	r5,r5,r5
210c1c44:	2144703a 	and	r2,r4,r5
210c1c48:	18c00104 	addi	r3,r3,4
210c1c4c:	103ffc26 	beq	r2,zero,210c1c40 <__flash_rwdata_start+0xffff0348>
210c1c50:	023fff04 	movi	r8,-4
210c1c54:	01c003c4 	movi	r7,15
210c1c58:	18c5883a 	add	r2,r3,r3
210c1c5c:	1085883a 	add	r2,r2,r2
210c1c60:	1085883a 	add	r2,r2,r2
210c1c64:	9895883a 	add	r10,r19,r2
210c1c68:	52c00304 	addi	r11,r10,12
210c1c6c:	1819883a 	mov	r12,r3
210c1c70:	5c000017 	ldw	r16,0(r11)
210c1c74:	59bffd04 	addi	r6,r11,-12
210c1c78:	8180041e 	bne	r16,r6,210c1c8c <_malloc_r+0x264>
210c1c7c:	0000ce06 	br	210c1fb8 <_malloc_r+0x590>
210c1c80:	2000d70e 	bge	r4,zero,210c1fe0 <_malloc_r+0x5b8>
210c1c84:	84000317 	ldw	r16,12(r16)
210c1c88:	8180cb26 	beq	r16,r6,210c1fb8 <_malloc_r+0x590>
210c1c8c:	80800117 	ldw	r2,4(r16)
210c1c90:	1204703a 	and	r2,r2,r8
210c1c94:	1449c83a 	sub	r4,r2,r17
210c1c98:	393ff90e 	bge	r7,r4,210c1c80 <__flash_rwdata_start+0xffff0388>
210c1c9c:	80800317 	ldw	r2,12(r16)
210c1ca0:	80c00217 	ldw	r3,8(r16)
210c1ca4:	89400054 	ori	r5,r17,1
210c1ca8:	81400115 	stw	r5,4(r16)
210c1cac:	18800315 	stw	r2,12(r3)
210c1cb0:	10c00215 	stw	r3,8(r2)
210c1cb4:	8463883a 	add	r17,r16,r17
210c1cb8:	9c400515 	stw	r17,20(r19)
210c1cbc:	9c400415 	stw	r17,16(r19)
210c1cc0:	20800054 	ori	r2,r4,1
210c1cc4:	88800115 	stw	r2,4(r17)
210c1cc8:	8a400315 	stw	r9,12(r17)
210c1ccc:	8a400215 	stw	r9,8(r17)
210c1cd0:	8923883a 	add	r17,r17,r4
210c1cd4:	89000015 	stw	r4,0(r17)
210c1cd8:	9009883a 	mov	r4,r18
210c1cdc:	10ce4dc0 	call	210ce4dc <__malloc_unlock>
210c1ce0:	80800204 	addi	r2,r16,8
210c1ce4:	003f7d06 	br	210c1adc <__flash_rwdata_start+0xffff01e4>
210c1ce8:	00800304 	movi	r2,12
210c1cec:	90800015 	stw	r2,0(r18)
210c1cf0:	0005883a 	mov	r2,zero
210c1cf4:	003f7906 	br	210c1adc <__flash_rwdata_start+0xffff01e4>
210c1cf8:	01401f84 	movi	r5,126
210c1cfc:	01c00fc4 	movi	r7,63
210c1d00:	003f8d06 	br	210c1b38 <__flash_rwdata_start+0xffff0240>
210c1d04:	81000317 	ldw	r4,12(r16)
210c1d08:	003f6a06 	br	210c1ab4 <__flash_rwdata_start+0xffff01bc>
210c1d0c:	81c5883a 	add	r2,r16,r7
210c1d10:	10c00117 	ldw	r3,4(r2)
210c1d14:	9009883a 	mov	r4,r18
210c1d18:	18c00054 	ori	r3,r3,1
210c1d1c:	10c00115 	stw	r3,4(r2)
210c1d20:	10ce4dc0 	call	210ce4dc <__malloc_unlock>
210c1d24:	80800204 	addi	r2,r16,8
210c1d28:	003f6c06 	br	210c1adc <__flash_rwdata_start+0xffff01e4>
210c1d2c:	9c000217 	ldw	r16,8(r19)
210c1d30:	00bfff04 	movi	r2,-4
210c1d34:	85800117 	ldw	r22,4(r16)
210c1d38:	b0ac703a 	and	r22,r22,r2
210c1d3c:	b4400336 	bltu	r22,r17,210c1d4c <_malloc_r+0x324>
210c1d40:	b445c83a 	sub	r2,r22,r17
210c1d44:	00c003c4 	movi	r3,15
210c1d48:	18805d16 	blt	r3,r2,210c1ec0 <_malloc_r+0x498>
210c1d4c:	05c40034 	movhi	r23,4096
210c1d50:	00840034 	movhi	r2,4096
210c1d54:	bdc92404 	addi	r23,r23,9360
210c1d58:	10893a04 	addi	r2,r2,9448
210c1d5c:	15400017 	ldw	r21,0(r2)
210c1d60:	b9000017 	ldw	r4,0(r23)
210c1d64:	00ffffc4 	movi	r3,-1
210c1d68:	858d883a 	add	r6,r16,r22
210c1d6c:	8d6b883a 	add	r21,r17,r21
210c1d70:	20c0e426 	beq	r4,r3,210c2104 <_malloc_r+0x6dc>
210c1d74:	ad4403c4 	addi	r21,r21,4111
210c1d78:	00fc0004 	movi	r3,-4096
210c1d7c:	a8ea703a 	and	r21,r21,r3
210c1d80:	9009883a 	mov	r4,r18
210c1d84:	a80b883a 	mov	r5,r21
210c1d88:	d9800015 	stw	r6,0(sp)
210c1d8c:	10c23140 	call	210c2314 <_sbrk_r>
210c1d90:	00ffffc4 	movi	r3,-1
210c1d94:	1029883a 	mov	r20,r2
210c1d98:	d9800017 	ldw	r6,0(sp)
210c1d9c:	10c0a426 	beq	r2,r3,210c2030 <_malloc_r+0x608>
210c1da0:	1180a236 	bltu	r2,r6,210c202c <_malloc_r+0x604>
210c1da4:	07040034 	movhi	fp,4096
210c1da8:	e7094604 	addi	fp,fp,9496
210c1dac:	e0c00017 	ldw	r3,0(fp)
210c1db0:	a8c7883a 	add	r3,r21,r3
210c1db4:	e0c00015 	stw	r3,0(fp)
210c1db8:	3500da26 	beq	r6,r20,210c2124 <_malloc_r+0x6fc>
210c1dbc:	b9000017 	ldw	r4,0(r23)
210c1dc0:	00bfffc4 	movi	r2,-1
210c1dc4:	2080e426 	beq	r4,r2,210c2158 <_malloc_r+0x730>
210c1dc8:	a185c83a 	sub	r2,r20,r6
210c1dcc:	1885883a 	add	r2,r3,r2
210c1dd0:	e0800015 	stw	r2,0(fp)
210c1dd4:	a0c001cc 	andi	r3,r20,7
210c1dd8:	1800b526 	beq	r3,zero,210c20b0 <_malloc_r+0x688>
210c1ddc:	a0e9c83a 	sub	r20,r20,r3
210c1de0:	00840204 	movi	r2,4104
210c1de4:	a5000204 	addi	r20,r20,8
210c1de8:	10c7c83a 	sub	r3,r2,r3
210c1dec:	a545883a 	add	r2,r20,r21
210c1df0:	1083ffcc 	andi	r2,r2,4095
210c1df4:	18abc83a 	sub	r21,r3,r2
210c1df8:	9009883a 	mov	r4,r18
210c1dfc:	a80b883a 	mov	r5,r21
210c1e00:	10c23140 	call	210c2314 <_sbrk_r>
210c1e04:	00ffffc4 	movi	r3,-1
210c1e08:	10c0d026 	beq	r2,r3,210c214c <_malloc_r+0x724>
210c1e0c:	1507c83a 	sub	r3,r2,r20
210c1e10:	a8c7883a 	add	r3,r21,r3
210c1e14:	18c00054 	ori	r3,r3,1
210c1e18:	e0800017 	ldw	r2,0(fp)
210c1e1c:	9d000215 	stw	r20,8(r19)
210c1e20:	a0c00115 	stw	r3,4(r20)
210c1e24:	a887883a 	add	r3,r21,r2
210c1e28:	e0c00015 	stw	r3,0(fp)
210c1e2c:	84c00e26 	beq	r16,r19,210c1e68 <_malloc_r+0x440>
210c1e30:	018003c4 	movi	r6,15
210c1e34:	3580a02e 	bgeu	r6,r22,210c20b8 <_malloc_r+0x690>
210c1e38:	81400117 	ldw	r5,4(r16)
210c1e3c:	013ffe04 	movi	r4,-8
210c1e40:	b0bffd04 	addi	r2,r22,-12
210c1e44:	1104703a 	and	r2,r2,r4
210c1e48:	2900004c 	andi	r4,r5,1
210c1e4c:	1108b03a 	or	r4,r2,r4
210c1e50:	81000115 	stw	r4,4(r16)
210c1e54:	01400144 	movi	r5,5
210c1e58:	8089883a 	add	r4,r16,r2
210c1e5c:	21400115 	stw	r5,4(r4)
210c1e60:	21400215 	stw	r5,8(r4)
210c1e64:	3080c036 	bltu	r6,r2,210c2168 <_malloc_r+0x740>
210c1e68:	00840034 	movhi	r2,4096
210c1e6c:	10893904 	addi	r2,r2,9444
210c1e70:	11000017 	ldw	r4,0(r2)
210c1e74:	20c0012e 	bgeu	r4,r3,210c1e7c <_malloc_r+0x454>
210c1e78:	10c00015 	stw	r3,0(r2)
210c1e7c:	00840034 	movhi	r2,4096
210c1e80:	10893804 	addi	r2,r2,9440
210c1e84:	11000017 	ldw	r4,0(r2)
210c1e88:	9c000217 	ldw	r16,8(r19)
210c1e8c:	20c0012e 	bgeu	r4,r3,210c1e94 <_malloc_r+0x46c>
210c1e90:	10c00015 	stw	r3,0(r2)
210c1e94:	80c00117 	ldw	r3,4(r16)
210c1e98:	00bfff04 	movi	r2,-4
210c1e9c:	1886703a 	and	r3,r3,r2
210c1ea0:	1c45c83a 	sub	r2,r3,r17
210c1ea4:	1c400236 	bltu	r3,r17,210c1eb0 <_malloc_r+0x488>
210c1ea8:	00c003c4 	movi	r3,15
210c1eac:	18800416 	blt	r3,r2,210c1ec0 <_malloc_r+0x498>
210c1eb0:	9009883a 	mov	r4,r18
210c1eb4:	10ce4dc0 	call	210ce4dc <__malloc_unlock>
210c1eb8:	0005883a 	mov	r2,zero
210c1ebc:	003f0706 	br	210c1adc <__flash_rwdata_start+0xffff01e4>
210c1ec0:	88c00054 	ori	r3,r17,1
210c1ec4:	80c00115 	stw	r3,4(r16)
210c1ec8:	8463883a 	add	r17,r16,r17
210c1ecc:	10800054 	ori	r2,r2,1
210c1ed0:	9c400215 	stw	r17,8(r19)
210c1ed4:	88800115 	stw	r2,4(r17)
210c1ed8:	9009883a 	mov	r4,r18
210c1edc:	10ce4dc0 	call	210ce4dc <__malloc_unlock>
210c1ee0:	80800204 	addi	r2,r16,8
210c1ee4:	003efd06 	br	210c1adc <__flash_rwdata_start+0xffff01e4>
210c1ee8:	00800504 	movi	r2,20
210c1eec:	10c0482e 	bgeu	r2,r3,210c2010 <_malloc_r+0x5e8>
210c1ef0:	00801504 	movi	r2,84
210c1ef4:	10c06836 	bltu	r2,r3,210c2098 <_malloc_r+0x670>
210c1ef8:	8806d33a 	srli	r3,r17,12
210c1efc:	19c01b84 	addi	r7,r3,110
210c1f00:	39cb883a 	add	r5,r7,r7
210c1f04:	003f0c06 	br	210c1b38 <__flash_rwdata_start+0xffff0240>
210c1f08:	3804d27a 	srli	r2,r7,9
210c1f0c:	01000104 	movi	r4,4
210c1f10:	2080422e 	bgeu	r4,r2,210c201c <_malloc_r+0x5f4>
210c1f14:	01000504 	movi	r4,20
210c1f18:	20807c36 	bltu	r4,r2,210c210c <_malloc_r+0x6e4>
210c1f1c:	110016c4 	addi	r4,r2,91
210c1f20:	210b883a 	add	r5,r4,r4
210c1f24:	294b883a 	add	r5,r5,r5
210c1f28:	294b883a 	add	r5,r5,r5
210c1f2c:	994b883a 	add	r5,r19,r5
210c1f30:	28800217 	ldw	r2,8(r5)
210c1f34:	02040034 	movhi	r8,4096
210c1f38:	42032c04 	addi	r8,r8,3248
210c1f3c:	11406326 	beq	r2,r5,210c20cc <_malloc_r+0x6a4>
210c1f40:	01bfff04 	movi	r6,-4
210c1f44:	11000117 	ldw	r4,4(r2)
210c1f48:	2188703a 	and	r4,r4,r6
210c1f4c:	3900022e 	bgeu	r7,r4,210c1f58 <_malloc_r+0x530>
210c1f50:	10800217 	ldw	r2,8(r2)
210c1f54:	28bffb1e 	bne	r5,r2,210c1f44 <__flash_rwdata_start+0xffff064c>
210c1f58:	11800317 	ldw	r6,12(r2)
210c1f5c:	99000117 	ldw	r4,4(r19)
210c1f60:	81800315 	stw	r6,12(r16)
210c1f64:	80800215 	stw	r2,8(r16)
210c1f68:	34000215 	stw	r16,8(r6)
210c1f6c:	14000315 	stw	r16,12(r2)
210c1f70:	003f2706 	br	210c1c10 <__flash_rwdata_start+0xffff0318>
210c1f74:	88c00054 	ori	r3,r17,1
210c1f78:	80c00115 	stw	r3,4(r16)
210c1f7c:	8463883a 	add	r17,r16,r17
210c1f80:	34400515 	stw	r17,20(r6)
210c1f84:	34400415 	stw	r17,16(r6)
210c1f88:	10c00054 	ori	r3,r2,1
210c1f8c:	8a400315 	stw	r9,12(r17)
210c1f90:	8a400215 	stw	r9,8(r17)
210c1f94:	88c00115 	stw	r3,4(r17)
210c1f98:	88a3883a 	add	r17,r17,r2
210c1f9c:	88800015 	stw	r2,0(r17)
210c1fa0:	9009883a 	mov	r4,r18
210c1fa4:	10ce4dc0 	call	210ce4dc <__malloc_unlock>
210c1fa8:	80800204 	addi	r2,r16,8
210c1fac:	003ecb06 	br	210c1adc <__flash_rwdata_start+0xffff01e4>
210c1fb0:	31000117 	ldw	r4,4(r6)
210c1fb4:	003f1606 	br	210c1c10 <__flash_rwdata_start+0xffff0318>
210c1fb8:	63000044 	addi	r12,r12,1
210c1fbc:	608000cc 	andi	r2,r12,3
210c1fc0:	5ac00204 	addi	r11,r11,8
210c1fc4:	103f2a1e 	bne	r2,zero,210c1c70 <__flash_rwdata_start+0xffff0378>
210c1fc8:	00002106 	br	210c2050 <_malloc_r+0x628>
210c1fcc:	80800204 	addi	r2,r16,8
210c1fd0:	84000517 	ldw	r16,20(r16)
210c1fd4:	143eb31e 	bne	r2,r16,210c1aa4 <__flash_rwdata_start+0xffff01ac>
210c1fd8:	18c00084 	addi	r3,r3,2
210c1fdc:	003eec06 	br	210c1b90 <__flash_rwdata_start+0xffff0298>
210c1fe0:	8085883a 	add	r2,r16,r2
210c1fe4:	10c00117 	ldw	r3,4(r2)
210c1fe8:	81000317 	ldw	r4,12(r16)
210c1fec:	81400217 	ldw	r5,8(r16)
210c1ff0:	18c00054 	ori	r3,r3,1
210c1ff4:	10c00115 	stw	r3,4(r2)
210c1ff8:	29000315 	stw	r4,12(r5)
210c1ffc:	21400215 	stw	r5,8(r4)
210c2000:	9009883a 	mov	r4,r18
210c2004:	10ce4dc0 	call	210ce4dc <__malloc_unlock>
210c2008:	80800204 	addi	r2,r16,8
210c200c:	003eb306 	br	210c1adc <__flash_rwdata_start+0xffff01e4>
210c2010:	19c016c4 	addi	r7,r3,91
210c2014:	39cb883a 	add	r5,r7,r7
210c2018:	003ec706 	br	210c1b38 <__flash_rwdata_start+0xffff0240>
210c201c:	3804d1ba 	srli	r2,r7,6
210c2020:	11000e04 	addi	r4,r2,56
210c2024:	210b883a 	add	r5,r4,r4
210c2028:	003fbe06 	br	210c1f24 <__flash_rwdata_start+0xffff062c>
210c202c:	84ff5d26 	beq	r16,r19,210c1da4 <__flash_rwdata_start+0xffff04ac>
210c2030:	9c000217 	ldw	r16,8(r19)
210c2034:	00bfff04 	movi	r2,-4
210c2038:	80c00117 	ldw	r3,4(r16)
210c203c:	1886703a 	and	r3,r3,r2
210c2040:	003f9706 	br	210c1ea0 <__flash_rwdata_start+0xffff05a8>
210c2044:	52800017 	ldw	r10,0(r10)
210c2048:	18ffffc4 	addi	r3,r3,-1
210c204c:	50805c1e 	bne	r10,r2,210c21c0 <_malloc_r+0x798>
210c2050:	190000cc 	andi	r4,r3,3
210c2054:	50bffe04 	addi	r2,r10,-8
210c2058:	203ffa1e 	bne	r4,zero,210c2044 <__flash_rwdata_start+0xffff074c>
210c205c:	98800117 	ldw	r2,4(r19)
210c2060:	0146303a 	nor	r3,zero,r5
210c2064:	1884703a 	and	r2,r3,r2
210c2068:	98800115 	stw	r2,4(r19)
210c206c:	294b883a 	add	r5,r5,r5
210c2070:	117f2e36 	bltu	r2,r5,210c1d2c <__flash_rwdata_start+0xffff0434>
210c2074:	283f2d26 	beq	r5,zero,210c1d2c <__flash_rwdata_start+0xffff0434>
210c2078:	1146703a 	and	r3,r2,r5
210c207c:	1800521e 	bne	r3,zero,210c21c8 <_malloc_r+0x7a0>
210c2080:	6007883a 	mov	r3,r12
210c2084:	294b883a 	add	r5,r5,r5
210c2088:	1148703a 	and	r4,r2,r5
210c208c:	18c00104 	addi	r3,r3,4
210c2090:	203ffc26 	beq	r4,zero,210c2084 <__flash_rwdata_start+0xffff078c>
210c2094:	003ef006 	br	210c1c58 <__flash_rwdata_start+0xffff0360>
210c2098:	00805504 	movi	r2,340
210c209c:	10c01336 	bltu	r2,r3,210c20ec <_malloc_r+0x6c4>
210c20a0:	8806d3fa 	srli	r3,r17,15
210c20a4:	19c01dc4 	addi	r7,r3,119
210c20a8:	39cb883a 	add	r5,r7,r7
210c20ac:	003ea206 	br	210c1b38 <__flash_rwdata_start+0xffff0240>
210c20b0:	00c40004 	movi	r3,4096
210c20b4:	003f4d06 	br	210c1dec <__flash_rwdata_start+0xffff04f4>
210c20b8:	00800044 	movi	r2,1
210c20bc:	a0800115 	stw	r2,4(r20)
210c20c0:	a021883a 	mov	r16,r20
210c20c4:	0007883a 	mov	r3,zero
210c20c8:	003f7506 	br	210c1ea0 <__flash_rwdata_start+0xffff05a8>
210c20cc:	200bd0ba 	srai	r5,r4,2
210c20d0:	01800044 	movi	r6,1
210c20d4:	41000117 	ldw	r4,4(r8)
210c20d8:	314a983a 	sll	r5,r6,r5
210c20dc:	100d883a 	mov	r6,r2
210c20e0:	2908b03a 	or	r4,r5,r4
210c20e4:	41000115 	stw	r4,4(r8)
210c20e8:	003f9d06 	br	210c1f60 <__flash_rwdata_start+0xffff0668>
210c20ec:	00815504 	movi	r2,1364
210c20f0:	10c01336 	bltu	r2,r3,210c2140 <_malloc_r+0x718>
210c20f4:	8806d4ba 	srli	r3,r17,18
210c20f8:	19c01f04 	addi	r7,r3,124
210c20fc:	39cb883a 	add	r5,r7,r7
210c2100:	003e8d06 	br	210c1b38 <__flash_rwdata_start+0xffff0240>
210c2104:	ad400404 	addi	r21,r21,16
210c2108:	003f1d06 	br	210c1d80 <__flash_rwdata_start+0xffff0488>
210c210c:	01001504 	movi	r4,84
210c2110:	20801c36 	bltu	r4,r2,210c2184 <_malloc_r+0x75c>
210c2114:	3804d33a 	srli	r2,r7,12
210c2118:	11001b84 	addi	r4,r2,110
210c211c:	210b883a 	add	r5,r4,r4
210c2120:	003f8006 	br	210c1f24 <__flash_rwdata_start+0xffff062c>
210c2124:	3083ffcc 	andi	r2,r6,4095
210c2128:	103f241e 	bne	r2,zero,210c1dbc <__flash_rwdata_start+0xffff04c4>
210c212c:	99000217 	ldw	r4,8(r19)
210c2130:	ad85883a 	add	r2,r21,r22
210c2134:	10800054 	ori	r2,r2,1
210c2138:	20800115 	stw	r2,4(r4)
210c213c:	003f4a06 	br	210c1e68 <__flash_rwdata_start+0xffff0570>
210c2140:	01403f04 	movi	r5,252
210c2144:	01c01f84 	movi	r7,126
210c2148:	003e7b06 	br	210c1b38 <__flash_rwdata_start+0xffff0240>
210c214c:	00c00044 	movi	r3,1
210c2150:	002b883a 	mov	r21,zero
210c2154:	003f3006 	br	210c1e18 <__flash_rwdata_start+0xffff0520>
210c2158:	00840034 	movhi	r2,4096
210c215c:	10892404 	addi	r2,r2,9360
210c2160:	15000015 	stw	r20,0(r2)
210c2164:	003f1b06 	br	210c1dd4 <__flash_rwdata_start+0xffff04dc>
210c2168:	9009883a 	mov	r4,r18
210c216c:	81400204 	addi	r5,r16,8
210c2170:	10c67980 	call	210c6798 <_free_r>
210c2174:	00840034 	movhi	r2,4096
210c2178:	10894604 	addi	r2,r2,9496
210c217c:	10c00017 	ldw	r3,0(r2)
210c2180:	003f3906 	br	210c1e68 <__flash_rwdata_start+0xffff0570>
210c2184:	01005504 	movi	r4,340
210c2188:	20800436 	bltu	r4,r2,210c219c <_malloc_r+0x774>
210c218c:	3804d3fa 	srli	r2,r7,15
210c2190:	11001dc4 	addi	r4,r2,119
210c2194:	210b883a 	add	r5,r4,r4
210c2198:	003f6206 	br	210c1f24 <__flash_rwdata_start+0xffff062c>
210c219c:	01015504 	movi	r4,1364
210c21a0:	20800436 	bltu	r4,r2,210c21b4 <_malloc_r+0x78c>
210c21a4:	3804d4ba 	srli	r2,r7,18
210c21a8:	11001f04 	addi	r4,r2,124
210c21ac:	210b883a 	add	r5,r4,r4
210c21b0:	003f5c06 	br	210c1f24 <__flash_rwdata_start+0xffff062c>
210c21b4:	01403f04 	movi	r5,252
210c21b8:	01001f84 	movi	r4,126
210c21bc:	003f5906 	br	210c1f24 <__flash_rwdata_start+0xffff062c>
210c21c0:	98800117 	ldw	r2,4(r19)
210c21c4:	003fa906 	br	210c206c <__flash_rwdata_start+0xffff0774>
210c21c8:	6007883a 	mov	r3,r12
210c21cc:	003ea206 	br	210c1c58 <__flash_rwdata_start+0xffff0360>

210c21d0 <_printf_r>:
210c21d0:	defffd04 	addi	sp,sp,-12
210c21d4:	dfc00015 	stw	ra,0(sp)
210c21d8:	d9800115 	stw	r6,4(sp)
210c21dc:	d9c00215 	stw	r7,8(sp)
210c21e0:	280d883a 	mov	r6,r5
210c21e4:	21400217 	ldw	r5,8(r4)
210c21e8:	d9c00104 	addi	r7,sp,4
210c21ec:	10c24000 	call	210c2400 <___vfprintf_internal_r>
210c21f0:	dfc00017 	ldw	ra,0(sp)
210c21f4:	dec00304 	addi	sp,sp,12
210c21f8:	f800283a 	ret

210c21fc <printf>:
210c21fc:	defffc04 	addi	sp,sp,-16
210c2200:	dfc00015 	stw	ra,0(sp)
210c2204:	d9400115 	stw	r5,4(sp)
210c2208:	d9800215 	stw	r6,8(sp)
210c220c:	d9c00315 	stw	r7,12(sp)
210c2210:	00840034 	movhi	r2,4096
210c2214:	10892304 	addi	r2,r2,9356
210c2218:	10800017 	ldw	r2,0(r2)
210c221c:	200b883a 	mov	r5,r4
210c2220:	d9800104 	addi	r6,sp,4
210c2224:	11000217 	ldw	r4,8(r2)
210c2228:	10c43500 	call	210c4350 <__vfprintf_internal>
210c222c:	dfc00017 	ldw	ra,0(sp)
210c2230:	dec00404 	addi	sp,sp,16
210c2234:	f800283a 	ret

210c2238 <_putchar_r>:
210c2238:	21800217 	ldw	r6,8(r4)
210c223c:	10c87a81 	jmpi	210c87a8 <_putc_r>

210c2240 <putchar>:
210c2240:	00840034 	movhi	r2,4096
210c2244:	10892304 	addi	r2,r2,9356
210c2248:	200b883a 	mov	r5,r4
210c224c:	11000017 	ldw	r4,0(r2)
210c2250:	21800217 	ldw	r6,8(r4)
210c2254:	10c87a81 	jmpi	210c87a8 <_putc_r>

210c2258 <_puts_r>:
210c2258:	defff604 	addi	sp,sp,-40
210c225c:	dc000715 	stw	r16,28(sp)
210c2260:	2021883a 	mov	r16,r4
210c2264:	2809883a 	mov	r4,r5
210c2268:	dc400815 	stw	r17,32(sp)
210c226c:	dfc00915 	stw	ra,36(sp)
210c2270:	2823883a 	mov	r17,r5
210c2274:	10c23680 	call	210c2368 <strlen>
210c2278:	81400217 	ldw	r5,8(r16)
210c227c:	11000044 	addi	r4,r2,1
210c2280:	d8800115 	stw	r2,4(sp)
210c2284:	00840034 	movhi	r2,4096
210c2288:	2980030b 	ldhu	r6,12(r5)
210c228c:	10815a04 	addi	r2,r2,1384
210c2290:	d8800215 	stw	r2,8(sp)
210c2294:	00800044 	movi	r2,1
210c2298:	d8800315 	stw	r2,12(sp)
210c229c:	00800084 	movi	r2,2
210c22a0:	d8800515 	stw	r2,20(sp)
210c22a4:	dc400015 	stw	r17,0(sp)
210c22a8:	d9000615 	stw	r4,24(sp)
210c22ac:	dec00415 	stw	sp,16(sp)
210c22b0:	3088000c 	andi	r2,r6,8192
210c22b4:	1000061e 	bne	r2,zero,210c22d0 <_puts_r+0x78>
210c22b8:	29001917 	ldw	r4,100(r5)
210c22bc:	00b7ffc4 	movi	r2,-8193
210c22c0:	31880014 	ori	r6,r6,8192
210c22c4:	2084703a 	and	r2,r4,r2
210c22c8:	2980030d 	sth	r6,12(r5)
210c22cc:	28801915 	stw	r2,100(r5)
210c22d0:	8009883a 	mov	r4,r16
210c22d4:	d9800404 	addi	r6,sp,16
210c22d8:	10c6a880 	call	210c6a88 <__sfvwrite_r>
210c22dc:	1000061e 	bne	r2,zero,210c22f8 <_puts_r+0xa0>
210c22e0:	00800284 	movi	r2,10
210c22e4:	dfc00917 	ldw	ra,36(sp)
210c22e8:	dc400817 	ldw	r17,32(sp)
210c22ec:	dc000717 	ldw	r16,28(sp)
210c22f0:	dec00a04 	addi	sp,sp,40
210c22f4:	f800283a 	ret
210c22f8:	00bfffc4 	movi	r2,-1
210c22fc:	003ff906 	br	210c22e4 <__flash_rwdata_start+0xffff09ec>

210c2300 <puts>:
210c2300:	00840034 	movhi	r2,4096
210c2304:	10892304 	addi	r2,r2,9356
210c2308:	200b883a 	mov	r5,r4
210c230c:	11000017 	ldw	r4,0(r2)
210c2310:	10c22581 	jmpi	210c2258 <_puts_r>

210c2314 <_sbrk_r>:
210c2314:	defffd04 	addi	sp,sp,-12
210c2318:	dc000015 	stw	r16,0(sp)
210c231c:	04040034 	movhi	r16,4096
210c2320:	dc400115 	stw	r17,4(sp)
210c2324:	84093b04 	addi	r16,r16,9452
210c2328:	2023883a 	mov	r17,r4
210c232c:	2809883a 	mov	r4,r5
210c2330:	dfc00215 	stw	ra,8(sp)
210c2334:	80000015 	stw	zero,0(r16)
210c2338:	10ce5f00 	call	210ce5f0 <sbrk>
210c233c:	00ffffc4 	movi	r3,-1
210c2340:	10c00526 	beq	r2,r3,210c2358 <_sbrk_r+0x44>
210c2344:	dfc00217 	ldw	ra,8(sp)
210c2348:	dc400117 	ldw	r17,4(sp)
210c234c:	dc000017 	ldw	r16,0(sp)
210c2350:	dec00304 	addi	sp,sp,12
210c2354:	f800283a 	ret
210c2358:	80c00017 	ldw	r3,0(r16)
210c235c:	183ff926 	beq	r3,zero,210c2344 <__flash_rwdata_start+0xffff0a4c>
210c2360:	88c00015 	stw	r3,0(r17)
210c2364:	003ff706 	br	210c2344 <__flash_rwdata_start+0xffff0a4c>

210c2368 <strlen>:
210c2368:	208000cc 	andi	r2,r4,3
210c236c:	10002026 	beq	r2,zero,210c23f0 <strlen+0x88>
210c2370:	20800007 	ldb	r2,0(r4)
210c2374:	10002026 	beq	r2,zero,210c23f8 <strlen+0x90>
210c2378:	2005883a 	mov	r2,r4
210c237c:	00000206 	br	210c2388 <strlen+0x20>
210c2380:	10c00007 	ldb	r3,0(r2)
210c2384:	18001826 	beq	r3,zero,210c23e8 <strlen+0x80>
210c2388:	10800044 	addi	r2,r2,1
210c238c:	10c000cc 	andi	r3,r2,3
210c2390:	183ffb1e 	bne	r3,zero,210c2380 <__flash_rwdata_start+0xffff0a88>
210c2394:	10c00017 	ldw	r3,0(r2)
210c2398:	01ffbff4 	movhi	r7,65279
210c239c:	39ffbfc4 	addi	r7,r7,-257
210c23a0:	00ca303a 	nor	r5,zero,r3
210c23a4:	01a02074 	movhi	r6,32897
210c23a8:	19c7883a 	add	r3,r3,r7
210c23ac:	31a02004 	addi	r6,r6,-32640
210c23b0:	1946703a 	and	r3,r3,r5
210c23b4:	1986703a 	and	r3,r3,r6
210c23b8:	1800091e 	bne	r3,zero,210c23e0 <strlen+0x78>
210c23bc:	10800104 	addi	r2,r2,4
210c23c0:	10c00017 	ldw	r3,0(r2)
210c23c4:	19cb883a 	add	r5,r3,r7
210c23c8:	00c6303a 	nor	r3,zero,r3
210c23cc:	28c6703a 	and	r3,r5,r3
210c23d0:	1986703a 	and	r3,r3,r6
210c23d4:	183ff926 	beq	r3,zero,210c23bc <__flash_rwdata_start+0xffff0ac4>
210c23d8:	00000106 	br	210c23e0 <strlen+0x78>
210c23dc:	10800044 	addi	r2,r2,1
210c23e0:	10c00007 	ldb	r3,0(r2)
210c23e4:	183ffd1e 	bne	r3,zero,210c23dc <__flash_rwdata_start+0xffff0ae4>
210c23e8:	1105c83a 	sub	r2,r2,r4
210c23ec:	f800283a 	ret
210c23f0:	2005883a 	mov	r2,r4
210c23f4:	003fe706 	br	210c2394 <__flash_rwdata_start+0xffff0a9c>
210c23f8:	0005883a 	mov	r2,zero
210c23fc:	f800283a 	ret

210c2400 <___vfprintf_internal_r>:
210c2400:	deffb604 	addi	sp,sp,-296
210c2404:	dfc04915 	stw	ra,292(sp)
210c2408:	ddc04715 	stw	r23,284(sp)
210c240c:	dd804615 	stw	r22,280(sp)
210c2410:	282f883a 	mov	r23,r5
210c2414:	202d883a 	mov	r22,r4
210c2418:	d9802a15 	stw	r6,168(sp)
210c241c:	d9c02d15 	stw	r7,180(sp)
210c2420:	df004815 	stw	fp,288(sp)
210c2424:	dd404515 	stw	r21,276(sp)
210c2428:	dd004415 	stw	r20,272(sp)
210c242c:	dcc04315 	stw	r19,268(sp)
210c2430:	dc804215 	stw	r18,264(sp)
210c2434:	dc404115 	stw	r17,260(sp)
210c2438:	dc004015 	stw	r16,256(sp)
210c243c:	10c717c0 	call	210c717c <_localeconv_r>
210c2440:	10800017 	ldw	r2,0(r2)
210c2444:	1009883a 	mov	r4,r2
210c2448:	d8803515 	stw	r2,212(sp)
210c244c:	10c23680 	call	210c2368 <strlen>
210c2450:	d8803815 	stw	r2,224(sp)
210c2454:	b0000226 	beq	r22,zero,210c2460 <___vfprintf_internal_r+0x60>
210c2458:	b0800e17 	ldw	r2,56(r22)
210c245c:	1000e126 	beq	r2,zero,210c27e4 <___vfprintf_internal_r+0x3e4>
210c2460:	b880030b 	ldhu	r2,12(r23)
210c2464:	10c8000c 	andi	r3,r2,8192
210c2468:	1800061e 	bne	r3,zero,210c2484 <___vfprintf_internal_r+0x84>
210c246c:	b9001917 	ldw	r4,100(r23)
210c2470:	00f7ffc4 	movi	r3,-8193
210c2474:	10880014 	ori	r2,r2,8192
210c2478:	20c6703a 	and	r3,r4,r3
210c247c:	b880030d 	sth	r2,12(r23)
210c2480:	b8c01915 	stw	r3,100(r23)
210c2484:	10c0020c 	andi	r3,r2,8
210c2488:	1800a726 	beq	r3,zero,210c2728 <___vfprintf_internal_r+0x328>
210c248c:	b8c00417 	ldw	r3,16(r23)
210c2490:	1800a526 	beq	r3,zero,210c2728 <___vfprintf_internal_r+0x328>
210c2494:	1080068c 	andi	r2,r2,26
210c2498:	00c00284 	movi	r3,10
210c249c:	10c0aa26 	beq	r2,r3,210c2748 <___vfprintf_internal_r+0x348>
210c24a0:	dac01e04 	addi	r11,sp,120
210c24a4:	db001dc4 	addi	r12,sp,119
210c24a8:	d8800404 	addi	r2,sp,16
210c24ac:	05040034 	movhi	r20,4096
210c24b0:	dac02815 	stw	r11,160(sp)
210c24b4:	5b17c83a 	sub	r11,r11,r12
210c24b8:	a5008084 	addi	r20,r20,514
210c24bc:	db002915 	stw	r12,164(sp)
210c24c0:	d8801e15 	stw	r2,120(sp)
210c24c4:	d8002015 	stw	zero,128(sp)
210c24c8:	d8001f15 	stw	zero,124(sp)
210c24cc:	d8003315 	stw	zero,204(sp)
210c24d0:	d8003715 	stw	zero,220(sp)
210c24d4:	d8003915 	stw	zero,228(sp)
210c24d8:	1011883a 	mov	r8,r2
210c24dc:	d8003b15 	stw	zero,236(sp)
210c24e0:	d8003a15 	stw	zero,232(sp)
210c24e4:	d8002f15 	stw	zero,188(sp)
210c24e8:	dac03c15 	stw	r11,240(sp)
210c24ec:	db002a17 	ldw	r12,168(sp)
210c24f0:	60800007 	ldb	r2,0(r12)
210c24f4:	1000be26 	beq	r2,zero,210c27f0 <___vfprintf_internal_r+0x3f0>
210c24f8:	00c00944 	movi	r3,37
210c24fc:	10c0bc26 	beq	r2,r3,210c27f0 <___vfprintf_internal_r+0x3f0>
210c2500:	6021883a 	mov	r16,r12
210c2504:	00000106 	br	210c250c <___vfprintf_internal_r+0x10c>
210c2508:	10c08426 	beq	r2,r3,210c271c <___vfprintf_internal_r+0x31c>
210c250c:	84000044 	addi	r16,r16,1
210c2510:	80800007 	ldb	r2,0(r16)
210c2514:	103ffc1e 	bne	r2,zero,210c2508 <__flash_rwdata_start+0xffff0c10>
210c2518:	dac02a17 	ldw	r11,168(sp)
210c251c:	82e3c83a 	sub	r17,r16,r11
210c2520:	88000f26 	beq	r17,zero,210c2560 <___vfprintf_internal_r+0x160>
210c2524:	d8c02017 	ldw	r3,128(sp)
210c2528:	d8801f17 	ldw	r2,124(sp)
210c252c:	dac02a17 	ldw	r11,168(sp)
210c2530:	1c47883a 	add	r3,r3,r17
210c2534:	10800044 	addi	r2,r2,1
210c2538:	d8c02015 	stw	r3,128(sp)
210c253c:	42c00015 	stw	r11,0(r8)
210c2540:	44400115 	stw	r17,4(r8)
210c2544:	d8801f15 	stw	r2,124(sp)
210c2548:	00c001c4 	movi	r3,7
210c254c:	18809316 	blt	r3,r2,210c279c <___vfprintf_internal_r+0x39c>
210c2550:	42000204 	addi	r8,r8,8
210c2554:	db002f17 	ldw	r12,188(sp)
210c2558:	6459883a 	add	r12,r12,r17
210c255c:	db002f15 	stw	r12,188(sp)
210c2560:	80800007 	ldb	r2,0(r16)
210c2564:	10009426 	beq	r2,zero,210c27b8 <___vfprintf_internal_r+0x3b8>
210c2568:	80800044 	addi	r2,r16,1
210c256c:	84000047 	ldb	r16,1(r16)
210c2570:	d8002785 	stb	zero,158(sp)
210c2574:	000d883a 	mov	r6,zero
210c2578:	027fffc4 	movi	r9,-1
210c257c:	d8002e15 	stw	zero,184(sp)
210c2580:	0023883a 	mov	r17,zero
210c2584:	01001604 	movi	r4,88
210c2588:	01400244 	movi	r5,9
210c258c:	02800a84 	movi	r10,42
210c2590:	01c01b04 	movi	r7,108
210c2594:	10c00044 	addi	r3,r2,1
210c2598:	80bff804 	addi	r2,r16,-32
210c259c:	2082cd36 	bltu	r4,r2,210c30d4 <___vfprintf_internal_r+0xcd4>
210c25a0:	100490ba 	slli	r2,r2,2
210c25a4:	02c84334 	movhi	r11,8460
210c25a8:	5ac96e04 	addi	r11,r11,9656
210c25ac:	12c5883a 	add	r2,r2,r11
210c25b0:	10800017 	ldw	r2,0(r2)
210c25b4:	1000683a 	jmp	r2
210c25b8:	210c2eec 	andhi	r4,r4,12475
210c25bc:	210c30d4 	ori	r4,r4,12483
210c25c0:	210c30d4 	ori	r4,r4,12483
210c25c4:	210c303c 	xorhi	r4,r4,12480
210c25c8:	210c30d4 	ori	r4,r4,12483
210c25cc:	210c30d4 	ori	r4,r4,12483
210c25d0:	210c30d4 	ori	r4,r4,12483
210c25d4:	210c30d4 	ori	r4,r4,12483
210c25d8:	210c30d4 	ori	r4,r4,12483
210c25dc:	210c30d4 	ori	r4,r4,12483
210c25e0:	210c2f0c 	andi	r4,r4,12476
210c25e4:	210c2f38 	rdprs	r4,r4,12476
210c25e8:	210c30d4 	ori	r4,r4,12483
210c25ec:	210c27f8 	rdprs	r4,r4,12447
210c25f0:	210c2808 	cmpgei	r4,r4,12448
210c25f4:	210c30d4 	ori	r4,r4,12483
210c25f8:	210c2848 	cmpgei	r4,r4,12449
210c25fc:	210c2858 	cmpnei	r4,r4,12449
210c2600:	210c2858 	cmpnei	r4,r4,12449
210c2604:	210c2858 	cmpnei	r4,r4,12449
210c2608:	210c2858 	cmpnei	r4,r4,12449
210c260c:	210c2858 	cmpnei	r4,r4,12449
210c2610:	210c2858 	cmpnei	r4,r4,12449
210c2614:	210c2858 	cmpnei	r4,r4,12449
210c2618:	210c2858 	cmpnei	r4,r4,12449
210c261c:	210c2858 	cmpnei	r4,r4,12449
210c2620:	210c30d4 	ori	r4,r4,12483
210c2624:	210c30d4 	ori	r4,r4,12483
210c2628:	210c30d4 	ori	r4,r4,12483
210c262c:	210c30d4 	ori	r4,r4,12483
210c2630:	210c30d4 	ori	r4,r4,12483
210c2634:	210c30d4 	ori	r4,r4,12483
210c2638:	210c30d4 	ori	r4,r4,12483
210c263c:	210c30d4 	ori	r4,r4,12483
210c2640:	210c30d4 	ori	r4,r4,12483
210c2644:	210c30d4 	ori	r4,r4,12483
210c2648:	210c288c 	andi	r4,r4,12450
210c264c:	210c2cfc 	xorhi	r4,r4,12467
210c2650:	210c30d4 	ori	r4,r4,12483
210c2654:	210c2cfc 	xorhi	r4,r4,12467
210c2658:	210c30d4 	ori	r4,r4,12483
210c265c:	210c30d4 	ori	r4,r4,12483
210c2660:	210c30d4 	ori	r4,r4,12483
210c2664:	210c30d4 	ori	r4,r4,12483
210c2668:	210c2de8 	cmpgeui	r4,r4,12471
210c266c:	210c30d4 	ori	r4,r4,12483
210c2670:	210c30d4 	ori	r4,r4,12483
210c2674:	210c2c90 	cmplti	r4,r4,12466
210c2678:	210c30d4 	ori	r4,r4,12483
210c267c:	210c30d4 	ori	r4,r4,12483
210c2680:	210c30d4 	ori	r4,r4,12483
210c2684:	210c30d4 	ori	r4,r4,12483
210c2688:	210c30d4 	ori	r4,r4,12483
210c268c:	210c2ccc 	andi	r4,r4,12467
210c2690:	210c30d4 	ori	r4,r4,12483
210c2694:	210c30d4 	ori	r4,r4,12483
210c2698:	210c2e90 	cmplti	r4,r4,12474
210c269c:	210c30d4 	ori	r4,r4,12483
210c26a0:	210c30d4 	ori	r4,r4,12483
210c26a4:	210c30d4 	ori	r4,r4,12483
210c26a8:	210c30d4 	ori	r4,r4,12483
210c26ac:	210c30d4 	ori	r4,r4,12483
210c26b0:	210c30d4 	ori	r4,r4,12483
210c26b4:	210c30d4 	ori	r4,r4,12483
210c26b8:	210c30d4 	ori	r4,r4,12483
210c26bc:	210c30d4 	ori	r4,r4,12483
210c26c0:	210c30d4 	ori	r4,r4,12483
210c26c4:	210c2f48 	cmpgei	r4,r4,12477
210c26c8:	210c2df8 	rdprs	r4,r4,12471
210c26cc:	210c2cfc 	xorhi	r4,r4,12467
210c26d0:	210c2cfc 	xorhi	r4,r4,12467
210c26d4:	210c2cfc 	xorhi	r4,r4,12467
210c26d8:	210c2e38 	rdprs	r4,r4,12472
210c26dc:	210c2df8 	rdprs	r4,r4,12471
210c26e0:	210c30d4 	ori	r4,r4,12483
210c26e4:	210c30d4 	ori	r4,r4,12483
210c26e8:	210c2e48 	cmpgei	r4,r4,12473
210c26ec:	210c30d4 	ori	r4,r4,12483
210c26f0:	210c2e5c 	xori	r4,r4,12473
210c26f4:	210c3098 	cmpnei	r4,r4,12482
210c26f8:	210c2da0 	cmpeqi	r4,r4,12470
210c26fc:	210c304c 	andi	r4,r4,12481
210c2700:	210c30d4 	ori	r4,r4,12483
210c2704:	210c2f88 	cmpgei	r4,r4,12478
210c2708:	210c30d4 	ori	r4,r4,12483
210c270c:	210c305c 	xori	r4,r4,12481
210c2710:	210c30d4 	ori	r4,r4,12483
210c2714:	210c30d4 	ori	r4,r4,12483
210c2718:	210c2ffc 	xorhi	r4,r4,12479
210c271c:	db002a17 	ldw	r12,168(sp)
210c2720:	8323c83a 	sub	r17,r16,r12
210c2724:	003f7e06 	br	210c2520 <__flash_rwdata_start+0xffff0c28>
210c2728:	b009883a 	mov	r4,r22
210c272c:	b80b883a 	mov	r5,r23
210c2730:	10c44300 	call	210c4430 <__swsetup_r>
210c2734:	10000c1e 	bne	r2,zero,210c2768 <___vfprintf_internal_r+0x368>
210c2738:	b880030b 	ldhu	r2,12(r23)
210c273c:	00c00284 	movi	r3,10
210c2740:	1080068c 	andi	r2,r2,26
210c2744:	10ff561e 	bne	r2,r3,210c24a0 <__flash_rwdata_start+0xffff0ba8>
210c2748:	b880038f 	ldh	r2,14(r23)
210c274c:	103f5416 	blt	r2,zero,210c24a0 <__flash_rwdata_start+0xffff0ba8>
210c2750:	d9802a17 	ldw	r6,168(sp)
210c2754:	d9c02d17 	ldw	r7,180(sp)
210c2758:	b009883a 	mov	r4,r22
210c275c:	b80b883a 	mov	r5,r23
210c2760:	10c43740 	call	210c4374 <__sbprintf>
210c2764:	00000106 	br	210c276c <___vfprintf_internal_r+0x36c>
210c2768:	00bfffc4 	movi	r2,-1
210c276c:	dfc04917 	ldw	ra,292(sp)
210c2770:	df004817 	ldw	fp,288(sp)
210c2774:	ddc04717 	ldw	r23,284(sp)
210c2778:	dd804617 	ldw	r22,280(sp)
210c277c:	dd404517 	ldw	r21,276(sp)
210c2780:	dd004417 	ldw	r20,272(sp)
210c2784:	dcc04317 	ldw	r19,268(sp)
210c2788:	dc804217 	ldw	r18,264(sp)
210c278c:	dc404117 	ldw	r17,260(sp)
210c2790:	dc004017 	ldw	r16,256(sp)
210c2794:	dec04a04 	addi	sp,sp,296
210c2798:	f800283a 	ret
210c279c:	b009883a 	mov	r4,r22
210c27a0:	b80b883a 	mov	r5,r23
210c27a4:	d9801e04 	addi	r6,sp,120
210c27a8:	10c91cc0 	call	210c91cc <__sprint_r>
210c27ac:	1000081e 	bne	r2,zero,210c27d0 <___vfprintf_internal_r+0x3d0>
210c27b0:	da000404 	addi	r8,sp,16
210c27b4:	003f6706 	br	210c2554 <__flash_rwdata_start+0xffff0c5c>
210c27b8:	d8802017 	ldw	r2,128(sp)
210c27bc:	10000426 	beq	r2,zero,210c27d0 <___vfprintf_internal_r+0x3d0>
210c27c0:	b009883a 	mov	r4,r22
210c27c4:	b80b883a 	mov	r5,r23
210c27c8:	d9801e04 	addi	r6,sp,120
210c27cc:	10c91cc0 	call	210c91cc <__sprint_r>
210c27d0:	b880030b 	ldhu	r2,12(r23)
210c27d4:	1080100c 	andi	r2,r2,64
210c27d8:	103fe31e 	bne	r2,zero,210c2768 <__flash_rwdata_start+0xffff0e70>
210c27dc:	d8802f17 	ldw	r2,188(sp)
210c27e0:	003fe206 	br	210c276c <__flash_rwdata_start+0xffff0e74>
210c27e4:	b009883a 	mov	r4,r22
210c27e8:	10c66240 	call	210c6624 <__sinit>
210c27ec:	003f1c06 	br	210c2460 <__flash_rwdata_start+0xffff0b68>
210c27f0:	dc002a17 	ldw	r16,168(sp)
210c27f4:	003f5a06 	br	210c2560 <__flash_rwdata_start+0xffff0c68>
210c27f8:	1805883a 	mov	r2,r3
210c27fc:	8c400114 	ori	r17,r17,4
210c2800:	1c000007 	ldb	r16,0(r3)
210c2804:	003f6306 	br	210c2594 <__flash_rwdata_start+0xffff0c9c>
210c2808:	1c000007 	ldb	r16,0(r3)
210c280c:	18800044 	addi	r2,r3,1
210c2810:	8286ad26 	beq	r16,r10,210c42c8 <___vfprintf_internal_r+0x1ec8>
210c2814:	82fff404 	addi	r11,r16,-48
210c2818:	1007883a 	mov	r3,r2
210c281c:	0013883a 	mov	r9,zero
210c2820:	2aff5d36 	bltu	r5,r11,210c2598 <__flash_rwdata_start+0xffff0ca0>
210c2824:	1c000007 	ldb	r16,0(r3)
210c2828:	4a4002a4 	muli	r9,r9,10
210c282c:	18c00044 	addi	r3,r3,1
210c2830:	5a53883a 	add	r9,r11,r9
210c2834:	82fff404 	addi	r11,r16,-48
210c2838:	2afffa2e 	bgeu	r5,r11,210c2824 <__flash_rwdata_start+0xffff0f2c>
210c283c:	483f560e 	bge	r9,zero,210c2598 <__flash_rwdata_start+0xffff0ca0>
210c2840:	027fffc4 	movi	r9,-1
210c2844:	003f5406 	br	210c2598 <__flash_rwdata_start+0xffff0ca0>
210c2848:	8c402014 	ori	r17,r17,128
210c284c:	1805883a 	mov	r2,r3
210c2850:	1c000007 	ldb	r16,0(r3)
210c2854:	003f4f06 	br	210c2594 <__flash_rwdata_start+0xffff0c9c>
210c2858:	1805883a 	mov	r2,r3
210c285c:	d8002e15 	stw	zero,184(sp)
210c2860:	82fff404 	addi	r11,r16,-48
210c2864:	0019883a 	mov	r12,zero
210c2868:	14000007 	ldb	r16,0(r2)
210c286c:	630002a4 	muli	r12,r12,10
210c2870:	18c00044 	addi	r3,r3,1
210c2874:	1805883a 	mov	r2,r3
210c2878:	62d9883a 	add	r12,r12,r11
210c287c:	82fff404 	addi	r11,r16,-48
210c2880:	2afff92e 	bgeu	r5,r11,210c2868 <__flash_rwdata_start+0xffff0f70>
210c2884:	db002e15 	stw	r12,184(sp)
210c2888:	003f4306 	br	210c2598 <__flash_rwdata_start+0xffff0ca0>
210c288c:	8c400414 	ori	r17,r17,16
210c2890:	d8c02a15 	stw	r3,168(sp)
210c2894:	d9802785 	stb	r6,158(sp)
210c2898:	8880080c 	andi	r2,r17,32
210c289c:	d8c02d17 	ldw	r3,180(sp)
210c28a0:	10015a26 	beq	r2,zero,210c2e0c <___vfprintf_internal_r+0xa0c>
210c28a4:	db002d17 	ldw	r12,180(sp)
210c28a8:	18800117 	ldw	r2,4(r3)
210c28ac:	1cc00017 	ldw	r19,0(r3)
210c28b0:	63000204 	addi	r12,r12,8
210c28b4:	db002d15 	stw	r12,180(sp)
210c28b8:	1039883a 	mov	fp,r2
210c28bc:	10044516 	blt	r2,zero,210c39d4 <___vfprintf_internal_r+0x15d4>
210c28c0:	dd402783 	ldbu	r21,158(sp)
210c28c4:	da403215 	stw	r9,200(sp)
210c28c8:	00800044 	movi	r2,1
210c28cc:	9f06b03a 	or	r3,r19,fp
210c28d0:	48000216 	blt	r9,zero,210c28dc <___vfprintf_internal_r+0x4dc>
210c28d4:	013fdfc4 	movi	r4,-129
210c28d8:	8922703a 	and	r17,r17,r4
210c28dc:	1802071e 	bne	r3,zero,210c30fc <___vfprintf_internal_r+0xcfc>
210c28e0:	4802fa26 	beq	r9,zero,210c34cc <___vfprintf_internal_r+0x10cc>
210c28e4:	10803fcc 	andi	r2,r2,255
210c28e8:	00c00044 	movi	r3,1
210c28ec:	10c22926 	beq	r2,r3,210c3194 <___vfprintf_internal_r+0xd94>
210c28f0:	00c00084 	movi	r3,2
210c28f4:	10c31726 	beq	r2,r3,210c3554 <___vfprintf_internal_r+0x1154>
210c28f8:	d8c01e04 	addi	r3,sp,120
210c28fc:	9808d0fa 	srli	r4,r19,3
210c2900:	e00a977a 	slli	r5,fp,29
210c2904:	e038d0fa 	srli	fp,fp,3
210c2908:	9cc001cc 	andi	r19,r19,7
210c290c:	98800c04 	addi	r2,r19,48
210c2910:	18ffffc4 	addi	r3,r3,-1
210c2914:	2926b03a 	or	r19,r5,r4
210c2918:	18800005 	stb	r2,0(r3)
210c291c:	9f08b03a 	or	r4,r19,fp
210c2920:	203ff61e 	bne	r4,zero,210c28fc <__flash_rwdata_start+0xffff1004>
210c2924:	8900004c 	andi	r4,r17,1
210c2928:	d8c03115 	stw	r3,196(sp)
210c292c:	2003931e 	bne	r4,zero,210c377c <___vfprintf_internal_r+0x137c>
210c2930:	dac02817 	ldw	r11,160(sp)
210c2934:	58e5c83a 	sub	r18,r11,r3
210c2938:	9005883a 	mov	r2,r18
210c293c:	9240010e 	bge	r18,r9,210c2944 <___vfprintf_internal_r+0x544>
210c2940:	4805883a 	mov	r2,r9
210c2944:	d8802b15 	stw	r2,172(sp)
210c2948:	d8003415 	stw	zero,208(sp)
210c294c:	a8803fcc 	andi	r2,r21,255
210c2950:	1080201c 	xori	r2,r2,128
210c2954:	10bfe004 	addi	r2,r2,-128
210c2958:	10000326 	beq	r2,zero,210c2968 <___vfprintf_internal_r+0x568>
210c295c:	db002b17 	ldw	r12,172(sp)
210c2960:	63000044 	addi	r12,r12,1
210c2964:	db002b15 	stw	r12,172(sp)
210c2968:	88c0008c 	andi	r3,r17,2
210c296c:	d8c02c15 	stw	r3,176(sp)
210c2970:	18000326 	beq	r3,zero,210c2980 <___vfprintf_internal_r+0x580>
210c2974:	dac02b17 	ldw	r11,172(sp)
210c2978:	5ac00084 	addi	r11,r11,2
210c297c:	dac02b15 	stw	r11,172(sp)
210c2980:	8b00210c 	andi	r12,r17,132
210c2984:	db003015 	stw	r12,192(sp)
210c2988:	6001da1e 	bne	r12,zero,210c30f4 <___vfprintf_internal_r+0xcf4>
210c298c:	dac02e17 	ldw	r11,184(sp)
210c2990:	db002b17 	ldw	r12,172(sp)
210c2994:	5b39c83a 	sub	fp,r11,r12
210c2998:	0701d60e 	bge	zero,fp,210c30f4 <___vfprintf_internal_r+0xcf4>
210c299c:	02400404 	movi	r9,16
210c29a0:	d8c02017 	ldw	r3,128(sp)
210c29a4:	d8801f17 	ldw	r2,124(sp)
210c29a8:	4f053c0e 	bge	r9,fp,210c3e9c <___vfprintf_internal_r+0x1a9c>
210c29ac:	01440034 	movhi	r5,4096
210c29b0:	29408484 	addi	r5,r5,530
210c29b4:	d9403615 	stw	r5,216(sp)
210c29b8:	482b883a 	mov	r21,r9
210c29bc:	04c001c4 	movi	r19,7
210c29c0:	00000306 	br	210c29d0 <___vfprintf_internal_r+0x5d0>
210c29c4:	e73ffc04 	addi	fp,fp,-16
210c29c8:	42000204 	addi	r8,r8,8
210c29cc:	af00130e 	bge	r21,fp,210c2a1c <___vfprintf_internal_r+0x61c>
210c29d0:	02c40034 	movhi	r11,4096
210c29d4:	18c00404 	addi	r3,r3,16
210c29d8:	10800044 	addi	r2,r2,1
210c29dc:	5ac08484 	addi	r11,r11,530
210c29e0:	42c00015 	stw	r11,0(r8)
210c29e4:	45400115 	stw	r21,4(r8)
210c29e8:	d8c02015 	stw	r3,128(sp)
210c29ec:	d8801f15 	stw	r2,124(sp)
210c29f0:	98bff40e 	bge	r19,r2,210c29c4 <__flash_rwdata_start+0xffff10cc>
210c29f4:	b009883a 	mov	r4,r22
210c29f8:	b80b883a 	mov	r5,r23
210c29fc:	d9801e04 	addi	r6,sp,120
210c2a00:	10c91cc0 	call	210c91cc <__sprint_r>
210c2a04:	103f721e 	bne	r2,zero,210c27d0 <__flash_rwdata_start+0xffff0ed8>
210c2a08:	e73ffc04 	addi	fp,fp,-16
210c2a0c:	d8c02017 	ldw	r3,128(sp)
210c2a10:	d8801f17 	ldw	r2,124(sp)
210c2a14:	da000404 	addi	r8,sp,16
210c2a18:	af3fed16 	blt	r21,fp,210c29d0 <__flash_rwdata_start+0xffff10d8>
210c2a1c:	db003617 	ldw	r12,216(sp)
210c2a20:	e0c7883a 	add	r3,fp,r3
210c2a24:	10800044 	addi	r2,r2,1
210c2a28:	43000015 	stw	r12,0(r8)
210c2a2c:	47000115 	stw	fp,4(r8)
210c2a30:	d8c02015 	stw	r3,128(sp)
210c2a34:	d8801f15 	stw	r2,124(sp)
210c2a38:	010001c4 	movi	r4,7
210c2a3c:	20830e16 	blt	r4,r2,210c3678 <___vfprintf_internal_r+0x1278>
210c2a40:	d8802787 	ldb	r2,158(sp)
210c2a44:	42000204 	addi	r8,r8,8
210c2a48:	10000c26 	beq	r2,zero,210c2a7c <___vfprintf_internal_r+0x67c>
210c2a4c:	d8801f17 	ldw	r2,124(sp)
210c2a50:	d9002784 	addi	r4,sp,158
210c2a54:	18c00044 	addi	r3,r3,1
210c2a58:	10800044 	addi	r2,r2,1
210c2a5c:	41000015 	stw	r4,0(r8)
210c2a60:	01000044 	movi	r4,1
210c2a64:	41000115 	stw	r4,4(r8)
210c2a68:	d8c02015 	stw	r3,128(sp)
210c2a6c:	d8801f15 	stw	r2,124(sp)
210c2a70:	010001c4 	movi	r4,7
210c2a74:	2082a716 	blt	r4,r2,210c3514 <___vfprintf_internal_r+0x1114>
210c2a78:	42000204 	addi	r8,r8,8
210c2a7c:	dac02c17 	ldw	r11,176(sp)
210c2a80:	58000c26 	beq	r11,zero,210c2ab4 <___vfprintf_internal_r+0x6b4>
210c2a84:	d8801f17 	ldw	r2,124(sp)
210c2a88:	d9002704 	addi	r4,sp,156
210c2a8c:	18c00084 	addi	r3,r3,2
210c2a90:	10800044 	addi	r2,r2,1
210c2a94:	41000015 	stw	r4,0(r8)
210c2a98:	01000084 	movi	r4,2
210c2a9c:	41000115 	stw	r4,4(r8)
210c2aa0:	d8c02015 	stw	r3,128(sp)
210c2aa4:	d8801f15 	stw	r2,124(sp)
210c2aa8:	010001c4 	movi	r4,7
210c2aac:	2082a116 	blt	r4,r2,210c3534 <___vfprintf_internal_r+0x1134>
210c2ab0:	42000204 	addi	r8,r8,8
210c2ab4:	db003017 	ldw	r12,192(sp)
210c2ab8:	00802004 	movi	r2,128
210c2abc:	60820326 	beq	r12,r2,210c32cc <___vfprintf_internal_r+0xecc>
210c2ac0:	db003217 	ldw	r12,200(sp)
210c2ac4:	64abc83a 	sub	r21,r12,r18
210c2ac8:	0540260e 	bge	zero,r21,210c2b64 <___vfprintf_internal_r+0x764>
210c2acc:	07000404 	movi	fp,16
210c2ad0:	d8801f17 	ldw	r2,124(sp)
210c2ad4:	e544570e 	bge	fp,r21,210c3c34 <___vfprintf_internal_r+0x1834>
210c2ad8:	01440034 	movhi	r5,4096
210c2adc:	29408084 	addi	r5,r5,514
210c2ae0:	d9402c15 	stw	r5,176(sp)
210c2ae4:	04c001c4 	movi	r19,7
210c2ae8:	00000306 	br	210c2af8 <___vfprintf_internal_r+0x6f8>
210c2aec:	ad7ffc04 	addi	r21,r21,-16
210c2af0:	42000204 	addi	r8,r8,8
210c2af4:	e540110e 	bge	fp,r21,210c2b3c <___vfprintf_internal_r+0x73c>
210c2af8:	18c00404 	addi	r3,r3,16
210c2afc:	10800044 	addi	r2,r2,1
210c2b00:	45000015 	stw	r20,0(r8)
210c2b04:	47000115 	stw	fp,4(r8)
210c2b08:	d8c02015 	stw	r3,128(sp)
210c2b0c:	d8801f15 	stw	r2,124(sp)
210c2b10:	98bff60e 	bge	r19,r2,210c2aec <__flash_rwdata_start+0xffff11f4>
210c2b14:	b009883a 	mov	r4,r22
210c2b18:	b80b883a 	mov	r5,r23
210c2b1c:	d9801e04 	addi	r6,sp,120
210c2b20:	10c91cc0 	call	210c91cc <__sprint_r>
210c2b24:	103f2a1e 	bne	r2,zero,210c27d0 <__flash_rwdata_start+0xffff0ed8>
210c2b28:	ad7ffc04 	addi	r21,r21,-16
210c2b2c:	d8c02017 	ldw	r3,128(sp)
210c2b30:	d8801f17 	ldw	r2,124(sp)
210c2b34:	da000404 	addi	r8,sp,16
210c2b38:	e57fef16 	blt	fp,r21,210c2af8 <__flash_rwdata_start+0xffff1200>
210c2b3c:	dac02c17 	ldw	r11,176(sp)
210c2b40:	1d47883a 	add	r3,r3,r21
210c2b44:	10800044 	addi	r2,r2,1
210c2b48:	42c00015 	stw	r11,0(r8)
210c2b4c:	45400115 	stw	r21,4(r8)
210c2b50:	d8c02015 	stw	r3,128(sp)
210c2b54:	d8801f15 	stw	r2,124(sp)
210c2b58:	010001c4 	movi	r4,7
210c2b5c:	20826516 	blt	r4,r2,210c34f4 <___vfprintf_internal_r+0x10f4>
210c2b60:	42000204 	addi	r8,r8,8
210c2b64:	8880400c 	andi	r2,r17,256
210c2b68:	1001901e 	bne	r2,zero,210c31ac <___vfprintf_internal_r+0xdac>
210c2b6c:	d8801f17 	ldw	r2,124(sp)
210c2b70:	db003117 	ldw	r12,196(sp)
210c2b74:	1c87883a 	add	r3,r3,r18
210c2b78:	10800044 	addi	r2,r2,1
210c2b7c:	43000015 	stw	r12,0(r8)
210c2b80:	44800115 	stw	r18,4(r8)
210c2b84:	d8c02015 	stw	r3,128(sp)
210c2b88:	d8801f15 	stw	r2,124(sp)
210c2b8c:	010001c4 	movi	r4,7
210c2b90:	20824016 	blt	r4,r2,210c3494 <___vfprintf_internal_r+0x1094>
210c2b94:	42000204 	addi	r8,r8,8
210c2b98:	8c40010c 	andi	r17,r17,4
210c2b9c:	88003126 	beq	r17,zero,210c2c64 <___vfprintf_internal_r+0x864>
210c2ba0:	db002e17 	ldw	r12,184(sp)
210c2ba4:	dac02b17 	ldw	r11,172(sp)
210c2ba8:	62e1c83a 	sub	r16,r12,r11
210c2bac:	04002d0e 	bge	zero,r16,210c2c64 <___vfprintf_internal_r+0x864>
210c2bb0:	04400404 	movi	r17,16
210c2bb4:	d8801f17 	ldw	r2,124(sp)
210c2bb8:	8c05150e 	bge	r17,r16,210c4010 <___vfprintf_internal_r+0x1c10>
210c2bbc:	01040034 	movhi	r4,4096
210c2bc0:	21008484 	addi	r4,r4,530
210c2bc4:	d9003615 	stw	r4,216(sp)
210c2bc8:	048001c4 	movi	r18,7
210c2bcc:	00000306 	br	210c2bdc <___vfprintf_internal_r+0x7dc>
210c2bd0:	843ffc04 	addi	r16,r16,-16
210c2bd4:	42000204 	addi	r8,r8,8
210c2bd8:	8c00130e 	bge	r17,r16,210c2c28 <___vfprintf_internal_r+0x828>
210c2bdc:	01440034 	movhi	r5,4096
210c2be0:	18c00404 	addi	r3,r3,16
210c2be4:	10800044 	addi	r2,r2,1
210c2be8:	29408484 	addi	r5,r5,530
210c2bec:	41400015 	stw	r5,0(r8)
210c2bf0:	44400115 	stw	r17,4(r8)
210c2bf4:	d8c02015 	stw	r3,128(sp)
210c2bf8:	d8801f15 	stw	r2,124(sp)
210c2bfc:	90bff40e 	bge	r18,r2,210c2bd0 <__flash_rwdata_start+0xffff12d8>
210c2c00:	b009883a 	mov	r4,r22
210c2c04:	b80b883a 	mov	r5,r23
210c2c08:	d9801e04 	addi	r6,sp,120
210c2c0c:	10c91cc0 	call	210c91cc <__sprint_r>
210c2c10:	103eef1e 	bne	r2,zero,210c27d0 <__flash_rwdata_start+0xffff0ed8>
210c2c14:	843ffc04 	addi	r16,r16,-16
210c2c18:	d8c02017 	ldw	r3,128(sp)
210c2c1c:	d8801f17 	ldw	r2,124(sp)
210c2c20:	da000404 	addi	r8,sp,16
210c2c24:	8c3fed16 	blt	r17,r16,210c2bdc <__flash_rwdata_start+0xffff12e4>
210c2c28:	dac03617 	ldw	r11,216(sp)
210c2c2c:	1c07883a 	add	r3,r3,r16
210c2c30:	10800044 	addi	r2,r2,1
210c2c34:	42c00015 	stw	r11,0(r8)
210c2c38:	44000115 	stw	r16,4(r8)
210c2c3c:	d8c02015 	stw	r3,128(sp)
210c2c40:	d8801f15 	stw	r2,124(sp)
210c2c44:	010001c4 	movi	r4,7
210c2c48:	2080060e 	bge	r4,r2,210c2c64 <___vfprintf_internal_r+0x864>
210c2c4c:	b009883a 	mov	r4,r22
210c2c50:	b80b883a 	mov	r5,r23
210c2c54:	d9801e04 	addi	r6,sp,120
210c2c58:	10c91cc0 	call	210c91cc <__sprint_r>
210c2c5c:	103edc1e 	bne	r2,zero,210c27d0 <__flash_rwdata_start+0xffff0ed8>
210c2c60:	d8c02017 	ldw	r3,128(sp)
210c2c64:	d8802b17 	ldw	r2,172(sp)
210c2c68:	db002e17 	ldw	r12,184(sp)
210c2c6c:	1300010e 	bge	r2,r12,210c2c74 <___vfprintf_internal_r+0x874>
210c2c70:	6005883a 	mov	r2,r12
210c2c74:	dac02f17 	ldw	r11,188(sp)
210c2c78:	5897883a 	add	r11,r11,r2
210c2c7c:	dac02f15 	stw	r11,188(sp)
210c2c80:	18020c1e 	bne	r3,zero,210c34b4 <___vfprintf_internal_r+0x10b4>
210c2c84:	d8001f15 	stw	zero,124(sp)
210c2c88:	da000404 	addi	r8,sp,16
210c2c8c:	003e1706 	br	210c24ec <__flash_rwdata_start+0xffff0bf4>
210c2c90:	8c400414 	ori	r17,r17,16
210c2c94:	d8c02a15 	stw	r3,168(sp)
210c2c98:	8880080c 	andi	r2,r17,32
210c2c9c:	10010126 	beq	r2,zero,210c30a4 <___vfprintf_internal_r+0xca4>
210c2ca0:	db002d17 	ldw	r12,180(sp)
210c2ca4:	0005883a 	mov	r2,zero
210c2ca8:	64c00017 	ldw	r19,0(r12)
210c2cac:	67000117 	ldw	fp,4(r12)
210c2cb0:	63000204 	addi	r12,r12,8
210c2cb4:	db002d15 	stw	r12,180(sp)
210c2cb8:	9f06b03a 	or	r3,r19,fp
210c2cbc:	d8002785 	stb	zero,158(sp)
210c2cc0:	da403215 	stw	r9,200(sp)
210c2cc4:	002b883a 	mov	r21,zero
210c2cc8:	003f0106 	br	210c28d0 <__flash_rwdata_start+0xffff0fd8>
210c2ccc:	8c400414 	ori	r17,r17,16
210c2cd0:	d8c02a15 	stw	r3,168(sp)
210c2cd4:	8880080c 	andi	r2,r17,32
210c2cd8:	1000e326 	beq	r2,zero,210c3068 <___vfprintf_internal_r+0xc68>
210c2cdc:	dac02d17 	ldw	r11,180(sp)
210c2ce0:	00800044 	movi	r2,1
210c2ce4:	5cc00017 	ldw	r19,0(r11)
210c2ce8:	5f000117 	ldw	fp,4(r11)
210c2cec:	5ac00204 	addi	r11,r11,8
210c2cf0:	dac02d15 	stw	r11,180(sp)
210c2cf4:	9f06b03a 	or	r3,r19,fp
210c2cf8:	003ff006 	br	210c2cbc <__flash_rwdata_start+0xffff13c4>
210c2cfc:	db002d17 	ldw	r12,180(sp)
210c2d00:	dac02d17 	ldw	r11,180(sp)
210c2d04:	d8c02a15 	stw	r3,168(sp)
210c2d08:	63000017 	ldw	r12,0(r12)
210c2d0c:	5ac00117 	ldw	r11,4(r11)
210c2d10:	d9802785 	stb	r6,158(sp)
210c2d14:	6009883a 	mov	r4,r12
210c2d18:	580b883a 	mov	r5,r11
210c2d1c:	db003715 	stw	r12,220(sp)
210c2d20:	da003f15 	stw	r8,252(sp)
210c2d24:	da403e15 	stw	r9,248(sp)
210c2d28:	dac03915 	stw	r11,228(sp)
210c2d2c:	10c8e7c0 	call	210c8e7c <__fpclassifyd>
210c2d30:	db002d17 	ldw	r12,180(sp)
210c2d34:	04800044 	movi	r18,1
210c2d38:	da003f17 	ldw	r8,252(sp)
210c2d3c:	64c00204 	addi	r19,r12,8
210c2d40:	da403e17 	ldw	r9,248(sp)
210c2d44:	d9003717 	ldw	r4,220(sp)
210c2d48:	d9403917 	ldw	r5,228(sp)
210c2d4c:	14832b1e 	bne	r2,r18,210c39fc <___vfprintf_internal_r+0x15fc>
210c2d50:	000d883a 	mov	r6,zero
210c2d54:	000f883a 	mov	r7,zero
210c2d58:	10ccdd40 	call	210ccdd4 <__ledf2>
210c2d5c:	da003f17 	ldw	r8,252(sp)
210c2d60:	1004b716 	blt	r2,zero,210c4040 <___vfprintf_internal_r+0x1c40>
210c2d64:	dd402783 	ldbu	r21,158(sp)
210c2d68:	008011c4 	movi	r2,71
210c2d6c:	14040e0e 	bge	r2,r16,210c3da8 <___vfprintf_internal_r+0x19a8>
210c2d70:	00c40034 	movhi	r3,4096
210c2d74:	18c07104 	addi	r3,r3,452
210c2d78:	d8c03115 	stw	r3,196(sp)
210c2d7c:	02c000c4 	movi	r11,3
210c2d80:	00bfdfc4 	movi	r2,-129
210c2d84:	dac02b15 	stw	r11,172(sp)
210c2d88:	88a2703a 	and	r17,r17,r2
210c2d8c:	dcc02d15 	stw	r19,180(sp)
210c2d90:	5825883a 	mov	r18,r11
210c2d94:	d8003215 	stw	zero,200(sp)
210c2d98:	d8003415 	stw	zero,208(sp)
210c2d9c:	003eeb06 	br	210c294c <__flash_rwdata_start+0xffff1054>
210c2da0:	db002d17 	ldw	r12,180(sp)
210c2da4:	00800c04 	movi	r2,48
210c2da8:	d8802705 	stb	r2,156(sp)
210c2dac:	64c00017 	ldw	r19,0(r12)
210c2db0:	00801e04 	movi	r2,120
210c2db4:	d8802745 	stb	r2,157(sp)
210c2db8:	00840034 	movhi	r2,4096
210c2dbc:	10807904 	addi	r2,r2,484
210c2dc0:	63000104 	addi	r12,r12,4
210c2dc4:	d8c02a15 	stw	r3,168(sp)
210c2dc8:	d8803b15 	stw	r2,236(sp)
210c2dcc:	0039883a 	mov	fp,zero
210c2dd0:	8c400094 	ori	r17,r17,2
210c2dd4:	db002d15 	stw	r12,180(sp)
210c2dd8:	00800084 	movi	r2,2
210c2ddc:	04001e04 	movi	r16,120
210c2de0:	9807883a 	mov	r3,r19
210c2de4:	003fb506 	br	210c2cbc <__flash_rwdata_start+0xffff13c4>
210c2de8:	8c400214 	ori	r17,r17,8
210c2dec:	1805883a 	mov	r2,r3
210c2df0:	1c000007 	ldb	r16,0(r3)
210c2df4:	003de706 	br	210c2594 <__flash_rwdata_start+0xffff0c9c>
210c2df8:	d8c02a15 	stw	r3,168(sp)
210c2dfc:	d9802785 	stb	r6,158(sp)
210c2e00:	8880080c 	andi	r2,r17,32
210c2e04:	d8c02d17 	ldw	r3,180(sp)
210c2e08:	103ea61e 	bne	r2,zero,210c28a4 <__flash_rwdata_start+0xffff0fac>
210c2e0c:	8880040c 	andi	r2,r17,16
210c2e10:	1002221e 	bne	r2,zero,210c369c <___vfprintf_internal_r+0x129c>
210c2e14:	8880100c 	andi	r2,r17,64
210c2e18:	10022026 	beq	r2,zero,210c369c <___vfprintf_internal_r+0x129c>
210c2e1c:	1cc0000f 	ldh	r19,0(r3)
210c2e20:	db002d17 	ldw	r12,180(sp)
210c2e24:	9839d7fa 	srai	fp,r19,31
210c2e28:	63000104 	addi	r12,r12,4
210c2e2c:	db002d15 	stw	r12,180(sp)
210c2e30:	e005883a 	mov	r2,fp
210c2e34:	003ea106 	br	210c28bc <__flash_rwdata_start+0xffff0fc4>
210c2e38:	8c401014 	ori	r17,r17,64
210c2e3c:	1805883a 	mov	r2,r3
210c2e40:	1c000007 	ldb	r16,0(r3)
210c2e44:	003dd306 	br	210c2594 <__flash_rwdata_start+0xffff0c9c>
210c2e48:	1c000007 	ldb	r16,0(r3)
210c2e4c:	81c3e926 	beq	r16,r7,210c3df4 <___vfprintf_internal_r+0x19f4>
210c2e50:	8c400414 	ori	r17,r17,16
210c2e54:	1805883a 	mov	r2,r3
210c2e58:	003dce06 	br	210c2594 <__flash_rwdata_start+0xffff0c9c>
210c2e5c:	d8c02a15 	stw	r3,168(sp)
210c2e60:	d9802785 	stb	r6,158(sp)
210c2e64:	8880080c 	andi	r2,r17,32
210c2e68:	10034726 	beq	r2,zero,210c3b88 <___vfprintf_internal_r+0x1788>
210c2e6c:	db002d17 	ldw	r12,180(sp)
210c2e70:	dac02f17 	ldw	r11,188(sp)
210c2e74:	60800017 	ldw	r2,0(r12)
210c2e78:	5807d7fa 	srai	r3,r11,31
210c2e7c:	63000104 	addi	r12,r12,4
210c2e80:	db002d15 	stw	r12,180(sp)
210c2e84:	12c00015 	stw	r11,0(r2)
210c2e88:	10c00115 	stw	r3,4(r2)
210c2e8c:	003d9706 	br	210c24ec <__flash_rwdata_start+0xffff0bf4>
210c2e90:	03040034 	movhi	r12,4096
210c2e94:	63007404 	addi	r12,r12,464
210c2e98:	d8c02a15 	stw	r3,168(sp)
210c2e9c:	d9802785 	stb	r6,158(sp)
210c2ea0:	db003b15 	stw	r12,236(sp)
210c2ea4:	88c0080c 	andi	r3,r17,32
210c2ea8:	d8802d17 	ldw	r2,180(sp)
210c2eac:	18005b26 	beq	r3,zero,210c301c <___vfprintf_internal_r+0xc1c>
210c2eb0:	dac02d17 	ldw	r11,180(sp)
210c2eb4:	14c00017 	ldw	r19,0(r2)
210c2eb8:	17000117 	ldw	fp,4(r2)
210c2ebc:	5ac00204 	addi	r11,r11,8
210c2ec0:	dac02d15 	stw	r11,180(sp)
210c2ec4:	8880004c 	andi	r2,r17,1
210c2ec8:	10022926 	beq	r2,zero,210c3770 <___vfprintf_internal_r+0x1370>
210c2ecc:	9f06b03a 	or	r3,r19,fp
210c2ed0:	18032b26 	beq	r3,zero,210c3b80 <___vfprintf_internal_r+0x1780>
210c2ed4:	00800c04 	movi	r2,48
210c2ed8:	d8802705 	stb	r2,156(sp)
210c2edc:	dc002745 	stb	r16,157(sp)
210c2ee0:	8c400094 	ori	r17,r17,2
210c2ee4:	00800084 	movi	r2,2
210c2ee8:	003f7406 	br	210c2cbc <__flash_rwdata_start+0xffff13c4>
210c2eec:	30803fcc 	andi	r2,r6,255
210c2ef0:	1080201c 	xori	r2,r2,128
210c2ef4:	10bfe004 	addi	r2,r2,-128
210c2ef8:	1003351e 	bne	r2,zero,210c3bd0 <___vfprintf_internal_r+0x17d0>
210c2efc:	1805883a 	mov	r2,r3
210c2f00:	01800804 	movi	r6,32
210c2f04:	1c000007 	ldb	r16,0(r3)
210c2f08:	003da206 	br	210c2594 <__flash_rwdata_start+0xffff0c9c>
210c2f0c:	dac02d17 	ldw	r11,180(sp)
210c2f10:	db002d17 	ldw	r12,180(sp)
210c2f14:	5ac00017 	ldw	r11,0(r11)
210c2f18:	dac02e15 	stw	r11,184(sp)
210c2f1c:	62c00104 	addi	r11,r12,4
210c2f20:	db002e17 	ldw	r12,184(sp)
210c2f24:	6003ad16 	blt	r12,zero,210c3ddc <___vfprintf_internal_r+0x19dc>
210c2f28:	dac02d15 	stw	r11,180(sp)
210c2f2c:	1805883a 	mov	r2,r3
210c2f30:	1c000007 	ldb	r16,0(r3)
210c2f34:	003d9706 	br	210c2594 <__flash_rwdata_start+0xffff0c9c>
210c2f38:	1805883a 	mov	r2,r3
210c2f3c:	01800ac4 	movi	r6,43
210c2f40:	1c000007 	ldb	r16,0(r3)
210c2f44:	003d9306 	br	210c2594 <__flash_rwdata_start+0xffff0c9c>
210c2f48:	db002d17 	ldw	r12,180(sp)
210c2f4c:	d8c02a15 	stw	r3,168(sp)
210c2f50:	00c00044 	movi	r3,1
210c2f54:	60800017 	ldw	r2,0(r12)
210c2f58:	63000104 	addi	r12,r12,4
210c2f5c:	d8c02b15 	stw	r3,172(sp)
210c2f60:	d8002785 	stb	zero,158(sp)
210c2f64:	d8801405 	stb	r2,80(sp)
210c2f68:	db002d15 	stw	r12,180(sp)
210c2f6c:	dac01404 	addi	r11,sp,80
210c2f70:	1825883a 	mov	r18,r3
210c2f74:	d8003215 	stw	zero,200(sp)
210c2f78:	d8003415 	stw	zero,208(sp)
210c2f7c:	dac03115 	stw	r11,196(sp)
210c2f80:	0005883a 	mov	r2,zero
210c2f84:	003e7806 	br	210c2968 <__flash_rwdata_start+0xffff1070>
210c2f88:	dac02d17 	ldw	r11,180(sp)
210c2f8c:	db002d17 	ldw	r12,180(sp)
210c2f90:	d8c02a15 	stw	r3,168(sp)
210c2f94:	5ac00017 	ldw	r11,0(r11)
210c2f98:	d8002785 	stb	zero,158(sp)
210c2f9c:	64c00104 	addi	r19,r12,4
210c2fa0:	dac03115 	stw	r11,196(sp)
210c2fa4:	5803fe26 	beq	r11,zero,210c3fa0 <___vfprintf_internal_r+0x1ba0>
210c2fa8:	d9003117 	ldw	r4,196(sp)
210c2fac:	4803b416 	blt	r9,zero,210c3e80 <___vfprintf_internal_r+0x1a80>
210c2fb0:	480d883a 	mov	r6,r9
210c2fb4:	000b883a 	mov	r5,zero
210c2fb8:	da003f15 	stw	r8,252(sp)
210c2fbc:	da403e15 	stw	r9,248(sp)
210c2fc0:	10c73680 	call	210c7368 <memchr>
210c2fc4:	da003f17 	ldw	r8,252(sp)
210c2fc8:	da403e17 	ldw	r9,248(sp)
210c2fcc:	10043026 	beq	r2,zero,210c4090 <___vfprintf_internal_r+0x1c90>
210c2fd0:	d8c03117 	ldw	r3,196(sp)
210c2fd4:	10e5c83a 	sub	r18,r2,r3
210c2fd8:	4c836b16 	blt	r9,r18,210c3d88 <___vfprintf_internal_r+0x1988>
210c2fdc:	9005883a 	mov	r2,r18
210c2fe0:	9003ac16 	blt	r18,zero,210c3e94 <___vfprintf_internal_r+0x1a94>
210c2fe4:	dd402783 	ldbu	r21,158(sp)
210c2fe8:	d8802b15 	stw	r2,172(sp)
210c2fec:	dcc02d15 	stw	r19,180(sp)
210c2ff0:	d8003215 	stw	zero,200(sp)
210c2ff4:	d8003415 	stw	zero,208(sp)
210c2ff8:	003e5406 	br	210c294c <__flash_rwdata_start+0xffff1054>
210c2ffc:	00840034 	movhi	r2,4096
210c3000:	10807904 	addi	r2,r2,484
210c3004:	d8c02a15 	stw	r3,168(sp)
210c3008:	d8803b15 	stw	r2,236(sp)
210c300c:	d9802785 	stb	r6,158(sp)
210c3010:	88c0080c 	andi	r3,r17,32
210c3014:	d8802d17 	ldw	r2,180(sp)
210c3018:	183fa51e 	bne	r3,zero,210c2eb0 <__flash_rwdata_start+0xffff15b8>
210c301c:	88c0040c 	andi	r3,r17,16
210c3020:	1802ee26 	beq	r3,zero,210c3bdc <___vfprintf_internal_r+0x17dc>
210c3024:	db002d17 	ldw	r12,180(sp)
210c3028:	14c00017 	ldw	r19,0(r2)
210c302c:	0039883a 	mov	fp,zero
210c3030:	63000104 	addi	r12,r12,4
210c3034:	db002d15 	stw	r12,180(sp)
210c3038:	003fa206 	br	210c2ec4 <__flash_rwdata_start+0xffff15cc>
210c303c:	8c400054 	ori	r17,r17,1
210c3040:	1805883a 	mov	r2,r3
210c3044:	1c000007 	ldb	r16,0(r3)
210c3048:	003d5206 	br	210c2594 <__flash_rwdata_start+0xffff0c9c>
210c304c:	8c400814 	ori	r17,r17,32
210c3050:	1805883a 	mov	r2,r3
210c3054:	1c000007 	ldb	r16,0(r3)
210c3058:	003d4e06 	br	210c2594 <__flash_rwdata_start+0xffff0c9c>
210c305c:	d8c02a15 	stw	r3,168(sp)
210c3060:	8880080c 	andi	r2,r17,32
210c3064:	103f1d1e 	bne	r2,zero,210c2cdc <__flash_rwdata_start+0xffff13e4>
210c3068:	8880040c 	andi	r2,r17,16
210c306c:	1001b81e 	bne	r2,zero,210c3750 <___vfprintf_internal_r+0x1350>
210c3070:	8880100c 	andi	r2,r17,64
210c3074:	1001b626 	beq	r2,zero,210c3750 <___vfprintf_internal_r+0x1350>
210c3078:	dac02d17 	ldw	r11,180(sp)
210c307c:	0039883a 	mov	fp,zero
210c3080:	00800044 	movi	r2,1
210c3084:	5cc0000b 	ldhu	r19,0(r11)
210c3088:	5ac00104 	addi	r11,r11,4
210c308c:	dac02d15 	stw	r11,180(sp)
210c3090:	9807883a 	mov	r3,r19
210c3094:	003f0906 	br	210c2cbc <__flash_rwdata_start+0xffff13c4>
210c3098:	d8c02a15 	stw	r3,168(sp)
210c309c:	8880080c 	andi	r2,r17,32
210c30a0:	103eff1e 	bne	r2,zero,210c2ca0 <__flash_rwdata_start+0xffff13a8>
210c30a4:	8880040c 	andi	r2,r17,16
210c30a8:	1001a11e 	bne	r2,zero,210c3730 <___vfprintf_internal_r+0x1330>
210c30ac:	8880100c 	andi	r2,r17,64
210c30b0:	10019f26 	beq	r2,zero,210c3730 <___vfprintf_internal_r+0x1330>
210c30b4:	db002d17 	ldw	r12,180(sp)
210c30b8:	0039883a 	mov	fp,zero
210c30bc:	0005883a 	mov	r2,zero
210c30c0:	64c0000b 	ldhu	r19,0(r12)
210c30c4:	63000104 	addi	r12,r12,4
210c30c8:	db002d15 	stw	r12,180(sp)
210c30cc:	9807883a 	mov	r3,r19
210c30d0:	003efa06 	br	210c2cbc <__flash_rwdata_start+0xffff13c4>
210c30d4:	d8c02a15 	stw	r3,168(sp)
210c30d8:	d9802785 	stb	r6,158(sp)
210c30dc:	803db626 	beq	r16,zero,210c27b8 <__flash_rwdata_start+0xffff0ec0>
210c30e0:	00c00044 	movi	r3,1
210c30e4:	d8c02b15 	stw	r3,172(sp)
210c30e8:	dc001405 	stb	r16,80(sp)
210c30ec:	d8002785 	stb	zero,158(sp)
210c30f0:	003f9e06 	br	210c2f6c <__flash_rwdata_start+0xffff1674>
210c30f4:	d8c02017 	ldw	r3,128(sp)
210c30f8:	003e5306 	br	210c2a48 <__flash_rwdata_start+0xffff1150>
210c30fc:	10803fcc 	andi	r2,r2,255
210c3100:	00c00044 	movi	r3,1
210c3104:	10fdfa1e 	bne	r2,r3,210c28f0 <__flash_rwdata_start+0xffff0ff8>
210c3108:	e000021e 	bne	fp,zero,210c3114 <___vfprintf_internal_r+0xd14>
210c310c:	00800244 	movi	r2,9
210c3110:	14c0202e 	bgeu	r2,r19,210c3194 <___vfprintf_internal_r+0xd94>
210c3114:	dc002b15 	stw	r16,172(sp)
210c3118:	dc402c15 	stw	r17,176(sp)
210c311c:	9821883a 	mov	r16,r19
210c3120:	e023883a 	mov	r17,fp
210c3124:	dc801e04 	addi	r18,sp,120
210c3128:	4827883a 	mov	r19,r9
210c312c:	4039883a 	mov	fp,r8
210c3130:	8009883a 	mov	r4,r16
210c3134:	880b883a 	mov	r5,r17
210c3138:	01800284 	movi	r6,10
210c313c:	000f883a 	mov	r7,zero
210c3140:	10cb44c0 	call	210cb44c <__umoddi3>
210c3144:	10800c04 	addi	r2,r2,48
210c3148:	94bfffc4 	addi	r18,r18,-1
210c314c:	8009883a 	mov	r4,r16
210c3150:	880b883a 	mov	r5,r17
210c3154:	01800284 	movi	r6,10
210c3158:	000f883a 	mov	r7,zero
210c315c:	90800005 	stb	r2,0(r18)
210c3160:	10cae8c0 	call	210cae8c <__udivdi3>
210c3164:	1021883a 	mov	r16,r2
210c3168:	10c4b03a 	or	r2,r2,r3
210c316c:	1823883a 	mov	r17,r3
210c3170:	103fef1e 	bne	r2,zero,210c3130 <__flash_rwdata_start+0xffff1838>
210c3174:	dac02817 	ldw	r11,160(sp)
210c3178:	dc803115 	stw	r18,196(sp)
210c317c:	dc002b17 	ldw	r16,172(sp)
210c3180:	dc402c17 	ldw	r17,176(sp)
210c3184:	9813883a 	mov	r9,r19
210c3188:	e011883a 	mov	r8,fp
210c318c:	5ca5c83a 	sub	r18,r11,r18
210c3190:	003de906 	br	210c2938 <__flash_rwdata_start+0xffff1040>
210c3194:	9cc00c04 	addi	r19,r19,48
210c3198:	d8c01dc4 	addi	r3,sp,119
210c319c:	dcc01dc5 	stb	r19,119(sp)
210c31a0:	dc803c17 	ldw	r18,240(sp)
210c31a4:	d8c03115 	stw	r3,196(sp)
210c31a8:	003de306 	br	210c2938 <__flash_rwdata_start+0xffff1040>
210c31ac:	00801944 	movi	r2,101
210c31b0:	1400710e 	bge	r2,r16,210c3378 <___vfprintf_internal_r+0xf78>
210c31b4:	d9003717 	ldw	r4,220(sp)
210c31b8:	d9403917 	ldw	r5,228(sp)
210c31bc:	000d883a 	mov	r6,zero
210c31c0:	000f883a 	mov	r7,zero
210c31c4:	d8c03d15 	stw	r3,244(sp)
210c31c8:	da003f15 	stw	r8,252(sp)
210c31cc:	10ccc700 	call	210ccc70 <__eqdf2>
210c31d0:	d8c03d17 	ldw	r3,244(sp)
210c31d4:	da003f17 	ldw	r8,252(sp)
210c31d8:	1000ef1e 	bne	r2,zero,210c3598 <___vfprintf_internal_r+0x1198>
210c31dc:	d8801f17 	ldw	r2,124(sp)
210c31e0:	01040034 	movhi	r4,4096
210c31e4:	21008004 	addi	r4,r4,512
210c31e8:	18c00044 	addi	r3,r3,1
210c31ec:	10800044 	addi	r2,r2,1
210c31f0:	41000015 	stw	r4,0(r8)
210c31f4:	01000044 	movi	r4,1
210c31f8:	41000115 	stw	r4,4(r8)
210c31fc:	d8c02015 	stw	r3,128(sp)
210c3200:	d8801f15 	stw	r2,124(sp)
210c3204:	010001c4 	movi	r4,7
210c3208:	20828e16 	blt	r4,r2,210c3c44 <___vfprintf_internal_r+0x1844>
210c320c:	42000204 	addi	r8,r8,8
210c3210:	d8802617 	ldw	r2,152(sp)
210c3214:	dac03317 	ldw	r11,204(sp)
210c3218:	12c00216 	blt	r2,r11,210c3224 <___vfprintf_internal_r+0xe24>
210c321c:	8880004c 	andi	r2,r17,1
210c3220:	103e5d26 	beq	r2,zero,210c2b98 <__flash_rwdata_start+0xffff12a0>
210c3224:	db003817 	ldw	r12,224(sp)
210c3228:	d8801f17 	ldw	r2,124(sp)
210c322c:	dac03517 	ldw	r11,212(sp)
210c3230:	1b07883a 	add	r3,r3,r12
210c3234:	10800044 	addi	r2,r2,1
210c3238:	42c00015 	stw	r11,0(r8)
210c323c:	43000115 	stw	r12,4(r8)
210c3240:	d8c02015 	stw	r3,128(sp)
210c3244:	d8801f15 	stw	r2,124(sp)
210c3248:	010001c4 	movi	r4,7
210c324c:	2082ed16 	blt	r4,r2,210c3e04 <___vfprintf_internal_r+0x1a04>
210c3250:	42000204 	addi	r8,r8,8
210c3254:	db003317 	ldw	r12,204(sp)
210c3258:	643fffc4 	addi	r16,r12,-1
210c325c:	043e4e0e 	bge	zero,r16,210c2b98 <__flash_rwdata_start+0xffff12a0>
210c3260:	04800404 	movi	r18,16
210c3264:	d8801f17 	ldw	r2,124(sp)
210c3268:	94007e0e 	bge	r18,r16,210c3464 <___vfprintf_internal_r+0x1064>
210c326c:	01440034 	movhi	r5,4096
210c3270:	29408084 	addi	r5,r5,514
210c3274:	d9402c15 	stw	r5,176(sp)
210c3278:	054001c4 	movi	r21,7
210c327c:	00000306 	br	210c328c <___vfprintf_internal_r+0xe8c>
210c3280:	42000204 	addi	r8,r8,8
210c3284:	843ffc04 	addi	r16,r16,-16
210c3288:	9400790e 	bge	r18,r16,210c3470 <___vfprintf_internal_r+0x1070>
210c328c:	18c00404 	addi	r3,r3,16
210c3290:	10800044 	addi	r2,r2,1
210c3294:	45000015 	stw	r20,0(r8)
210c3298:	44800115 	stw	r18,4(r8)
210c329c:	d8c02015 	stw	r3,128(sp)
210c32a0:	d8801f15 	stw	r2,124(sp)
210c32a4:	a8bff60e 	bge	r21,r2,210c3280 <__flash_rwdata_start+0xffff1988>
210c32a8:	b009883a 	mov	r4,r22
210c32ac:	b80b883a 	mov	r5,r23
210c32b0:	d9801e04 	addi	r6,sp,120
210c32b4:	10c91cc0 	call	210c91cc <__sprint_r>
210c32b8:	103d451e 	bne	r2,zero,210c27d0 <__flash_rwdata_start+0xffff0ed8>
210c32bc:	d8c02017 	ldw	r3,128(sp)
210c32c0:	d8801f17 	ldw	r2,124(sp)
210c32c4:	da000404 	addi	r8,sp,16
210c32c8:	003fee06 	br	210c3284 <__flash_rwdata_start+0xffff198c>
210c32cc:	dac02e17 	ldw	r11,184(sp)
210c32d0:	db002b17 	ldw	r12,172(sp)
210c32d4:	5b2bc83a 	sub	r21,r11,r12
210c32d8:	057df90e 	bge	zero,r21,210c2ac0 <__flash_rwdata_start+0xffff11c8>
210c32dc:	07000404 	movi	fp,16
210c32e0:	d8801f17 	ldw	r2,124(sp)
210c32e4:	e543640e 	bge	fp,r21,210c4078 <___vfprintf_internal_r+0x1c78>
210c32e8:	01440034 	movhi	r5,4096
210c32ec:	29408084 	addi	r5,r5,514
210c32f0:	d9402c15 	stw	r5,176(sp)
210c32f4:	04c001c4 	movi	r19,7
210c32f8:	00000306 	br	210c3308 <___vfprintf_internal_r+0xf08>
210c32fc:	ad7ffc04 	addi	r21,r21,-16
210c3300:	42000204 	addi	r8,r8,8
210c3304:	e540110e 	bge	fp,r21,210c334c <___vfprintf_internal_r+0xf4c>
210c3308:	18c00404 	addi	r3,r3,16
210c330c:	10800044 	addi	r2,r2,1
210c3310:	45000015 	stw	r20,0(r8)
210c3314:	47000115 	stw	fp,4(r8)
210c3318:	d8c02015 	stw	r3,128(sp)
210c331c:	d8801f15 	stw	r2,124(sp)
210c3320:	98bff60e 	bge	r19,r2,210c32fc <__flash_rwdata_start+0xffff1a04>
210c3324:	b009883a 	mov	r4,r22
210c3328:	b80b883a 	mov	r5,r23
210c332c:	d9801e04 	addi	r6,sp,120
210c3330:	10c91cc0 	call	210c91cc <__sprint_r>
210c3334:	103d261e 	bne	r2,zero,210c27d0 <__flash_rwdata_start+0xffff0ed8>
210c3338:	ad7ffc04 	addi	r21,r21,-16
210c333c:	d8c02017 	ldw	r3,128(sp)
210c3340:	d8801f17 	ldw	r2,124(sp)
210c3344:	da000404 	addi	r8,sp,16
210c3348:	e57fef16 	blt	fp,r21,210c3308 <__flash_rwdata_start+0xffff1a10>
210c334c:	dac02c17 	ldw	r11,176(sp)
210c3350:	1d47883a 	add	r3,r3,r21
210c3354:	10800044 	addi	r2,r2,1
210c3358:	42c00015 	stw	r11,0(r8)
210c335c:	45400115 	stw	r21,4(r8)
210c3360:	d8c02015 	stw	r3,128(sp)
210c3364:	d8801f15 	stw	r2,124(sp)
210c3368:	010001c4 	movi	r4,7
210c336c:	20819116 	blt	r4,r2,210c39b4 <___vfprintf_internal_r+0x15b4>
210c3370:	42000204 	addi	r8,r8,8
210c3374:	003dd206 	br	210c2ac0 <__flash_rwdata_start+0xffff11c8>
210c3378:	db003317 	ldw	r12,204(sp)
210c337c:	00800044 	movi	r2,1
210c3380:	18c00044 	addi	r3,r3,1
210c3384:	1301530e 	bge	r2,r12,210c38d4 <___vfprintf_internal_r+0x14d4>
210c3388:	dc001f17 	ldw	r16,124(sp)
210c338c:	dac03117 	ldw	r11,196(sp)
210c3390:	00800044 	movi	r2,1
210c3394:	84000044 	addi	r16,r16,1
210c3398:	40800115 	stw	r2,4(r8)
210c339c:	42c00015 	stw	r11,0(r8)
210c33a0:	d8c02015 	stw	r3,128(sp)
210c33a4:	dc001f15 	stw	r16,124(sp)
210c33a8:	008001c4 	movi	r2,7
210c33ac:	14016b16 	blt	r2,r16,210c395c <___vfprintf_internal_r+0x155c>
210c33b0:	42000204 	addi	r8,r8,8
210c33b4:	db003817 	ldw	r12,224(sp)
210c33b8:	dac03517 	ldw	r11,212(sp)
210c33bc:	84000044 	addi	r16,r16,1
210c33c0:	1b07883a 	add	r3,r3,r12
210c33c4:	42c00015 	stw	r11,0(r8)
210c33c8:	43000115 	stw	r12,4(r8)
210c33cc:	d8c02015 	stw	r3,128(sp)
210c33d0:	dc001f15 	stw	r16,124(sp)
210c33d4:	008001c4 	movi	r2,7
210c33d8:	14016916 	blt	r2,r16,210c3980 <___vfprintf_internal_r+0x1580>
210c33dc:	44800204 	addi	r18,r8,8
210c33e0:	d9003717 	ldw	r4,220(sp)
210c33e4:	d9403917 	ldw	r5,228(sp)
210c33e8:	000d883a 	mov	r6,zero
210c33ec:	000f883a 	mov	r7,zero
210c33f0:	d8c03d15 	stw	r3,244(sp)
210c33f4:	10ccc700 	call	210ccc70 <__eqdf2>
210c33f8:	d8c03d17 	ldw	r3,244(sp)
210c33fc:	db003317 	ldw	r12,204(sp)
210c3400:	1000ad26 	beq	r2,zero,210c36b8 <___vfprintf_internal_r+0x12b8>
210c3404:	dac03117 	ldw	r11,196(sp)
210c3408:	60bfffc4 	addi	r2,r12,-1
210c340c:	1887883a 	add	r3,r3,r2
210c3410:	59000044 	addi	r4,r11,1
210c3414:	84000044 	addi	r16,r16,1
210c3418:	90800115 	stw	r2,4(r18)
210c341c:	91000015 	stw	r4,0(r18)
210c3420:	d8c02015 	stw	r3,128(sp)
210c3424:	dc001f15 	stw	r16,124(sp)
210c3428:	008001c4 	movi	r2,7
210c342c:	14014216 	blt	r2,r16,210c3938 <___vfprintf_internal_r+0x1538>
210c3430:	94800204 	addi	r18,r18,8
210c3434:	dac03a17 	ldw	r11,232(sp)
210c3438:	dd4022c4 	addi	r21,sp,139
210c343c:	84000044 	addi	r16,r16,1
210c3440:	1ac7883a 	add	r3,r3,r11
210c3444:	95400015 	stw	r21,0(r18)
210c3448:	92c00115 	stw	r11,4(r18)
210c344c:	d8c02015 	stw	r3,128(sp)
210c3450:	dc001f15 	stw	r16,124(sp)
210c3454:	008001c4 	movi	r2,7
210c3458:	14000e16 	blt	r2,r16,210c3494 <___vfprintf_internal_r+0x1094>
210c345c:	92000204 	addi	r8,r18,8
210c3460:	003dcd06 	br	210c2b98 <__flash_rwdata_start+0xffff12a0>
210c3464:	01040034 	movhi	r4,4096
210c3468:	21008084 	addi	r4,r4,514
210c346c:	d9002c15 	stw	r4,176(sp)
210c3470:	dac02c17 	ldw	r11,176(sp)
210c3474:	1c07883a 	add	r3,r3,r16
210c3478:	44000115 	stw	r16,4(r8)
210c347c:	42c00015 	stw	r11,0(r8)
210c3480:	10800044 	addi	r2,r2,1
210c3484:	d8c02015 	stw	r3,128(sp)
210c3488:	d8801f15 	stw	r2,124(sp)
210c348c:	010001c4 	movi	r4,7
210c3490:	20bdc00e 	bge	r4,r2,210c2b94 <__flash_rwdata_start+0xffff129c>
210c3494:	b009883a 	mov	r4,r22
210c3498:	b80b883a 	mov	r5,r23
210c349c:	d9801e04 	addi	r6,sp,120
210c34a0:	10c91cc0 	call	210c91cc <__sprint_r>
210c34a4:	103cca1e 	bne	r2,zero,210c27d0 <__flash_rwdata_start+0xffff0ed8>
210c34a8:	d8c02017 	ldw	r3,128(sp)
210c34ac:	da000404 	addi	r8,sp,16
210c34b0:	003db906 	br	210c2b98 <__flash_rwdata_start+0xffff12a0>
210c34b4:	b009883a 	mov	r4,r22
210c34b8:	b80b883a 	mov	r5,r23
210c34bc:	d9801e04 	addi	r6,sp,120
210c34c0:	10c91cc0 	call	210c91cc <__sprint_r>
210c34c4:	103def26 	beq	r2,zero,210c2c84 <__flash_rwdata_start+0xffff138c>
210c34c8:	003cc106 	br	210c27d0 <__flash_rwdata_start+0xffff0ed8>
210c34cc:	10803fcc 	andi	r2,r2,255
210c34d0:	1000651e 	bne	r2,zero,210c3668 <___vfprintf_internal_r+0x1268>
210c34d4:	8880004c 	andi	r2,r17,1
210c34d8:	10013226 	beq	r2,zero,210c39a4 <___vfprintf_internal_r+0x15a4>
210c34dc:	00800c04 	movi	r2,48
210c34e0:	d8c01dc4 	addi	r3,sp,119
210c34e4:	d8801dc5 	stb	r2,119(sp)
210c34e8:	dc803c17 	ldw	r18,240(sp)
210c34ec:	d8c03115 	stw	r3,196(sp)
210c34f0:	003d1106 	br	210c2938 <__flash_rwdata_start+0xffff1040>
210c34f4:	b009883a 	mov	r4,r22
210c34f8:	b80b883a 	mov	r5,r23
210c34fc:	d9801e04 	addi	r6,sp,120
210c3500:	10c91cc0 	call	210c91cc <__sprint_r>
210c3504:	103cb21e 	bne	r2,zero,210c27d0 <__flash_rwdata_start+0xffff0ed8>
210c3508:	d8c02017 	ldw	r3,128(sp)
210c350c:	da000404 	addi	r8,sp,16
210c3510:	003d9406 	br	210c2b64 <__flash_rwdata_start+0xffff126c>
210c3514:	b009883a 	mov	r4,r22
210c3518:	b80b883a 	mov	r5,r23
210c351c:	d9801e04 	addi	r6,sp,120
210c3520:	10c91cc0 	call	210c91cc <__sprint_r>
210c3524:	103caa1e 	bne	r2,zero,210c27d0 <__flash_rwdata_start+0xffff0ed8>
210c3528:	d8c02017 	ldw	r3,128(sp)
210c352c:	da000404 	addi	r8,sp,16
210c3530:	003d5206 	br	210c2a7c <__flash_rwdata_start+0xffff1184>
210c3534:	b009883a 	mov	r4,r22
210c3538:	b80b883a 	mov	r5,r23
210c353c:	d9801e04 	addi	r6,sp,120
210c3540:	10c91cc0 	call	210c91cc <__sprint_r>
210c3544:	103ca21e 	bne	r2,zero,210c27d0 <__flash_rwdata_start+0xffff0ed8>
210c3548:	d8c02017 	ldw	r3,128(sp)
210c354c:	da000404 	addi	r8,sp,16
210c3550:	003d5806 	br	210c2ab4 <__flash_rwdata_start+0xffff11bc>
210c3554:	d9403b17 	ldw	r5,236(sp)
210c3558:	d8c01e04 	addi	r3,sp,120
210c355c:	988003cc 	andi	r2,r19,15
210c3560:	e008973a 	slli	r4,fp,28
210c3564:	2885883a 	add	r2,r5,r2
210c3568:	9826d13a 	srli	r19,r19,4
210c356c:	10800003 	ldbu	r2,0(r2)
210c3570:	e038d13a 	srli	fp,fp,4
210c3574:	18ffffc4 	addi	r3,r3,-1
210c3578:	24e6b03a 	or	r19,r4,r19
210c357c:	18800005 	stb	r2,0(r3)
210c3580:	9f04b03a 	or	r2,r19,fp
210c3584:	103ff51e 	bne	r2,zero,210c355c <__flash_rwdata_start+0xffff1c64>
210c3588:	db002817 	ldw	r12,160(sp)
210c358c:	d8c03115 	stw	r3,196(sp)
210c3590:	60e5c83a 	sub	r18,r12,r3
210c3594:	003ce806 	br	210c2938 <__flash_rwdata_start+0xffff1040>
210c3598:	dc002617 	ldw	r16,152(sp)
210c359c:	0401b10e 	bge	zero,r16,210c3c64 <___vfprintf_internal_r+0x1864>
210c35a0:	db003117 	ldw	r12,196(sp)
210c35a4:	dac03317 	ldw	r11,204(sp)
210c35a8:	62e1883a 	add	r16,r12,r11
210c35ac:	db003417 	ldw	r12,208(sp)
210c35b0:	5825883a 	mov	r18,r11
210c35b4:	62c0010e 	bge	r12,r11,210c35bc <___vfprintf_internal_r+0x11bc>
210c35b8:	6025883a 	mov	r18,r12
210c35bc:	04800b0e 	bge	zero,r18,210c35ec <___vfprintf_internal_r+0x11ec>
210c35c0:	d8801f17 	ldw	r2,124(sp)
210c35c4:	dac03117 	ldw	r11,196(sp)
210c35c8:	1c87883a 	add	r3,r3,r18
210c35cc:	10800044 	addi	r2,r2,1
210c35d0:	42c00015 	stw	r11,0(r8)
210c35d4:	44800115 	stw	r18,4(r8)
210c35d8:	d8c02015 	stw	r3,128(sp)
210c35dc:	d8801f15 	stw	r2,124(sp)
210c35e0:	010001c4 	movi	r4,7
210c35e4:	20824f16 	blt	r4,r2,210c3f24 <___vfprintf_internal_r+0x1b24>
210c35e8:	42000204 	addi	r8,r8,8
210c35ec:	90024b16 	blt	r18,zero,210c3f1c <___vfprintf_internal_r+0x1b1c>
210c35f0:	db003417 	ldw	r12,208(sp)
210c35f4:	64a5c83a 	sub	r18,r12,r18
210c35f8:	0480730e 	bge	zero,r18,210c37c8 <___vfprintf_internal_r+0x13c8>
210c35fc:	05400404 	movi	r21,16
210c3600:	d8801f17 	ldw	r2,124(sp)
210c3604:	ac817d0e 	bge	r21,r18,210c3bfc <___vfprintf_internal_r+0x17fc>
210c3608:	01440034 	movhi	r5,4096
210c360c:	29408084 	addi	r5,r5,514
210c3610:	d9402c15 	stw	r5,176(sp)
210c3614:	070001c4 	movi	fp,7
210c3618:	00000306 	br	210c3628 <___vfprintf_internal_r+0x1228>
210c361c:	42000204 	addi	r8,r8,8
210c3620:	94bffc04 	addi	r18,r18,-16
210c3624:	ac81780e 	bge	r21,r18,210c3c08 <___vfprintf_internal_r+0x1808>
210c3628:	18c00404 	addi	r3,r3,16
210c362c:	10800044 	addi	r2,r2,1
210c3630:	45000015 	stw	r20,0(r8)
210c3634:	45400115 	stw	r21,4(r8)
210c3638:	d8c02015 	stw	r3,128(sp)
210c363c:	d8801f15 	stw	r2,124(sp)
210c3640:	e0bff60e 	bge	fp,r2,210c361c <__flash_rwdata_start+0xffff1d24>
210c3644:	b009883a 	mov	r4,r22
210c3648:	b80b883a 	mov	r5,r23
210c364c:	d9801e04 	addi	r6,sp,120
210c3650:	10c91cc0 	call	210c91cc <__sprint_r>
210c3654:	103c5e1e 	bne	r2,zero,210c27d0 <__flash_rwdata_start+0xffff0ed8>
210c3658:	d8c02017 	ldw	r3,128(sp)
210c365c:	d8801f17 	ldw	r2,124(sp)
210c3660:	da000404 	addi	r8,sp,16
210c3664:	003fee06 	br	210c3620 <__flash_rwdata_start+0xffff1d28>
210c3668:	dac01e04 	addi	r11,sp,120
210c366c:	0025883a 	mov	r18,zero
210c3670:	dac03115 	stw	r11,196(sp)
210c3674:	003cb006 	br	210c2938 <__flash_rwdata_start+0xffff1040>
210c3678:	b009883a 	mov	r4,r22
210c367c:	b80b883a 	mov	r5,r23
210c3680:	d9801e04 	addi	r6,sp,120
210c3684:	10c91cc0 	call	210c91cc <__sprint_r>
210c3688:	103c511e 	bne	r2,zero,210c27d0 <__flash_rwdata_start+0xffff0ed8>
210c368c:	d8c02017 	ldw	r3,128(sp)
210c3690:	d8802787 	ldb	r2,158(sp)
210c3694:	da000404 	addi	r8,sp,16
210c3698:	003ceb06 	br	210c2a48 <__flash_rwdata_start+0xffff1150>
210c369c:	1cc00017 	ldw	r19,0(r3)
210c36a0:	dac02d17 	ldw	r11,180(sp)
210c36a4:	9839d7fa 	srai	fp,r19,31
210c36a8:	5ac00104 	addi	r11,r11,4
210c36ac:	dac02d15 	stw	r11,180(sp)
210c36b0:	e005883a 	mov	r2,fp
210c36b4:	003c8106 	br	210c28bc <__flash_rwdata_start+0xffff0fc4>
210c36b8:	657fffc4 	addi	r21,r12,-1
210c36bc:	057f5d0e 	bge	zero,r21,210c3434 <__flash_rwdata_start+0xffff1b3c>
210c36c0:	07000404 	movi	fp,16
210c36c4:	e540900e 	bge	fp,r21,210c3908 <___vfprintf_internal_r+0x1508>
210c36c8:	01040034 	movhi	r4,4096
210c36cc:	21008084 	addi	r4,r4,514
210c36d0:	d9002c15 	stw	r4,176(sp)
210c36d4:	01c001c4 	movi	r7,7
210c36d8:	00000306 	br	210c36e8 <___vfprintf_internal_r+0x12e8>
210c36dc:	94800204 	addi	r18,r18,8
210c36e0:	ad7ffc04 	addi	r21,r21,-16
210c36e4:	e5408b0e 	bge	fp,r21,210c3914 <___vfprintf_internal_r+0x1514>
210c36e8:	18c00404 	addi	r3,r3,16
210c36ec:	84000044 	addi	r16,r16,1
210c36f0:	95000015 	stw	r20,0(r18)
210c36f4:	97000115 	stw	fp,4(r18)
210c36f8:	d8c02015 	stw	r3,128(sp)
210c36fc:	dc001f15 	stw	r16,124(sp)
210c3700:	3c3ff60e 	bge	r7,r16,210c36dc <__flash_rwdata_start+0xffff1de4>
210c3704:	b009883a 	mov	r4,r22
210c3708:	b80b883a 	mov	r5,r23
210c370c:	d9801e04 	addi	r6,sp,120
210c3710:	d9c03d15 	stw	r7,244(sp)
210c3714:	10c91cc0 	call	210c91cc <__sprint_r>
210c3718:	d9c03d17 	ldw	r7,244(sp)
210c371c:	103c2c1e 	bne	r2,zero,210c27d0 <__flash_rwdata_start+0xffff0ed8>
210c3720:	d8c02017 	ldw	r3,128(sp)
210c3724:	dc001f17 	ldw	r16,124(sp)
210c3728:	dc800404 	addi	r18,sp,16
210c372c:	003fec06 	br	210c36e0 <__flash_rwdata_start+0xffff1de8>
210c3730:	dac02d17 	ldw	r11,180(sp)
210c3734:	0039883a 	mov	fp,zero
210c3738:	0005883a 	mov	r2,zero
210c373c:	5cc00017 	ldw	r19,0(r11)
210c3740:	5ac00104 	addi	r11,r11,4
210c3744:	dac02d15 	stw	r11,180(sp)
210c3748:	9807883a 	mov	r3,r19
210c374c:	003d5b06 	br	210c2cbc <__flash_rwdata_start+0xffff13c4>
210c3750:	db002d17 	ldw	r12,180(sp)
210c3754:	0039883a 	mov	fp,zero
210c3758:	00800044 	movi	r2,1
210c375c:	64c00017 	ldw	r19,0(r12)
210c3760:	63000104 	addi	r12,r12,4
210c3764:	db002d15 	stw	r12,180(sp)
210c3768:	9807883a 	mov	r3,r19
210c376c:	003d5306 	br	210c2cbc <__flash_rwdata_start+0xffff13c4>
210c3770:	00800084 	movi	r2,2
210c3774:	9f06b03a 	or	r3,r19,fp
210c3778:	003d5006 	br	210c2cbc <__flash_rwdata_start+0xffff13c4>
210c377c:	10803fcc 	andi	r2,r2,255
210c3780:	1080201c 	xori	r2,r2,128
210c3784:	10bfe004 	addi	r2,r2,-128
210c3788:	01000c04 	movi	r4,48
210c378c:	1101a526 	beq	r2,r4,210c3e24 <___vfprintf_internal_r+0x1a24>
210c3790:	dac03117 	ldw	r11,196(sp)
210c3794:	db002817 	ldw	r12,160(sp)
210c3798:	193fffc5 	stb	r4,-1(r3)
210c379c:	5affffc4 	addi	r11,r11,-1
210c37a0:	dac03115 	stw	r11,196(sp)
210c37a4:	62e5c83a 	sub	r18,r12,r11
210c37a8:	003c6306 	br	210c2938 <__flash_rwdata_start+0xffff1040>
210c37ac:	b009883a 	mov	r4,r22
210c37b0:	b80b883a 	mov	r5,r23
210c37b4:	d9801e04 	addi	r6,sp,120
210c37b8:	10c91cc0 	call	210c91cc <__sprint_r>
210c37bc:	103c041e 	bne	r2,zero,210c27d0 <__flash_rwdata_start+0xffff0ed8>
210c37c0:	d8c02017 	ldw	r3,128(sp)
210c37c4:	da000404 	addi	r8,sp,16
210c37c8:	db003117 	ldw	r12,196(sp)
210c37cc:	dac03417 	ldw	r11,208(sp)
210c37d0:	d8802617 	ldw	r2,152(sp)
210c37d4:	62e5883a 	add	r18,r12,r11
210c37d8:	db003317 	ldw	r12,204(sp)
210c37dc:	13000216 	blt	r2,r12,210c37e8 <___vfprintf_internal_r+0x13e8>
210c37e0:	8900004c 	andi	r4,r17,1
210c37e4:	20000c26 	beq	r4,zero,210c3818 <___vfprintf_internal_r+0x1418>
210c37e8:	dac03817 	ldw	r11,224(sp)
210c37ec:	d9001f17 	ldw	r4,124(sp)
210c37f0:	db003517 	ldw	r12,212(sp)
210c37f4:	1ac7883a 	add	r3,r3,r11
210c37f8:	21000044 	addi	r4,r4,1
210c37fc:	43000015 	stw	r12,0(r8)
210c3800:	42c00115 	stw	r11,4(r8)
210c3804:	d8c02015 	stw	r3,128(sp)
210c3808:	d9001f15 	stw	r4,124(sp)
210c380c:	014001c4 	movi	r5,7
210c3810:	2901cc16 	blt	r5,r4,210c3f44 <___vfprintf_internal_r+0x1b44>
210c3814:	42000204 	addi	r8,r8,8
210c3818:	dac03317 	ldw	r11,204(sp)
210c381c:	8489c83a 	sub	r4,r16,r18
210c3820:	5885c83a 	sub	r2,r11,r2
210c3824:	1021883a 	mov	r16,r2
210c3828:	2080010e 	bge	r4,r2,210c3830 <___vfprintf_internal_r+0x1430>
210c382c:	2021883a 	mov	r16,r4
210c3830:	04000a0e 	bge	zero,r16,210c385c <___vfprintf_internal_r+0x145c>
210c3834:	d9001f17 	ldw	r4,124(sp)
210c3838:	1c07883a 	add	r3,r3,r16
210c383c:	44800015 	stw	r18,0(r8)
210c3840:	21000044 	addi	r4,r4,1
210c3844:	44000115 	stw	r16,4(r8)
210c3848:	d8c02015 	stw	r3,128(sp)
210c384c:	d9001f15 	stw	r4,124(sp)
210c3850:	014001c4 	movi	r5,7
210c3854:	2901e316 	blt	r5,r4,210c3fe4 <___vfprintf_internal_r+0x1be4>
210c3858:	42000204 	addi	r8,r8,8
210c385c:	8001df16 	blt	r16,zero,210c3fdc <___vfprintf_internal_r+0x1bdc>
210c3860:	1421c83a 	sub	r16,r2,r16
210c3864:	043ccc0e 	bge	zero,r16,210c2b98 <__flash_rwdata_start+0xffff12a0>
210c3868:	04800404 	movi	r18,16
210c386c:	d8801f17 	ldw	r2,124(sp)
210c3870:	943efc0e 	bge	r18,r16,210c3464 <__flash_rwdata_start+0xffff1b6c>
210c3874:	01440034 	movhi	r5,4096
210c3878:	29408084 	addi	r5,r5,514
210c387c:	d9402c15 	stw	r5,176(sp)
210c3880:	054001c4 	movi	r21,7
210c3884:	00000306 	br	210c3894 <___vfprintf_internal_r+0x1494>
210c3888:	42000204 	addi	r8,r8,8
210c388c:	843ffc04 	addi	r16,r16,-16
210c3890:	943ef70e 	bge	r18,r16,210c3470 <__flash_rwdata_start+0xffff1b78>
210c3894:	18c00404 	addi	r3,r3,16
210c3898:	10800044 	addi	r2,r2,1
210c389c:	45000015 	stw	r20,0(r8)
210c38a0:	44800115 	stw	r18,4(r8)
210c38a4:	d8c02015 	stw	r3,128(sp)
210c38a8:	d8801f15 	stw	r2,124(sp)
210c38ac:	a8bff60e 	bge	r21,r2,210c3888 <__flash_rwdata_start+0xffff1f90>
210c38b0:	b009883a 	mov	r4,r22
210c38b4:	b80b883a 	mov	r5,r23
210c38b8:	d9801e04 	addi	r6,sp,120
210c38bc:	10c91cc0 	call	210c91cc <__sprint_r>
210c38c0:	103bc31e 	bne	r2,zero,210c27d0 <__flash_rwdata_start+0xffff0ed8>
210c38c4:	d8c02017 	ldw	r3,128(sp)
210c38c8:	d8801f17 	ldw	r2,124(sp)
210c38cc:	da000404 	addi	r8,sp,16
210c38d0:	003fee06 	br	210c388c <__flash_rwdata_start+0xffff1f94>
210c38d4:	8888703a 	and	r4,r17,r2
210c38d8:	203eab1e 	bne	r4,zero,210c3388 <__flash_rwdata_start+0xffff1a90>
210c38dc:	dc001f17 	ldw	r16,124(sp)
210c38e0:	db003117 	ldw	r12,196(sp)
210c38e4:	40800115 	stw	r2,4(r8)
210c38e8:	84000044 	addi	r16,r16,1
210c38ec:	43000015 	stw	r12,0(r8)
210c38f0:	d8c02015 	stw	r3,128(sp)
210c38f4:	dc001f15 	stw	r16,124(sp)
210c38f8:	008001c4 	movi	r2,7
210c38fc:	14000e16 	blt	r2,r16,210c3938 <___vfprintf_internal_r+0x1538>
210c3900:	44800204 	addi	r18,r8,8
210c3904:	003ecb06 	br	210c3434 <__flash_rwdata_start+0xffff1b3c>
210c3908:	00840034 	movhi	r2,4096
210c390c:	10808084 	addi	r2,r2,514
210c3910:	d8802c15 	stw	r2,176(sp)
210c3914:	dac02c17 	ldw	r11,176(sp)
210c3918:	1d47883a 	add	r3,r3,r21
210c391c:	84000044 	addi	r16,r16,1
210c3920:	92c00015 	stw	r11,0(r18)
210c3924:	95400115 	stw	r21,4(r18)
210c3928:	d8c02015 	stw	r3,128(sp)
210c392c:	dc001f15 	stw	r16,124(sp)
210c3930:	008001c4 	movi	r2,7
210c3934:	143ebe0e 	bge	r2,r16,210c3430 <__flash_rwdata_start+0xffff1b38>
210c3938:	b009883a 	mov	r4,r22
210c393c:	b80b883a 	mov	r5,r23
210c3940:	d9801e04 	addi	r6,sp,120
210c3944:	10c91cc0 	call	210c91cc <__sprint_r>
210c3948:	103ba11e 	bne	r2,zero,210c27d0 <__flash_rwdata_start+0xffff0ed8>
210c394c:	d8c02017 	ldw	r3,128(sp)
210c3950:	dc001f17 	ldw	r16,124(sp)
210c3954:	dc800404 	addi	r18,sp,16
210c3958:	003eb606 	br	210c3434 <__flash_rwdata_start+0xffff1b3c>
210c395c:	b009883a 	mov	r4,r22
210c3960:	b80b883a 	mov	r5,r23
210c3964:	d9801e04 	addi	r6,sp,120
210c3968:	10c91cc0 	call	210c91cc <__sprint_r>
210c396c:	103b981e 	bne	r2,zero,210c27d0 <__flash_rwdata_start+0xffff0ed8>
210c3970:	d8c02017 	ldw	r3,128(sp)
210c3974:	dc001f17 	ldw	r16,124(sp)
210c3978:	da000404 	addi	r8,sp,16
210c397c:	003e8d06 	br	210c33b4 <__flash_rwdata_start+0xffff1abc>
210c3980:	b009883a 	mov	r4,r22
210c3984:	b80b883a 	mov	r5,r23
210c3988:	d9801e04 	addi	r6,sp,120
210c398c:	10c91cc0 	call	210c91cc <__sprint_r>
210c3990:	103b8f1e 	bne	r2,zero,210c27d0 <__flash_rwdata_start+0xffff0ed8>
210c3994:	d8c02017 	ldw	r3,128(sp)
210c3998:	dc001f17 	ldw	r16,124(sp)
210c399c:	dc800404 	addi	r18,sp,16
210c39a0:	003e8f06 	br	210c33e0 <__flash_rwdata_start+0xffff1ae8>
210c39a4:	db001e04 	addi	r12,sp,120
210c39a8:	0025883a 	mov	r18,zero
210c39ac:	db003115 	stw	r12,196(sp)
210c39b0:	003be106 	br	210c2938 <__flash_rwdata_start+0xffff1040>
210c39b4:	b009883a 	mov	r4,r22
210c39b8:	b80b883a 	mov	r5,r23
210c39bc:	d9801e04 	addi	r6,sp,120
210c39c0:	10c91cc0 	call	210c91cc <__sprint_r>
210c39c4:	103b821e 	bne	r2,zero,210c27d0 <__flash_rwdata_start+0xffff0ed8>
210c39c8:	d8c02017 	ldw	r3,128(sp)
210c39cc:	da000404 	addi	r8,sp,16
210c39d0:	003c3b06 	br	210c2ac0 <__flash_rwdata_start+0xffff11c8>
210c39d4:	04e7c83a 	sub	r19,zero,r19
210c39d8:	9804c03a 	cmpne	r2,r19,zero
210c39dc:	0739c83a 	sub	fp,zero,fp
210c39e0:	e0b9c83a 	sub	fp,fp,r2
210c39e4:	05400b44 	movi	r21,45
210c39e8:	dd402785 	stb	r21,158(sp)
210c39ec:	da403215 	stw	r9,200(sp)
210c39f0:	00800044 	movi	r2,1
210c39f4:	9f06b03a 	or	r3,r19,fp
210c39f8:	003bb506 	br	210c28d0 <__flash_rwdata_start+0xffff0fd8>
210c39fc:	da003f15 	stw	r8,252(sp)
210c3a00:	da403e15 	stw	r9,248(sp)
210c3a04:	10c8e7c0 	call	210c8e7c <__fpclassifyd>
210c3a08:	da003f17 	ldw	r8,252(sp)
210c3a0c:	da403e17 	ldw	r9,248(sp)
210c3a10:	1000ce26 	beq	r2,zero,210c3d4c <___vfprintf_internal_r+0x194c>
210c3a14:	057ff7c4 	movi	r21,-33
210c3a18:	00bfffc4 	movi	r2,-1
210c3a1c:	856a703a 	and	r21,r16,r21
210c3a20:	4881e826 	beq	r9,r2,210c41c4 <___vfprintf_internal_r+0x1dc4>
210c3a24:	008011c4 	movi	r2,71
210c3a28:	a881e326 	beq	r21,r2,210c41b8 <___vfprintf_internal_r+0x1db8>
210c3a2c:	db003917 	ldw	r12,228(sp)
210c3a30:	8ac04014 	ori	r11,r17,256
210c3a34:	dac02d15 	stw	r11,180(sp)
210c3a38:	6001ed16 	blt	r12,zero,210c41f0 <___vfprintf_internal_r+0x1df0>
210c3a3c:	dc803917 	ldw	r18,228(sp)
210c3a40:	d8002b05 	stb	zero,172(sp)
210c3a44:	00801984 	movi	r2,102
210c3a48:	80811826 	beq	r16,r2,210c3eac <___vfprintf_internal_r+0x1aac>
210c3a4c:	00801184 	movi	r2,70
210c3a50:	80811626 	beq	r16,r2,210c3eac <___vfprintf_internal_r+0x1aac>
210c3a54:	00801144 	movi	r2,69
210c3a58:	a881e926 	beq	r21,r2,210c4200 <___vfprintf_internal_r+0x1e00>
210c3a5c:	4839883a 	mov	fp,r9
210c3a60:	d8802604 	addi	r2,sp,152
210c3a64:	d8800115 	stw	r2,4(sp)
210c3a68:	d9403717 	ldw	r5,220(sp)
210c3a6c:	d8802504 	addi	r2,sp,148
210c3a70:	d8800215 	stw	r2,8(sp)
210c3a74:	d8802104 	addi	r2,sp,132
210c3a78:	df000015 	stw	fp,0(sp)
210c3a7c:	d8800315 	stw	r2,12(sp)
210c3a80:	b009883a 	mov	r4,r22
210c3a84:	900d883a 	mov	r6,r18
210c3a88:	01c00084 	movi	r7,2
210c3a8c:	da003f15 	stw	r8,252(sp)
210c3a90:	da403e15 	stw	r9,248(sp)
210c3a94:	10c49180 	call	210c4918 <_dtoa_r>
210c3a98:	d8803115 	stw	r2,196(sp)
210c3a9c:	008019c4 	movi	r2,103
210c3aa0:	da003f17 	ldw	r8,252(sp)
210c3aa4:	da403e17 	ldw	r9,248(sp)
210c3aa8:	80800226 	beq	r16,r2,210c3ab4 <___vfprintf_internal_r+0x16b4>
210c3aac:	008011c4 	movi	r2,71
210c3ab0:	8081101e 	bne	r16,r2,210c3ef4 <___vfprintf_internal_r+0x1af4>
210c3ab4:	8880004c 	andi	r2,r17,1
210c3ab8:	1001dd26 	beq	r2,zero,210c4230 <___vfprintf_internal_r+0x1e30>
210c3abc:	db003117 	ldw	r12,196(sp)
210c3ac0:	6715883a 	add	r10,r12,fp
210c3ac4:	d9003717 	ldw	r4,220(sp)
210c3ac8:	900b883a 	mov	r5,r18
210c3acc:	000d883a 	mov	r6,zero
210c3ad0:	000f883a 	mov	r7,zero
210c3ad4:	da003f15 	stw	r8,252(sp)
210c3ad8:	da403e15 	stw	r9,248(sp)
210c3adc:	da803d15 	stw	r10,244(sp)
210c3ae0:	10ccc700 	call	210ccc70 <__eqdf2>
210c3ae4:	da003f17 	ldw	r8,252(sp)
210c3ae8:	da403e17 	ldw	r9,248(sp)
210c3aec:	da803d17 	ldw	r10,244(sp)
210c3af0:	10016526 	beq	r2,zero,210c4088 <___vfprintf_internal_r+0x1c88>
210c3af4:	d8802117 	ldw	r2,132(sp)
210c3af8:	1280062e 	bgeu	r2,r10,210c3b14 <___vfprintf_internal_r+0x1714>
210c3afc:	01000c04 	movi	r4,48
210c3b00:	10c00044 	addi	r3,r2,1
210c3b04:	d8c02115 	stw	r3,132(sp)
210c3b08:	11000005 	stb	r4,0(r2)
210c3b0c:	d8802117 	ldw	r2,132(sp)
210c3b10:	12bffb36 	bltu	r2,r10,210c3b00 <__flash_rwdata_start+0xffff2208>
210c3b14:	db003117 	ldw	r12,196(sp)
210c3b18:	1305c83a 	sub	r2,r2,r12
210c3b1c:	d8803315 	stw	r2,204(sp)
210c3b20:	008011c4 	movi	r2,71
210c3b24:	a8814d26 	beq	r21,r2,210c405c <___vfprintf_internal_r+0x1c5c>
210c3b28:	00801944 	movi	r2,101
210c3b2c:	1402060e 	bge	r2,r16,210c4348 <___vfprintf_internal_r+0x1f48>
210c3b30:	00801984 	movi	r2,102
210c3b34:	8081b426 	beq	r16,r2,210c4208 <___vfprintf_internal_r+0x1e08>
210c3b38:	db002617 	ldw	r12,152(sp)
210c3b3c:	db003415 	stw	r12,208(sp)
210c3b40:	db003417 	ldw	r12,208(sp)
210c3b44:	dac03317 	ldw	r11,204(sp)
210c3b48:	62c1a016 	blt	r12,r11,210c41cc <___vfprintf_internal_r+0x1dcc>
210c3b4c:	8c40004c 	andi	r17,r17,1
210c3b50:	8801bf1e 	bne	r17,zero,210c4250 <___vfprintf_internal_r+0x1e50>
210c3b54:	6005883a 	mov	r2,r12
210c3b58:	6001b316 	blt	r12,zero,210c4228 <___vfprintf_internal_r+0x1e28>
210c3b5c:	dc803417 	ldw	r18,208(sp)
210c3b60:	df002b07 	ldb	fp,172(sp)
210c3b64:	e0012e1e 	bne	fp,zero,210c4020 <___vfprintf_internal_r+0x1c20>
210c3b68:	dc402d17 	ldw	r17,180(sp)
210c3b6c:	dd402783 	ldbu	r21,158(sp)
210c3b70:	d8802b15 	stw	r2,172(sp)
210c3b74:	dcc02d15 	stw	r19,180(sp)
210c3b78:	d8003215 	stw	zero,200(sp)
210c3b7c:	003b7306 	br	210c294c <__flash_rwdata_start+0xffff1054>
210c3b80:	00800084 	movi	r2,2
210c3b84:	003c4d06 	br	210c2cbc <__flash_rwdata_start+0xffff13c4>
210c3b88:	8880040c 	andi	r2,r17,16
210c3b8c:	1000091e 	bne	r2,zero,210c3bb4 <___vfprintf_internal_r+0x17b4>
210c3b90:	8c40100c 	andi	r17,r17,64
210c3b94:	88000726 	beq	r17,zero,210c3bb4 <___vfprintf_internal_r+0x17b4>
210c3b98:	db002d17 	ldw	r12,180(sp)
210c3b9c:	dac02f17 	ldw	r11,188(sp)
210c3ba0:	60800017 	ldw	r2,0(r12)
210c3ba4:	63000104 	addi	r12,r12,4
210c3ba8:	db002d15 	stw	r12,180(sp)
210c3bac:	12c0000d 	sth	r11,0(r2)
210c3bb0:	003a4e06 	br	210c24ec <__flash_rwdata_start+0xffff0bf4>
210c3bb4:	db002d17 	ldw	r12,180(sp)
210c3bb8:	dac02f17 	ldw	r11,188(sp)
210c3bbc:	60800017 	ldw	r2,0(r12)
210c3bc0:	63000104 	addi	r12,r12,4
210c3bc4:	db002d15 	stw	r12,180(sp)
210c3bc8:	12c00015 	stw	r11,0(r2)
210c3bcc:	003a4706 	br	210c24ec <__flash_rwdata_start+0xffff0bf4>
210c3bd0:	1c000007 	ldb	r16,0(r3)
210c3bd4:	1805883a 	mov	r2,r3
210c3bd8:	003a6e06 	br	210c2594 <__flash_rwdata_start+0xffff0c9c>
210c3bdc:	88c0100c 	andi	r3,r17,64
210c3be0:	18006b26 	beq	r3,zero,210c3d90 <___vfprintf_internal_r+0x1990>
210c3be4:	dac02d17 	ldw	r11,180(sp)
210c3be8:	14c0000b 	ldhu	r19,0(r2)
210c3bec:	0039883a 	mov	fp,zero
210c3bf0:	5ac00104 	addi	r11,r11,4
210c3bf4:	dac02d15 	stw	r11,180(sp)
210c3bf8:	003cb206 	br	210c2ec4 <__flash_rwdata_start+0xffff15cc>
210c3bfc:	01040034 	movhi	r4,4096
210c3c00:	21008084 	addi	r4,r4,514
210c3c04:	d9002c15 	stw	r4,176(sp)
210c3c08:	dac02c17 	ldw	r11,176(sp)
210c3c0c:	1c87883a 	add	r3,r3,r18
210c3c10:	10800044 	addi	r2,r2,1
210c3c14:	42c00015 	stw	r11,0(r8)
210c3c18:	44800115 	stw	r18,4(r8)
210c3c1c:	d8c02015 	stw	r3,128(sp)
210c3c20:	d8801f15 	stw	r2,124(sp)
210c3c24:	010001c4 	movi	r4,7
210c3c28:	20bee016 	blt	r4,r2,210c37ac <__flash_rwdata_start+0xffff1eb4>
210c3c2c:	42000204 	addi	r8,r8,8
210c3c30:	003ee506 	br	210c37c8 <__flash_rwdata_start+0xffff1ed0>
210c3c34:	01040034 	movhi	r4,4096
210c3c38:	21008084 	addi	r4,r4,514
210c3c3c:	d9002c15 	stw	r4,176(sp)
210c3c40:	003bbe06 	br	210c2b3c <__flash_rwdata_start+0xffff1244>
210c3c44:	b009883a 	mov	r4,r22
210c3c48:	b80b883a 	mov	r5,r23
210c3c4c:	d9801e04 	addi	r6,sp,120
210c3c50:	10c91cc0 	call	210c91cc <__sprint_r>
210c3c54:	103ade1e 	bne	r2,zero,210c27d0 <__flash_rwdata_start+0xffff0ed8>
210c3c58:	d8c02017 	ldw	r3,128(sp)
210c3c5c:	da000404 	addi	r8,sp,16
210c3c60:	003d6b06 	br	210c3210 <__flash_rwdata_start+0xffff1918>
210c3c64:	d8801f17 	ldw	r2,124(sp)
210c3c68:	03040034 	movhi	r12,4096
210c3c6c:	01000044 	movi	r4,1
210c3c70:	18c00044 	addi	r3,r3,1
210c3c74:	10800044 	addi	r2,r2,1
210c3c78:	63008004 	addi	r12,r12,512
210c3c7c:	41000115 	stw	r4,4(r8)
210c3c80:	43000015 	stw	r12,0(r8)
210c3c84:	d8c02015 	stw	r3,128(sp)
210c3c88:	d8801f15 	stw	r2,124(sp)
210c3c8c:	010001c4 	movi	r4,7
210c3c90:	20804916 	blt	r4,r2,210c3db8 <___vfprintf_internal_r+0x19b8>
210c3c94:	42000204 	addi	r8,r8,8
210c3c98:	8000041e 	bne	r16,zero,210c3cac <___vfprintf_internal_r+0x18ac>
210c3c9c:	dac03317 	ldw	r11,204(sp)
210c3ca0:	5800021e 	bne	r11,zero,210c3cac <___vfprintf_internal_r+0x18ac>
210c3ca4:	8880004c 	andi	r2,r17,1
210c3ca8:	103bbb26 	beq	r2,zero,210c2b98 <__flash_rwdata_start+0xffff12a0>
210c3cac:	db003817 	ldw	r12,224(sp)
210c3cb0:	d8801f17 	ldw	r2,124(sp)
210c3cb4:	dac03517 	ldw	r11,212(sp)
210c3cb8:	1b07883a 	add	r3,r3,r12
210c3cbc:	10800044 	addi	r2,r2,1
210c3cc0:	42c00015 	stw	r11,0(r8)
210c3cc4:	43000115 	stw	r12,4(r8)
210c3cc8:	d8c02015 	stw	r3,128(sp)
210c3ccc:	d8801f15 	stw	r2,124(sp)
210c3cd0:	010001c4 	movi	r4,7
210c3cd4:	20812e16 	blt	r4,r2,210c4190 <___vfprintf_internal_r+0x1d90>
210c3cd8:	42000204 	addi	r8,r8,8
210c3cdc:	0421c83a 	sub	r16,zero,r16
210c3ce0:	04005c0e 	bge	zero,r16,210c3e54 <___vfprintf_internal_r+0x1a54>
210c3ce4:	04800404 	movi	r18,16
210c3ce8:	94009f0e 	bge	r18,r16,210c3f68 <___vfprintf_internal_r+0x1b68>
210c3cec:	01040034 	movhi	r4,4096
210c3cf0:	21008084 	addi	r4,r4,514
210c3cf4:	d9002c15 	stw	r4,176(sp)
210c3cf8:	054001c4 	movi	r21,7
210c3cfc:	00000306 	br	210c3d0c <___vfprintf_internal_r+0x190c>
210c3d00:	42000204 	addi	r8,r8,8
210c3d04:	843ffc04 	addi	r16,r16,-16
210c3d08:	94009a0e 	bge	r18,r16,210c3f74 <___vfprintf_internal_r+0x1b74>
210c3d0c:	18c00404 	addi	r3,r3,16
210c3d10:	10800044 	addi	r2,r2,1
210c3d14:	45000015 	stw	r20,0(r8)
210c3d18:	44800115 	stw	r18,4(r8)
210c3d1c:	d8c02015 	stw	r3,128(sp)
210c3d20:	d8801f15 	stw	r2,124(sp)
210c3d24:	a8bff60e 	bge	r21,r2,210c3d00 <__flash_rwdata_start+0xffff2408>
210c3d28:	b009883a 	mov	r4,r22
210c3d2c:	b80b883a 	mov	r5,r23
210c3d30:	d9801e04 	addi	r6,sp,120
210c3d34:	10c91cc0 	call	210c91cc <__sprint_r>
210c3d38:	103aa51e 	bne	r2,zero,210c27d0 <__flash_rwdata_start+0xffff0ed8>
210c3d3c:	d8c02017 	ldw	r3,128(sp)
210c3d40:	d8801f17 	ldw	r2,124(sp)
210c3d44:	da000404 	addi	r8,sp,16
210c3d48:	003fee06 	br	210c3d04 <__flash_rwdata_start+0xffff240c>
210c3d4c:	008011c4 	movi	r2,71
210c3d50:	1400be16 	blt	r2,r16,210c404c <___vfprintf_internal_r+0x1c4c>
210c3d54:	03040034 	movhi	r12,4096
210c3d58:	63007204 	addi	r12,r12,456
210c3d5c:	db003115 	stw	r12,196(sp)
210c3d60:	00c000c4 	movi	r3,3
210c3d64:	00bfdfc4 	movi	r2,-129
210c3d68:	d8c02b15 	stw	r3,172(sp)
210c3d6c:	88a2703a 	and	r17,r17,r2
210c3d70:	dd402783 	ldbu	r21,158(sp)
210c3d74:	dcc02d15 	stw	r19,180(sp)
210c3d78:	1825883a 	mov	r18,r3
210c3d7c:	d8003215 	stw	zero,200(sp)
210c3d80:	d8003415 	stw	zero,208(sp)
210c3d84:	003af106 	br	210c294c <__flash_rwdata_start+0xffff1054>
210c3d88:	4825883a 	mov	r18,r9
210c3d8c:	003c9306 	br	210c2fdc <__flash_rwdata_start+0xffff16e4>
210c3d90:	db002d17 	ldw	r12,180(sp)
210c3d94:	14c00017 	ldw	r19,0(r2)
210c3d98:	0039883a 	mov	fp,zero
210c3d9c:	63000104 	addi	r12,r12,4
210c3da0:	db002d15 	stw	r12,180(sp)
210c3da4:	003c4706 	br	210c2ec4 <__flash_rwdata_start+0xffff15cc>
210c3da8:	00840034 	movhi	r2,4096
210c3dac:	10807004 	addi	r2,r2,448
210c3db0:	d8803115 	stw	r2,196(sp)
210c3db4:	003bf106 	br	210c2d7c <__flash_rwdata_start+0xffff1484>
210c3db8:	b009883a 	mov	r4,r22
210c3dbc:	b80b883a 	mov	r5,r23
210c3dc0:	d9801e04 	addi	r6,sp,120
210c3dc4:	10c91cc0 	call	210c91cc <__sprint_r>
210c3dc8:	103a811e 	bne	r2,zero,210c27d0 <__flash_rwdata_start+0xffff0ed8>
210c3dcc:	dc002617 	ldw	r16,152(sp)
210c3dd0:	d8c02017 	ldw	r3,128(sp)
210c3dd4:	da000404 	addi	r8,sp,16
210c3dd8:	003faf06 	br	210c3c98 <__flash_rwdata_start+0xffff23a0>
210c3ddc:	db002e17 	ldw	r12,184(sp)
210c3de0:	1805883a 	mov	r2,r3
210c3de4:	dac02d15 	stw	r11,180(sp)
210c3de8:	0319c83a 	sub	r12,zero,r12
210c3dec:	db002e15 	stw	r12,184(sp)
210c3df0:	003a8206 	br	210c27fc <__flash_rwdata_start+0xffff0f04>
210c3df4:	18800044 	addi	r2,r3,1
210c3df8:	8c400814 	ori	r17,r17,32
210c3dfc:	1c000047 	ldb	r16,1(r3)
210c3e00:	0039e406 	br	210c2594 <__flash_rwdata_start+0xffff0c9c>
210c3e04:	b009883a 	mov	r4,r22
210c3e08:	b80b883a 	mov	r5,r23
210c3e0c:	d9801e04 	addi	r6,sp,120
210c3e10:	10c91cc0 	call	210c91cc <__sprint_r>
210c3e14:	103a6e1e 	bne	r2,zero,210c27d0 <__flash_rwdata_start+0xffff0ed8>
210c3e18:	d8c02017 	ldw	r3,128(sp)
210c3e1c:	da000404 	addi	r8,sp,16
210c3e20:	003d0c06 	br	210c3254 <__flash_rwdata_start+0xffff195c>
210c3e24:	db002817 	ldw	r12,160(sp)
210c3e28:	d8c03117 	ldw	r3,196(sp)
210c3e2c:	60e5c83a 	sub	r18,r12,r3
210c3e30:	003ac106 	br	210c2938 <__flash_rwdata_start+0xffff1040>
210c3e34:	b009883a 	mov	r4,r22
210c3e38:	b80b883a 	mov	r5,r23
210c3e3c:	d9801e04 	addi	r6,sp,120
210c3e40:	10c91cc0 	call	210c91cc <__sprint_r>
210c3e44:	103a621e 	bne	r2,zero,210c27d0 <__flash_rwdata_start+0xffff0ed8>
210c3e48:	d8c02017 	ldw	r3,128(sp)
210c3e4c:	d8801f17 	ldw	r2,124(sp)
210c3e50:	da000404 	addi	r8,sp,16
210c3e54:	db003317 	ldw	r12,204(sp)
210c3e58:	dac03117 	ldw	r11,196(sp)
210c3e5c:	10800044 	addi	r2,r2,1
210c3e60:	1b07883a 	add	r3,r3,r12
210c3e64:	42c00015 	stw	r11,0(r8)
210c3e68:	43000115 	stw	r12,4(r8)
210c3e6c:	d8c02015 	stw	r3,128(sp)
210c3e70:	d8801f15 	stw	r2,124(sp)
210c3e74:	010001c4 	movi	r4,7
210c3e78:	20bb460e 	bge	r4,r2,210c2b94 <__flash_rwdata_start+0xffff129c>
210c3e7c:	003d8506 	br	210c3494 <__flash_rwdata_start+0xffff1b9c>
210c3e80:	da003f15 	stw	r8,252(sp)
210c3e84:	10c23680 	call	210c2368 <strlen>
210c3e88:	1025883a 	mov	r18,r2
210c3e8c:	da003f17 	ldw	r8,252(sp)
210c3e90:	903c540e 	bge	r18,zero,210c2fe4 <__flash_rwdata_start+0xffff16ec>
210c3e94:	0005883a 	mov	r2,zero
210c3e98:	003c5206 	br	210c2fe4 <__flash_rwdata_start+0xffff16ec>
210c3e9c:	01040034 	movhi	r4,4096
210c3ea0:	21008484 	addi	r4,r4,530
210c3ea4:	d9003615 	stw	r4,216(sp)
210c3ea8:	003adc06 	br	210c2a1c <__flash_rwdata_start+0xffff1124>
210c3eac:	d8802604 	addi	r2,sp,152
210c3eb0:	d8800115 	stw	r2,4(sp)
210c3eb4:	d9403717 	ldw	r5,220(sp)
210c3eb8:	d8802504 	addi	r2,sp,148
210c3ebc:	d8800215 	stw	r2,8(sp)
210c3ec0:	d8802104 	addi	r2,sp,132
210c3ec4:	da400015 	stw	r9,0(sp)
210c3ec8:	d8800315 	stw	r2,12(sp)
210c3ecc:	b009883a 	mov	r4,r22
210c3ed0:	900d883a 	mov	r6,r18
210c3ed4:	01c000c4 	movi	r7,3
210c3ed8:	da003f15 	stw	r8,252(sp)
210c3edc:	da403e15 	stw	r9,248(sp)
210c3ee0:	10c49180 	call	210c4918 <_dtoa_r>
210c3ee4:	da403e17 	ldw	r9,248(sp)
210c3ee8:	da003f17 	ldw	r8,252(sp)
210c3eec:	d8803115 	stw	r2,196(sp)
210c3ef0:	4839883a 	mov	fp,r9
210c3ef4:	dac03117 	ldw	r11,196(sp)
210c3ef8:	00801184 	movi	r2,70
210c3efc:	5f15883a 	add	r10,r11,fp
210c3f00:	a8bef01e 	bne	r21,r2,210c3ac4 <__flash_rwdata_start+0xffff21cc>
210c3f04:	59000007 	ldb	r4,0(r11)
210c3f08:	00800c04 	movi	r2,48
210c3f0c:	2080d526 	beq	r4,r2,210c4264 <___vfprintf_internal_r+0x1e64>
210c3f10:	d8c02617 	ldw	r3,152(sp)
210c3f14:	50d5883a 	add	r10,r10,r3
210c3f18:	003eea06 	br	210c3ac4 <__flash_rwdata_start+0xffff21cc>
210c3f1c:	0025883a 	mov	r18,zero
210c3f20:	003db306 	br	210c35f0 <__flash_rwdata_start+0xffff1cf8>
210c3f24:	b009883a 	mov	r4,r22
210c3f28:	b80b883a 	mov	r5,r23
210c3f2c:	d9801e04 	addi	r6,sp,120
210c3f30:	10c91cc0 	call	210c91cc <__sprint_r>
210c3f34:	103a261e 	bne	r2,zero,210c27d0 <__flash_rwdata_start+0xffff0ed8>
210c3f38:	d8c02017 	ldw	r3,128(sp)
210c3f3c:	da000404 	addi	r8,sp,16
210c3f40:	003daa06 	br	210c35ec <__flash_rwdata_start+0xffff1cf4>
210c3f44:	b009883a 	mov	r4,r22
210c3f48:	b80b883a 	mov	r5,r23
210c3f4c:	d9801e04 	addi	r6,sp,120
210c3f50:	10c91cc0 	call	210c91cc <__sprint_r>
210c3f54:	103a1e1e 	bne	r2,zero,210c27d0 <__flash_rwdata_start+0xffff0ed8>
210c3f58:	d8802617 	ldw	r2,152(sp)
210c3f5c:	d8c02017 	ldw	r3,128(sp)
210c3f60:	da000404 	addi	r8,sp,16
210c3f64:	003e2c06 	br	210c3818 <__flash_rwdata_start+0xffff1f20>
210c3f68:	03040034 	movhi	r12,4096
210c3f6c:	63008084 	addi	r12,r12,514
210c3f70:	db002c15 	stw	r12,176(sp)
210c3f74:	dac02c17 	ldw	r11,176(sp)
210c3f78:	1c07883a 	add	r3,r3,r16
210c3f7c:	10800044 	addi	r2,r2,1
210c3f80:	42c00015 	stw	r11,0(r8)
210c3f84:	44000115 	stw	r16,4(r8)
210c3f88:	d8c02015 	stw	r3,128(sp)
210c3f8c:	d8801f15 	stw	r2,124(sp)
210c3f90:	010001c4 	movi	r4,7
210c3f94:	20bfa716 	blt	r4,r2,210c3e34 <__flash_rwdata_start+0xffff253c>
210c3f98:	42000204 	addi	r8,r8,8
210c3f9c:	003fad06 	br	210c3e54 <__flash_rwdata_start+0xffff255c>
210c3fa0:	00800184 	movi	r2,6
210c3fa4:	1240012e 	bgeu	r2,r9,210c3fac <___vfprintf_internal_r+0x1bac>
210c3fa8:	1013883a 	mov	r9,r2
210c3fac:	4825883a 	mov	r18,r9
210c3fb0:	4805883a 	mov	r2,r9
210c3fb4:	4800c216 	blt	r9,zero,210c42c0 <___vfprintf_internal_r+0x1ec0>
210c3fb8:	d8802b15 	stw	r2,172(sp)
210c3fbc:	00840034 	movhi	r2,4096
210c3fc0:	10807e04 	addi	r2,r2,504
210c3fc4:	d8803115 	stw	r2,196(sp)
210c3fc8:	dcc02d15 	stw	r19,180(sp)
210c3fcc:	d8003215 	stw	zero,200(sp)
210c3fd0:	d8003415 	stw	zero,208(sp)
210c3fd4:	0005883a 	mov	r2,zero
210c3fd8:	003a6306 	br	210c2968 <__flash_rwdata_start+0xffff1070>
210c3fdc:	0021883a 	mov	r16,zero
210c3fe0:	003e1f06 	br	210c3860 <__flash_rwdata_start+0xffff1f68>
210c3fe4:	b009883a 	mov	r4,r22
210c3fe8:	b80b883a 	mov	r5,r23
210c3fec:	d9801e04 	addi	r6,sp,120
210c3ff0:	10c91cc0 	call	210c91cc <__sprint_r>
210c3ff4:	1039f61e 	bne	r2,zero,210c27d0 <__flash_rwdata_start+0xffff0ed8>
210c3ff8:	d8802617 	ldw	r2,152(sp)
210c3ffc:	db003317 	ldw	r12,204(sp)
210c4000:	d8c02017 	ldw	r3,128(sp)
210c4004:	da000404 	addi	r8,sp,16
210c4008:	6085c83a 	sub	r2,r12,r2
210c400c:	003e1306 	br	210c385c <__flash_rwdata_start+0xffff1f64>
210c4010:	03040034 	movhi	r12,4096
210c4014:	63008484 	addi	r12,r12,530
210c4018:	db003615 	stw	r12,216(sp)
210c401c:	003b0206 	br	210c2c28 <__flash_rwdata_start+0xffff1330>
210c4020:	00c00b44 	movi	r3,45
210c4024:	d8802b15 	stw	r2,172(sp)
210c4028:	dc402d17 	ldw	r17,180(sp)
210c402c:	d8c02785 	stb	r3,158(sp)
210c4030:	dcc02d15 	stw	r19,180(sp)
210c4034:	d8003215 	stw	zero,200(sp)
210c4038:	00800b44 	movi	r2,45
210c403c:	003a4706 	br	210c295c <__flash_rwdata_start+0xffff1064>
210c4040:	05400b44 	movi	r21,45
210c4044:	dd402785 	stb	r21,158(sp)
210c4048:	003b4706 	br	210c2d68 <__flash_rwdata_start+0xffff1470>
210c404c:	00840034 	movhi	r2,4096
210c4050:	10807304 	addi	r2,r2,460
210c4054:	d8803115 	stw	r2,196(sp)
210c4058:	003f4106 	br	210c3d60 <__flash_rwdata_start+0xffff2468>
210c405c:	d8c02617 	ldw	r3,152(sp)
210c4060:	00bfff44 	movi	r2,-3
210c4064:	18801116 	blt	r3,r2,210c40ac <___vfprintf_internal_r+0x1cac>
210c4068:	48c01016 	blt	r9,r3,210c40ac <___vfprintf_internal_r+0x1cac>
210c406c:	d8c03415 	stw	r3,208(sp)
210c4070:	040019c4 	movi	r16,103
210c4074:	003eb206 	br	210c3b40 <__flash_rwdata_start+0xffff2248>
210c4078:	01040034 	movhi	r4,4096
210c407c:	21008084 	addi	r4,r4,514
210c4080:	d9002c15 	stw	r4,176(sp)
210c4084:	003cb106 	br	210c334c <__flash_rwdata_start+0xffff1a54>
210c4088:	5005883a 	mov	r2,r10
210c408c:	003ea106 	br	210c3b14 <__flash_rwdata_start+0xffff221c>
210c4090:	da402b15 	stw	r9,172(sp)
210c4094:	dd402783 	ldbu	r21,158(sp)
210c4098:	4825883a 	mov	r18,r9
210c409c:	dcc02d15 	stw	r19,180(sp)
210c40a0:	d8003215 	stw	zero,200(sp)
210c40a4:	d8003415 	stw	zero,208(sp)
210c40a8:	003a2806 	br	210c294c <__flash_rwdata_start+0xffff1054>
210c40ac:	843fff84 	addi	r16,r16,-2
210c40b0:	1f3fffc4 	addi	fp,r3,-1
210c40b4:	df002615 	stw	fp,152(sp)
210c40b8:	dc0022c5 	stb	r16,139(sp)
210c40bc:	e0009816 	blt	fp,zero,210c4320 <___vfprintf_internal_r+0x1f20>
210c40c0:	00800ac4 	movi	r2,43
210c40c4:	d8802305 	stb	r2,140(sp)
210c40c8:	00800244 	movi	r2,9
210c40cc:	1700750e 	bge	r2,fp,210c42a4 <___vfprintf_internal_r+0x1ea4>
210c40d0:	dd4022c4 	addi	r21,sp,139
210c40d4:	dc002c15 	stw	r16,176(sp)
210c40d8:	4025883a 	mov	r18,r8
210c40dc:	a821883a 	mov	r16,r21
210c40e0:	e009883a 	mov	r4,fp
210c40e4:	01400284 	movi	r5,10
210c40e8:	10cba9c0 	call	210cba9c <__modsi3>
210c40ec:	10800c04 	addi	r2,r2,48
210c40f0:	843fffc4 	addi	r16,r16,-1
210c40f4:	e009883a 	mov	r4,fp
210c40f8:	01400284 	movi	r5,10
210c40fc:	80800005 	stb	r2,0(r16)
210c4100:	10cba480 	call	210cba48 <__divsi3>
210c4104:	1039883a 	mov	fp,r2
210c4108:	00800244 	movi	r2,9
210c410c:	173ff416 	blt	r2,fp,210c40e0 <__flash_rwdata_start+0xffff27e8>
210c4110:	9011883a 	mov	r8,r18
210c4114:	e0800c04 	addi	r2,fp,48
210c4118:	8025883a 	mov	r18,r16
210c411c:	913fffc4 	addi	r4,r18,-1
210c4120:	90bfffc5 	stb	r2,-1(r18)
210c4124:	dc002c17 	ldw	r16,176(sp)
210c4128:	2540852e 	bgeu	r4,r21,210c4340 <___vfprintf_internal_r+0x1f40>
210c412c:	d9402384 	addi	r5,sp,142
210c4130:	2c8bc83a 	sub	r5,r5,r18
210c4134:	d8c02344 	addi	r3,sp,141
210c4138:	a94b883a 	add	r5,r21,r5
210c413c:	00000106 	br	210c4144 <___vfprintf_internal_r+0x1d44>
210c4140:	20800003 	ldbu	r2,0(r4)
210c4144:	18800005 	stb	r2,0(r3)
210c4148:	18c00044 	addi	r3,r3,1
210c414c:	21000044 	addi	r4,r4,1
210c4150:	197ffb1e 	bne	r3,r5,210c4140 <__flash_rwdata_start+0xffff2848>
210c4154:	d8802304 	addi	r2,sp,140
210c4158:	1485c83a 	sub	r2,r2,r18
210c415c:	d8c02344 	addi	r3,sp,141
210c4160:	1885883a 	add	r2,r3,r2
210c4164:	dac03317 	ldw	r11,204(sp)
210c4168:	156bc83a 	sub	r21,r2,r21
210c416c:	dd403a15 	stw	r21,232(sp)
210c4170:	00800044 	movi	r2,1
210c4174:	5d65883a 	add	r18,r11,r21
210c4178:	12c0660e 	bge	r2,r11,210c4314 <___vfprintf_internal_r+0x1f14>
210c417c:	94800044 	addi	r18,r18,1
210c4180:	9005883a 	mov	r2,r18
210c4184:	90006116 	blt	r18,zero,210c430c <___vfprintf_internal_r+0x1f0c>
210c4188:	d8003415 	stw	zero,208(sp)
210c418c:	003e7406 	br	210c3b60 <__flash_rwdata_start+0xffff2268>
210c4190:	b009883a 	mov	r4,r22
210c4194:	b80b883a 	mov	r5,r23
210c4198:	d9801e04 	addi	r6,sp,120
210c419c:	10c91cc0 	call	210c91cc <__sprint_r>
210c41a0:	10398b1e 	bne	r2,zero,210c27d0 <__flash_rwdata_start+0xffff0ed8>
210c41a4:	dc002617 	ldw	r16,152(sp)
210c41a8:	d8c02017 	ldw	r3,128(sp)
210c41ac:	d8801f17 	ldw	r2,124(sp)
210c41b0:	da000404 	addi	r8,sp,16
210c41b4:	003ec906 	br	210c3cdc <__flash_rwdata_start+0xffff23e4>
210c41b8:	483e1c1e 	bne	r9,zero,210c3a2c <__flash_rwdata_start+0xffff2134>
210c41bc:	9013883a 	mov	r9,r18
210c41c0:	003e1a06 	br	210c3a2c <__flash_rwdata_start+0xffff2134>
210c41c4:	02400184 	movi	r9,6
210c41c8:	003e1806 	br	210c3a2c <__flash_rwdata_start+0xffff2134>
210c41cc:	d8c03417 	ldw	r3,208(sp)
210c41d0:	00c04b0e 	bge	zero,r3,210c4300 <___vfprintf_internal_r+0x1f00>
210c41d4:	04800044 	movi	r18,1
210c41d8:	dac03317 	ldw	r11,204(sp)
210c41dc:	92e5883a 	add	r18,r18,r11
210c41e0:	9005883a 	mov	r2,r18
210c41e4:	903e5e0e 	bge	r18,zero,210c3b60 <__flash_rwdata_start+0xffff2268>
210c41e8:	0005883a 	mov	r2,zero
210c41ec:	003e5c06 	br	210c3b60 <__flash_rwdata_start+0xffff2268>
210c41f0:	00c00b44 	movi	r3,45
210c41f4:	64a0003c 	xorhi	r18,r12,32768
210c41f8:	d8c02b05 	stb	r3,172(sp)
210c41fc:	003e1106 	br	210c3a44 <__flash_rwdata_start+0xffff214c>
210c4200:	4f000044 	addi	fp,r9,1
210c4204:	003e1606 	br	210c3a60 <__flash_rwdata_start+0xffff2168>
210c4208:	d8c02617 	ldw	r3,152(sp)
210c420c:	d8c03415 	stw	r3,208(sp)
210c4210:	00c0350e 	bge	zero,r3,210c42e8 <___vfprintf_internal_r+0x1ee8>
210c4214:	4800081e 	bne	r9,zero,210c4238 <___vfprintf_internal_r+0x1e38>
210c4218:	8c40004c 	andi	r17,r17,1
210c421c:	8800061e 	bne	r17,zero,210c4238 <___vfprintf_internal_r+0x1e38>
210c4220:	1805883a 	mov	r2,r3
210c4224:	183e4d0e 	bge	r3,zero,210c3b5c <__flash_rwdata_start+0xffff2264>
210c4228:	0005883a 	mov	r2,zero
210c422c:	003e4b06 	br	210c3b5c <__flash_rwdata_start+0xffff2264>
210c4230:	d8802117 	ldw	r2,132(sp)
210c4234:	003e3706 	br	210c3b14 <__flash_rwdata_start+0xffff221c>
210c4238:	dac03417 	ldw	r11,208(sp)
210c423c:	4a400044 	addi	r9,r9,1
210c4240:	5a65883a 	add	r18,r11,r9
210c4244:	9005883a 	mov	r2,r18
210c4248:	903e450e 	bge	r18,zero,210c3b60 <__flash_rwdata_start+0xffff2268>
210c424c:	003fe606 	br	210c41e8 <__flash_rwdata_start+0xffff28f0>
210c4250:	db003417 	ldw	r12,208(sp)
210c4254:	64800044 	addi	r18,r12,1
210c4258:	9005883a 	mov	r2,r18
210c425c:	903e400e 	bge	r18,zero,210c3b60 <__flash_rwdata_start+0xffff2268>
210c4260:	003fe106 	br	210c41e8 <__flash_rwdata_start+0xffff28f0>
210c4264:	d9003717 	ldw	r4,220(sp)
210c4268:	900b883a 	mov	r5,r18
210c426c:	000d883a 	mov	r6,zero
210c4270:	000f883a 	mov	r7,zero
210c4274:	da003f15 	stw	r8,252(sp)
210c4278:	da403e15 	stw	r9,248(sp)
210c427c:	da803d15 	stw	r10,244(sp)
210c4280:	10ccc700 	call	210ccc70 <__eqdf2>
210c4284:	da003f17 	ldw	r8,252(sp)
210c4288:	da403e17 	ldw	r9,248(sp)
210c428c:	da803d17 	ldw	r10,244(sp)
210c4290:	103f1f26 	beq	r2,zero,210c3f10 <__flash_rwdata_start+0xffff2618>
210c4294:	00800044 	movi	r2,1
210c4298:	1707c83a 	sub	r3,r2,fp
210c429c:	d8c02615 	stw	r3,152(sp)
210c42a0:	003f1c06 	br	210c3f14 <__flash_rwdata_start+0xffff261c>
210c42a4:	00800c04 	movi	r2,48
210c42a8:	e0c00c04 	addi	r3,fp,48
210c42ac:	d8802345 	stb	r2,141(sp)
210c42b0:	d8c02385 	stb	r3,142(sp)
210c42b4:	d88023c4 	addi	r2,sp,143
210c42b8:	dd4022c4 	addi	r21,sp,139
210c42bc:	003fa906 	br	210c4164 <__flash_rwdata_start+0xffff286c>
210c42c0:	0005883a 	mov	r2,zero
210c42c4:	003f3c06 	br	210c3fb8 <__flash_rwdata_start+0xffff26c0>
210c42c8:	dac02d17 	ldw	r11,180(sp)
210c42cc:	5a400017 	ldw	r9,0(r11)
210c42d0:	5ac00104 	addi	r11,r11,4
210c42d4:	dac02d15 	stw	r11,180(sp)
210c42d8:	483ec80e 	bge	r9,zero,210c3dfc <__flash_rwdata_start+0xffff2504>
210c42dc:	027fffc4 	movi	r9,-1
210c42e0:	1c000047 	ldb	r16,1(r3)
210c42e4:	0038ab06 	br	210c2594 <__flash_rwdata_start+0xffff0c9c>
210c42e8:	4800111e 	bne	r9,zero,210c4330 <___vfprintf_internal_r+0x1f30>
210c42ec:	8c40004c 	andi	r17,r17,1
210c42f0:	88000f1e 	bne	r17,zero,210c4330 <___vfprintf_internal_r+0x1f30>
210c42f4:	00800044 	movi	r2,1
210c42f8:	1025883a 	mov	r18,r2
210c42fc:	003e1806 	br	210c3b60 <__flash_rwdata_start+0xffff2268>
210c4300:	04800084 	movi	r18,2
210c4304:	90e5c83a 	sub	r18,r18,r3
210c4308:	003fb306 	br	210c41d8 <__flash_rwdata_start+0xffff28e0>
210c430c:	0005883a 	mov	r2,zero
210c4310:	003f9d06 	br	210c4188 <__flash_rwdata_start+0xffff2890>
210c4314:	88a2703a 	and	r17,r17,r2
210c4318:	883f9926 	beq	r17,zero,210c4180 <__flash_rwdata_start+0xffff2888>
210c431c:	003f9706 	br	210c417c <__flash_rwdata_start+0xffff2884>
210c4320:	00800b44 	movi	r2,45
210c4324:	0739c83a 	sub	fp,zero,fp
210c4328:	d8802305 	stb	r2,140(sp)
210c432c:	003f6606 	br	210c40c8 <__flash_rwdata_start+0xffff27d0>
210c4330:	4c800084 	addi	r18,r9,2
210c4334:	9005883a 	mov	r2,r18
210c4338:	903e090e 	bge	r18,zero,210c3b60 <__flash_rwdata_start+0xffff2268>
210c433c:	003faa06 	br	210c41e8 <__flash_rwdata_start+0xffff28f0>
210c4340:	d8802344 	addi	r2,sp,141
210c4344:	003f8706 	br	210c4164 <__flash_rwdata_start+0xffff286c>
210c4348:	d8c02617 	ldw	r3,152(sp)
210c434c:	003f5806 	br	210c40b0 <__flash_rwdata_start+0xffff27b8>

210c4350 <__vfprintf_internal>:
210c4350:	2007883a 	mov	r3,r4
210c4354:	01040034 	movhi	r4,4096
210c4358:	21092304 	addi	r4,r4,9356
210c435c:	21000017 	ldw	r4,0(r4)
210c4360:	2805883a 	mov	r2,r5
210c4364:	300f883a 	mov	r7,r6
210c4368:	180b883a 	mov	r5,r3
210c436c:	100d883a 	mov	r6,r2
210c4370:	10c24001 	jmpi	210c2400 <___vfprintf_internal_r>

210c4374 <__sbprintf>:
210c4374:	2880030b 	ldhu	r2,12(r5)
210c4378:	2ac01917 	ldw	r11,100(r5)
210c437c:	2a80038b 	ldhu	r10,14(r5)
210c4380:	2a400717 	ldw	r9,28(r5)
210c4384:	2a000917 	ldw	r8,36(r5)
210c4388:	defee204 	addi	sp,sp,-1144
210c438c:	00c10004 	movi	r3,1024
210c4390:	dc011a15 	stw	r16,1128(sp)
210c4394:	10bfff4c 	andi	r2,r2,65533
210c4398:	2821883a 	mov	r16,r5
210c439c:	d8cb883a 	add	r5,sp,r3
210c43a0:	dc811c15 	stw	r18,1136(sp)
210c43a4:	dc411b15 	stw	r17,1132(sp)
210c43a8:	dfc11d15 	stw	ra,1140(sp)
210c43ac:	2025883a 	mov	r18,r4
210c43b0:	d881030d 	sth	r2,1036(sp)
210c43b4:	dac11915 	stw	r11,1124(sp)
210c43b8:	da81038d 	sth	r10,1038(sp)
210c43bc:	da410715 	stw	r9,1052(sp)
210c43c0:	da010915 	stw	r8,1060(sp)
210c43c4:	dec10015 	stw	sp,1024(sp)
210c43c8:	dec10415 	stw	sp,1040(sp)
210c43cc:	d8c10215 	stw	r3,1032(sp)
210c43d0:	d8c10515 	stw	r3,1044(sp)
210c43d4:	d8010615 	stw	zero,1048(sp)
210c43d8:	10c24000 	call	210c2400 <___vfprintf_internal_r>
210c43dc:	1023883a 	mov	r17,r2
210c43e0:	10000416 	blt	r2,zero,210c43f4 <__sbprintf+0x80>
210c43e4:	9009883a 	mov	r4,r18
210c43e8:	d9410004 	addi	r5,sp,1024
210c43ec:	10c62480 	call	210c6248 <_fflush_r>
210c43f0:	10000d1e 	bne	r2,zero,210c4428 <__sbprintf+0xb4>
210c43f4:	d8c1030b 	ldhu	r3,1036(sp)
210c43f8:	18c0100c 	andi	r3,r3,64
210c43fc:	18000326 	beq	r3,zero,210c440c <__sbprintf+0x98>
210c4400:	8080030b 	ldhu	r2,12(r16)
210c4404:	10801014 	ori	r2,r2,64
210c4408:	8080030d 	sth	r2,12(r16)
210c440c:	8805883a 	mov	r2,r17
210c4410:	dfc11d17 	ldw	ra,1140(sp)
210c4414:	dc811c17 	ldw	r18,1136(sp)
210c4418:	dc411b17 	ldw	r17,1132(sp)
210c441c:	dc011a17 	ldw	r16,1128(sp)
210c4420:	dec11e04 	addi	sp,sp,1144
210c4424:	f800283a 	ret
210c4428:	047fffc4 	movi	r17,-1
210c442c:	003ff106 	br	210c43f4 <__flash_rwdata_start+0xffff2afc>

210c4430 <__swsetup_r>:
210c4430:	00840034 	movhi	r2,4096
210c4434:	defffd04 	addi	sp,sp,-12
210c4438:	10892304 	addi	r2,r2,9356
210c443c:	dc400115 	stw	r17,4(sp)
210c4440:	2023883a 	mov	r17,r4
210c4444:	11000017 	ldw	r4,0(r2)
210c4448:	dc000015 	stw	r16,0(sp)
210c444c:	dfc00215 	stw	ra,8(sp)
210c4450:	2821883a 	mov	r16,r5
210c4454:	20000226 	beq	r4,zero,210c4460 <__swsetup_r+0x30>
210c4458:	20c00e17 	ldw	r3,56(r4)
210c445c:	18003126 	beq	r3,zero,210c4524 <__swsetup_r+0xf4>
210c4460:	8080030b 	ldhu	r2,12(r16)
210c4464:	10c0020c 	andi	r3,r2,8
210c4468:	100d883a 	mov	r6,r2
210c446c:	18000f26 	beq	r3,zero,210c44ac <__swsetup_r+0x7c>
210c4470:	80c00417 	ldw	r3,16(r16)
210c4474:	18001526 	beq	r3,zero,210c44cc <__swsetup_r+0x9c>
210c4478:	1100004c 	andi	r4,r2,1
210c447c:	20001c1e 	bne	r4,zero,210c44f0 <__swsetup_r+0xc0>
210c4480:	1080008c 	andi	r2,r2,2
210c4484:	1000291e 	bne	r2,zero,210c452c <__swsetup_r+0xfc>
210c4488:	80800517 	ldw	r2,20(r16)
210c448c:	80800215 	stw	r2,8(r16)
210c4490:	18001c26 	beq	r3,zero,210c4504 <__swsetup_r+0xd4>
210c4494:	0005883a 	mov	r2,zero
210c4498:	dfc00217 	ldw	ra,8(sp)
210c449c:	dc400117 	ldw	r17,4(sp)
210c44a0:	dc000017 	ldw	r16,0(sp)
210c44a4:	dec00304 	addi	sp,sp,12
210c44a8:	f800283a 	ret
210c44ac:	3080040c 	andi	r2,r6,16
210c44b0:	10002e26 	beq	r2,zero,210c456c <__swsetup_r+0x13c>
210c44b4:	3080010c 	andi	r2,r6,4
210c44b8:	10001e1e 	bne	r2,zero,210c4534 <__swsetup_r+0x104>
210c44bc:	80c00417 	ldw	r3,16(r16)
210c44c0:	30800214 	ori	r2,r6,8
210c44c4:	8080030d 	sth	r2,12(r16)
210c44c8:	183feb1e 	bne	r3,zero,210c4478 <__flash_rwdata_start+0xffff2b80>
210c44cc:	1140a00c 	andi	r5,r2,640
210c44d0:	01008004 	movi	r4,512
210c44d4:	293fe826 	beq	r5,r4,210c4478 <__flash_rwdata_start+0xffff2b80>
210c44d8:	8809883a 	mov	r4,r17
210c44dc:	800b883a 	mov	r5,r16
210c44e0:	10c71b00 	call	210c71b0 <__smakebuf_r>
210c44e4:	8080030b 	ldhu	r2,12(r16)
210c44e8:	80c00417 	ldw	r3,16(r16)
210c44ec:	003fe206 	br	210c4478 <__flash_rwdata_start+0xffff2b80>
210c44f0:	80800517 	ldw	r2,20(r16)
210c44f4:	80000215 	stw	zero,8(r16)
210c44f8:	0085c83a 	sub	r2,zero,r2
210c44fc:	80800615 	stw	r2,24(r16)
210c4500:	183fe41e 	bne	r3,zero,210c4494 <__flash_rwdata_start+0xffff2b9c>
210c4504:	80c0030b 	ldhu	r3,12(r16)
210c4508:	0005883a 	mov	r2,zero
210c450c:	1900200c 	andi	r4,r3,128
210c4510:	203fe126 	beq	r4,zero,210c4498 <__flash_rwdata_start+0xffff2ba0>
210c4514:	18c01014 	ori	r3,r3,64
210c4518:	80c0030d 	sth	r3,12(r16)
210c451c:	00bfffc4 	movi	r2,-1
210c4520:	003fdd06 	br	210c4498 <__flash_rwdata_start+0xffff2ba0>
210c4524:	10c66240 	call	210c6624 <__sinit>
210c4528:	003fcd06 	br	210c4460 <__flash_rwdata_start+0xffff2b68>
210c452c:	0005883a 	mov	r2,zero
210c4530:	003fd606 	br	210c448c <__flash_rwdata_start+0xffff2b94>
210c4534:	81400c17 	ldw	r5,48(r16)
210c4538:	28000626 	beq	r5,zero,210c4554 <__swsetup_r+0x124>
210c453c:	80801004 	addi	r2,r16,64
210c4540:	28800326 	beq	r5,r2,210c4550 <__swsetup_r+0x120>
210c4544:	8809883a 	mov	r4,r17
210c4548:	10c67980 	call	210c6798 <_free_r>
210c454c:	8180030b 	ldhu	r6,12(r16)
210c4550:	80000c15 	stw	zero,48(r16)
210c4554:	80c00417 	ldw	r3,16(r16)
210c4558:	00bff6c4 	movi	r2,-37
210c455c:	118c703a 	and	r6,r2,r6
210c4560:	80000115 	stw	zero,4(r16)
210c4564:	80c00015 	stw	r3,0(r16)
210c4568:	003fd506 	br	210c44c0 <__flash_rwdata_start+0xffff2bc8>
210c456c:	00800244 	movi	r2,9
210c4570:	88800015 	stw	r2,0(r17)
210c4574:	30801014 	ori	r2,r6,64
210c4578:	8080030d 	sth	r2,12(r16)
210c457c:	00bfffc4 	movi	r2,-1
210c4580:	003fc506 	br	210c4498 <__flash_rwdata_start+0xffff2ba0>

210c4584 <__call_exitprocs>:
210c4584:	00840034 	movhi	r2,4096
210c4588:	10892204 	addi	r2,r2,9352
210c458c:	10800017 	ldw	r2,0(r2)
210c4590:	defff404 	addi	sp,sp,-48
210c4594:	dd800815 	stw	r22,32(sp)
210c4598:	d8800015 	stw	r2,0(sp)
210c459c:	10805204 	addi	r2,r2,328
210c45a0:	dd000615 	stw	r20,24(sp)
210c45a4:	dc800415 	stw	r18,16(sp)
210c45a8:	dfc00b15 	stw	ra,44(sp)
210c45ac:	df000a15 	stw	fp,40(sp)
210c45b0:	ddc00915 	stw	r23,36(sp)
210c45b4:	dd400715 	stw	r21,28(sp)
210c45b8:	dcc00515 	stw	r19,20(sp)
210c45bc:	dc400315 	stw	r17,12(sp)
210c45c0:	dc000215 	stw	r16,8(sp)
210c45c4:	2025883a 	mov	r18,r4
210c45c8:	2829883a 	mov	r20,r5
210c45cc:	d8800115 	stw	r2,4(sp)
210c45d0:	05bfffc4 	movi	r22,-1
210c45d4:	d8800017 	ldw	r2,0(sp)
210c45d8:	14c05217 	ldw	r19,328(r2)
210c45dc:	98001d26 	beq	r19,zero,210c4654 <__call_exitprocs+0xd0>
210c45e0:	dd400117 	ldw	r21,4(sp)
210c45e4:	98800117 	ldw	r2,4(r19)
210c45e8:	173fffc4 	addi	fp,r2,-1
210c45ec:	e0000d16 	blt	fp,zero,210c4624 <__call_exitprocs+0xa0>
210c45f0:	14000044 	addi	r16,r2,1
210c45f4:	8421883a 	add	r16,r16,r16
210c45f8:	8421883a 	add	r16,r16,r16
210c45fc:	84402004 	addi	r17,r16,128
210c4600:	9c63883a 	add	r17,r19,r17
210c4604:	9c21883a 	add	r16,r19,r16
210c4608:	a0001e26 	beq	r20,zero,210c4684 <__call_exitprocs+0x100>
210c460c:	80804017 	ldw	r2,256(r16)
210c4610:	15001c26 	beq	r2,r20,210c4684 <__call_exitprocs+0x100>
210c4614:	e73fffc4 	addi	fp,fp,-1
210c4618:	843fff04 	addi	r16,r16,-4
210c461c:	8c7fff04 	addi	r17,r17,-4
210c4620:	e5bff91e 	bne	fp,r22,210c4608 <__flash_rwdata_start+0xffff2d10>
210c4624:	00884334 	movhi	r2,8460
210c4628:	10868504 	addi	r2,r2,6676
210c462c:	10000926 	beq	r2,zero,210c4654 <__call_exitprocs+0xd0>
210c4630:	98800117 	ldw	r2,4(r19)
210c4634:	1000311e 	bne	r2,zero,210c46fc <__call_exitprocs+0x178>
210c4638:	98800017 	ldw	r2,0(r19)
210c463c:	10003426 	beq	r2,zero,210c4710 <__call_exitprocs+0x18c>
210c4640:	9809883a 	mov	r4,r19
210c4644:	a8800015 	stw	r2,0(r21)
210c4648:	10c1a140 	call	210c1a14 <free>
210c464c:	acc00017 	ldw	r19,0(r21)
210c4650:	983fe41e 	bne	r19,zero,210c45e4 <__flash_rwdata_start+0xffff2cec>
210c4654:	dfc00b17 	ldw	ra,44(sp)
210c4658:	df000a17 	ldw	fp,40(sp)
210c465c:	ddc00917 	ldw	r23,36(sp)
210c4660:	dd800817 	ldw	r22,32(sp)
210c4664:	dd400717 	ldw	r21,28(sp)
210c4668:	dd000617 	ldw	r20,24(sp)
210c466c:	dcc00517 	ldw	r19,20(sp)
210c4670:	dc800417 	ldw	r18,16(sp)
210c4674:	dc400317 	ldw	r17,12(sp)
210c4678:	dc000217 	ldw	r16,8(sp)
210c467c:	dec00c04 	addi	sp,sp,48
210c4680:	f800283a 	ret
210c4684:	98800117 	ldw	r2,4(r19)
210c4688:	80c00017 	ldw	r3,0(r16)
210c468c:	10bfffc4 	addi	r2,r2,-1
210c4690:	17001526 	beq	r2,fp,210c46e8 <__call_exitprocs+0x164>
210c4694:	80000015 	stw	zero,0(r16)
210c4698:	183fde26 	beq	r3,zero,210c4614 <__flash_rwdata_start+0xffff2d1c>
210c469c:	00800044 	movi	r2,1
210c46a0:	1708983a 	sll	r4,r2,fp
210c46a4:	98806217 	ldw	r2,392(r19)
210c46a8:	9dc00117 	ldw	r23,4(r19)
210c46ac:	2084703a 	and	r2,r4,r2
210c46b0:	1000061e 	bne	r2,zero,210c46cc <__call_exitprocs+0x148>
210c46b4:	183ee83a 	callr	r3
210c46b8:	98800117 	ldw	r2,4(r19)
210c46bc:	15ffc51e 	bne	r2,r23,210c45d4 <__flash_rwdata_start+0xffff2cdc>
210c46c0:	a8800017 	ldw	r2,0(r21)
210c46c4:	14ffd326 	beq	r2,r19,210c4614 <__flash_rwdata_start+0xffff2d1c>
210c46c8:	003fc206 	br	210c45d4 <__flash_rwdata_start+0xffff2cdc>
210c46cc:	98806317 	ldw	r2,396(r19)
210c46d0:	2084703a 	and	r2,r4,r2
210c46d4:	1000061e 	bne	r2,zero,210c46f0 <__call_exitprocs+0x16c>
210c46d8:	89400017 	ldw	r5,0(r17)
210c46dc:	9009883a 	mov	r4,r18
210c46e0:	183ee83a 	callr	r3
210c46e4:	003ff406 	br	210c46b8 <__flash_rwdata_start+0xffff2dc0>
210c46e8:	9f000115 	stw	fp,4(r19)
210c46ec:	003fea06 	br	210c4698 <__flash_rwdata_start+0xffff2da0>
210c46f0:	89000017 	ldw	r4,0(r17)
210c46f4:	183ee83a 	callr	r3
210c46f8:	003fef06 	br	210c46b8 <__flash_rwdata_start+0xffff2dc0>
210c46fc:	98800017 	ldw	r2,0(r19)
210c4700:	982b883a 	mov	r21,r19
210c4704:	1027883a 	mov	r19,r2
210c4708:	983fb61e 	bne	r19,zero,210c45e4 <__flash_rwdata_start+0xffff2cec>
210c470c:	003fd106 	br	210c4654 <__flash_rwdata_start+0xffff2d5c>
210c4710:	0005883a 	mov	r2,zero
210c4714:	003ffa06 	br	210c4700 <__flash_rwdata_start+0xffff2e08>

210c4718 <quorem>:
210c4718:	defff704 	addi	sp,sp,-36
210c471c:	dc800215 	stw	r18,8(sp)
210c4720:	20800417 	ldw	r2,16(r4)
210c4724:	2c800417 	ldw	r18,16(r5)
210c4728:	dfc00815 	stw	ra,32(sp)
210c472c:	ddc00715 	stw	r23,28(sp)
210c4730:	dd800615 	stw	r22,24(sp)
210c4734:	dd400515 	stw	r21,20(sp)
210c4738:	dd000415 	stw	r20,16(sp)
210c473c:	dcc00315 	stw	r19,12(sp)
210c4740:	dc400115 	stw	r17,4(sp)
210c4744:	dc000015 	stw	r16,0(sp)
210c4748:	14807116 	blt	r2,r18,210c4910 <quorem+0x1f8>
210c474c:	94bfffc4 	addi	r18,r18,-1
210c4750:	94ad883a 	add	r22,r18,r18
210c4754:	b5ad883a 	add	r22,r22,r22
210c4758:	2c400504 	addi	r17,r5,20
210c475c:	8da9883a 	add	r20,r17,r22
210c4760:	25400504 	addi	r21,r4,20
210c4764:	282f883a 	mov	r23,r5
210c4768:	adad883a 	add	r22,r21,r22
210c476c:	a1400017 	ldw	r5,0(r20)
210c4770:	2021883a 	mov	r16,r4
210c4774:	b1000017 	ldw	r4,0(r22)
210c4778:	29400044 	addi	r5,r5,1
210c477c:	10cbaf80 	call	210cbaf8 <__udivsi3>
210c4780:	1027883a 	mov	r19,r2
210c4784:	10002c26 	beq	r2,zero,210c4838 <quorem+0x120>
210c4788:	a813883a 	mov	r9,r21
210c478c:	8811883a 	mov	r8,r17
210c4790:	0009883a 	mov	r4,zero
210c4794:	000d883a 	mov	r6,zero
210c4798:	41c00017 	ldw	r7,0(r8)
210c479c:	49400017 	ldw	r5,0(r9)
210c47a0:	42000104 	addi	r8,r8,4
210c47a4:	38bfffcc 	andi	r2,r7,65535
210c47a8:	14c5383a 	mul	r2,r2,r19
210c47ac:	380ed43a 	srli	r7,r7,16
210c47b0:	28ffffcc 	andi	r3,r5,65535
210c47b4:	2085883a 	add	r2,r4,r2
210c47b8:	1008d43a 	srli	r4,r2,16
210c47bc:	3ccf383a 	mul	r7,r7,r19
210c47c0:	198d883a 	add	r6,r3,r6
210c47c4:	10ffffcc 	andi	r3,r2,65535
210c47c8:	30c7c83a 	sub	r3,r6,r3
210c47cc:	280ad43a 	srli	r5,r5,16
210c47d0:	21c9883a 	add	r4,r4,r7
210c47d4:	180dd43a 	srai	r6,r3,16
210c47d8:	20bfffcc 	andi	r2,r4,65535
210c47dc:	288bc83a 	sub	r5,r5,r2
210c47e0:	298b883a 	add	r5,r5,r6
210c47e4:	280e943a 	slli	r7,r5,16
210c47e8:	18ffffcc 	andi	r3,r3,65535
210c47ec:	2008d43a 	srli	r4,r4,16
210c47f0:	38ceb03a 	or	r7,r7,r3
210c47f4:	49c00015 	stw	r7,0(r9)
210c47f8:	280dd43a 	srai	r6,r5,16
210c47fc:	4a400104 	addi	r9,r9,4
210c4800:	a23fe52e 	bgeu	r20,r8,210c4798 <__flash_rwdata_start+0xffff2ea0>
210c4804:	b0800017 	ldw	r2,0(r22)
210c4808:	10000b1e 	bne	r2,zero,210c4838 <quorem+0x120>
210c480c:	b0bfff04 	addi	r2,r22,-4
210c4810:	a880082e 	bgeu	r21,r2,210c4834 <quorem+0x11c>
210c4814:	b0ffff17 	ldw	r3,-4(r22)
210c4818:	18000326 	beq	r3,zero,210c4828 <quorem+0x110>
210c481c:	00000506 	br	210c4834 <quorem+0x11c>
210c4820:	10c00017 	ldw	r3,0(r2)
210c4824:	1800031e 	bne	r3,zero,210c4834 <quorem+0x11c>
210c4828:	10bfff04 	addi	r2,r2,-4
210c482c:	94bfffc4 	addi	r18,r18,-1
210c4830:	a8bffb36 	bltu	r21,r2,210c4820 <__flash_rwdata_start+0xffff2f28>
210c4834:	84800415 	stw	r18,16(r16)
210c4838:	8009883a 	mov	r4,r16
210c483c:	b80b883a 	mov	r5,r23
210c4840:	10c80dc0 	call	210c80dc <__mcmp>
210c4844:	10002616 	blt	r2,zero,210c48e0 <quorem+0x1c8>
210c4848:	9cc00044 	addi	r19,r19,1
210c484c:	a80d883a 	mov	r6,r21
210c4850:	000b883a 	mov	r5,zero
210c4854:	31000017 	ldw	r4,0(r6)
210c4858:	88800017 	ldw	r2,0(r17)
210c485c:	31800104 	addi	r6,r6,4
210c4860:	20ffffcc 	andi	r3,r4,65535
210c4864:	194b883a 	add	r5,r3,r5
210c4868:	10ffffcc 	andi	r3,r2,65535
210c486c:	28c7c83a 	sub	r3,r5,r3
210c4870:	1004d43a 	srli	r2,r2,16
210c4874:	2008d43a 	srli	r4,r4,16
210c4878:	180bd43a 	srai	r5,r3,16
210c487c:	18ffffcc 	andi	r3,r3,65535
210c4880:	2089c83a 	sub	r4,r4,r2
210c4884:	2149883a 	add	r4,r4,r5
210c4888:	2004943a 	slli	r2,r4,16
210c488c:	8c400104 	addi	r17,r17,4
210c4890:	200bd43a 	srai	r5,r4,16
210c4894:	10c6b03a 	or	r3,r2,r3
210c4898:	30ffff15 	stw	r3,-4(r6)
210c489c:	a47fed2e 	bgeu	r20,r17,210c4854 <__flash_rwdata_start+0xffff2f5c>
210c48a0:	9485883a 	add	r2,r18,r18
210c48a4:	1085883a 	add	r2,r2,r2
210c48a8:	a887883a 	add	r3,r21,r2
210c48ac:	18800017 	ldw	r2,0(r3)
210c48b0:	10000b1e 	bne	r2,zero,210c48e0 <quorem+0x1c8>
210c48b4:	18bfff04 	addi	r2,r3,-4
210c48b8:	a880082e 	bgeu	r21,r2,210c48dc <quorem+0x1c4>
210c48bc:	18ffff17 	ldw	r3,-4(r3)
210c48c0:	18000326 	beq	r3,zero,210c48d0 <quorem+0x1b8>
210c48c4:	00000506 	br	210c48dc <quorem+0x1c4>
210c48c8:	10c00017 	ldw	r3,0(r2)
210c48cc:	1800031e 	bne	r3,zero,210c48dc <quorem+0x1c4>
210c48d0:	10bfff04 	addi	r2,r2,-4
210c48d4:	94bfffc4 	addi	r18,r18,-1
210c48d8:	a8bffb36 	bltu	r21,r2,210c48c8 <__flash_rwdata_start+0xffff2fd0>
210c48dc:	84800415 	stw	r18,16(r16)
210c48e0:	9805883a 	mov	r2,r19
210c48e4:	dfc00817 	ldw	ra,32(sp)
210c48e8:	ddc00717 	ldw	r23,28(sp)
210c48ec:	dd800617 	ldw	r22,24(sp)
210c48f0:	dd400517 	ldw	r21,20(sp)
210c48f4:	dd000417 	ldw	r20,16(sp)
210c48f8:	dcc00317 	ldw	r19,12(sp)
210c48fc:	dc800217 	ldw	r18,8(sp)
210c4900:	dc400117 	ldw	r17,4(sp)
210c4904:	dc000017 	ldw	r16,0(sp)
210c4908:	dec00904 	addi	sp,sp,36
210c490c:	f800283a 	ret
210c4910:	0005883a 	mov	r2,zero
210c4914:	003ff306 	br	210c48e4 <__flash_rwdata_start+0xffff2fec>

210c4918 <_dtoa_r>:
210c4918:	20801017 	ldw	r2,64(r4)
210c491c:	deffde04 	addi	sp,sp,-136
210c4920:	dd401d15 	stw	r21,116(sp)
210c4924:	dcc01b15 	stw	r19,108(sp)
210c4928:	dc801a15 	stw	r18,104(sp)
210c492c:	dc401915 	stw	r17,100(sp)
210c4930:	dc001815 	stw	r16,96(sp)
210c4934:	dfc02115 	stw	ra,132(sp)
210c4938:	df002015 	stw	fp,128(sp)
210c493c:	ddc01f15 	stw	r23,124(sp)
210c4940:	dd801e15 	stw	r22,120(sp)
210c4944:	dd001c15 	stw	r20,112(sp)
210c4948:	d9c00315 	stw	r7,12(sp)
210c494c:	2021883a 	mov	r16,r4
210c4950:	302b883a 	mov	r21,r6
210c4954:	2825883a 	mov	r18,r5
210c4958:	dc402417 	ldw	r17,144(sp)
210c495c:	3027883a 	mov	r19,r6
210c4960:	10000826 	beq	r2,zero,210c4984 <_dtoa_r+0x6c>
210c4964:	21801117 	ldw	r6,68(r4)
210c4968:	00c00044 	movi	r3,1
210c496c:	100b883a 	mov	r5,r2
210c4970:	1986983a 	sll	r3,r3,r6
210c4974:	11800115 	stw	r6,4(r2)
210c4978:	10c00215 	stw	r3,8(r2)
210c497c:	10c78b00 	call	210c78b0 <_Bfree>
210c4980:	80001015 	stw	zero,64(r16)
210c4984:	a8002d16 	blt	r21,zero,210c4a3c <_dtoa_r+0x124>
210c4988:	88000015 	stw	zero,0(r17)
210c498c:	a8dffc2c 	andhi	r3,r21,32752
210c4990:	009ffc34 	movhi	r2,32752
210c4994:	18801b26 	beq	r3,r2,210c4a04 <_dtoa_r+0xec>
210c4998:	9009883a 	mov	r4,r18
210c499c:	980b883a 	mov	r5,r19
210c49a0:	000d883a 	mov	r6,zero
210c49a4:	000f883a 	mov	r7,zero
210c49a8:	10ccc700 	call	210ccc70 <__eqdf2>
210c49ac:	10002a1e 	bne	r2,zero,210c4a58 <_dtoa_r+0x140>
210c49b0:	d8c02317 	ldw	r3,140(sp)
210c49b4:	d9002517 	ldw	r4,148(sp)
210c49b8:	00800044 	movi	r2,1
210c49bc:	18800015 	stw	r2,0(r3)
210c49c0:	2001a226 	beq	r4,zero,210c504c <_dtoa_r+0x734>
210c49c4:	00840034 	movhi	r2,4096
210c49c8:	10808044 	addi	r2,r2,513
210c49cc:	20800015 	stw	r2,0(r4)
210c49d0:	10bfffc4 	addi	r2,r2,-1
210c49d4:	dfc02117 	ldw	ra,132(sp)
210c49d8:	df002017 	ldw	fp,128(sp)
210c49dc:	ddc01f17 	ldw	r23,124(sp)
210c49e0:	dd801e17 	ldw	r22,120(sp)
210c49e4:	dd401d17 	ldw	r21,116(sp)
210c49e8:	dd001c17 	ldw	r20,112(sp)
210c49ec:	dcc01b17 	ldw	r19,108(sp)
210c49f0:	dc801a17 	ldw	r18,104(sp)
210c49f4:	dc401917 	ldw	r17,100(sp)
210c49f8:	dc001817 	ldw	r16,96(sp)
210c49fc:	dec02204 	addi	sp,sp,136
210c4a00:	f800283a 	ret
210c4a04:	d8c02317 	ldw	r3,140(sp)
210c4a08:	0089c3c4 	movi	r2,9999
210c4a0c:	18800015 	stw	r2,0(r3)
210c4a10:	90017c26 	beq	r18,zero,210c5004 <_dtoa_r+0x6ec>
210c4a14:	00840034 	movhi	r2,4096
210c4a18:	10808c04 	addi	r2,r2,560
210c4a1c:	d9002517 	ldw	r4,148(sp)
210c4a20:	203fec26 	beq	r4,zero,210c49d4 <__flash_rwdata_start+0xffff30dc>
210c4a24:	10c000c7 	ldb	r3,3(r2)
210c4a28:	18017d1e 	bne	r3,zero,210c5020 <_dtoa_r+0x708>
210c4a2c:	10c000c4 	addi	r3,r2,3
210c4a30:	d9802517 	ldw	r6,148(sp)
210c4a34:	30c00015 	stw	r3,0(r6)
210c4a38:	003fe606 	br	210c49d4 <__flash_rwdata_start+0xffff30dc>
210c4a3c:	04e00034 	movhi	r19,32768
210c4a40:	9cffffc4 	addi	r19,r19,-1
210c4a44:	00800044 	movi	r2,1
210c4a48:	ace6703a 	and	r19,r21,r19
210c4a4c:	88800015 	stw	r2,0(r17)
210c4a50:	982b883a 	mov	r21,r19
210c4a54:	003fcd06 	br	210c498c <__flash_rwdata_start+0xffff3094>
210c4a58:	d8800204 	addi	r2,sp,8
210c4a5c:	a822d53a 	srli	r17,r21,20
210c4a60:	d8800015 	stw	r2,0(sp)
210c4a64:	8009883a 	mov	r4,r16
210c4a68:	900b883a 	mov	r5,r18
210c4a6c:	980d883a 	mov	r6,r19
210c4a70:	d9c00104 	addi	r7,sp,4
210c4a74:	10c84500 	call	210c8450 <__d2b>
210c4a78:	1039883a 	mov	fp,r2
210c4a7c:	88016a1e 	bne	r17,zero,210c5028 <_dtoa_r+0x710>
210c4a80:	dd000217 	ldw	r20,8(sp)
210c4a84:	dc400117 	ldw	r17,4(sp)
210c4a88:	00befbc4 	movi	r2,-1041
210c4a8c:	a463883a 	add	r17,r20,r17
210c4a90:	8882ea16 	blt	r17,r2,210c563c <_dtoa_r+0xd24>
210c4a94:	00bf0384 	movi	r2,-1010
210c4a98:	1445c83a 	sub	r2,r2,r17
210c4a9c:	89010484 	addi	r4,r17,1042
210c4aa0:	a8aa983a 	sll	r21,r21,r2
210c4aa4:	9108d83a 	srl	r4,r18,r4
210c4aa8:	a908b03a 	or	r4,r21,r4
210c4aac:	10ce0000 	call	210ce000 <__floatunsidf>
210c4ab0:	017f8434 	movhi	r5,65040
210c4ab4:	01800044 	movi	r6,1
210c4ab8:	1009883a 	mov	r4,r2
210c4abc:	194b883a 	add	r5,r3,r5
210c4ac0:	8c7fffc4 	addi	r17,r17,-1
210c4ac4:	d9800f15 	stw	r6,60(sp)
210c4ac8:	000d883a 	mov	r6,zero
210c4acc:	01cffe34 	movhi	r7,16376
210c4ad0:	10cd5d80 	call	210cd5d8 <__subdf3>
210c4ad4:	0198dbf4 	movhi	r6,25455
210c4ad8:	01cff4f4 	movhi	r7,16339
210c4adc:	1009883a 	mov	r4,r2
210c4ae0:	180b883a 	mov	r5,r3
210c4ae4:	3190d844 	addi	r6,r6,17249
210c4ae8:	39e1e9c4 	addi	r7,r7,-30809
210c4aec:	10cceb40 	call	210cceb4 <__muldf3>
210c4af0:	01a2d874 	movhi	r6,35681
210c4af4:	01cff1f4 	movhi	r7,16327
210c4af8:	180b883a 	mov	r5,r3
210c4afc:	31b22cc4 	addi	r6,r6,-14157
210c4b00:	39e28a04 	addi	r7,r7,-30168
210c4b04:	1009883a 	mov	r4,r2
210c4b08:	10cbb080 	call	210cbb08 <__adddf3>
210c4b0c:	8809883a 	mov	r4,r17
210c4b10:	102d883a 	mov	r22,r2
210c4b14:	182b883a 	mov	r21,r3
210c4b18:	10cdf300 	call	210cdf30 <__floatsidf>
210c4b1c:	019427f4 	movhi	r6,20639
210c4b20:	01cff4f4 	movhi	r7,16339
210c4b24:	1009883a 	mov	r4,r2
210c4b28:	180b883a 	mov	r5,r3
210c4b2c:	319e7ec4 	addi	r6,r6,31227
210c4b30:	39d104c4 	addi	r7,r7,17427
210c4b34:	10cceb40 	call	210cceb4 <__muldf3>
210c4b38:	b009883a 	mov	r4,r22
210c4b3c:	a80b883a 	mov	r5,r21
210c4b40:	100d883a 	mov	r6,r2
210c4b44:	180f883a 	mov	r7,r3
210c4b48:	10cbb080 	call	210cbb08 <__adddf3>
210c4b4c:	1009883a 	mov	r4,r2
210c4b50:	180b883a 	mov	r5,r3
210c4b54:	102d883a 	mov	r22,r2
210c4b58:	182b883a 	mov	r21,r3
210c4b5c:	10cdea80 	call	210cdea8 <__fixdfsi>
210c4b60:	b009883a 	mov	r4,r22
210c4b64:	a80b883a 	mov	r5,r21
210c4b68:	000d883a 	mov	r6,zero
210c4b6c:	000f883a 	mov	r7,zero
210c4b70:	d8800515 	stw	r2,20(sp)
210c4b74:	10ccdd40 	call	210ccdd4 <__ledf2>
210c4b78:	10023116 	blt	r2,zero,210c5440 <_dtoa_r+0xb28>
210c4b7c:	d8c00517 	ldw	r3,20(sp)
210c4b80:	00800584 	movi	r2,22
210c4b84:	10c21f36 	bltu	r2,r3,210c5404 <_dtoa_r+0xaec>
210c4b88:	180490fa 	slli	r2,r3,3
210c4b8c:	00c40034 	movhi	r3,4096
210c4b90:	18c0a704 	addi	r3,r3,668
210c4b94:	1885883a 	add	r2,r3,r2
210c4b98:	11000017 	ldw	r4,0(r2)
210c4b9c:	11400117 	ldw	r5,4(r2)
210c4ba0:	900d883a 	mov	r6,r18
210c4ba4:	980f883a 	mov	r7,r19
210c4ba8:	10cccf40 	call	210cccf4 <__gedf2>
210c4bac:	0082a70e 	bge	zero,r2,210c564c <_dtoa_r+0xd34>
210c4bb0:	d9000517 	ldw	r4,20(sp)
210c4bb4:	d8000d15 	stw	zero,52(sp)
210c4bb8:	213fffc4 	addi	r4,r4,-1
210c4bbc:	d9000515 	stw	r4,20(sp)
210c4bc0:	a463c83a 	sub	r17,r20,r17
210c4bc4:	8dbfffc4 	addi	r22,r17,-1
210c4bc8:	b0021916 	blt	r22,zero,210c5430 <_dtoa_r+0xb18>
210c4bcc:	d8000815 	stw	zero,32(sp)
210c4bd0:	d8800517 	ldw	r2,20(sp)
210c4bd4:	10020e16 	blt	r2,zero,210c5410 <_dtoa_r+0xaf8>
210c4bd8:	b0ad883a 	add	r22,r22,r2
210c4bdc:	d8800a15 	stw	r2,40(sp)
210c4be0:	d8000915 	stw	zero,36(sp)
210c4be4:	d8c00317 	ldw	r3,12(sp)
210c4be8:	00800244 	movi	r2,9
210c4bec:	10c11a36 	bltu	r2,r3,210c5058 <_dtoa_r+0x740>
210c4bf0:	00800144 	movi	r2,5
210c4bf4:	10c4fc0e 	bge	r2,r3,210c5fe8 <_dtoa_r+0x16d0>
210c4bf8:	18ffff04 	addi	r3,r3,-4
210c4bfc:	d8c00315 	stw	r3,12(sp)
210c4c00:	0029883a 	mov	r20,zero
210c4c04:	d9800317 	ldw	r6,12(sp)
210c4c08:	008000c4 	movi	r2,3
210c4c0c:	3083bd26 	beq	r6,r2,210c5b04 <_dtoa_r+0x11ec>
210c4c10:	1183670e 	bge	r2,r6,210c59b0 <_dtoa_r+0x1098>
210c4c14:	d8c00317 	ldw	r3,12(sp)
210c4c18:	00800104 	movi	r2,4
210c4c1c:	1882e726 	beq	r3,r2,210c57bc <_dtoa_r+0xea4>
210c4c20:	00800144 	movi	r2,5
210c4c24:	1884f21e 	bne	r3,r2,210c5ff0 <_dtoa_r+0x16d8>
210c4c28:	00800044 	movi	r2,1
210c4c2c:	d8800b15 	stw	r2,44(sp)
210c4c30:	d8c02217 	ldw	r3,136(sp)
210c4c34:	d9000517 	ldw	r4,20(sp)
210c4c38:	1907883a 	add	r3,r3,r4
210c4c3c:	19800044 	addi	r6,r3,1
210c4c40:	d8c00c15 	stw	r3,48(sp)
210c4c44:	d9800615 	stw	r6,24(sp)
210c4c48:	0183c30e 	bge	zero,r6,210c5b58 <_dtoa_r+0x1240>
210c4c4c:	d9800617 	ldw	r6,24(sp)
210c4c50:	3023883a 	mov	r17,r6
210c4c54:	80001115 	stw	zero,68(r16)
210c4c58:	008005c4 	movi	r2,23
210c4c5c:	1184f62e 	bgeu	r2,r6,210c6038 <_dtoa_r+0x1720>
210c4c60:	00c00044 	movi	r3,1
210c4c64:	00800104 	movi	r2,4
210c4c68:	1085883a 	add	r2,r2,r2
210c4c6c:	11000504 	addi	r4,r2,20
210c4c70:	180b883a 	mov	r5,r3
210c4c74:	18c00044 	addi	r3,r3,1
210c4c78:	313ffb2e 	bgeu	r6,r4,210c4c68 <__flash_rwdata_start+0xffff3370>
210c4c7c:	81401115 	stw	r5,68(r16)
210c4c80:	8009883a 	mov	r4,r16
210c4c84:	10c78080 	call	210c7808 <_Balloc>
210c4c88:	d8800715 	stw	r2,28(sp)
210c4c8c:	80801015 	stw	r2,64(r16)
210c4c90:	00800384 	movi	r2,14
210c4c94:	1440fd36 	bltu	r2,r17,210c508c <_dtoa_r+0x774>
210c4c98:	a000fc26 	beq	r20,zero,210c508c <_dtoa_r+0x774>
210c4c9c:	d8800517 	ldw	r2,20(sp)
210c4ca0:	0083b90e 	bge	zero,r2,210c5b88 <_dtoa_r+0x1270>
210c4ca4:	d8c00517 	ldw	r3,20(sp)
210c4ca8:	108003cc 	andi	r2,r2,15
210c4cac:	100490fa 	slli	r2,r2,3
210c4cb0:	182fd13a 	srai	r23,r3,4
210c4cb4:	00c40034 	movhi	r3,4096
210c4cb8:	18c0a704 	addi	r3,r3,668
210c4cbc:	1885883a 	add	r2,r3,r2
210c4cc0:	b8c0040c 	andi	r3,r23,16
210c4cc4:	12c00017 	ldw	r11,0(r2)
210c4cc8:	12800117 	ldw	r10,4(r2)
210c4ccc:	18039726 	beq	r3,zero,210c5b2c <_dtoa_r+0x1214>
210c4cd0:	00840034 	movhi	r2,4096
210c4cd4:	10809d04 	addi	r2,r2,628
210c4cd8:	11800817 	ldw	r6,32(r2)
210c4cdc:	11c00917 	ldw	r7,36(r2)
210c4ce0:	9009883a 	mov	r4,r18
210c4ce4:	980b883a 	mov	r5,r19
210c4ce8:	da801615 	stw	r10,88(sp)
210c4cec:	dac01515 	stw	r11,84(sp)
210c4cf0:	10cc3a40 	call	210cc3a4 <__divdf3>
210c4cf4:	da801617 	ldw	r10,88(sp)
210c4cf8:	dac01517 	ldw	r11,84(sp)
210c4cfc:	bdc003cc 	andi	r23,r23,15
210c4d00:	044000c4 	movi	r17,3
210c4d04:	d8800e15 	stw	r2,56(sp)
210c4d08:	182b883a 	mov	r21,r3
210c4d0c:	b8001126 	beq	r23,zero,210c4d54 <_dtoa_r+0x43c>
210c4d10:	05040034 	movhi	r20,4096
210c4d14:	a5009d04 	addi	r20,r20,628
210c4d18:	5805883a 	mov	r2,r11
210c4d1c:	5007883a 	mov	r3,r10
210c4d20:	b980004c 	andi	r6,r23,1
210c4d24:	1009883a 	mov	r4,r2
210c4d28:	b82fd07a 	srai	r23,r23,1
210c4d2c:	180b883a 	mov	r5,r3
210c4d30:	30000426 	beq	r6,zero,210c4d44 <_dtoa_r+0x42c>
210c4d34:	a1800017 	ldw	r6,0(r20)
210c4d38:	a1c00117 	ldw	r7,4(r20)
210c4d3c:	8c400044 	addi	r17,r17,1
210c4d40:	10cceb40 	call	210cceb4 <__muldf3>
210c4d44:	a5000204 	addi	r20,r20,8
210c4d48:	b83ff51e 	bne	r23,zero,210c4d20 <__flash_rwdata_start+0xffff3428>
210c4d4c:	1017883a 	mov	r11,r2
210c4d50:	1815883a 	mov	r10,r3
210c4d54:	d9000e17 	ldw	r4,56(sp)
210c4d58:	a80b883a 	mov	r5,r21
210c4d5c:	580d883a 	mov	r6,r11
210c4d60:	500f883a 	mov	r7,r10
210c4d64:	10cc3a40 	call	210cc3a4 <__divdf3>
210c4d68:	1029883a 	mov	r20,r2
210c4d6c:	182b883a 	mov	r21,r3
210c4d70:	d9800d17 	ldw	r6,52(sp)
210c4d74:	30000626 	beq	r6,zero,210c4d90 <_dtoa_r+0x478>
210c4d78:	a009883a 	mov	r4,r20
210c4d7c:	a80b883a 	mov	r5,r21
210c4d80:	000d883a 	mov	r6,zero
210c4d84:	01cffc34 	movhi	r7,16368
210c4d88:	10ccdd40 	call	210ccdd4 <__ledf2>
210c4d8c:	10043216 	blt	r2,zero,210c5e58 <_dtoa_r+0x1540>
210c4d90:	8809883a 	mov	r4,r17
210c4d94:	10cdf300 	call	210cdf30 <__floatsidf>
210c4d98:	1009883a 	mov	r4,r2
210c4d9c:	180b883a 	mov	r5,r3
210c4da0:	a00d883a 	mov	r6,r20
210c4da4:	a80f883a 	mov	r7,r21
210c4da8:	10cceb40 	call	210cceb4 <__muldf3>
210c4dac:	000d883a 	mov	r6,zero
210c4db0:	1009883a 	mov	r4,r2
210c4db4:	180b883a 	mov	r5,r3
210c4db8:	01d00734 	movhi	r7,16412
210c4dbc:	10cbb080 	call	210cbb08 <__adddf3>
210c4dc0:	1023883a 	mov	r17,r2
210c4dc4:	d9800617 	ldw	r6,24(sp)
210c4dc8:	00bf3034 	movhi	r2,64704
210c4dcc:	1885883a 	add	r2,r3,r2
210c4dd0:	d8800e15 	stw	r2,56(sp)
210c4dd4:	30032e26 	beq	r6,zero,210c5a90 <_dtoa_r+0x1178>
210c4dd8:	d8c00517 	ldw	r3,20(sp)
210c4ddc:	da800617 	ldw	r10,24(sp)
210c4de0:	d8c01215 	stw	r3,72(sp)
210c4de4:	d9000b17 	ldw	r4,44(sp)
210c4de8:	2003b026 	beq	r4,zero,210c5cac <_dtoa_r+0x1394>
210c4dec:	50bfffc4 	addi	r2,r10,-1
210c4df0:	100490fa 	slli	r2,r2,3
210c4df4:	00c40034 	movhi	r3,4096
210c4df8:	18c0a704 	addi	r3,r3,668
210c4dfc:	1885883a 	add	r2,r3,r2
210c4e00:	11800017 	ldw	r6,0(r2)
210c4e04:	11c00117 	ldw	r7,4(r2)
210c4e08:	d8800717 	ldw	r2,28(sp)
210c4e0c:	0009883a 	mov	r4,zero
210c4e10:	014ff834 	movhi	r5,16352
210c4e14:	da801615 	stw	r10,88(sp)
210c4e18:	15c00044 	addi	r23,r2,1
210c4e1c:	10cc3a40 	call	210cc3a4 <__divdf3>
210c4e20:	d9c00e17 	ldw	r7,56(sp)
210c4e24:	880d883a 	mov	r6,r17
210c4e28:	1009883a 	mov	r4,r2
210c4e2c:	180b883a 	mov	r5,r3
210c4e30:	10cd5d80 	call	210cd5d8 <__subdf3>
210c4e34:	a80b883a 	mov	r5,r21
210c4e38:	a009883a 	mov	r4,r20
210c4e3c:	d8c01015 	stw	r3,64(sp)
210c4e40:	d8800e15 	stw	r2,56(sp)
210c4e44:	10cdea80 	call	210cdea8 <__fixdfsi>
210c4e48:	1009883a 	mov	r4,r2
210c4e4c:	d8801715 	stw	r2,92(sp)
210c4e50:	10cdf300 	call	210cdf30 <__floatsidf>
210c4e54:	a009883a 	mov	r4,r20
210c4e58:	a80b883a 	mov	r5,r21
210c4e5c:	100d883a 	mov	r6,r2
210c4e60:	180f883a 	mov	r7,r3
210c4e64:	10cd5d80 	call	210cd5d8 <__subdf3>
210c4e68:	da001717 	ldw	r8,92(sp)
210c4e6c:	1829883a 	mov	r20,r3
210c4e70:	d8c00717 	ldw	r3,28(sp)
210c4e74:	d9000e17 	ldw	r4,56(sp)
210c4e78:	d9401017 	ldw	r5,64(sp)
210c4e7c:	42000c04 	addi	r8,r8,48
210c4e80:	1023883a 	mov	r17,r2
210c4e84:	1a000005 	stb	r8,0(r3)
210c4e88:	880d883a 	mov	r6,r17
210c4e8c:	a00f883a 	mov	r7,r20
210c4e90:	402b883a 	mov	r21,r8
210c4e94:	10cccf40 	call	210cccf4 <__gedf2>
210c4e98:	00844516 	blt	zero,r2,210c5fb0 <_dtoa_r+0x1698>
210c4e9c:	0009883a 	mov	r4,zero
210c4ea0:	014ffc34 	movhi	r5,16368
210c4ea4:	880d883a 	mov	r6,r17
210c4ea8:	a00f883a 	mov	r7,r20
210c4eac:	10cd5d80 	call	210cd5d8 <__subdf3>
210c4eb0:	d9000e17 	ldw	r4,56(sp)
210c4eb4:	d9401017 	ldw	r5,64(sp)
210c4eb8:	100d883a 	mov	r6,r2
210c4ebc:	180f883a 	mov	r7,r3
210c4ec0:	10cccf40 	call	210cccf4 <__gedf2>
210c4ec4:	da801617 	ldw	r10,88(sp)
210c4ec8:	00843616 	blt	zero,r2,210c5fa4 <_dtoa_r+0x168c>
210c4ecc:	00800044 	movi	r2,1
210c4ed0:	12806e0e 	bge	r2,r10,210c508c <_dtoa_r+0x774>
210c4ed4:	d9000717 	ldw	r4,28(sp)
210c4ed8:	dd801315 	stw	r22,76(sp)
210c4edc:	dc001115 	stw	r16,68(sp)
210c4ee0:	2295883a 	add	r10,r4,r10
210c4ee4:	dcc01415 	stw	r19,80(sp)
210c4ee8:	502d883a 	mov	r22,r10
210c4eec:	dcc01017 	ldw	r19,64(sp)
210c4ef0:	b821883a 	mov	r16,r23
210c4ef4:	dc801015 	stw	r18,64(sp)
210c4ef8:	dc800e17 	ldw	r18,56(sp)
210c4efc:	00000906 	br	210c4f24 <_dtoa_r+0x60c>
210c4f00:	10cd5d80 	call	210cd5d8 <__subdf3>
210c4f04:	1009883a 	mov	r4,r2
210c4f08:	180b883a 	mov	r5,r3
210c4f0c:	900d883a 	mov	r6,r18
210c4f10:	980f883a 	mov	r7,r19
210c4f14:	10ccdd40 	call	210ccdd4 <__ledf2>
210c4f18:	10040e16 	blt	r2,zero,210c5f54 <_dtoa_r+0x163c>
210c4f1c:	b821883a 	mov	r16,r23
210c4f20:	bd841026 	beq	r23,r22,210c5f64 <_dtoa_r+0x164c>
210c4f24:	9009883a 	mov	r4,r18
210c4f28:	980b883a 	mov	r5,r19
210c4f2c:	000d883a 	mov	r6,zero
210c4f30:	01d00934 	movhi	r7,16420
210c4f34:	10cceb40 	call	210cceb4 <__muldf3>
210c4f38:	000d883a 	mov	r6,zero
210c4f3c:	01d00934 	movhi	r7,16420
210c4f40:	8809883a 	mov	r4,r17
210c4f44:	a00b883a 	mov	r5,r20
210c4f48:	1025883a 	mov	r18,r2
210c4f4c:	1827883a 	mov	r19,r3
210c4f50:	10cceb40 	call	210cceb4 <__muldf3>
210c4f54:	180b883a 	mov	r5,r3
210c4f58:	1009883a 	mov	r4,r2
210c4f5c:	1823883a 	mov	r17,r3
210c4f60:	1029883a 	mov	r20,r2
210c4f64:	10cdea80 	call	210cdea8 <__fixdfsi>
210c4f68:	1009883a 	mov	r4,r2
210c4f6c:	102b883a 	mov	r21,r2
210c4f70:	10cdf300 	call	210cdf30 <__floatsidf>
210c4f74:	a009883a 	mov	r4,r20
210c4f78:	880b883a 	mov	r5,r17
210c4f7c:	100d883a 	mov	r6,r2
210c4f80:	180f883a 	mov	r7,r3
210c4f84:	10cd5d80 	call	210cd5d8 <__subdf3>
210c4f88:	ad400c04 	addi	r21,r21,48
210c4f8c:	1009883a 	mov	r4,r2
210c4f90:	180b883a 	mov	r5,r3
210c4f94:	900d883a 	mov	r6,r18
210c4f98:	980f883a 	mov	r7,r19
210c4f9c:	85400005 	stb	r21,0(r16)
210c4fa0:	1023883a 	mov	r17,r2
210c4fa4:	1829883a 	mov	r20,r3
210c4fa8:	10ccdd40 	call	210ccdd4 <__ledf2>
210c4fac:	bdc00044 	addi	r23,r23,1
210c4fb0:	0009883a 	mov	r4,zero
210c4fb4:	014ffc34 	movhi	r5,16368
210c4fb8:	880d883a 	mov	r6,r17
210c4fbc:	a00f883a 	mov	r7,r20
210c4fc0:	103fcf0e 	bge	r2,zero,210c4f00 <__flash_rwdata_start+0xffff3608>
210c4fc4:	d9801217 	ldw	r6,72(sp)
210c4fc8:	dc001117 	ldw	r16,68(sp)
210c4fcc:	d9800515 	stw	r6,20(sp)
210c4fd0:	8009883a 	mov	r4,r16
210c4fd4:	e00b883a 	mov	r5,fp
210c4fd8:	10c78b00 	call	210c78b0 <_Bfree>
210c4fdc:	d8c00517 	ldw	r3,20(sp)
210c4fe0:	d9002317 	ldw	r4,140(sp)
210c4fe4:	d9802517 	ldw	r6,148(sp)
210c4fe8:	b8000005 	stb	zero,0(r23)
210c4fec:	18800044 	addi	r2,r3,1
210c4ff0:	20800015 	stw	r2,0(r4)
210c4ff4:	30027226 	beq	r6,zero,210c59c0 <_dtoa_r+0x10a8>
210c4ff8:	35c00015 	stw	r23,0(r6)
210c4ffc:	d8800717 	ldw	r2,28(sp)
210c5000:	003e7406 	br	210c49d4 <__flash_rwdata_start+0xffff30dc>
210c5004:	00800434 	movhi	r2,16
210c5008:	10bfffc4 	addi	r2,r2,-1
210c500c:	a8aa703a 	and	r21,r21,r2
210c5010:	a83e801e 	bne	r21,zero,210c4a14 <__flash_rwdata_start+0xffff311c>
210c5014:	00840034 	movhi	r2,4096
210c5018:	10808904 	addi	r2,r2,548
210c501c:	003e7f06 	br	210c4a1c <__flash_rwdata_start+0xffff3124>
210c5020:	10c00204 	addi	r3,r2,8
210c5024:	003e8206 	br	210c4a30 <__flash_rwdata_start+0xffff3138>
210c5028:	01400434 	movhi	r5,16
210c502c:	297fffc4 	addi	r5,r5,-1
210c5030:	994a703a 	and	r5,r19,r5
210c5034:	9009883a 	mov	r4,r18
210c5038:	8c7f0044 	addi	r17,r17,-1023
210c503c:	294ffc34 	orhi	r5,r5,16368
210c5040:	dd000217 	ldw	r20,8(sp)
210c5044:	d8000f15 	stw	zero,60(sp)
210c5048:	003e9f06 	br	210c4ac8 <__flash_rwdata_start+0xffff31d0>
210c504c:	00840034 	movhi	r2,4096
210c5050:	10808004 	addi	r2,r2,512
210c5054:	003e5f06 	br	210c49d4 <__flash_rwdata_start+0xffff30dc>
210c5058:	80001115 	stw	zero,68(r16)
210c505c:	8009883a 	mov	r4,r16
210c5060:	000b883a 	mov	r5,zero
210c5064:	10c78080 	call	210c7808 <_Balloc>
210c5068:	01bfffc4 	movi	r6,-1
210c506c:	d8800715 	stw	r2,28(sp)
210c5070:	80801015 	stw	r2,64(r16)
210c5074:	00800044 	movi	r2,1
210c5078:	d9800c15 	stw	r6,48(sp)
210c507c:	d8800b15 	stw	r2,44(sp)
210c5080:	d9800615 	stw	r6,24(sp)
210c5084:	d8002215 	stw	zero,136(sp)
210c5088:	d8000315 	stw	zero,12(sp)
210c508c:	d8800117 	ldw	r2,4(sp)
210c5090:	10008e16 	blt	r2,zero,210c52cc <_dtoa_r+0x9b4>
210c5094:	d9000517 	ldw	r4,20(sp)
210c5098:	00c00384 	movi	r3,14
210c509c:	19008b16 	blt	r3,r4,210c52cc <_dtoa_r+0x9b4>
210c50a0:	200490fa 	slli	r2,r4,3
210c50a4:	00c40034 	movhi	r3,4096
210c50a8:	d9802217 	ldw	r6,136(sp)
210c50ac:	18c0a704 	addi	r3,r3,668
210c50b0:	1885883a 	add	r2,r3,r2
210c50b4:	14400017 	ldw	r17,0(r2)
210c50b8:	15000117 	ldw	r20,4(r2)
210c50bc:	3001c716 	blt	r6,zero,210c57dc <_dtoa_r+0xec4>
210c50c0:	880d883a 	mov	r6,r17
210c50c4:	a00f883a 	mov	r7,r20
210c50c8:	9009883a 	mov	r4,r18
210c50cc:	980b883a 	mov	r5,r19
210c50d0:	10cc3a40 	call	210cc3a4 <__divdf3>
210c50d4:	180b883a 	mov	r5,r3
210c50d8:	1009883a 	mov	r4,r2
210c50dc:	10cdea80 	call	210cdea8 <__fixdfsi>
210c50e0:	1009883a 	mov	r4,r2
210c50e4:	102d883a 	mov	r22,r2
210c50e8:	10cdf300 	call	210cdf30 <__floatsidf>
210c50ec:	1009883a 	mov	r4,r2
210c50f0:	180b883a 	mov	r5,r3
210c50f4:	880d883a 	mov	r6,r17
210c50f8:	a00f883a 	mov	r7,r20
210c50fc:	10cceb40 	call	210cceb4 <__muldf3>
210c5100:	9009883a 	mov	r4,r18
210c5104:	980b883a 	mov	r5,r19
210c5108:	100d883a 	mov	r6,r2
210c510c:	180f883a 	mov	r7,r3
210c5110:	10cd5d80 	call	210cd5d8 <__subdf3>
210c5114:	d9000717 	ldw	r4,28(sp)
210c5118:	d9800617 	ldw	r6,24(sp)
210c511c:	180b883a 	mov	r5,r3
210c5120:	b0c00c04 	addi	r3,r22,48
210c5124:	20c00005 	stb	r3,0(r4)
210c5128:	25c00044 	addi	r23,r4,1
210c512c:	01000044 	movi	r4,1
210c5130:	1011883a 	mov	r8,r2
210c5134:	2807883a 	mov	r3,r5
210c5138:	31003d26 	beq	r6,r4,210c5230 <_dtoa_r+0x918>
210c513c:	000d883a 	mov	r6,zero
210c5140:	01d00934 	movhi	r7,16420
210c5144:	1009883a 	mov	r4,r2
210c5148:	10cceb40 	call	210cceb4 <__muldf3>
210c514c:	1009883a 	mov	r4,r2
210c5150:	180b883a 	mov	r5,r3
210c5154:	000d883a 	mov	r6,zero
210c5158:	000f883a 	mov	r7,zero
210c515c:	1027883a 	mov	r19,r2
210c5160:	182b883a 	mov	r21,r3
210c5164:	10ccc700 	call	210ccc70 <__eqdf2>
210c5168:	103f9926 	beq	r2,zero,210c4fd0 <__flash_rwdata_start+0xffff36d8>
210c516c:	d8c00617 	ldw	r3,24(sp)
210c5170:	d9000717 	ldw	r4,28(sp)
210c5174:	b825883a 	mov	r18,r23
210c5178:	18bfffc4 	addi	r2,r3,-1
210c517c:	20ad883a 	add	r22,r4,r2
210c5180:	dc000315 	stw	r16,12(sp)
210c5184:	00000a06 	br	210c51b0 <_dtoa_r+0x898>
210c5188:	10cceb40 	call	210cceb4 <__muldf3>
210c518c:	1009883a 	mov	r4,r2
210c5190:	180b883a 	mov	r5,r3
210c5194:	000d883a 	mov	r6,zero
210c5198:	000f883a 	mov	r7,zero
210c519c:	1027883a 	mov	r19,r2
210c51a0:	182b883a 	mov	r21,r3
210c51a4:	b825883a 	mov	r18,r23
210c51a8:	10ccc700 	call	210ccc70 <__eqdf2>
210c51ac:	10022626 	beq	r2,zero,210c5a48 <_dtoa_r+0x1130>
210c51b0:	880d883a 	mov	r6,r17
210c51b4:	a00f883a 	mov	r7,r20
210c51b8:	9809883a 	mov	r4,r19
210c51bc:	a80b883a 	mov	r5,r21
210c51c0:	10cc3a40 	call	210cc3a4 <__divdf3>
210c51c4:	180b883a 	mov	r5,r3
210c51c8:	1009883a 	mov	r4,r2
210c51cc:	10cdea80 	call	210cdea8 <__fixdfsi>
210c51d0:	1009883a 	mov	r4,r2
210c51d4:	1021883a 	mov	r16,r2
210c51d8:	10cdf300 	call	210cdf30 <__floatsidf>
210c51dc:	1009883a 	mov	r4,r2
210c51e0:	180b883a 	mov	r5,r3
210c51e4:	880d883a 	mov	r6,r17
210c51e8:	a00f883a 	mov	r7,r20
210c51ec:	10cceb40 	call	210cceb4 <__muldf3>
210c51f0:	9809883a 	mov	r4,r19
210c51f4:	a80b883a 	mov	r5,r21
210c51f8:	100d883a 	mov	r6,r2
210c51fc:	180f883a 	mov	r7,r3
210c5200:	10cd5d80 	call	210cd5d8 <__subdf3>
210c5204:	82000c04 	addi	r8,r16,48
210c5208:	92000005 	stb	r8,0(r18)
210c520c:	1009883a 	mov	r4,r2
210c5210:	180b883a 	mov	r5,r3
210c5214:	000d883a 	mov	r6,zero
210c5218:	01d00934 	movhi	r7,16420
210c521c:	1011883a 	mov	r8,r2
210c5220:	bdc00044 	addi	r23,r23,1
210c5224:	95bfd81e 	bne	r18,r22,210c5188 <__flash_rwdata_start+0xffff3890>
210c5228:	802d883a 	mov	r22,r16
210c522c:	dc000317 	ldw	r16,12(sp)
210c5230:	4009883a 	mov	r4,r8
210c5234:	180b883a 	mov	r5,r3
210c5238:	400d883a 	mov	r6,r8
210c523c:	180f883a 	mov	r7,r3
210c5240:	10cbb080 	call	210cbb08 <__adddf3>
210c5244:	8809883a 	mov	r4,r17
210c5248:	a00b883a 	mov	r5,r20
210c524c:	100d883a 	mov	r6,r2
210c5250:	180f883a 	mov	r7,r3
210c5254:	1027883a 	mov	r19,r2
210c5258:	1825883a 	mov	r18,r3
210c525c:	10ccdd40 	call	210ccdd4 <__ledf2>
210c5260:	10000816 	blt	r2,zero,210c5284 <_dtoa_r+0x96c>
210c5264:	8809883a 	mov	r4,r17
210c5268:	a00b883a 	mov	r5,r20
210c526c:	980d883a 	mov	r6,r19
210c5270:	900f883a 	mov	r7,r18
210c5274:	10ccc700 	call	210ccc70 <__eqdf2>
210c5278:	103f551e 	bne	r2,zero,210c4fd0 <__flash_rwdata_start+0xffff36d8>
210c527c:	b580004c 	andi	r22,r22,1
210c5280:	b03f5326 	beq	r22,zero,210c4fd0 <__flash_rwdata_start+0xffff36d8>
210c5284:	bd7fffc3 	ldbu	r21,-1(r23)
210c5288:	b8bfffc4 	addi	r2,r23,-1
210c528c:	1007883a 	mov	r3,r2
210c5290:	01400e44 	movi	r5,57
210c5294:	d9800717 	ldw	r6,28(sp)
210c5298:	00000506 	br	210c52b0 <_dtoa_r+0x998>
210c529c:	18ffffc4 	addi	r3,r3,-1
210c52a0:	30825e26 	beq	r6,r2,210c5c1c <_dtoa_r+0x1304>
210c52a4:	1d400003 	ldbu	r21,0(r3)
210c52a8:	102f883a 	mov	r23,r2
210c52ac:	10bfffc4 	addi	r2,r2,-1
210c52b0:	a9003fcc 	andi	r4,r21,255
210c52b4:	2100201c 	xori	r4,r4,128
210c52b8:	213fe004 	addi	r4,r4,-128
210c52bc:	217ff726 	beq	r4,r5,210c529c <__flash_rwdata_start+0xffff39a4>
210c52c0:	aa000044 	addi	r8,r21,1
210c52c4:	12000005 	stb	r8,0(r2)
210c52c8:	003f4106 	br	210c4fd0 <__flash_rwdata_start+0xffff36d8>
210c52cc:	d8c00b17 	ldw	r3,44(sp)
210c52d0:	18006726 	beq	r3,zero,210c5470 <_dtoa_r+0xb58>
210c52d4:	d9000317 	ldw	r4,12(sp)
210c52d8:	00c00044 	movi	r3,1
210c52dc:	19016a0e 	bge	r3,r4,210c5888 <_dtoa_r+0xf70>
210c52e0:	d8800617 	ldw	r2,24(sp)
210c52e4:	d8c00917 	ldw	r3,36(sp)
210c52e8:	157fffc4 	addi	r21,r2,-1
210c52ec:	1d420716 	blt	r3,r21,210c5b0c <_dtoa_r+0x11f4>
210c52f0:	1d6bc83a 	sub	r21,r3,r21
210c52f4:	d8800617 	ldw	r2,24(sp)
210c52f8:	1002c716 	blt	r2,zero,210c5e18 <_dtoa_r+0x1500>
210c52fc:	dd000817 	ldw	r20,32(sp)
210c5300:	d8800617 	ldw	r2,24(sp)
210c5304:	d9800817 	ldw	r6,32(sp)
210c5308:	8009883a 	mov	r4,r16
210c530c:	01400044 	movi	r5,1
210c5310:	308d883a 	add	r6,r6,r2
210c5314:	d9800815 	stw	r6,32(sp)
210c5318:	b0ad883a 	add	r22,r22,r2
210c531c:	10c7c140 	call	210c7c14 <__i2b>
210c5320:	1023883a 	mov	r17,r2
210c5324:	a0000826 	beq	r20,zero,210c5348 <_dtoa_r+0xa30>
210c5328:	0580070e 	bge	zero,r22,210c5348 <_dtoa_r+0xa30>
210c532c:	b005883a 	mov	r2,r22
210c5330:	a5812016 	blt	r20,r22,210c57b4 <_dtoa_r+0xe9c>
210c5334:	d8c00817 	ldw	r3,32(sp)
210c5338:	a0a9c83a 	sub	r20,r20,r2
210c533c:	b0adc83a 	sub	r22,r22,r2
210c5340:	1887c83a 	sub	r3,r3,r2
210c5344:	d8c00815 	stw	r3,32(sp)
210c5348:	d9000917 	ldw	r4,36(sp)
210c534c:	0100140e 	bge	zero,r4,210c53a0 <_dtoa_r+0xa88>
210c5350:	d9800b17 	ldw	r6,44(sp)
210c5354:	3001e526 	beq	r6,zero,210c5aec <_dtoa_r+0x11d4>
210c5358:	05400e0e 	bge	zero,r21,210c5394 <_dtoa_r+0xa7c>
210c535c:	880b883a 	mov	r5,r17
210c5360:	8009883a 	mov	r4,r16
210c5364:	a80d883a 	mov	r6,r21
210c5368:	10c7e4c0 	call	210c7e4c <__pow5mult>
210c536c:	e00d883a 	mov	r6,fp
210c5370:	8009883a 	mov	r4,r16
210c5374:	100b883a 	mov	r5,r2
210c5378:	1023883a 	mov	r17,r2
210c537c:	10c7c500 	call	210c7c50 <__multiply>
210c5380:	102f883a 	mov	r23,r2
210c5384:	e00b883a 	mov	r5,fp
210c5388:	8009883a 	mov	r4,r16
210c538c:	10c78b00 	call	210c78b0 <_Bfree>
210c5390:	b839883a 	mov	fp,r23
210c5394:	d8800917 	ldw	r2,36(sp)
210c5398:	154dc83a 	sub	r6,r2,r21
210c539c:	3001281e 	bne	r6,zero,210c5840 <_dtoa_r+0xf28>
210c53a0:	05c00044 	movi	r23,1
210c53a4:	8009883a 	mov	r4,r16
210c53a8:	b80b883a 	mov	r5,r23
210c53ac:	10c7c140 	call	210c7c14 <__i2b>
210c53b0:	d8c00a17 	ldw	r3,40(sp)
210c53b4:	102b883a 	mov	r21,r2
210c53b8:	00c0310e 	bge	zero,r3,210c5480 <_dtoa_r+0xb68>
210c53bc:	8009883a 	mov	r4,r16
210c53c0:	100b883a 	mov	r5,r2
210c53c4:	180d883a 	mov	r6,r3
210c53c8:	10c7e4c0 	call	210c7e4c <__pow5mult>
210c53cc:	d9000317 	ldw	r4,12(sp)
210c53d0:	102b883a 	mov	r21,r2
210c53d4:	b9011f0e 	bge	r23,r4,210c5854 <_dtoa_r+0xf3c>
210c53d8:	0027883a 	mov	r19,zero
210c53dc:	a8800417 	ldw	r2,16(r21)
210c53e0:	10800104 	addi	r2,r2,4
210c53e4:	1085883a 	add	r2,r2,r2
210c53e8:	1085883a 	add	r2,r2,r2
210c53ec:	a885883a 	add	r2,r21,r2
210c53f0:	11000017 	ldw	r4,0(r2)
210c53f4:	10c7afc0 	call	210c7afc <__hi0bits>
210c53f8:	00c00804 	movi	r3,32
210c53fc:	1885c83a 	sub	r2,r3,r2
210c5400:	00002506 	br	210c5498 <_dtoa_r+0xb80>
210c5404:	01800044 	movi	r6,1
210c5408:	d9800d15 	stw	r6,52(sp)
210c540c:	003dec06 	br	210c4bc0 <__flash_rwdata_start+0xffff32c8>
210c5410:	d8c00817 	ldw	r3,32(sp)
210c5414:	d9000517 	ldw	r4,20(sp)
210c5418:	d8000a15 	stw	zero,40(sp)
210c541c:	1907c83a 	sub	r3,r3,r4
210c5420:	010dc83a 	sub	r6,zero,r4
210c5424:	d8c00815 	stw	r3,32(sp)
210c5428:	d9800915 	stw	r6,36(sp)
210c542c:	003ded06 	br	210c4be4 <__flash_rwdata_start+0xffff32ec>
210c5430:	05adc83a 	sub	r22,zero,r22
210c5434:	dd800815 	stw	r22,32(sp)
210c5438:	002d883a 	mov	r22,zero
210c543c:	003de406 	br	210c4bd0 <__flash_rwdata_start+0xffff32d8>
210c5440:	d9000517 	ldw	r4,20(sp)
210c5444:	10cdf300 	call	210cdf30 <__floatsidf>
210c5448:	1009883a 	mov	r4,r2
210c544c:	180b883a 	mov	r5,r3
210c5450:	b00d883a 	mov	r6,r22
210c5454:	a80f883a 	mov	r7,r21
210c5458:	10ccc700 	call	210ccc70 <__eqdf2>
210c545c:	103dc726 	beq	r2,zero,210c4b7c <__flash_rwdata_start+0xffff3284>
210c5460:	d8800517 	ldw	r2,20(sp)
210c5464:	10bfffc4 	addi	r2,r2,-1
210c5468:	d8800515 	stw	r2,20(sp)
210c546c:	003dc306 	br	210c4b7c <__flash_rwdata_start+0xffff3284>
210c5470:	dd400917 	ldw	r21,36(sp)
210c5474:	dd000817 	ldw	r20,32(sp)
210c5478:	0023883a 	mov	r17,zero
210c547c:	003fa906 	br	210c5324 <__flash_rwdata_start+0xffff3a2c>
210c5480:	d9800317 	ldw	r6,12(sp)
210c5484:	b981670e 	bge	r23,r6,210c5a24 <_dtoa_r+0x110c>
210c5488:	0027883a 	mov	r19,zero
210c548c:	d8c00a17 	ldw	r3,40(sp)
210c5490:	183fd21e 	bne	r3,zero,210c53dc <__flash_rwdata_start+0xffff3ae4>
210c5494:	00800044 	movi	r2,1
210c5498:	1585883a 	add	r2,r2,r22
210c549c:	108007cc 	andi	r2,r2,31
210c54a0:	10005f26 	beq	r2,zero,210c5620 <_dtoa_r+0xd08>
210c54a4:	00c00804 	movi	r3,32
210c54a8:	1887c83a 	sub	r3,r3,r2
210c54ac:	01000104 	movi	r4,4
210c54b0:	20c2dd0e 	bge	r4,r3,210c6028 <_dtoa_r+0x1710>
210c54b4:	d9000817 	ldw	r4,32(sp)
210c54b8:	00c00704 	movi	r3,28
210c54bc:	1885c83a 	sub	r2,r3,r2
210c54c0:	2089883a 	add	r4,r4,r2
210c54c4:	d9000815 	stw	r4,32(sp)
210c54c8:	a0a9883a 	add	r20,r20,r2
210c54cc:	b0ad883a 	add	r22,r22,r2
210c54d0:	d8800817 	ldw	r2,32(sp)
210c54d4:	0080050e 	bge	zero,r2,210c54ec <_dtoa_r+0xbd4>
210c54d8:	e00b883a 	mov	r5,fp
210c54dc:	8009883a 	mov	r4,r16
210c54e0:	100d883a 	mov	r6,r2
210c54e4:	10c7f8c0 	call	210c7f8c <__lshift>
210c54e8:	1039883a 	mov	fp,r2
210c54ec:	0580050e 	bge	zero,r22,210c5504 <_dtoa_r+0xbec>
210c54f0:	a80b883a 	mov	r5,r21
210c54f4:	8009883a 	mov	r4,r16
210c54f8:	b00d883a 	mov	r6,r22
210c54fc:	10c7f8c0 	call	210c7f8c <__lshift>
210c5500:	102b883a 	mov	r21,r2
210c5504:	d8c00d17 	ldw	r3,52(sp)
210c5508:	1801161e 	bne	r3,zero,210c5964 <_dtoa_r+0x104c>
210c550c:	d8c00617 	ldw	r3,24(sp)
210c5510:	00c12d0e 	bge	zero,r3,210c59c8 <_dtoa_r+0x10b0>
210c5514:	d8c00b17 	ldw	r3,44(sp)
210c5518:	1800571e 	bne	r3,zero,210c5678 <_dtoa_r+0xd60>
210c551c:	dc800717 	ldw	r18,28(sp)
210c5520:	dcc00617 	ldw	r19,24(sp)
210c5524:	9029883a 	mov	r20,r18
210c5528:	00000206 	br	210c5534 <_dtoa_r+0xc1c>
210c552c:	10c78d80 	call	210c78d8 <__multadd>
210c5530:	1039883a 	mov	fp,r2
210c5534:	e009883a 	mov	r4,fp
210c5538:	a80b883a 	mov	r5,r21
210c553c:	10c47180 	call	210c4718 <quorem>
210c5540:	10800c04 	addi	r2,r2,48
210c5544:	90800005 	stb	r2,0(r18)
210c5548:	94800044 	addi	r18,r18,1
210c554c:	9507c83a 	sub	r3,r18,r20
210c5550:	8009883a 	mov	r4,r16
210c5554:	e00b883a 	mov	r5,fp
210c5558:	01800284 	movi	r6,10
210c555c:	000f883a 	mov	r7,zero
210c5560:	1cfff216 	blt	r3,r19,210c552c <__flash_rwdata_start+0xffff3c34>
210c5564:	1011883a 	mov	r8,r2
210c5568:	d8800617 	ldw	r2,24(sp)
210c556c:	00822e0e 	bge	zero,r2,210c5e28 <_dtoa_r+0x1510>
210c5570:	d9000717 	ldw	r4,28(sp)
210c5574:	0025883a 	mov	r18,zero
210c5578:	20af883a 	add	r23,r4,r2
210c557c:	e00b883a 	mov	r5,fp
210c5580:	01800044 	movi	r6,1
210c5584:	8009883a 	mov	r4,r16
210c5588:	da001715 	stw	r8,92(sp)
210c558c:	10c7f8c0 	call	210c7f8c <__lshift>
210c5590:	1009883a 	mov	r4,r2
210c5594:	a80b883a 	mov	r5,r21
210c5598:	1039883a 	mov	fp,r2
210c559c:	10c80dc0 	call	210c80dc <__mcmp>
210c55a0:	da001717 	ldw	r8,92(sp)
210c55a4:	00816e0e 	bge	zero,r2,210c5b60 <_dtoa_r+0x1248>
210c55a8:	b93fffc3 	ldbu	r4,-1(r23)
210c55ac:	b8bfffc4 	addi	r2,r23,-1
210c55b0:	1007883a 	mov	r3,r2
210c55b4:	01800e44 	movi	r6,57
210c55b8:	d9c00717 	ldw	r7,28(sp)
210c55bc:	00000506 	br	210c55d4 <_dtoa_r+0xcbc>
210c55c0:	18ffffc4 	addi	r3,r3,-1
210c55c4:	38811926 	beq	r7,r2,210c5a2c <_dtoa_r+0x1114>
210c55c8:	19000003 	ldbu	r4,0(r3)
210c55cc:	102f883a 	mov	r23,r2
210c55d0:	10bfffc4 	addi	r2,r2,-1
210c55d4:	21403fcc 	andi	r5,r4,255
210c55d8:	2940201c 	xori	r5,r5,128
210c55dc:	297fe004 	addi	r5,r5,-128
210c55e0:	29bff726 	beq	r5,r6,210c55c0 <__flash_rwdata_start+0xffff3cc8>
210c55e4:	21000044 	addi	r4,r4,1
210c55e8:	11000005 	stb	r4,0(r2)
210c55ec:	8009883a 	mov	r4,r16
210c55f0:	a80b883a 	mov	r5,r21
210c55f4:	10c78b00 	call	210c78b0 <_Bfree>
210c55f8:	883e7526 	beq	r17,zero,210c4fd0 <__flash_rwdata_start+0xffff36d8>
210c55fc:	90000426 	beq	r18,zero,210c5610 <_dtoa_r+0xcf8>
210c5600:	94400326 	beq	r18,r17,210c5610 <_dtoa_r+0xcf8>
210c5604:	8009883a 	mov	r4,r16
210c5608:	900b883a 	mov	r5,r18
210c560c:	10c78b00 	call	210c78b0 <_Bfree>
210c5610:	8009883a 	mov	r4,r16
210c5614:	880b883a 	mov	r5,r17
210c5618:	10c78b00 	call	210c78b0 <_Bfree>
210c561c:	003e6c06 	br	210c4fd0 <__flash_rwdata_start+0xffff36d8>
210c5620:	00800704 	movi	r2,28
210c5624:	d9800817 	ldw	r6,32(sp)
210c5628:	a0a9883a 	add	r20,r20,r2
210c562c:	b0ad883a 	add	r22,r22,r2
210c5630:	308d883a 	add	r6,r6,r2
210c5634:	d9800815 	stw	r6,32(sp)
210c5638:	003fa506 	br	210c54d0 <__flash_rwdata_start+0xffff3bd8>
210c563c:	013efb84 	movi	r4,-1042
210c5640:	246bc83a 	sub	r21,r4,r17
210c5644:	9548983a 	sll	r4,r18,r21
210c5648:	003d1806 	br	210c4aac <__flash_rwdata_start+0xffff31b4>
210c564c:	d8000d15 	stw	zero,52(sp)
210c5650:	003d5b06 	br	210c4bc0 <__flash_rwdata_start+0xffff32c8>
210c5654:	880b883a 	mov	r5,r17
210c5658:	8009883a 	mov	r4,r16
210c565c:	01800284 	movi	r6,10
210c5660:	000f883a 	mov	r7,zero
210c5664:	10c78d80 	call	210c78d8 <__multadd>
210c5668:	1023883a 	mov	r17,r2
210c566c:	d8800c17 	ldw	r2,48(sp)
210c5670:	0082550e 	bge	zero,r2,210c5fc8 <_dtoa_r+0x16b0>
210c5674:	d8800615 	stw	r2,24(sp)
210c5678:	0500050e 	bge	zero,r20,210c5690 <_dtoa_r+0xd78>
210c567c:	880b883a 	mov	r5,r17
210c5680:	8009883a 	mov	r4,r16
210c5684:	a00d883a 	mov	r6,r20
210c5688:	10c7f8c0 	call	210c7f8c <__lshift>
210c568c:	1023883a 	mov	r17,r2
210c5690:	98016a1e 	bne	r19,zero,210c5c3c <_dtoa_r+0x1324>
210c5694:	8829883a 	mov	r20,r17
210c5698:	d9000617 	ldw	r4,24(sp)
210c569c:	dcc00717 	ldw	r19,28(sp)
210c56a0:	9480004c 	andi	r18,r18,1
210c56a4:	20bfffc4 	addi	r2,r4,-1
210c56a8:	9885883a 	add	r2,r19,r2
210c56ac:	d8800415 	stw	r2,16(sp)
210c56b0:	dc800615 	stw	r18,24(sp)
210c56b4:	e009883a 	mov	r4,fp
210c56b8:	a80b883a 	mov	r5,r21
210c56bc:	10c47180 	call	210c4718 <quorem>
210c56c0:	e009883a 	mov	r4,fp
210c56c4:	880b883a 	mov	r5,r17
210c56c8:	102f883a 	mov	r23,r2
210c56cc:	10c80dc0 	call	210c80dc <__mcmp>
210c56d0:	8009883a 	mov	r4,r16
210c56d4:	a80b883a 	mov	r5,r21
210c56d8:	a00d883a 	mov	r6,r20
210c56dc:	102d883a 	mov	r22,r2
210c56e0:	10c813c0 	call	210c813c <__mdiff>
210c56e4:	1007883a 	mov	r3,r2
210c56e8:	10800317 	ldw	r2,12(r2)
210c56ec:	bc800c04 	addi	r18,r23,48
210c56f0:	1000971e 	bne	r2,zero,210c5950 <_dtoa_r+0x1038>
210c56f4:	180b883a 	mov	r5,r3
210c56f8:	e009883a 	mov	r4,fp
210c56fc:	d8c01515 	stw	r3,84(sp)
210c5700:	10c80dc0 	call	210c80dc <__mcmp>
210c5704:	d8c01517 	ldw	r3,84(sp)
210c5708:	8009883a 	mov	r4,r16
210c570c:	d8801515 	stw	r2,84(sp)
210c5710:	180b883a 	mov	r5,r3
210c5714:	10c78b00 	call	210c78b0 <_Bfree>
210c5718:	d8801517 	ldw	r2,84(sp)
210c571c:	1000041e 	bne	r2,zero,210c5730 <_dtoa_r+0xe18>
210c5720:	d9800317 	ldw	r6,12(sp)
210c5724:	3000021e 	bne	r6,zero,210c5730 <_dtoa_r+0xe18>
210c5728:	d8c00617 	ldw	r3,24(sp)
210c572c:	18007626 	beq	r3,zero,210c5908 <_dtoa_r+0xff0>
210c5730:	b0005b16 	blt	r22,zero,210c58a0 <_dtoa_r+0xf88>
210c5734:	b000041e 	bne	r22,zero,210c5748 <_dtoa_r+0xe30>
210c5738:	d9000317 	ldw	r4,12(sp)
210c573c:	2000021e 	bne	r4,zero,210c5748 <_dtoa_r+0xe30>
210c5740:	d8c00617 	ldw	r3,24(sp)
210c5744:	18005626 	beq	r3,zero,210c58a0 <_dtoa_r+0xf88>
210c5748:	00814d16 	blt	zero,r2,210c5c80 <_dtoa_r+0x1368>
210c574c:	d8c00417 	ldw	r3,16(sp)
210c5750:	9d800044 	addi	r22,r19,1
210c5754:	9c800005 	stb	r18,0(r19)
210c5758:	b02f883a 	mov	r23,r22
210c575c:	98c14c26 	beq	r19,r3,210c5c90 <_dtoa_r+0x1378>
210c5760:	e00b883a 	mov	r5,fp
210c5764:	8009883a 	mov	r4,r16
210c5768:	01800284 	movi	r6,10
210c576c:	000f883a 	mov	r7,zero
210c5770:	10c78d80 	call	210c78d8 <__multadd>
210c5774:	1039883a 	mov	fp,r2
210c5778:	8d006d26 	beq	r17,r20,210c5930 <_dtoa_r+0x1018>
210c577c:	880b883a 	mov	r5,r17
210c5780:	01800284 	movi	r6,10
210c5784:	000f883a 	mov	r7,zero
210c5788:	8009883a 	mov	r4,r16
210c578c:	10c78d80 	call	210c78d8 <__multadd>
210c5790:	a00b883a 	mov	r5,r20
210c5794:	8009883a 	mov	r4,r16
210c5798:	01800284 	movi	r6,10
210c579c:	000f883a 	mov	r7,zero
210c57a0:	1023883a 	mov	r17,r2
210c57a4:	10c78d80 	call	210c78d8 <__multadd>
210c57a8:	1029883a 	mov	r20,r2
210c57ac:	b027883a 	mov	r19,r22
210c57b0:	003fc006 	br	210c56b4 <__flash_rwdata_start+0xffff3dbc>
210c57b4:	a005883a 	mov	r2,r20
210c57b8:	003ede06 	br	210c5334 <__flash_rwdata_start+0xffff3a3c>
210c57bc:	01000044 	movi	r4,1
210c57c0:	d9000b15 	stw	r4,44(sp)
210c57c4:	d9802217 	ldw	r6,136(sp)
210c57c8:	0180dc0e 	bge	zero,r6,210c5b3c <_dtoa_r+0x1224>
210c57cc:	3023883a 	mov	r17,r6
210c57d0:	d9800c15 	stw	r6,48(sp)
210c57d4:	d9800615 	stw	r6,24(sp)
210c57d8:	003d1e06 	br	210c4c54 <__flash_rwdata_start+0xffff335c>
210c57dc:	d8800617 	ldw	r2,24(sp)
210c57e0:	00be3716 	blt	zero,r2,210c50c0 <__flash_rwdata_start+0xffff37c8>
210c57e4:	1000be1e 	bne	r2,zero,210c5ae0 <_dtoa_r+0x11c8>
210c57e8:	8809883a 	mov	r4,r17
210c57ec:	a00b883a 	mov	r5,r20
210c57f0:	000d883a 	mov	r6,zero
210c57f4:	01d00534 	movhi	r7,16404
210c57f8:	10cceb40 	call	210cceb4 <__muldf3>
210c57fc:	1009883a 	mov	r4,r2
210c5800:	180b883a 	mov	r5,r3
210c5804:	900d883a 	mov	r6,r18
210c5808:	980f883a 	mov	r7,r19
210c580c:	10cccf40 	call	210cccf4 <__gedf2>
210c5810:	002b883a 	mov	r21,zero
210c5814:	0023883a 	mov	r17,zero
210c5818:	10007a16 	blt	r2,zero,210c5a04 <_dtoa_r+0x10ec>
210c581c:	d9002217 	ldw	r4,136(sp)
210c5820:	ddc00717 	ldw	r23,28(sp)
210c5824:	0108303a 	nor	r4,zero,r4
210c5828:	d9000515 	stw	r4,20(sp)
210c582c:	8009883a 	mov	r4,r16
210c5830:	a80b883a 	mov	r5,r21
210c5834:	10c78b00 	call	210c78b0 <_Bfree>
210c5838:	883f751e 	bne	r17,zero,210c5610 <__flash_rwdata_start+0xffff3d18>
210c583c:	003de406 	br	210c4fd0 <__flash_rwdata_start+0xffff36d8>
210c5840:	e00b883a 	mov	r5,fp
210c5844:	8009883a 	mov	r4,r16
210c5848:	10c7e4c0 	call	210c7e4c <__pow5mult>
210c584c:	1039883a 	mov	fp,r2
210c5850:	003ed306 	br	210c53a0 <__flash_rwdata_start+0xffff3aa8>
210c5854:	903ee01e 	bne	r18,zero,210c53d8 <__flash_rwdata_start+0xffff3ae0>
210c5858:	00800434 	movhi	r2,16
210c585c:	10bfffc4 	addi	r2,r2,-1
210c5860:	9884703a 	and	r2,r19,r2
210c5864:	103f081e 	bne	r2,zero,210c5488 <__flash_rwdata_start+0xffff3b90>
210c5868:	9cdffc2c 	andhi	r19,r19,32752
210c586c:	983f0626 	beq	r19,zero,210c5488 <__flash_rwdata_start+0xffff3b90>
210c5870:	d8800817 	ldw	r2,32(sp)
210c5874:	b5800044 	addi	r22,r22,1
210c5878:	04c00044 	movi	r19,1
210c587c:	10800044 	addi	r2,r2,1
210c5880:	d8800815 	stw	r2,32(sp)
210c5884:	003f0106 	br	210c548c <__flash_rwdata_start+0xffff3b94>
210c5888:	d9800f17 	ldw	r6,60(sp)
210c588c:	30016826 	beq	r6,zero,210c5e30 <_dtoa_r+0x1518>
210c5890:	10810cc4 	addi	r2,r2,1075
210c5894:	dd400917 	ldw	r21,36(sp)
210c5898:	dd000817 	ldw	r20,32(sp)
210c589c:	003e9906 	br	210c5304 <__flash_rwdata_start+0xffff3a0c>
210c58a0:	9011883a 	mov	r8,r18
210c58a4:	4007883a 	mov	r3,r8
210c58a8:	e02d883a 	mov	r22,fp
210c58ac:	0080100e 	bge	zero,r2,210c58f0 <_dtoa_r+0xfd8>
210c58b0:	01800044 	movi	r6,1
210c58b4:	8009883a 	mov	r4,r16
210c58b8:	e00b883a 	mov	r5,fp
210c58bc:	da001515 	stw	r8,84(sp)
210c58c0:	da001715 	stw	r8,92(sp)
210c58c4:	10c7f8c0 	call	210c7f8c <__lshift>
210c58c8:	1009883a 	mov	r4,r2
210c58cc:	a80b883a 	mov	r5,r21
210c58d0:	102d883a 	mov	r22,r2
210c58d4:	10c80dc0 	call	210c80dc <__mcmp>
210c58d8:	d8c01517 	ldw	r3,84(sp)
210c58dc:	da001717 	ldw	r8,92(sp)
210c58e0:	0081a50e 	bge	zero,r2,210c5f78 <_dtoa_r+0x1660>
210c58e4:	00800e44 	movi	r2,57
210c58e8:	40817b26 	beq	r8,r2,210c5ed8 <_dtoa_r+0x15c0>
210c58ec:	40c00044 	addi	r3,r8,1
210c58f0:	8825883a 	mov	r18,r17
210c58f4:	9dc00044 	addi	r23,r19,1
210c58f8:	98c00005 	stb	r3,0(r19)
210c58fc:	a023883a 	mov	r17,r20
210c5900:	b039883a 	mov	fp,r22
210c5904:	003f3906 	br	210c55ec <__flash_rwdata_start+0xffff3cf4>
210c5908:	00800e44 	movi	r2,57
210c590c:	9011883a 	mov	r8,r18
210c5910:	90817226 	beq	r18,r2,210c5edc <_dtoa_r+0x15c4>
210c5914:	0580010e 	bge	zero,r22,210c591c <_dtoa_r+0x1004>
210c5918:	ba000c44 	addi	r8,r23,49
210c591c:	8825883a 	mov	r18,r17
210c5920:	9dc00044 	addi	r23,r19,1
210c5924:	9a000005 	stb	r8,0(r19)
210c5928:	a023883a 	mov	r17,r20
210c592c:	003f2f06 	br	210c55ec <__flash_rwdata_start+0xffff3cf4>
210c5930:	880b883a 	mov	r5,r17
210c5934:	8009883a 	mov	r4,r16
210c5938:	01800284 	movi	r6,10
210c593c:	000f883a 	mov	r7,zero
210c5940:	10c78d80 	call	210c78d8 <__multadd>
210c5944:	1023883a 	mov	r17,r2
210c5948:	1029883a 	mov	r20,r2
210c594c:	003f9706 	br	210c57ac <__flash_rwdata_start+0xffff3eb4>
210c5950:	8009883a 	mov	r4,r16
210c5954:	180b883a 	mov	r5,r3
210c5958:	10c78b00 	call	210c78b0 <_Bfree>
210c595c:	00800044 	movi	r2,1
210c5960:	003f7306 	br	210c5730 <__flash_rwdata_start+0xffff3e38>
210c5964:	e009883a 	mov	r4,fp
210c5968:	a80b883a 	mov	r5,r21
210c596c:	10c80dc0 	call	210c80dc <__mcmp>
210c5970:	103ee60e 	bge	r2,zero,210c550c <__flash_rwdata_start+0xffff3c14>
210c5974:	8009883a 	mov	r4,r16
210c5978:	e00b883a 	mov	r5,fp
210c597c:	01800284 	movi	r6,10
210c5980:	000f883a 	mov	r7,zero
210c5984:	10c78d80 	call	210c78d8 <__multadd>
210c5988:	d9000517 	ldw	r4,20(sp)
210c598c:	d9800b17 	ldw	r6,44(sp)
210c5990:	1039883a 	mov	fp,r2
210c5994:	213fffc4 	addi	r4,r4,-1
210c5998:	d9000515 	stw	r4,20(sp)
210c599c:	303f2d1e 	bne	r6,zero,210c5654 <__flash_rwdata_start+0xffff3d5c>
210c59a0:	d9000c17 	ldw	r4,48(sp)
210c59a4:	0101780e 	bge	zero,r4,210c5f88 <_dtoa_r+0x1670>
210c59a8:	d9000615 	stw	r4,24(sp)
210c59ac:	003edb06 	br	210c551c <__flash_rwdata_start+0xffff3c24>
210c59b0:	00800084 	movi	r2,2
210c59b4:	30818e1e 	bne	r6,r2,210c5ff0 <_dtoa_r+0x16d8>
210c59b8:	d8000b15 	stw	zero,44(sp)
210c59bc:	003f8106 	br	210c57c4 <__flash_rwdata_start+0xffff3ecc>
210c59c0:	d8800717 	ldw	r2,28(sp)
210c59c4:	003c0306 	br	210c49d4 <__flash_rwdata_start+0xffff30dc>
210c59c8:	d9000317 	ldw	r4,12(sp)
210c59cc:	00800084 	movi	r2,2
210c59d0:	113ed00e 	bge	r2,r4,210c5514 <__flash_rwdata_start+0xffff3c1c>
210c59d4:	d8c00617 	ldw	r3,24(sp)
210c59d8:	183f901e 	bne	r3,zero,210c581c <__flash_rwdata_start+0xffff3f24>
210c59dc:	a80b883a 	mov	r5,r21
210c59e0:	8009883a 	mov	r4,r16
210c59e4:	01800144 	movi	r6,5
210c59e8:	000f883a 	mov	r7,zero
210c59ec:	10c78d80 	call	210c78d8 <__multadd>
210c59f0:	e009883a 	mov	r4,fp
210c59f4:	100b883a 	mov	r5,r2
210c59f8:	102b883a 	mov	r21,r2
210c59fc:	10c80dc0 	call	210c80dc <__mcmp>
210c5a00:	00bf860e 	bge	zero,r2,210c581c <__flash_rwdata_start+0xffff3f24>
210c5a04:	d9800717 	ldw	r6,28(sp)
210c5a08:	00800c44 	movi	r2,49
210c5a0c:	30800005 	stb	r2,0(r6)
210c5a10:	d8800517 	ldw	r2,20(sp)
210c5a14:	35c00044 	addi	r23,r6,1
210c5a18:	10800044 	addi	r2,r2,1
210c5a1c:	d8800515 	stw	r2,20(sp)
210c5a20:	003f8206 	br	210c582c <__flash_rwdata_start+0xffff3f34>
210c5a24:	903e981e 	bne	r18,zero,210c5488 <__flash_rwdata_start+0xffff3b90>
210c5a28:	003f8b06 	br	210c5858 <__flash_rwdata_start+0xffff3f60>
210c5a2c:	d9800517 	ldw	r6,20(sp)
210c5a30:	d8c00717 	ldw	r3,28(sp)
210c5a34:	00800c44 	movi	r2,49
210c5a38:	31800044 	addi	r6,r6,1
210c5a3c:	d9800515 	stw	r6,20(sp)
210c5a40:	18800005 	stb	r2,0(r3)
210c5a44:	003ee906 	br	210c55ec <__flash_rwdata_start+0xffff3cf4>
210c5a48:	dc000317 	ldw	r16,12(sp)
210c5a4c:	003d6006 	br	210c4fd0 <__flash_rwdata_start+0xffff36d8>
210c5a50:	8809883a 	mov	r4,r17
210c5a54:	10cdf300 	call	210cdf30 <__floatsidf>
210c5a58:	a009883a 	mov	r4,r20
210c5a5c:	a80b883a 	mov	r5,r21
210c5a60:	100d883a 	mov	r6,r2
210c5a64:	180f883a 	mov	r7,r3
210c5a68:	10cceb40 	call	210cceb4 <__muldf3>
210c5a6c:	1009883a 	mov	r4,r2
210c5a70:	180b883a 	mov	r5,r3
210c5a74:	000d883a 	mov	r6,zero
210c5a78:	01d00734 	movhi	r7,16412
210c5a7c:	10cbb080 	call	210cbb08 <__adddf3>
210c5a80:	1023883a 	mov	r17,r2
210c5a84:	00bf3034 	movhi	r2,64704
210c5a88:	1885883a 	add	r2,r3,r2
210c5a8c:	d8800e15 	stw	r2,56(sp)
210c5a90:	a009883a 	mov	r4,r20
210c5a94:	a80b883a 	mov	r5,r21
210c5a98:	000d883a 	mov	r6,zero
210c5a9c:	01d00534 	movhi	r7,16404
210c5aa0:	10cd5d80 	call	210cd5d8 <__subdf3>
210c5aa4:	d9c00e17 	ldw	r7,56(sp)
210c5aa8:	1009883a 	mov	r4,r2
210c5aac:	180b883a 	mov	r5,r3
210c5ab0:	880d883a 	mov	r6,r17
210c5ab4:	102b883a 	mov	r21,r2
210c5ab8:	1829883a 	mov	r20,r3
210c5abc:	10cccf40 	call	210cccf4 <__gedf2>
210c5ac0:	00807716 	blt	zero,r2,210c5ca0 <_dtoa_r+0x1388>
210c5ac4:	d8800e17 	ldw	r2,56(sp)
210c5ac8:	a809883a 	mov	r4,r21
210c5acc:	a00b883a 	mov	r5,r20
210c5ad0:	11e0003c 	xorhi	r7,r2,32768
210c5ad4:	880d883a 	mov	r6,r17
210c5ad8:	10ccdd40 	call	210ccdd4 <__ledf2>
210c5adc:	103d6b0e 	bge	r2,zero,210c508c <__flash_rwdata_start+0xffff3794>
210c5ae0:	002b883a 	mov	r21,zero
210c5ae4:	0023883a 	mov	r17,zero
210c5ae8:	003f4c06 	br	210c581c <__flash_rwdata_start+0xffff3f24>
210c5aec:	d9800917 	ldw	r6,36(sp)
210c5af0:	e00b883a 	mov	r5,fp
210c5af4:	8009883a 	mov	r4,r16
210c5af8:	10c7e4c0 	call	210c7e4c <__pow5mult>
210c5afc:	1039883a 	mov	fp,r2
210c5b00:	003e2706 	br	210c53a0 <__flash_rwdata_start+0xffff3aa8>
210c5b04:	d8000b15 	stw	zero,44(sp)
210c5b08:	003c4906 	br	210c4c30 <__flash_rwdata_start+0xffff3338>
210c5b0c:	d9000917 	ldw	r4,36(sp)
210c5b10:	d9800a17 	ldw	r6,40(sp)
210c5b14:	dd400915 	stw	r21,36(sp)
210c5b18:	a905c83a 	sub	r2,r21,r4
210c5b1c:	308d883a 	add	r6,r6,r2
210c5b20:	d9800a15 	stw	r6,40(sp)
210c5b24:	002b883a 	mov	r21,zero
210c5b28:	003df206 	br	210c52f4 <__flash_rwdata_start+0xffff39fc>
210c5b2c:	dc800e15 	stw	r18,56(sp)
210c5b30:	982b883a 	mov	r21,r19
210c5b34:	04400084 	movi	r17,2
210c5b38:	003c7406 	br	210c4d0c <__flash_rwdata_start+0xffff3414>
210c5b3c:	04400044 	movi	r17,1
210c5b40:	dc400c15 	stw	r17,48(sp)
210c5b44:	dc400615 	stw	r17,24(sp)
210c5b48:	dc402215 	stw	r17,136(sp)
210c5b4c:	80001115 	stw	zero,68(r16)
210c5b50:	000b883a 	mov	r5,zero
210c5b54:	003c4a06 	br	210c4c80 <__flash_rwdata_start+0xffff3388>
210c5b58:	3023883a 	mov	r17,r6
210c5b5c:	003ffb06 	br	210c5b4c <__flash_rwdata_start+0xffff4254>
210c5b60:	1000021e 	bne	r2,zero,210c5b6c <_dtoa_r+0x1254>
210c5b64:	4200004c 	andi	r8,r8,1
210c5b68:	403e8f1e 	bne	r8,zero,210c55a8 <__flash_rwdata_start+0xffff3cb0>
210c5b6c:	01000c04 	movi	r4,48
210c5b70:	00000106 	br	210c5b78 <_dtoa_r+0x1260>
210c5b74:	102f883a 	mov	r23,r2
210c5b78:	b8bfffc4 	addi	r2,r23,-1
210c5b7c:	10c00007 	ldb	r3,0(r2)
210c5b80:	193ffc26 	beq	r3,r4,210c5b74 <__flash_rwdata_start+0xffff427c>
210c5b84:	003e9906 	br	210c55ec <__flash_rwdata_start+0xffff3cf4>
210c5b88:	d9000517 	ldw	r4,20(sp)
210c5b8c:	012fc83a 	sub	r23,zero,r4
210c5b90:	b800ad26 	beq	r23,zero,210c5e48 <_dtoa_r+0x1530>
210c5b94:	b88003cc 	andi	r2,r23,15
210c5b98:	100490fa 	slli	r2,r2,3
210c5b9c:	00c40034 	movhi	r3,4096
210c5ba0:	18c0a704 	addi	r3,r3,668
210c5ba4:	1885883a 	add	r2,r3,r2
210c5ba8:	11800017 	ldw	r6,0(r2)
210c5bac:	11c00117 	ldw	r7,4(r2)
210c5bb0:	b82fd13a 	srai	r23,r23,4
210c5bb4:	9009883a 	mov	r4,r18
210c5bb8:	980b883a 	mov	r5,r19
210c5bbc:	10cceb40 	call	210cceb4 <__muldf3>
210c5bc0:	1029883a 	mov	r20,r2
210c5bc4:	182b883a 	mov	r21,r3
210c5bc8:	b800f426 	beq	r23,zero,210c5f9c <_dtoa_r+0x1684>
210c5bcc:	02040034 	movhi	r8,4096
210c5bd0:	42009d04 	addi	r8,r8,628
210c5bd4:	8029883a 	mov	r20,r16
210c5bd8:	04400084 	movi	r17,2
210c5bdc:	4021883a 	mov	r16,r8
210c5be0:	b980004c 	andi	r6,r23,1
210c5be4:	1009883a 	mov	r4,r2
210c5be8:	b82fd07a 	srai	r23,r23,1
210c5bec:	180b883a 	mov	r5,r3
210c5bf0:	30000426 	beq	r6,zero,210c5c04 <_dtoa_r+0x12ec>
210c5bf4:	81800017 	ldw	r6,0(r16)
210c5bf8:	81c00117 	ldw	r7,4(r16)
210c5bfc:	8c400044 	addi	r17,r17,1
210c5c00:	10cceb40 	call	210cceb4 <__muldf3>
210c5c04:	84000204 	addi	r16,r16,8
210c5c08:	b83ff51e 	bne	r23,zero,210c5be0 <__flash_rwdata_start+0xffff42e8>
210c5c0c:	a021883a 	mov	r16,r20
210c5c10:	182b883a 	mov	r21,r3
210c5c14:	1029883a 	mov	r20,r2
210c5c18:	003c5506 	br	210c4d70 <__flash_rwdata_start+0xffff3478>
210c5c1c:	d9800517 	ldw	r6,20(sp)
210c5c20:	d9000717 	ldw	r4,28(sp)
210c5c24:	00c00c04 	movi	r3,48
210c5c28:	31800044 	addi	r6,r6,1
210c5c2c:	d9800515 	stw	r6,20(sp)
210c5c30:	20c00005 	stb	r3,0(r4)
210c5c34:	02000c44 	movi	r8,49
210c5c38:	003da206 	br	210c52c4 <__flash_rwdata_start+0xffff39cc>
210c5c3c:	89400117 	ldw	r5,4(r17)
210c5c40:	8009883a 	mov	r4,r16
210c5c44:	10c78080 	call	210c7808 <_Balloc>
210c5c48:	89800417 	ldw	r6,16(r17)
210c5c4c:	11000304 	addi	r4,r2,12
210c5c50:	89400304 	addi	r5,r17,12
210c5c54:	31800084 	addi	r6,r6,2
210c5c58:	318d883a 	add	r6,r6,r6
210c5c5c:	318d883a 	add	r6,r6,r6
210c5c60:	1027883a 	mov	r19,r2
210c5c64:	10c74500 	call	210c7450 <memcpy>
210c5c68:	8009883a 	mov	r4,r16
210c5c6c:	980b883a 	mov	r5,r19
210c5c70:	01800044 	movi	r6,1
210c5c74:	10c7f8c0 	call	210c7f8c <__lshift>
210c5c78:	1029883a 	mov	r20,r2
210c5c7c:	003e8606 	br	210c5698 <__flash_rwdata_start+0xffff3da0>
210c5c80:	00800e44 	movi	r2,57
210c5c84:	90809526 	beq	r18,r2,210c5edc <_dtoa_r+0x15c4>
210c5c88:	92000044 	addi	r8,r18,1
210c5c8c:	003f2306 	br	210c591c <__flash_rwdata_start+0xffff4024>
210c5c90:	9011883a 	mov	r8,r18
210c5c94:	8825883a 	mov	r18,r17
210c5c98:	a023883a 	mov	r17,r20
210c5c9c:	003e3706 	br	210c557c <__flash_rwdata_start+0xffff3c84>
210c5ca0:	002b883a 	mov	r21,zero
210c5ca4:	0023883a 	mov	r17,zero
210c5ca8:	003f5606 	br	210c5a04 <__flash_rwdata_start+0xffff410c>
210c5cac:	51bfffc4 	addi	r6,r10,-1
210c5cb0:	300490fa 	slli	r2,r6,3
210c5cb4:	00c40034 	movhi	r3,4096
210c5cb8:	18c0a704 	addi	r3,r3,668
210c5cbc:	1885883a 	add	r2,r3,r2
210c5cc0:	d9c00e17 	ldw	r7,56(sp)
210c5cc4:	11000017 	ldw	r4,0(r2)
210c5cc8:	11400117 	ldw	r5,4(r2)
210c5ccc:	d8800717 	ldw	r2,28(sp)
210c5cd0:	d9801015 	stw	r6,64(sp)
210c5cd4:	880d883a 	mov	r6,r17
210c5cd8:	da801615 	stw	r10,88(sp)
210c5cdc:	15c00044 	addi	r23,r2,1
210c5ce0:	10cceb40 	call	210cceb4 <__muldf3>
210c5ce4:	a80b883a 	mov	r5,r21
210c5ce8:	a009883a 	mov	r4,r20
210c5cec:	d8c01115 	stw	r3,68(sp)
210c5cf0:	d8800e15 	stw	r2,56(sp)
210c5cf4:	10cdea80 	call	210cdea8 <__fixdfsi>
210c5cf8:	1009883a 	mov	r4,r2
210c5cfc:	1023883a 	mov	r17,r2
210c5d00:	10cdf300 	call	210cdf30 <__floatsidf>
210c5d04:	a009883a 	mov	r4,r20
210c5d08:	a80b883a 	mov	r5,r21
210c5d0c:	100d883a 	mov	r6,r2
210c5d10:	180f883a 	mov	r7,r3
210c5d14:	10cd5d80 	call	210cd5d8 <__subdf3>
210c5d18:	1813883a 	mov	r9,r3
210c5d1c:	d8c00717 	ldw	r3,28(sp)
210c5d20:	8c400c04 	addi	r17,r17,48
210c5d24:	1011883a 	mov	r8,r2
210c5d28:	1c400005 	stb	r17,0(r3)
210c5d2c:	da801617 	ldw	r10,88(sp)
210c5d30:	00800044 	movi	r2,1
210c5d34:	50802326 	beq	r10,r2,210c5dc4 <_dtoa_r+0x14ac>
210c5d38:	d8800717 	ldw	r2,28(sp)
210c5d3c:	b82b883a 	mov	r21,r23
210c5d40:	dc001315 	stw	r16,76(sp)
210c5d44:	12a9883a 	add	r20,r2,r10
210c5d48:	4807883a 	mov	r3,r9
210c5d4c:	4005883a 	mov	r2,r8
210c5d50:	dc801415 	stw	r18,80(sp)
210c5d54:	000d883a 	mov	r6,zero
210c5d58:	01d00934 	movhi	r7,16420
210c5d5c:	1009883a 	mov	r4,r2
210c5d60:	180b883a 	mov	r5,r3
210c5d64:	10cceb40 	call	210cceb4 <__muldf3>
210c5d68:	180b883a 	mov	r5,r3
210c5d6c:	1009883a 	mov	r4,r2
210c5d70:	1821883a 	mov	r16,r3
210c5d74:	1025883a 	mov	r18,r2
210c5d78:	10cdea80 	call	210cdea8 <__fixdfsi>
210c5d7c:	1009883a 	mov	r4,r2
210c5d80:	1023883a 	mov	r17,r2
210c5d84:	10cdf300 	call	210cdf30 <__floatsidf>
210c5d88:	9009883a 	mov	r4,r18
210c5d8c:	800b883a 	mov	r5,r16
210c5d90:	100d883a 	mov	r6,r2
210c5d94:	180f883a 	mov	r7,r3
210c5d98:	8c400c04 	addi	r17,r17,48
210c5d9c:	10cd5d80 	call	210cd5d8 <__subdf3>
210c5da0:	ad400044 	addi	r21,r21,1
210c5da4:	ac7fffc5 	stb	r17,-1(r21)
210c5da8:	ad3fea1e 	bne	r21,r20,210c5d54 <__flash_rwdata_start+0xffff445c>
210c5dac:	1813883a 	mov	r9,r3
210c5db0:	d8c01017 	ldw	r3,64(sp)
210c5db4:	dc001317 	ldw	r16,76(sp)
210c5db8:	dc801417 	ldw	r18,80(sp)
210c5dbc:	1011883a 	mov	r8,r2
210c5dc0:	b8ef883a 	add	r23,r23,r3
210c5dc4:	d9000e17 	ldw	r4,56(sp)
210c5dc8:	d9401117 	ldw	r5,68(sp)
210c5dcc:	000d883a 	mov	r6,zero
210c5dd0:	01cff834 	movhi	r7,16352
210c5dd4:	da001715 	stw	r8,92(sp)
210c5dd8:	da401515 	stw	r9,84(sp)
210c5ddc:	10cbb080 	call	210cbb08 <__adddf3>
210c5de0:	da001717 	ldw	r8,92(sp)
210c5de4:	da401517 	ldw	r9,84(sp)
210c5de8:	1009883a 	mov	r4,r2
210c5dec:	400d883a 	mov	r6,r8
210c5df0:	480f883a 	mov	r7,r9
210c5df4:	180b883a 	mov	r5,r3
210c5df8:	10ccdd40 	call	210ccdd4 <__ledf2>
210c5dfc:	da001717 	ldw	r8,92(sp)
210c5e00:	da401517 	ldw	r9,84(sp)
210c5e04:	10003b0e 	bge	r2,zero,210c5ef4 <_dtoa_r+0x15dc>
210c5e08:	d9001217 	ldw	r4,72(sp)
210c5e0c:	bd7fffc3 	ldbu	r21,-1(r23)
210c5e10:	d9000515 	stw	r4,20(sp)
210c5e14:	003d1c06 	br	210c5288 <__flash_rwdata_start+0xffff3990>
210c5e18:	d8c00817 	ldw	r3,32(sp)
210c5e1c:	18a9c83a 	sub	r20,r3,r2
210c5e20:	0005883a 	mov	r2,zero
210c5e24:	003d3706 	br	210c5304 <__flash_rwdata_start+0xffff3a0c>
210c5e28:	00800044 	movi	r2,1
210c5e2c:	003dd006 	br	210c5570 <__flash_rwdata_start+0xffff3c78>
210c5e30:	d8c00217 	ldw	r3,8(sp)
210c5e34:	00800d84 	movi	r2,54
210c5e38:	dd400917 	ldw	r21,36(sp)
210c5e3c:	10c5c83a 	sub	r2,r2,r3
210c5e40:	dd000817 	ldw	r20,32(sp)
210c5e44:	003d2f06 	br	210c5304 <__flash_rwdata_start+0xffff3a0c>
210c5e48:	9029883a 	mov	r20,r18
210c5e4c:	982b883a 	mov	r21,r19
210c5e50:	04400084 	movi	r17,2
210c5e54:	003bc606 	br	210c4d70 <__flash_rwdata_start+0xffff3478>
210c5e58:	d8800617 	ldw	r2,24(sp)
210c5e5c:	103efc26 	beq	r2,zero,210c5a50 <__flash_rwdata_start+0xffff4158>
210c5e60:	d8c00c17 	ldw	r3,48(sp)
210c5e64:	00fc890e 	bge	zero,r3,210c508c <__flash_rwdata_start+0xffff3794>
210c5e68:	a80b883a 	mov	r5,r21
210c5e6c:	a009883a 	mov	r4,r20
210c5e70:	000d883a 	mov	r6,zero
210c5e74:	01d00934 	movhi	r7,16420
210c5e78:	10cceb40 	call	210cceb4 <__muldf3>
210c5e7c:	89000044 	addi	r4,r17,1
210c5e80:	1029883a 	mov	r20,r2
210c5e84:	182b883a 	mov	r21,r3
210c5e88:	10cdf300 	call	210cdf30 <__floatsidf>
210c5e8c:	a009883a 	mov	r4,r20
210c5e90:	a80b883a 	mov	r5,r21
210c5e94:	100d883a 	mov	r6,r2
210c5e98:	180f883a 	mov	r7,r3
210c5e9c:	10cceb40 	call	210cceb4 <__muldf3>
210c5ea0:	1009883a 	mov	r4,r2
210c5ea4:	180b883a 	mov	r5,r3
210c5ea8:	000d883a 	mov	r6,zero
210c5eac:	01d00734 	movhi	r7,16412
210c5eb0:	10cbb080 	call	210cbb08 <__adddf3>
210c5eb4:	d9000517 	ldw	r4,20(sp)
210c5eb8:	1023883a 	mov	r17,r2
210c5ebc:	00bf3034 	movhi	r2,64704
210c5ec0:	213fffc4 	addi	r4,r4,-1
210c5ec4:	1885883a 	add	r2,r3,r2
210c5ec8:	d9001215 	stw	r4,72(sp)
210c5ecc:	d8800e15 	stw	r2,56(sp)
210c5ed0:	da800c17 	ldw	r10,48(sp)
210c5ed4:	003bc306 	br	210c4de4 <__flash_rwdata_start+0xffff34ec>
210c5ed8:	b039883a 	mov	fp,r22
210c5edc:	01000e44 	movi	r4,57
210c5ee0:	8825883a 	mov	r18,r17
210c5ee4:	9dc00044 	addi	r23,r19,1
210c5ee8:	99000005 	stb	r4,0(r19)
210c5eec:	a023883a 	mov	r17,r20
210c5ef0:	003dae06 	br	210c55ac <__flash_rwdata_start+0xffff3cb4>
210c5ef4:	d9800e17 	ldw	r6,56(sp)
210c5ef8:	d9c01117 	ldw	r7,68(sp)
210c5efc:	0009883a 	mov	r4,zero
210c5f00:	014ff834 	movhi	r5,16352
210c5f04:	da001715 	stw	r8,92(sp)
210c5f08:	da401515 	stw	r9,84(sp)
210c5f0c:	10cd5d80 	call	210cd5d8 <__subdf3>
210c5f10:	da001717 	ldw	r8,92(sp)
210c5f14:	da401517 	ldw	r9,84(sp)
210c5f18:	1009883a 	mov	r4,r2
210c5f1c:	180b883a 	mov	r5,r3
210c5f20:	400d883a 	mov	r6,r8
210c5f24:	480f883a 	mov	r7,r9
210c5f28:	10cccf40 	call	210cccf4 <__gedf2>
210c5f2c:	00bc570e 	bge	zero,r2,210c508c <__flash_rwdata_start+0xffff3794>
210c5f30:	01000c04 	movi	r4,48
210c5f34:	00000106 	br	210c5f3c <_dtoa_r+0x1624>
210c5f38:	102f883a 	mov	r23,r2
210c5f3c:	b8bfffc4 	addi	r2,r23,-1
210c5f40:	10c00007 	ldb	r3,0(r2)
210c5f44:	193ffc26 	beq	r3,r4,210c5f38 <__flash_rwdata_start+0xffff4640>
210c5f48:	d9801217 	ldw	r6,72(sp)
210c5f4c:	d9800515 	stw	r6,20(sp)
210c5f50:	003c1f06 	br	210c4fd0 <__flash_rwdata_start+0xffff36d8>
210c5f54:	d8801217 	ldw	r2,72(sp)
210c5f58:	dc001117 	ldw	r16,68(sp)
210c5f5c:	d8800515 	stw	r2,20(sp)
210c5f60:	003cc906 	br	210c5288 <__flash_rwdata_start+0xffff3990>
210c5f64:	dd801317 	ldw	r22,76(sp)
210c5f68:	dc001117 	ldw	r16,68(sp)
210c5f6c:	dcc01417 	ldw	r19,80(sp)
210c5f70:	dc801017 	ldw	r18,64(sp)
210c5f74:	003c4506 	br	210c508c <__flash_rwdata_start+0xffff3794>
210c5f78:	103e5d1e 	bne	r2,zero,210c58f0 <__flash_rwdata_start+0xffff3ff8>
210c5f7c:	4080004c 	andi	r2,r8,1
210c5f80:	103e5b26 	beq	r2,zero,210c58f0 <__flash_rwdata_start+0xffff3ff8>
210c5f84:	003e5706 	br	210c58e4 <__flash_rwdata_start+0xffff3fec>
210c5f88:	d8c00317 	ldw	r3,12(sp)
210c5f8c:	00800084 	movi	r2,2
210c5f90:	10c00a16 	blt	r2,r3,210c5fbc <_dtoa_r+0x16a4>
210c5f94:	d9000c17 	ldw	r4,48(sp)
210c5f98:	003e8306 	br	210c59a8 <__flash_rwdata_start+0xffff40b0>
210c5f9c:	04400084 	movi	r17,2
210c5fa0:	003b7306 	br	210c4d70 <__flash_rwdata_start+0xffff3478>
210c5fa4:	d9801217 	ldw	r6,72(sp)
210c5fa8:	d9800515 	stw	r6,20(sp)
210c5fac:	003cb606 	br	210c5288 <__flash_rwdata_start+0xffff3990>
210c5fb0:	d9001217 	ldw	r4,72(sp)
210c5fb4:	d9000515 	stw	r4,20(sp)
210c5fb8:	003c0506 	br	210c4fd0 <__flash_rwdata_start+0xffff36d8>
210c5fbc:	d9800c17 	ldw	r6,48(sp)
210c5fc0:	d9800615 	stw	r6,24(sp)
210c5fc4:	003e8306 	br	210c59d4 <__flash_rwdata_start+0xffff40dc>
210c5fc8:	d9800317 	ldw	r6,12(sp)
210c5fcc:	00800084 	movi	r2,2
210c5fd0:	11800216 	blt	r2,r6,210c5fdc <_dtoa_r+0x16c4>
210c5fd4:	d8800c17 	ldw	r2,48(sp)
210c5fd8:	003da606 	br	210c5674 <__flash_rwdata_start+0xffff3d7c>
210c5fdc:	d8800c17 	ldw	r2,48(sp)
210c5fe0:	d8800615 	stw	r2,24(sp)
210c5fe4:	003e7b06 	br	210c59d4 <__flash_rwdata_start+0xffff40dc>
210c5fe8:	05000044 	movi	r20,1
210c5fec:	003b0506 	br	210c4c04 <__flash_rwdata_start+0xffff330c>
210c5ff0:	8009883a 	mov	r4,r16
210c5ff4:	80001115 	stw	zero,68(r16)
210c5ff8:	000b883a 	mov	r5,zero
210c5ffc:	10c78080 	call	210c7808 <_Balloc>
210c6000:	d8800715 	stw	r2,28(sp)
210c6004:	d8c00717 	ldw	r3,28(sp)
210c6008:	00bfffc4 	movi	r2,-1
210c600c:	01000044 	movi	r4,1
210c6010:	d8800c15 	stw	r2,48(sp)
210c6014:	80c01015 	stw	r3,64(r16)
210c6018:	d9000b15 	stw	r4,44(sp)
210c601c:	d8800615 	stw	r2,24(sp)
210c6020:	d8002215 	stw	zero,136(sp)
210c6024:	003c1906 	br	210c508c <__flash_rwdata_start+0xffff3794>
210c6028:	193d2926 	beq	r3,r4,210c54d0 <__flash_rwdata_start+0xffff3bd8>
210c602c:	00c00f04 	movi	r3,60
210c6030:	1885c83a 	sub	r2,r3,r2
210c6034:	003d7b06 	br	210c5624 <__flash_rwdata_start+0xffff3d2c>
210c6038:	000b883a 	mov	r5,zero
210c603c:	003b1006 	br	210c4c80 <__flash_rwdata_start+0xffff3388>

210c6040 <__sflush_r>:
210c6040:	2880030b 	ldhu	r2,12(r5)
210c6044:	defffb04 	addi	sp,sp,-20
210c6048:	dcc00315 	stw	r19,12(sp)
210c604c:	dc400115 	stw	r17,4(sp)
210c6050:	dfc00415 	stw	ra,16(sp)
210c6054:	dc800215 	stw	r18,8(sp)
210c6058:	dc000015 	stw	r16,0(sp)
210c605c:	10c0020c 	andi	r3,r2,8
210c6060:	2823883a 	mov	r17,r5
210c6064:	2027883a 	mov	r19,r4
210c6068:	1800311e 	bne	r3,zero,210c6130 <__sflush_r+0xf0>
210c606c:	28c00117 	ldw	r3,4(r5)
210c6070:	10820014 	ori	r2,r2,2048
210c6074:	2880030d 	sth	r2,12(r5)
210c6078:	00c04b0e 	bge	zero,r3,210c61a8 <__sflush_r+0x168>
210c607c:	8a000a17 	ldw	r8,40(r17)
210c6080:	40002326 	beq	r8,zero,210c6110 <__sflush_r+0xd0>
210c6084:	9c000017 	ldw	r16,0(r19)
210c6088:	10c4000c 	andi	r3,r2,4096
210c608c:	98000015 	stw	zero,0(r19)
210c6090:	18004826 	beq	r3,zero,210c61b4 <__sflush_r+0x174>
210c6094:	89801417 	ldw	r6,80(r17)
210c6098:	10c0010c 	andi	r3,r2,4
210c609c:	18000626 	beq	r3,zero,210c60b8 <__sflush_r+0x78>
210c60a0:	88c00117 	ldw	r3,4(r17)
210c60a4:	88800c17 	ldw	r2,48(r17)
210c60a8:	30cdc83a 	sub	r6,r6,r3
210c60ac:	10000226 	beq	r2,zero,210c60b8 <__sflush_r+0x78>
210c60b0:	88800f17 	ldw	r2,60(r17)
210c60b4:	308dc83a 	sub	r6,r6,r2
210c60b8:	89400717 	ldw	r5,28(r17)
210c60bc:	9809883a 	mov	r4,r19
210c60c0:	000f883a 	mov	r7,zero
210c60c4:	403ee83a 	callr	r8
210c60c8:	00ffffc4 	movi	r3,-1
210c60cc:	10c04426 	beq	r2,r3,210c61e0 <__sflush_r+0x1a0>
210c60d0:	88c0030b 	ldhu	r3,12(r17)
210c60d4:	89000417 	ldw	r4,16(r17)
210c60d8:	88000115 	stw	zero,4(r17)
210c60dc:	197dffcc 	andi	r5,r3,63487
210c60e0:	8940030d 	sth	r5,12(r17)
210c60e4:	89000015 	stw	r4,0(r17)
210c60e8:	18c4000c 	andi	r3,r3,4096
210c60ec:	18002c1e 	bne	r3,zero,210c61a0 <__sflush_r+0x160>
210c60f0:	89400c17 	ldw	r5,48(r17)
210c60f4:	9c000015 	stw	r16,0(r19)
210c60f8:	28000526 	beq	r5,zero,210c6110 <__sflush_r+0xd0>
210c60fc:	88801004 	addi	r2,r17,64
210c6100:	28800226 	beq	r5,r2,210c610c <__sflush_r+0xcc>
210c6104:	9809883a 	mov	r4,r19
210c6108:	10c67980 	call	210c6798 <_free_r>
210c610c:	88000c15 	stw	zero,48(r17)
210c6110:	0005883a 	mov	r2,zero
210c6114:	dfc00417 	ldw	ra,16(sp)
210c6118:	dcc00317 	ldw	r19,12(sp)
210c611c:	dc800217 	ldw	r18,8(sp)
210c6120:	dc400117 	ldw	r17,4(sp)
210c6124:	dc000017 	ldw	r16,0(sp)
210c6128:	dec00504 	addi	sp,sp,20
210c612c:	f800283a 	ret
210c6130:	2c800417 	ldw	r18,16(r5)
210c6134:	903ff626 	beq	r18,zero,210c6110 <__flash_rwdata_start+0xffff4818>
210c6138:	2c000017 	ldw	r16,0(r5)
210c613c:	108000cc 	andi	r2,r2,3
210c6140:	2c800015 	stw	r18,0(r5)
210c6144:	84a1c83a 	sub	r16,r16,r18
210c6148:	1000131e 	bne	r2,zero,210c6198 <__sflush_r+0x158>
210c614c:	28800517 	ldw	r2,20(r5)
210c6150:	88800215 	stw	r2,8(r17)
210c6154:	04000316 	blt	zero,r16,210c6164 <__sflush_r+0x124>
210c6158:	003fed06 	br	210c6110 <__flash_rwdata_start+0xffff4818>
210c615c:	90a5883a 	add	r18,r18,r2
210c6160:	043feb0e 	bge	zero,r16,210c6110 <__flash_rwdata_start+0xffff4818>
210c6164:	88800917 	ldw	r2,36(r17)
210c6168:	89400717 	ldw	r5,28(r17)
210c616c:	800f883a 	mov	r7,r16
210c6170:	900d883a 	mov	r6,r18
210c6174:	9809883a 	mov	r4,r19
210c6178:	103ee83a 	callr	r2
210c617c:	80a1c83a 	sub	r16,r16,r2
210c6180:	00bff616 	blt	zero,r2,210c615c <__flash_rwdata_start+0xffff4864>
210c6184:	88c0030b 	ldhu	r3,12(r17)
210c6188:	00bfffc4 	movi	r2,-1
210c618c:	18c01014 	ori	r3,r3,64
210c6190:	88c0030d 	sth	r3,12(r17)
210c6194:	003fdf06 	br	210c6114 <__flash_rwdata_start+0xffff481c>
210c6198:	0005883a 	mov	r2,zero
210c619c:	003fec06 	br	210c6150 <__flash_rwdata_start+0xffff4858>
210c61a0:	88801415 	stw	r2,80(r17)
210c61a4:	003fd206 	br	210c60f0 <__flash_rwdata_start+0xffff47f8>
210c61a8:	28c00f17 	ldw	r3,60(r5)
210c61ac:	00ffb316 	blt	zero,r3,210c607c <__flash_rwdata_start+0xffff4784>
210c61b0:	003fd706 	br	210c6110 <__flash_rwdata_start+0xffff4818>
210c61b4:	89400717 	ldw	r5,28(r17)
210c61b8:	000d883a 	mov	r6,zero
210c61bc:	9809883a 	mov	r4,r19
210c61c0:	01c00044 	movi	r7,1
210c61c4:	403ee83a 	callr	r8
210c61c8:	100d883a 	mov	r6,r2
210c61cc:	00bfffc4 	movi	r2,-1
210c61d0:	30801426 	beq	r6,r2,210c6224 <__sflush_r+0x1e4>
210c61d4:	8880030b 	ldhu	r2,12(r17)
210c61d8:	8a000a17 	ldw	r8,40(r17)
210c61dc:	003fae06 	br	210c6098 <__flash_rwdata_start+0xffff47a0>
210c61e0:	98c00017 	ldw	r3,0(r19)
210c61e4:	183fba26 	beq	r3,zero,210c60d0 <__flash_rwdata_start+0xffff47d8>
210c61e8:	01000744 	movi	r4,29
210c61ec:	19000626 	beq	r3,r4,210c6208 <__sflush_r+0x1c8>
210c61f0:	01000584 	movi	r4,22
210c61f4:	19000426 	beq	r3,r4,210c6208 <__sflush_r+0x1c8>
210c61f8:	88c0030b 	ldhu	r3,12(r17)
210c61fc:	18c01014 	ori	r3,r3,64
210c6200:	88c0030d 	sth	r3,12(r17)
210c6204:	003fc306 	br	210c6114 <__flash_rwdata_start+0xffff481c>
210c6208:	8880030b 	ldhu	r2,12(r17)
210c620c:	88c00417 	ldw	r3,16(r17)
210c6210:	88000115 	stw	zero,4(r17)
210c6214:	10bdffcc 	andi	r2,r2,63487
210c6218:	8880030d 	sth	r2,12(r17)
210c621c:	88c00015 	stw	r3,0(r17)
210c6220:	003fb306 	br	210c60f0 <__flash_rwdata_start+0xffff47f8>
210c6224:	98800017 	ldw	r2,0(r19)
210c6228:	103fea26 	beq	r2,zero,210c61d4 <__flash_rwdata_start+0xffff48dc>
210c622c:	00c00744 	movi	r3,29
210c6230:	10c00226 	beq	r2,r3,210c623c <__sflush_r+0x1fc>
210c6234:	00c00584 	movi	r3,22
210c6238:	10ffd21e 	bne	r2,r3,210c6184 <__flash_rwdata_start+0xffff488c>
210c623c:	9c000015 	stw	r16,0(r19)
210c6240:	0005883a 	mov	r2,zero
210c6244:	003fb306 	br	210c6114 <__flash_rwdata_start+0xffff481c>

210c6248 <_fflush_r>:
210c6248:	defffd04 	addi	sp,sp,-12
210c624c:	dc000115 	stw	r16,4(sp)
210c6250:	dfc00215 	stw	ra,8(sp)
210c6254:	2021883a 	mov	r16,r4
210c6258:	20000226 	beq	r4,zero,210c6264 <_fflush_r+0x1c>
210c625c:	20800e17 	ldw	r2,56(r4)
210c6260:	10000c26 	beq	r2,zero,210c6294 <_fflush_r+0x4c>
210c6264:	2880030f 	ldh	r2,12(r5)
210c6268:	1000051e 	bne	r2,zero,210c6280 <_fflush_r+0x38>
210c626c:	0005883a 	mov	r2,zero
210c6270:	dfc00217 	ldw	ra,8(sp)
210c6274:	dc000117 	ldw	r16,4(sp)
210c6278:	dec00304 	addi	sp,sp,12
210c627c:	f800283a 	ret
210c6280:	8009883a 	mov	r4,r16
210c6284:	dfc00217 	ldw	ra,8(sp)
210c6288:	dc000117 	ldw	r16,4(sp)
210c628c:	dec00304 	addi	sp,sp,12
210c6290:	10c60401 	jmpi	210c6040 <__sflush_r>
210c6294:	d9400015 	stw	r5,0(sp)
210c6298:	10c66240 	call	210c6624 <__sinit>
210c629c:	d9400017 	ldw	r5,0(sp)
210c62a0:	003ff006 	br	210c6264 <__flash_rwdata_start+0xffff496c>

210c62a4 <fflush>:
210c62a4:	20000526 	beq	r4,zero,210c62bc <fflush+0x18>
210c62a8:	00840034 	movhi	r2,4096
210c62ac:	10892304 	addi	r2,r2,9356
210c62b0:	200b883a 	mov	r5,r4
210c62b4:	11000017 	ldw	r4,0(r2)
210c62b8:	10c62481 	jmpi	210c6248 <_fflush_r>
210c62bc:	00840034 	movhi	r2,4096
210c62c0:	10892204 	addi	r2,r2,9352
210c62c4:	11000017 	ldw	r4,0(r2)
210c62c8:	01484334 	movhi	r5,8460
210c62cc:	29589204 	addi	r5,r5,25160
210c62d0:	10c700c1 	jmpi	210c700c <_fwalk_reent>

210c62d4 <__fp_lock>:
210c62d4:	0005883a 	mov	r2,zero
210c62d8:	f800283a 	ret

210c62dc <__fp_unlock>:
210c62dc:	0005883a 	mov	r2,zero
210c62e0:	f800283a 	ret

210c62e4 <_cleanup_r>:
210c62e4:	01484374 	movhi	r5,8461
210c62e8:	296a1704 	addi	r5,r5,-22436
210c62ec:	10c700c1 	jmpi	210c700c <_fwalk_reent>

210c62f0 <__sinit.part.1>:
210c62f0:	defff704 	addi	sp,sp,-36
210c62f4:	00c84334 	movhi	r3,8460
210c62f8:	dfc00815 	stw	ra,32(sp)
210c62fc:	ddc00715 	stw	r23,28(sp)
210c6300:	dd800615 	stw	r22,24(sp)
210c6304:	dd400515 	stw	r21,20(sp)
210c6308:	dd000415 	stw	r20,16(sp)
210c630c:	dcc00315 	stw	r19,12(sp)
210c6310:	dc800215 	stw	r18,8(sp)
210c6314:	dc400115 	stw	r17,4(sp)
210c6318:	dc000015 	stw	r16,0(sp)
210c631c:	18d8b904 	addi	r3,r3,25316
210c6320:	24000117 	ldw	r16,4(r4)
210c6324:	20c00f15 	stw	r3,60(r4)
210c6328:	2080bb04 	addi	r2,r4,748
210c632c:	00c000c4 	movi	r3,3
210c6330:	20c0b915 	stw	r3,740(r4)
210c6334:	2080ba15 	stw	r2,744(r4)
210c6338:	2000b815 	stw	zero,736(r4)
210c633c:	05c00204 	movi	r23,8
210c6340:	00800104 	movi	r2,4
210c6344:	2025883a 	mov	r18,r4
210c6348:	b80d883a 	mov	r6,r23
210c634c:	81001704 	addi	r4,r16,92
210c6350:	000b883a 	mov	r5,zero
210c6354:	80000015 	stw	zero,0(r16)
210c6358:	80000115 	stw	zero,4(r16)
210c635c:	80000215 	stw	zero,8(r16)
210c6360:	8080030d 	sth	r2,12(r16)
210c6364:	80001915 	stw	zero,100(r16)
210c6368:	8000038d 	sth	zero,14(r16)
210c636c:	80000415 	stw	zero,16(r16)
210c6370:	80000515 	stw	zero,20(r16)
210c6374:	80000615 	stw	zero,24(r16)
210c6378:	10c76e40 	call	210c76e4 <memset>
210c637c:	05884374 	movhi	r22,8461
210c6380:	94400217 	ldw	r17,8(r18)
210c6384:	05484374 	movhi	r21,8461
210c6388:	05084374 	movhi	r20,8461
210c638c:	04c84374 	movhi	r19,8461
210c6390:	b5a3bc04 	addi	r22,r22,-28944
210c6394:	ad63d304 	addi	r21,r21,-28852
210c6398:	a523f204 	addi	r20,r20,-28728
210c639c:	9ce40904 	addi	r19,r19,-28636
210c63a0:	85800815 	stw	r22,32(r16)
210c63a4:	85400915 	stw	r21,36(r16)
210c63a8:	85000a15 	stw	r20,40(r16)
210c63ac:	84c00b15 	stw	r19,44(r16)
210c63b0:	84000715 	stw	r16,28(r16)
210c63b4:	00800284 	movi	r2,10
210c63b8:	8880030d 	sth	r2,12(r17)
210c63bc:	00800044 	movi	r2,1
210c63c0:	89001704 	addi	r4,r17,92
210c63c4:	b80d883a 	mov	r6,r23
210c63c8:	000b883a 	mov	r5,zero
210c63cc:	88000015 	stw	zero,0(r17)
210c63d0:	88000115 	stw	zero,4(r17)
210c63d4:	88000215 	stw	zero,8(r17)
210c63d8:	88001915 	stw	zero,100(r17)
210c63dc:	8880038d 	sth	r2,14(r17)
210c63e0:	88000415 	stw	zero,16(r17)
210c63e4:	88000515 	stw	zero,20(r17)
210c63e8:	88000615 	stw	zero,24(r17)
210c63ec:	10c76e40 	call	210c76e4 <memset>
210c63f0:	94000317 	ldw	r16,12(r18)
210c63f4:	00800484 	movi	r2,18
210c63f8:	8c400715 	stw	r17,28(r17)
210c63fc:	8d800815 	stw	r22,32(r17)
210c6400:	8d400915 	stw	r21,36(r17)
210c6404:	8d000a15 	stw	r20,40(r17)
210c6408:	8cc00b15 	stw	r19,44(r17)
210c640c:	8080030d 	sth	r2,12(r16)
210c6410:	00800084 	movi	r2,2
210c6414:	80000015 	stw	zero,0(r16)
210c6418:	80000115 	stw	zero,4(r16)
210c641c:	80000215 	stw	zero,8(r16)
210c6420:	80001915 	stw	zero,100(r16)
210c6424:	8080038d 	sth	r2,14(r16)
210c6428:	80000415 	stw	zero,16(r16)
210c642c:	80000515 	stw	zero,20(r16)
210c6430:	80000615 	stw	zero,24(r16)
210c6434:	81001704 	addi	r4,r16,92
210c6438:	000b883a 	mov	r5,zero
210c643c:	b80d883a 	mov	r6,r23
210c6440:	10c76e40 	call	210c76e4 <memset>
210c6444:	00800044 	movi	r2,1
210c6448:	84000715 	stw	r16,28(r16)
210c644c:	85800815 	stw	r22,32(r16)
210c6450:	85400915 	stw	r21,36(r16)
210c6454:	85000a15 	stw	r20,40(r16)
210c6458:	84c00b15 	stw	r19,44(r16)
210c645c:	90800e15 	stw	r2,56(r18)
210c6460:	dfc00817 	ldw	ra,32(sp)
210c6464:	ddc00717 	ldw	r23,28(sp)
210c6468:	dd800617 	ldw	r22,24(sp)
210c646c:	dd400517 	ldw	r21,20(sp)
210c6470:	dd000417 	ldw	r20,16(sp)
210c6474:	dcc00317 	ldw	r19,12(sp)
210c6478:	dc800217 	ldw	r18,8(sp)
210c647c:	dc400117 	ldw	r17,4(sp)
210c6480:	dc000017 	ldw	r16,0(sp)
210c6484:	dec00904 	addi	sp,sp,36
210c6488:	f800283a 	ret

210c648c <__sfmoreglue>:
210c648c:	defffc04 	addi	sp,sp,-16
210c6490:	dc400115 	stw	r17,4(sp)
210c6494:	2c7fffc4 	addi	r17,r5,-1
210c6498:	8c401a24 	muli	r17,r17,104
210c649c:	dc800215 	stw	r18,8(sp)
210c64a0:	2825883a 	mov	r18,r5
210c64a4:	89401d04 	addi	r5,r17,116
210c64a8:	dc000015 	stw	r16,0(sp)
210c64ac:	dfc00315 	stw	ra,12(sp)
210c64b0:	10c1a280 	call	210c1a28 <_malloc_r>
210c64b4:	1021883a 	mov	r16,r2
210c64b8:	10000726 	beq	r2,zero,210c64d8 <__sfmoreglue+0x4c>
210c64bc:	11000304 	addi	r4,r2,12
210c64c0:	10000015 	stw	zero,0(r2)
210c64c4:	14800115 	stw	r18,4(r2)
210c64c8:	11000215 	stw	r4,8(r2)
210c64cc:	000b883a 	mov	r5,zero
210c64d0:	89801a04 	addi	r6,r17,104
210c64d4:	10c76e40 	call	210c76e4 <memset>
210c64d8:	8005883a 	mov	r2,r16
210c64dc:	dfc00317 	ldw	ra,12(sp)
210c64e0:	dc800217 	ldw	r18,8(sp)
210c64e4:	dc400117 	ldw	r17,4(sp)
210c64e8:	dc000017 	ldw	r16,0(sp)
210c64ec:	dec00404 	addi	sp,sp,16
210c64f0:	f800283a 	ret

210c64f4 <__sfp>:
210c64f4:	00840034 	movhi	r2,4096
210c64f8:	defffb04 	addi	sp,sp,-20
210c64fc:	10892204 	addi	r2,r2,9352
210c6500:	dc800215 	stw	r18,8(sp)
210c6504:	14800017 	ldw	r18,0(r2)
210c6508:	dcc00315 	stw	r19,12(sp)
210c650c:	dfc00415 	stw	ra,16(sp)
210c6510:	90800e17 	ldw	r2,56(r18)
210c6514:	dc400115 	stw	r17,4(sp)
210c6518:	dc000015 	stw	r16,0(sp)
210c651c:	2027883a 	mov	r19,r4
210c6520:	1000021e 	bne	r2,zero,210c652c <__sfp+0x38>
210c6524:	9009883a 	mov	r4,r18
210c6528:	10c62f00 	call	210c62f0 <__sinit.part.1>
210c652c:	9480b804 	addi	r18,r18,736
210c6530:	047fffc4 	movi	r17,-1
210c6534:	91400117 	ldw	r5,4(r18)
210c6538:	94000217 	ldw	r16,8(r18)
210c653c:	297fffc4 	addi	r5,r5,-1
210c6540:	28000a16 	blt	r5,zero,210c656c <__sfp+0x78>
210c6544:	8080030f 	ldh	r2,12(r16)
210c6548:	10000c26 	beq	r2,zero,210c657c <__sfp+0x88>
210c654c:	80c01d04 	addi	r3,r16,116
210c6550:	00000206 	br	210c655c <__sfp+0x68>
210c6554:	18bfe60f 	ldh	r2,-104(r3)
210c6558:	10000826 	beq	r2,zero,210c657c <__sfp+0x88>
210c655c:	297fffc4 	addi	r5,r5,-1
210c6560:	1c3ffd04 	addi	r16,r3,-12
210c6564:	18c01a04 	addi	r3,r3,104
210c6568:	2c7ffa1e 	bne	r5,r17,210c6554 <__flash_rwdata_start+0xffff4c5c>
210c656c:	90800017 	ldw	r2,0(r18)
210c6570:	10001d26 	beq	r2,zero,210c65e8 <__sfp+0xf4>
210c6574:	1025883a 	mov	r18,r2
210c6578:	003fee06 	br	210c6534 <__flash_rwdata_start+0xffff4c3c>
210c657c:	00bfffc4 	movi	r2,-1
210c6580:	8080038d 	sth	r2,14(r16)
210c6584:	00800044 	movi	r2,1
210c6588:	8080030d 	sth	r2,12(r16)
210c658c:	80001915 	stw	zero,100(r16)
210c6590:	80000015 	stw	zero,0(r16)
210c6594:	80000215 	stw	zero,8(r16)
210c6598:	80000115 	stw	zero,4(r16)
210c659c:	80000415 	stw	zero,16(r16)
210c65a0:	80000515 	stw	zero,20(r16)
210c65a4:	80000615 	stw	zero,24(r16)
210c65a8:	81001704 	addi	r4,r16,92
210c65ac:	000b883a 	mov	r5,zero
210c65b0:	01800204 	movi	r6,8
210c65b4:	10c76e40 	call	210c76e4 <memset>
210c65b8:	8005883a 	mov	r2,r16
210c65bc:	80000c15 	stw	zero,48(r16)
210c65c0:	80000d15 	stw	zero,52(r16)
210c65c4:	80001115 	stw	zero,68(r16)
210c65c8:	80001215 	stw	zero,72(r16)
210c65cc:	dfc00417 	ldw	ra,16(sp)
210c65d0:	dcc00317 	ldw	r19,12(sp)
210c65d4:	dc800217 	ldw	r18,8(sp)
210c65d8:	dc400117 	ldw	r17,4(sp)
210c65dc:	dc000017 	ldw	r16,0(sp)
210c65e0:	dec00504 	addi	sp,sp,20
210c65e4:	f800283a 	ret
210c65e8:	9809883a 	mov	r4,r19
210c65ec:	01400104 	movi	r5,4
210c65f0:	10c648c0 	call	210c648c <__sfmoreglue>
210c65f4:	90800015 	stw	r2,0(r18)
210c65f8:	103fde1e 	bne	r2,zero,210c6574 <__flash_rwdata_start+0xffff4c7c>
210c65fc:	00800304 	movi	r2,12
210c6600:	98800015 	stw	r2,0(r19)
210c6604:	0005883a 	mov	r2,zero
210c6608:	003ff006 	br	210c65cc <__flash_rwdata_start+0xffff4cd4>

210c660c <_cleanup>:
210c660c:	00840034 	movhi	r2,4096
210c6610:	10892204 	addi	r2,r2,9352
210c6614:	11000017 	ldw	r4,0(r2)
210c6618:	01484374 	movhi	r5,8461
210c661c:	296a1704 	addi	r5,r5,-22436
210c6620:	10c700c1 	jmpi	210c700c <_fwalk_reent>

210c6624 <__sinit>:
210c6624:	20800e17 	ldw	r2,56(r4)
210c6628:	10000126 	beq	r2,zero,210c6630 <__sinit+0xc>
210c662c:	f800283a 	ret
210c6630:	10c62f01 	jmpi	210c62f0 <__sinit.part.1>

210c6634 <__sfp_lock_acquire>:
210c6634:	f800283a 	ret

210c6638 <__sfp_lock_release>:
210c6638:	f800283a 	ret

210c663c <__sinit_lock_acquire>:
210c663c:	f800283a 	ret

210c6640 <__sinit_lock_release>:
210c6640:	f800283a 	ret

210c6644 <__fp_lock_all>:
210c6644:	00840034 	movhi	r2,4096
210c6648:	10892304 	addi	r2,r2,9356
210c664c:	11000017 	ldw	r4,0(r2)
210c6650:	01484334 	movhi	r5,8460
210c6654:	2958b504 	addi	r5,r5,25300
210c6658:	10c6f481 	jmpi	210c6f48 <_fwalk>

210c665c <__fp_unlock_all>:
210c665c:	00840034 	movhi	r2,4096
210c6660:	10892304 	addi	r2,r2,9356
210c6664:	11000017 	ldw	r4,0(r2)
210c6668:	01484334 	movhi	r5,8460
210c666c:	2958b704 	addi	r5,r5,25308
210c6670:	10c6f481 	jmpi	210c6f48 <_fwalk>

210c6674 <_malloc_trim_r>:
210c6674:	defffb04 	addi	sp,sp,-20
210c6678:	dcc00315 	stw	r19,12(sp)
210c667c:	04c40034 	movhi	r19,4096
210c6680:	dc800215 	stw	r18,8(sp)
210c6684:	dc400115 	stw	r17,4(sp)
210c6688:	dc000015 	stw	r16,0(sp)
210c668c:	dfc00415 	stw	ra,16(sp)
210c6690:	2821883a 	mov	r16,r5
210c6694:	9cc32c04 	addi	r19,r19,3248
210c6698:	2025883a 	mov	r18,r4
210c669c:	10ce4d80 	call	210ce4d8 <__malloc_lock>
210c66a0:	98800217 	ldw	r2,8(r19)
210c66a4:	14400117 	ldw	r17,4(r2)
210c66a8:	00bfff04 	movi	r2,-4
210c66ac:	88a2703a 	and	r17,r17,r2
210c66b0:	8c21c83a 	sub	r16,r17,r16
210c66b4:	8403fbc4 	addi	r16,r16,4079
210c66b8:	8020d33a 	srli	r16,r16,12
210c66bc:	0083ffc4 	movi	r2,4095
210c66c0:	843fffc4 	addi	r16,r16,-1
210c66c4:	8020933a 	slli	r16,r16,12
210c66c8:	1400060e 	bge	r2,r16,210c66e4 <_malloc_trim_r+0x70>
210c66cc:	9009883a 	mov	r4,r18
210c66d0:	000b883a 	mov	r5,zero
210c66d4:	10c23140 	call	210c2314 <_sbrk_r>
210c66d8:	98c00217 	ldw	r3,8(r19)
210c66dc:	1c47883a 	add	r3,r3,r17
210c66e0:	10c00a26 	beq	r2,r3,210c670c <_malloc_trim_r+0x98>
210c66e4:	9009883a 	mov	r4,r18
210c66e8:	10ce4dc0 	call	210ce4dc <__malloc_unlock>
210c66ec:	0005883a 	mov	r2,zero
210c66f0:	dfc00417 	ldw	ra,16(sp)
210c66f4:	dcc00317 	ldw	r19,12(sp)
210c66f8:	dc800217 	ldw	r18,8(sp)
210c66fc:	dc400117 	ldw	r17,4(sp)
210c6700:	dc000017 	ldw	r16,0(sp)
210c6704:	dec00504 	addi	sp,sp,20
210c6708:	f800283a 	ret
210c670c:	9009883a 	mov	r4,r18
210c6710:	040bc83a 	sub	r5,zero,r16
210c6714:	10c23140 	call	210c2314 <_sbrk_r>
210c6718:	00ffffc4 	movi	r3,-1
210c671c:	10c00d26 	beq	r2,r3,210c6754 <_malloc_trim_r+0xe0>
210c6720:	00c40034 	movhi	r3,4096
210c6724:	18c94604 	addi	r3,r3,9496
210c6728:	18800017 	ldw	r2,0(r3)
210c672c:	99000217 	ldw	r4,8(r19)
210c6730:	8c23c83a 	sub	r17,r17,r16
210c6734:	8c400054 	ori	r17,r17,1
210c6738:	1421c83a 	sub	r16,r2,r16
210c673c:	24400115 	stw	r17,4(r4)
210c6740:	9009883a 	mov	r4,r18
210c6744:	1c000015 	stw	r16,0(r3)
210c6748:	10ce4dc0 	call	210ce4dc <__malloc_unlock>
210c674c:	00800044 	movi	r2,1
210c6750:	003fe706 	br	210c66f0 <__flash_rwdata_start+0xffff4df8>
210c6754:	9009883a 	mov	r4,r18
210c6758:	000b883a 	mov	r5,zero
210c675c:	10c23140 	call	210c2314 <_sbrk_r>
210c6760:	99000217 	ldw	r4,8(r19)
210c6764:	014003c4 	movi	r5,15
210c6768:	1107c83a 	sub	r3,r2,r4
210c676c:	28ffdd0e 	bge	r5,r3,210c66e4 <__flash_rwdata_start+0xffff4dec>
210c6770:	01440034 	movhi	r5,4096
210c6774:	29492404 	addi	r5,r5,9360
210c6778:	29400017 	ldw	r5,0(r5)
210c677c:	18c00054 	ori	r3,r3,1
210c6780:	20c00115 	stw	r3,4(r4)
210c6784:	00c40034 	movhi	r3,4096
210c6788:	1145c83a 	sub	r2,r2,r5
210c678c:	18c94604 	addi	r3,r3,9496
210c6790:	18800015 	stw	r2,0(r3)
210c6794:	003fd306 	br	210c66e4 <__flash_rwdata_start+0xffff4dec>

210c6798 <_free_r>:
210c6798:	28004c26 	beq	r5,zero,210c68cc <_free_r+0x134>
210c679c:	defffd04 	addi	sp,sp,-12
210c67a0:	dc400115 	stw	r17,4(sp)
210c67a4:	dc000015 	stw	r16,0(sp)
210c67a8:	2023883a 	mov	r17,r4
210c67ac:	2821883a 	mov	r16,r5
210c67b0:	dfc00215 	stw	ra,8(sp)
210c67b4:	10ce4d80 	call	210ce4d8 <__malloc_lock>
210c67b8:	813fff17 	ldw	r4,-4(r16)
210c67bc:	00bfff84 	movi	r2,-2
210c67c0:	02440034 	movhi	r9,4096
210c67c4:	81bffe04 	addi	r6,r16,-8
210c67c8:	2084703a 	and	r2,r4,r2
210c67cc:	4a432c04 	addi	r9,r9,3248
210c67d0:	308b883a 	add	r5,r6,r2
210c67d4:	2a000117 	ldw	r8,4(r5)
210c67d8:	49c00217 	ldw	r7,8(r9)
210c67dc:	00ffff04 	movi	r3,-4
210c67e0:	40c6703a 	and	r3,r8,r3
210c67e4:	39405326 	beq	r7,r5,210c6934 <_free_r+0x19c>
210c67e8:	28c00115 	stw	r3,4(r5)
210c67ec:	2100004c 	andi	r4,r4,1
210c67f0:	2000091e 	bne	r4,zero,210c6818 <_free_r+0x80>
210c67f4:	81fffe17 	ldw	r7,-8(r16)
210c67f8:	4a000204 	addi	r8,r9,8
210c67fc:	31cdc83a 	sub	r6,r6,r7
210c6800:	31000217 	ldw	r4,8(r6)
210c6804:	11c5883a 	add	r2,r2,r7
210c6808:	22006126 	beq	r4,r8,210c6990 <_free_r+0x1f8>
210c680c:	31c00317 	ldw	r7,12(r6)
210c6810:	21c00315 	stw	r7,12(r4)
210c6814:	39000215 	stw	r4,8(r7)
210c6818:	28c9883a 	add	r4,r5,r3
210c681c:	21c00117 	ldw	r7,4(r4)
210c6820:	39c0004c 	andi	r7,r7,1
210c6824:	38000d1e 	bne	r7,zero,210c685c <_free_r+0xc4>
210c6828:	29000217 	ldw	r4,8(r5)
210c682c:	10c5883a 	add	r2,r2,r3
210c6830:	00c40034 	movhi	r3,4096
210c6834:	18c32e04 	addi	r3,r3,3256
210c6838:	20c07526 	beq	r4,r3,210c6a10 <_free_r+0x278>
210c683c:	29c00317 	ldw	r7,12(r5)
210c6840:	11400054 	ori	r5,r2,1
210c6844:	3087883a 	add	r3,r6,r2
210c6848:	21c00315 	stw	r7,12(r4)
210c684c:	39000215 	stw	r4,8(r7)
210c6850:	31400115 	stw	r5,4(r6)
210c6854:	18800015 	stw	r2,0(r3)
210c6858:	00000406 	br	210c686c <_free_r+0xd4>
210c685c:	10c00054 	ori	r3,r2,1
210c6860:	30c00115 	stw	r3,4(r6)
210c6864:	3087883a 	add	r3,r6,r2
210c6868:	18800015 	stw	r2,0(r3)
210c686c:	00c07fc4 	movi	r3,511
210c6870:	18801736 	bltu	r3,r2,210c68d0 <_free_r+0x138>
210c6874:	1004d0fa 	srli	r2,r2,3
210c6878:	01400044 	movi	r5,1
210c687c:	49000117 	ldw	r4,4(r9)
210c6880:	1087883a 	add	r3,r2,r2
210c6884:	18c7883a 	add	r3,r3,r3
210c6888:	1005d0ba 	srai	r2,r2,2
210c688c:	18c7883a 	add	r3,r3,r3
210c6890:	1a47883a 	add	r3,r3,r9
210c6894:	19c00217 	ldw	r7,8(r3)
210c6898:	2884983a 	sll	r2,r5,r2
210c689c:	30c00315 	stw	r3,12(r6)
210c68a0:	31c00215 	stw	r7,8(r6)
210c68a4:	1104b03a 	or	r2,r2,r4
210c68a8:	19800215 	stw	r6,8(r3)
210c68ac:	48800115 	stw	r2,4(r9)
210c68b0:	39800315 	stw	r6,12(r7)
210c68b4:	8809883a 	mov	r4,r17
210c68b8:	dfc00217 	ldw	ra,8(sp)
210c68bc:	dc400117 	ldw	r17,4(sp)
210c68c0:	dc000017 	ldw	r16,0(sp)
210c68c4:	dec00304 	addi	sp,sp,12
210c68c8:	10ce4dc1 	jmpi	210ce4dc <__malloc_unlock>
210c68cc:	f800283a 	ret
210c68d0:	1006d27a 	srli	r3,r2,9
210c68d4:	01000104 	movi	r4,4
210c68d8:	20c04036 	bltu	r4,r3,210c69dc <_free_r+0x244>
210c68dc:	1006d1ba 	srli	r3,r2,6
210c68e0:	19400e04 	addi	r5,r3,56
210c68e4:	2947883a 	add	r3,r5,r5
210c68e8:	18c7883a 	add	r3,r3,r3
210c68ec:	18c7883a 	add	r3,r3,r3
210c68f0:	1a49883a 	add	r4,r3,r9
210c68f4:	20c00217 	ldw	r3,8(r4)
210c68f8:	01c40034 	movhi	r7,4096
210c68fc:	39c32c04 	addi	r7,r7,3248
210c6900:	19003b26 	beq	r3,r4,210c69f0 <_free_r+0x258>
210c6904:	01ffff04 	movi	r7,-4
210c6908:	19400117 	ldw	r5,4(r3)
210c690c:	29ca703a 	and	r5,r5,r7
210c6910:	1140022e 	bgeu	r2,r5,210c691c <_free_r+0x184>
210c6914:	18c00217 	ldw	r3,8(r3)
210c6918:	20fffb1e 	bne	r4,r3,210c6908 <__flash_rwdata_start+0xffff5010>
210c691c:	18800317 	ldw	r2,12(r3)
210c6920:	30800315 	stw	r2,12(r6)
210c6924:	30c00215 	stw	r3,8(r6)
210c6928:	11800215 	stw	r6,8(r2)
210c692c:	19800315 	stw	r6,12(r3)
210c6930:	003fe006 	br	210c68b4 <__flash_rwdata_start+0xffff4fbc>
210c6934:	2100004c 	andi	r4,r4,1
210c6938:	1885883a 	add	r2,r3,r2
210c693c:	2000071e 	bne	r4,zero,210c695c <_free_r+0x1c4>
210c6940:	817ffe17 	ldw	r5,-8(r16)
210c6944:	314dc83a 	sub	r6,r6,r5
210c6948:	30c00317 	ldw	r3,12(r6)
210c694c:	31000217 	ldw	r4,8(r6)
210c6950:	1145883a 	add	r2,r2,r5
210c6954:	20c00315 	stw	r3,12(r4)
210c6958:	19000215 	stw	r4,8(r3)
210c695c:	10c00054 	ori	r3,r2,1
210c6960:	30c00115 	stw	r3,4(r6)
210c6964:	00c40034 	movhi	r3,4096
210c6968:	18c92504 	addi	r3,r3,9364
210c696c:	18c00017 	ldw	r3,0(r3)
210c6970:	49800215 	stw	r6,8(r9)
210c6974:	10ffcf36 	bltu	r2,r3,210c68b4 <__flash_rwdata_start+0xffff4fbc>
210c6978:	00840034 	movhi	r2,4096
210c697c:	10893a04 	addi	r2,r2,9448
210c6980:	11400017 	ldw	r5,0(r2)
210c6984:	8809883a 	mov	r4,r17
210c6988:	10c66740 	call	210c6674 <_malloc_trim_r>
210c698c:	003fc906 	br	210c68b4 <__flash_rwdata_start+0xffff4fbc>
210c6990:	28c9883a 	add	r4,r5,r3
210c6994:	21000117 	ldw	r4,4(r4)
210c6998:	2100004c 	andi	r4,r4,1
210c699c:	20000a1e 	bne	r4,zero,210c69c8 <_free_r+0x230>
210c69a0:	29000317 	ldw	r4,12(r5)
210c69a4:	29400217 	ldw	r5,8(r5)
210c69a8:	10c5883a 	add	r2,r2,r3
210c69ac:	10c00054 	ori	r3,r2,1
210c69b0:	29000315 	stw	r4,12(r5)
210c69b4:	21400215 	stw	r5,8(r4)
210c69b8:	30c00115 	stw	r3,4(r6)
210c69bc:	308d883a 	add	r6,r6,r2
210c69c0:	30800015 	stw	r2,0(r6)
210c69c4:	003fbb06 	br	210c68b4 <__flash_rwdata_start+0xffff4fbc>
210c69c8:	10c00054 	ori	r3,r2,1
210c69cc:	30c00115 	stw	r3,4(r6)
210c69d0:	308d883a 	add	r6,r6,r2
210c69d4:	30800015 	stw	r2,0(r6)
210c69d8:	003fb606 	br	210c68b4 <__flash_rwdata_start+0xffff4fbc>
210c69dc:	01000504 	movi	r4,20
210c69e0:	20c01436 	bltu	r4,r3,210c6a34 <_free_r+0x29c>
210c69e4:	194016c4 	addi	r5,r3,91
210c69e8:	2947883a 	add	r3,r5,r5
210c69ec:	003fbe06 	br	210c68e8 <__flash_rwdata_start+0xffff4ff0>
210c69f0:	280bd0ba 	srai	r5,r5,2
210c69f4:	00800044 	movi	r2,1
210c69f8:	39000117 	ldw	r4,4(r7)
210c69fc:	114a983a 	sll	r5,r2,r5
210c6a00:	1805883a 	mov	r2,r3
210c6a04:	2908b03a 	or	r4,r5,r4
210c6a08:	39000115 	stw	r4,4(r7)
210c6a0c:	003fc406 	br	210c6920 <__flash_rwdata_start+0xffff5028>
210c6a10:	49800515 	stw	r6,20(r9)
210c6a14:	49800415 	stw	r6,16(r9)
210c6a18:	10c00054 	ori	r3,r2,1
210c6a1c:	31000315 	stw	r4,12(r6)
210c6a20:	31000215 	stw	r4,8(r6)
210c6a24:	30c00115 	stw	r3,4(r6)
210c6a28:	308d883a 	add	r6,r6,r2
210c6a2c:	30800015 	stw	r2,0(r6)
210c6a30:	003fa006 	br	210c68b4 <__flash_rwdata_start+0xffff4fbc>
210c6a34:	01001504 	movi	r4,84
210c6a38:	20c00436 	bltu	r4,r3,210c6a4c <_free_r+0x2b4>
210c6a3c:	1006d33a 	srli	r3,r2,12
210c6a40:	19401b84 	addi	r5,r3,110
210c6a44:	2947883a 	add	r3,r5,r5
210c6a48:	003fa706 	br	210c68e8 <__flash_rwdata_start+0xffff4ff0>
210c6a4c:	01005504 	movi	r4,340
210c6a50:	20c00436 	bltu	r4,r3,210c6a64 <_free_r+0x2cc>
210c6a54:	1006d3fa 	srli	r3,r2,15
210c6a58:	19401dc4 	addi	r5,r3,119
210c6a5c:	2947883a 	add	r3,r5,r5
210c6a60:	003fa106 	br	210c68e8 <__flash_rwdata_start+0xffff4ff0>
210c6a64:	01015504 	movi	r4,1364
210c6a68:	20c00436 	bltu	r4,r3,210c6a7c <_free_r+0x2e4>
210c6a6c:	1006d4ba 	srli	r3,r2,18
210c6a70:	19401f04 	addi	r5,r3,124
210c6a74:	2947883a 	add	r3,r5,r5
210c6a78:	003f9b06 	br	210c68e8 <__flash_rwdata_start+0xffff4ff0>
210c6a7c:	00c03f04 	movi	r3,252
210c6a80:	01401f84 	movi	r5,126
210c6a84:	003f9806 	br	210c68e8 <__flash_rwdata_start+0xffff4ff0>

210c6a88 <__sfvwrite_r>:
210c6a88:	30800217 	ldw	r2,8(r6)
210c6a8c:	10006726 	beq	r2,zero,210c6c2c <__sfvwrite_r+0x1a4>
210c6a90:	defff404 	addi	sp,sp,-48
210c6a94:	dd000615 	stw	r20,24(sp)
210c6a98:	2029883a 	mov	r20,r4
210c6a9c:	2900030b 	ldhu	r4,12(r5)
210c6aa0:	ddc00915 	stw	r23,36(sp)
210c6aa4:	dc000215 	stw	r16,8(sp)
210c6aa8:	dfc00b15 	stw	ra,44(sp)
210c6aac:	df000a15 	stw	fp,40(sp)
210c6ab0:	dd800815 	stw	r22,32(sp)
210c6ab4:	dd400715 	stw	r21,28(sp)
210c6ab8:	dcc00515 	stw	r19,20(sp)
210c6abc:	dc800415 	stw	r18,16(sp)
210c6ac0:	dc400315 	stw	r17,12(sp)
210c6ac4:	2080020c 	andi	r2,r4,8
210c6ac8:	2821883a 	mov	r16,r5
210c6acc:	302f883a 	mov	r23,r6
210c6ad0:	10002726 	beq	r2,zero,210c6b70 <__sfvwrite_r+0xe8>
210c6ad4:	28800417 	ldw	r2,16(r5)
210c6ad8:	10002526 	beq	r2,zero,210c6b70 <__sfvwrite_r+0xe8>
210c6adc:	2080008c 	andi	r2,r4,2
210c6ae0:	bc400017 	ldw	r17,0(r23)
210c6ae4:	10002a26 	beq	r2,zero,210c6b90 <__sfvwrite_r+0x108>
210c6ae8:	05600034 	movhi	r21,32768
210c6aec:	0027883a 	mov	r19,zero
210c6af0:	0025883a 	mov	r18,zero
210c6af4:	ad7f0004 	addi	r21,r21,-1024
210c6af8:	980d883a 	mov	r6,r19
210c6afc:	a009883a 	mov	r4,r20
210c6b00:	90004626 	beq	r18,zero,210c6c1c <__sfvwrite_r+0x194>
210c6b04:	900f883a 	mov	r7,r18
210c6b08:	81400717 	ldw	r5,28(r16)
210c6b0c:	ac80022e 	bgeu	r21,r18,210c6b18 <__sfvwrite_r+0x90>
210c6b10:	01e00034 	movhi	r7,32768
210c6b14:	39ff0004 	addi	r7,r7,-1024
210c6b18:	80800917 	ldw	r2,36(r16)
210c6b1c:	103ee83a 	callr	r2
210c6b20:	0080520e 	bge	zero,r2,210c6c6c <__sfvwrite_r+0x1e4>
210c6b24:	b8c00217 	ldw	r3,8(r23)
210c6b28:	98a7883a 	add	r19,r19,r2
210c6b2c:	90a5c83a 	sub	r18,r18,r2
210c6b30:	1885c83a 	sub	r2,r3,r2
210c6b34:	b8800215 	stw	r2,8(r23)
210c6b38:	103fef1e 	bne	r2,zero,210c6af8 <__flash_rwdata_start+0xffff5200>
210c6b3c:	0005883a 	mov	r2,zero
210c6b40:	dfc00b17 	ldw	ra,44(sp)
210c6b44:	df000a17 	ldw	fp,40(sp)
210c6b48:	ddc00917 	ldw	r23,36(sp)
210c6b4c:	dd800817 	ldw	r22,32(sp)
210c6b50:	dd400717 	ldw	r21,28(sp)
210c6b54:	dd000617 	ldw	r20,24(sp)
210c6b58:	dcc00517 	ldw	r19,20(sp)
210c6b5c:	dc800417 	ldw	r18,16(sp)
210c6b60:	dc400317 	ldw	r17,12(sp)
210c6b64:	dc000217 	ldw	r16,8(sp)
210c6b68:	dec00c04 	addi	sp,sp,48
210c6b6c:	f800283a 	ret
210c6b70:	a009883a 	mov	r4,r20
210c6b74:	800b883a 	mov	r5,r16
210c6b78:	10c44300 	call	210c4430 <__swsetup_r>
210c6b7c:	1000ec1e 	bne	r2,zero,210c6f30 <__sfvwrite_r+0x4a8>
210c6b80:	8100030b 	ldhu	r4,12(r16)
210c6b84:	bc400017 	ldw	r17,0(r23)
210c6b88:	2080008c 	andi	r2,r4,2
210c6b8c:	103fd61e 	bne	r2,zero,210c6ae8 <__flash_rwdata_start+0xffff51f0>
210c6b90:	2080004c 	andi	r2,r4,1
210c6b94:	10003a1e 	bne	r2,zero,210c6c80 <__sfvwrite_r+0x1f8>
210c6b98:	0039883a 	mov	fp,zero
210c6b9c:	0025883a 	mov	r18,zero
210c6ba0:	90001a26 	beq	r18,zero,210c6c0c <__sfvwrite_r+0x184>
210c6ba4:	2080800c 	andi	r2,r4,512
210c6ba8:	85800217 	ldw	r22,8(r16)
210c6bac:	10007626 	beq	r2,zero,210c6d88 <__sfvwrite_r+0x300>
210c6bb0:	b027883a 	mov	r19,r22
210c6bb4:	95809436 	bltu	r18,r22,210c6e08 <__sfvwrite_r+0x380>
210c6bb8:	2081200c 	andi	r2,r4,1152
210c6bbc:	10009f1e 	bne	r2,zero,210c6e3c <__sfvwrite_r+0x3b4>
210c6bc0:	81000017 	ldw	r4,0(r16)
210c6bc4:	e00b883a 	mov	r5,fp
210c6bc8:	980d883a 	mov	r6,r19
210c6bcc:	10c75880 	call	210c7588 <memmove>
210c6bd0:	81000217 	ldw	r4,8(r16)
210c6bd4:	81400017 	ldw	r5,0(r16)
210c6bd8:	9005883a 	mov	r2,r18
210c6bdc:	2587c83a 	sub	r3,r4,r22
210c6be0:	2ce7883a 	add	r19,r5,r19
210c6be4:	80c00215 	stw	r3,8(r16)
210c6be8:	84c00015 	stw	r19,0(r16)
210c6bec:	b8c00217 	ldw	r3,8(r23)
210c6bf0:	e0b9883a 	add	fp,fp,r2
210c6bf4:	90a5c83a 	sub	r18,r18,r2
210c6bf8:	1885c83a 	sub	r2,r3,r2
210c6bfc:	b8800215 	stw	r2,8(r23)
210c6c00:	103fce26 	beq	r2,zero,210c6b3c <__flash_rwdata_start+0xffff5244>
210c6c04:	8100030b 	ldhu	r4,12(r16)
210c6c08:	903fe61e 	bne	r18,zero,210c6ba4 <__flash_rwdata_start+0xffff52ac>
210c6c0c:	8f000017 	ldw	fp,0(r17)
210c6c10:	8c800117 	ldw	r18,4(r17)
210c6c14:	8c400204 	addi	r17,r17,8
210c6c18:	003fe106 	br	210c6ba0 <__flash_rwdata_start+0xffff52a8>
210c6c1c:	8cc00017 	ldw	r19,0(r17)
210c6c20:	8c800117 	ldw	r18,4(r17)
210c6c24:	8c400204 	addi	r17,r17,8
210c6c28:	003fb306 	br	210c6af8 <__flash_rwdata_start+0xffff5200>
210c6c2c:	0005883a 	mov	r2,zero
210c6c30:	f800283a 	ret
210c6c34:	00a00034 	movhi	r2,32768
210c6c38:	10bfffc4 	addi	r2,r2,-1
210c6c3c:	9009883a 	mov	r4,r18
210c6c40:	1480012e 	bgeu	r2,r18,210c6c48 <__sfvwrite_r+0x1c0>
210c6c44:	1009883a 	mov	r4,r2
210c6c48:	980b883a 	mov	r5,r19
210c6c4c:	10cba480 	call	210cba48 <__divsi3>
210c6c50:	81400717 	ldw	r5,28(r16)
210c6c54:	80c00917 	ldw	r3,36(r16)
210c6c58:	988f383a 	mul	r7,r19,r2
210c6c5c:	a009883a 	mov	r4,r20
210c6c60:	e00d883a 	mov	r6,fp
210c6c64:	183ee83a 	callr	r3
210c6c68:	00bfe016 	blt	zero,r2,210c6bec <__flash_rwdata_start+0xffff52f4>
210c6c6c:	8080030b 	ldhu	r2,12(r16)
210c6c70:	10801014 	ori	r2,r2,64
210c6c74:	8080030d 	sth	r2,12(r16)
210c6c78:	00bfffc4 	movi	r2,-1
210c6c7c:	003fb006 	br	210c6b40 <__flash_rwdata_start+0xffff5248>
210c6c80:	0027883a 	mov	r19,zero
210c6c84:	0011883a 	mov	r8,zero
210c6c88:	0039883a 	mov	fp,zero
210c6c8c:	0025883a 	mov	r18,zero
210c6c90:	90001f26 	beq	r18,zero,210c6d10 <__sfvwrite_r+0x288>
210c6c94:	40006026 	beq	r8,zero,210c6e18 <__sfvwrite_r+0x390>
210c6c98:	982b883a 	mov	r21,r19
210c6c9c:	94c0012e 	bgeu	r18,r19,210c6ca4 <__sfvwrite_r+0x21c>
210c6ca0:	902b883a 	mov	r21,r18
210c6ca4:	81000017 	ldw	r4,0(r16)
210c6ca8:	80800417 	ldw	r2,16(r16)
210c6cac:	a82d883a 	mov	r22,r21
210c6cb0:	81800217 	ldw	r6,8(r16)
210c6cb4:	81c00517 	ldw	r7,20(r16)
210c6cb8:	1100022e 	bgeu	r2,r4,210c6cc4 <__sfvwrite_r+0x23c>
210c6cbc:	31c7883a 	add	r3,r6,r7
210c6cc0:	1d401816 	blt	r3,r21,210c6d24 <__sfvwrite_r+0x29c>
210c6cc4:	a9c04416 	blt	r21,r7,210c6dd8 <__sfvwrite_r+0x350>
210c6cc8:	80800917 	ldw	r2,36(r16)
210c6ccc:	81400717 	ldw	r5,28(r16)
210c6cd0:	a009883a 	mov	r4,r20
210c6cd4:	da000115 	stw	r8,4(sp)
210c6cd8:	e00d883a 	mov	r6,fp
210c6cdc:	103ee83a 	callr	r2
210c6ce0:	102d883a 	mov	r22,r2
210c6ce4:	da000117 	ldw	r8,4(sp)
210c6ce8:	00bfe00e 	bge	zero,r2,210c6c6c <__flash_rwdata_start+0xffff5374>
210c6cec:	9da7c83a 	sub	r19,r19,r22
210c6cf0:	98001f26 	beq	r19,zero,210c6d70 <__sfvwrite_r+0x2e8>
210c6cf4:	b8800217 	ldw	r2,8(r23)
210c6cf8:	e5b9883a 	add	fp,fp,r22
210c6cfc:	95a5c83a 	sub	r18,r18,r22
210c6d00:	15adc83a 	sub	r22,r2,r22
210c6d04:	bd800215 	stw	r22,8(r23)
210c6d08:	b03f8c26 	beq	r22,zero,210c6b3c <__flash_rwdata_start+0xffff5244>
210c6d0c:	903fe11e 	bne	r18,zero,210c6c94 <__flash_rwdata_start+0xffff539c>
210c6d10:	8f000017 	ldw	fp,0(r17)
210c6d14:	8c800117 	ldw	r18,4(r17)
210c6d18:	0011883a 	mov	r8,zero
210c6d1c:	8c400204 	addi	r17,r17,8
210c6d20:	003fdb06 	br	210c6c90 <__flash_rwdata_start+0xffff5398>
210c6d24:	180d883a 	mov	r6,r3
210c6d28:	e00b883a 	mov	r5,fp
210c6d2c:	da000115 	stw	r8,4(sp)
210c6d30:	d8c00015 	stw	r3,0(sp)
210c6d34:	10c75880 	call	210c7588 <memmove>
210c6d38:	d8c00017 	ldw	r3,0(sp)
210c6d3c:	80800017 	ldw	r2,0(r16)
210c6d40:	a009883a 	mov	r4,r20
210c6d44:	800b883a 	mov	r5,r16
210c6d48:	10c5883a 	add	r2,r2,r3
210c6d4c:	80800015 	stw	r2,0(r16)
210c6d50:	d8c00015 	stw	r3,0(sp)
210c6d54:	10c62480 	call	210c6248 <_fflush_r>
210c6d58:	d8c00017 	ldw	r3,0(sp)
210c6d5c:	da000117 	ldw	r8,4(sp)
210c6d60:	103fc21e 	bne	r2,zero,210c6c6c <__flash_rwdata_start+0xffff5374>
210c6d64:	182d883a 	mov	r22,r3
210c6d68:	9da7c83a 	sub	r19,r19,r22
210c6d6c:	983fe11e 	bne	r19,zero,210c6cf4 <__flash_rwdata_start+0xffff53fc>
210c6d70:	a009883a 	mov	r4,r20
210c6d74:	800b883a 	mov	r5,r16
210c6d78:	10c62480 	call	210c6248 <_fflush_r>
210c6d7c:	103fbb1e 	bne	r2,zero,210c6c6c <__flash_rwdata_start+0xffff5374>
210c6d80:	0011883a 	mov	r8,zero
210c6d84:	003fdb06 	br	210c6cf4 <__flash_rwdata_start+0xffff53fc>
210c6d88:	81000017 	ldw	r4,0(r16)
210c6d8c:	80800417 	ldw	r2,16(r16)
210c6d90:	11000236 	bltu	r2,r4,210c6d9c <__sfvwrite_r+0x314>
210c6d94:	84c00517 	ldw	r19,20(r16)
210c6d98:	94ffa62e 	bgeu	r18,r19,210c6c34 <__flash_rwdata_start+0xffff533c>
210c6d9c:	9027883a 	mov	r19,r18
210c6da0:	b480012e 	bgeu	r22,r18,210c6da8 <__sfvwrite_r+0x320>
210c6da4:	b027883a 	mov	r19,r22
210c6da8:	e00b883a 	mov	r5,fp
210c6dac:	980d883a 	mov	r6,r19
210c6db0:	10c75880 	call	210c7588 <memmove>
210c6db4:	80800217 	ldw	r2,8(r16)
210c6db8:	80c00017 	ldw	r3,0(r16)
210c6dbc:	14c5c83a 	sub	r2,r2,r19
210c6dc0:	1cc7883a 	add	r3,r3,r19
210c6dc4:	80800215 	stw	r2,8(r16)
210c6dc8:	80c00015 	stw	r3,0(r16)
210c6dcc:	10004326 	beq	r2,zero,210c6edc <__sfvwrite_r+0x454>
210c6dd0:	9805883a 	mov	r2,r19
210c6dd4:	003f8506 	br	210c6bec <__flash_rwdata_start+0xffff52f4>
210c6dd8:	a80d883a 	mov	r6,r21
210c6ddc:	e00b883a 	mov	r5,fp
210c6de0:	da000115 	stw	r8,4(sp)
210c6de4:	10c75880 	call	210c7588 <memmove>
210c6de8:	80800217 	ldw	r2,8(r16)
210c6dec:	80c00017 	ldw	r3,0(r16)
210c6df0:	da000117 	ldw	r8,4(sp)
210c6df4:	1545c83a 	sub	r2,r2,r21
210c6df8:	1d6b883a 	add	r21,r3,r21
210c6dfc:	80800215 	stw	r2,8(r16)
210c6e00:	85400015 	stw	r21,0(r16)
210c6e04:	003fb906 	br	210c6cec <__flash_rwdata_start+0xffff53f4>
210c6e08:	81000017 	ldw	r4,0(r16)
210c6e0c:	902d883a 	mov	r22,r18
210c6e10:	9027883a 	mov	r19,r18
210c6e14:	003f6b06 	br	210c6bc4 <__flash_rwdata_start+0xffff52cc>
210c6e18:	e009883a 	mov	r4,fp
210c6e1c:	01400284 	movi	r5,10
210c6e20:	900d883a 	mov	r6,r18
210c6e24:	10c73680 	call	210c7368 <memchr>
210c6e28:	10003e26 	beq	r2,zero,210c6f24 <__sfvwrite_r+0x49c>
210c6e2c:	10800044 	addi	r2,r2,1
210c6e30:	1727c83a 	sub	r19,r2,fp
210c6e34:	02000044 	movi	r8,1
210c6e38:	003f9706 	br	210c6c98 <__flash_rwdata_start+0xffff53a0>
210c6e3c:	80800517 	ldw	r2,20(r16)
210c6e40:	81400417 	ldw	r5,16(r16)
210c6e44:	80c00017 	ldw	r3,0(r16)
210c6e48:	10a7883a 	add	r19,r2,r2
210c6e4c:	9885883a 	add	r2,r19,r2
210c6e50:	1026d7fa 	srli	r19,r2,31
210c6e54:	196bc83a 	sub	r21,r3,r5
210c6e58:	a9800044 	addi	r6,r21,1
210c6e5c:	9885883a 	add	r2,r19,r2
210c6e60:	1027d07a 	srai	r19,r2,1
210c6e64:	3485883a 	add	r2,r6,r18
210c6e68:	980d883a 	mov	r6,r19
210c6e6c:	9880022e 	bgeu	r19,r2,210c6e78 <__sfvwrite_r+0x3f0>
210c6e70:	1027883a 	mov	r19,r2
210c6e74:	100d883a 	mov	r6,r2
210c6e78:	2101000c 	andi	r4,r4,1024
210c6e7c:	20001c26 	beq	r4,zero,210c6ef0 <__sfvwrite_r+0x468>
210c6e80:	a009883a 	mov	r4,r20
210c6e84:	300b883a 	mov	r5,r6
210c6e88:	10c1a280 	call	210c1a28 <_malloc_r>
210c6e8c:	102d883a 	mov	r22,r2
210c6e90:	10002926 	beq	r2,zero,210c6f38 <__sfvwrite_r+0x4b0>
210c6e94:	81400417 	ldw	r5,16(r16)
210c6e98:	1009883a 	mov	r4,r2
210c6e9c:	a80d883a 	mov	r6,r21
210c6ea0:	10c74500 	call	210c7450 <memcpy>
210c6ea4:	8080030b 	ldhu	r2,12(r16)
210c6ea8:	00fedfc4 	movi	r3,-1153
210c6eac:	10c4703a 	and	r2,r2,r3
210c6eb0:	10802014 	ori	r2,r2,128
210c6eb4:	8080030d 	sth	r2,12(r16)
210c6eb8:	b549883a 	add	r4,r22,r21
210c6ebc:	9d4bc83a 	sub	r5,r19,r21
210c6ec0:	85800415 	stw	r22,16(r16)
210c6ec4:	84c00515 	stw	r19,20(r16)
210c6ec8:	81000015 	stw	r4,0(r16)
210c6ecc:	902d883a 	mov	r22,r18
210c6ed0:	81400215 	stw	r5,8(r16)
210c6ed4:	9027883a 	mov	r19,r18
210c6ed8:	003f3a06 	br	210c6bc4 <__flash_rwdata_start+0xffff52cc>
210c6edc:	a009883a 	mov	r4,r20
210c6ee0:	800b883a 	mov	r5,r16
210c6ee4:	10c62480 	call	210c6248 <_fflush_r>
210c6ee8:	103fb926 	beq	r2,zero,210c6dd0 <__flash_rwdata_start+0xffff54d8>
210c6eec:	003f5f06 	br	210c6c6c <__flash_rwdata_start+0xffff5374>
210c6ef0:	a009883a 	mov	r4,r20
210c6ef4:	10c89140 	call	210c8914 <_realloc_r>
210c6ef8:	102d883a 	mov	r22,r2
210c6efc:	103fee1e 	bne	r2,zero,210c6eb8 <__flash_rwdata_start+0xffff55c0>
210c6f00:	81400417 	ldw	r5,16(r16)
210c6f04:	a009883a 	mov	r4,r20
210c6f08:	10c67980 	call	210c6798 <_free_r>
210c6f0c:	8080030b 	ldhu	r2,12(r16)
210c6f10:	00ffdfc4 	movi	r3,-129
210c6f14:	1884703a 	and	r2,r3,r2
210c6f18:	00c00304 	movi	r3,12
210c6f1c:	a0c00015 	stw	r3,0(r20)
210c6f20:	003f5306 	br	210c6c70 <__flash_rwdata_start+0xffff5378>
210c6f24:	94c00044 	addi	r19,r18,1
210c6f28:	02000044 	movi	r8,1
210c6f2c:	003f5a06 	br	210c6c98 <__flash_rwdata_start+0xffff53a0>
210c6f30:	00bfffc4 	movi	r2,-1
210c6f34:	003f0206 	br	210c6b40 <__flash_rwdata_start+0xffff5248>
210c6f38:	00800304 	movi	r2,12
210c6f3c:	a0800015 	stw	r2,0(r20)
210c6f40:	8080030b 	ldhu	r2,12(r16)
210c6f44:	003f4a06 	br	210c6c70 <__flash_rwdata_start+0xffff5378>

210c6f48 <_fwalk>:
210c6f48:	defff704 	addi	sp,sp,-36
210c6f4c:	dd000415 	stw	r20,16(sp)
210c6f50:	dfc00815 	stw	ra,32(sp)
210c6f54:	ddc00715 	stw	r23,28(sp)
210c6f58:	dd800615 	stw	r22,24(sp)
210c6f5c:	dd400515 	stw	r21,20(sp)
210c6f60:	dcc00315 	stw	r19,12(sp)
210c6f64:	dc800215 	stw	r18,8(sp)
210c6f68:	dc400115 	stw	r17,4(sp)
210c6f6c:	dc000015 	stw	r16,0(sp)
210c6f70:	2500b804 	addi	r20,r4,736
210c6f74:	a0002326 	beq	r20,zero,210c7004 <_fwalk+0xbc>
210c6f78:	282b883a 	mov	r21,r5
210c6f7c:	002f883a 	mov	r23,zero
210c6f80:	05800044 	movi	r22,1
210c6f84:	04ffffc4 	movi	r19,-1
210c6f88:	a4400117 	ldw	r17,4(r20)
210c6f8c:	a4800217 	ldw	r18,8(r20)
210c6f90:	8c7fffc4 	addi	r17,r17,-1
210c6f94:	88000d16 	blt	r17,zero,210c6fcc <_fwalk+0x84>
210c6f98:	94000304 	addi	r16,r18,12
210c6f9c:	94800384 	addi	r18,r18,14
210c6fa0:	80c0000b 	ldhu	r3,0(r16)
210c6fa4:	8c7fffc4 	addi	r17,r17,-1
210c6fa8:	813ffd04 	addi	r4,r16,-12
210c6fac:	b0c0042e 	bgeu	r22,r3,210c6fc0 <_fwalk+0x78>
210c6fb0:	90c0000f 	ldh	r3,0(r18)
210c6fb4:	1cc00226 	beq	r3,r19,210c6fc0 <_fwalk+0x78>
210c6fb8:	a83ee83a 	callr	r21
210c6fbc:	b8aeb03a 	or	r23,r23,r2
210c6fc0:	84001a04 	addi	r16,r16,104
210c6fc4:	94801a04 	addi	r18,r18,104
210c6fc8:	8cfff51e 	bne	r17,r19,210c6fa0 <__flash_rwdata_start+0xffff56a8>
210c6fcc:	a5000017 	ldw	r20,0(r20)
210c6fd0:	a03fed1e 	bne	r20,zero,210c6f88 <__flash_rwdata_start+0xffff5690>
210c6fd4:	b805883a 	mov	r2,r23
210c6fd8:	dfc00817 	ldw	ra,32(sp)
210c6fdc:	ddc00717 	ldw	r23,28(sp)
210c6fe0:	dd800617 	ldw	r22,24(sp)
210c6fe4:	dd400517 	ldw	r21,20(sp)
210c6fe8:	dd000417 	ldw	r20,16(sp)
210c6fec:	dcc00317 	ldw	r19,12(sp)
210c6ff0:	dc800217 	ldw	r18,8(sp)
210c6ff4:	dc400117 	ldw	r17,4(sp)
210c6ff8:	dc000017 	ldw	r16,0(sp)
210c6ffc:	dec00904 	addi	sp,sp,36
210c7000:	f800283a 	ret
210c7004:	002f883a 	mov	r23,zero
210c7008:	003ff206 	br	210c6fd4 <__flash_rwdata_start+0xffff56dc>

210c700c <_fwalk_reent>:
210c700c:	defff704 	addi	sp,sp,-36
210c7010:	dd400515 	stw	r21,20(sp)
210c7014:	dfc00815 	stw	ra,32(sp)
210c7018:	ddc00715 	stw	r23,28(sp)
210c701c:	dd800615 	stw	r22,24(sp)
210c7020:	dd000415 	stw	r20,16(sp)
210c7024:	dcc00315 	stw	r19,12(sp)
210c7028:	dc800215 	stw	r18,8(sp)
210c702c:	dc400115 	stw	r17,4(sp)
210c7030:	dc000015 	stw	r16,0(sp)
210c7034:	2540b804 	addi	r21,r4,736
210c7038:	a8002326 	beq	r21,zero,210c70c8 <_fwalk_reent+0xbc>
210c703c:	2829883a 	mov	r20,r5
210c7040:	202d883a 	mov	r22,r4
210c7044:	002f883a 	mov	r23,zero
210c7048:	04c00044 	movi	r19,1
210c704c:	04bfffc4 	movi	r18,-1
210c7050:	ac400117 	ldw	r17,4(r21)
210c7054:	ac000217 	ldw	r16,8(r21)
210c7058:	8c7fffc4 	addi	r17,r17,-1
210c705c:	88000c16 	blt	r17,zero,210c7090 <_fwalk_reent+0x84>
210c7060:	84000304 	addi	r16,r16,12
210c7064:	80c0000b 	ldhu	r3,0(r16)
210c7068:	8c7fffc4 	addi	r17,r17,-1
210c706c:	817ffd04 	addi	r5,r16,-12
210c7070:	98c0052e 	bgeu	r19,r3,210c7088 <_fwalk_reent+0x7c>
210c7074:	80c0008f 	ldh	r3,2(r16)
210c7078:	b009883a 	mov	r4,r22
210c707c:	1c800226 	beq	r3,r18,210c7088 <_fwalk_reent+0x7c>
210c7080:	a03ee83a 	callr	r20
210c7084:	b8aeb03a 	or	r23,r23,r2
210c7088:	84001a04 	addi	r16,r16,104
210c708c:	8cbff51e 	bne	r17,r18,210c7064 <__flash_rwdata_start+0xffff576c>
210c7090:	ad400017 	ldw	r21,0(r21)
210c7094:	a83fee1e 	bne	r21,zero,210c7050 <__flash_rwdata_start+0xffff5758>
210c7098:	b805883a 	mov	r2,r23
210c709c:	dfc00817 	ldw	ra,32(sp)
210c70a0:	ddc00717 	ldw	r23,28(sp)
210c70a4:	dd800617 	ldw	r22,24(sp)
210c70a8:	dd400517 	ldw	r21,20(sp)
210c70ac:	dd000417 	ldw	r20,16(sp)
210c70b0:	dcc00317 	ldw	r19,12(sp)
210c70b4:	dc800217 	ldw	r18,8(sp)
210c70b8:	dc400117 	ldw	r17,4(sp)
210c70bc:	dc000017 	ldw	r16,0(sp)
210c70c0:	dec00904 	addi	sp,sp,36
210c70c4:	f800283a 	ret
210c70c8:	002f883a 	mov	r23,zero
210c70cc:	003ff206 	br	210c7098 <__flash_rwdata_start+0xffff57a0>

210c70d0 <_setlocale_r>:
210c70d0:	30001b26 	beq	r6,zero,210c7140 <_setlocale_r+0x70>
210c70d4:	01440034 	movhi	r5,4096
210c70d8:	defffe04 	addi	sp,sp,-8
210c70dc:	29408d04 	addi	r5,r5,564
210c70e0:	3009883a 	mov	r4,r6
210c70e4:	dc000015 	stw	r16,0(sp)
210c70e8:	dfc00115 	stw	ra,4(sp)
210c70ec:	3021883a 	mov	r16,r6
210c70f0:	10c902c0 	call	210c902c <strcmp>
210c70f4:	1000061e 	bne	r2,zero,210c7110 <_setlocale_r+0x40>
210c70f8:	00840034 	movhi	r2,4096
210c70fc:	10806f04 	addi	r2,r2,444
210c7100:	dfc00117 	ldw	ra,4(sp)
210c7104:	dc000017 	ldw	r16,0(sp)
210c7108:	dec00204 	addi	sp,sp,8
210c710c:	f800283a 	ret
210c7110:	01440034 	movhi	r5,4096
210c7114:	29406f04 	addi	r5,r5,444
210c7118:	8009883a 	mov	r4,r16
210c711c:	10c902c0 	call	210c902c <strcmp>
210c7120:	103ff526 	beq	r2,zero,210c70f8 <__flash_rwdata_start+0xffff5800>
210c7124:	01440034 	movhi	r5,4096
210c7128:	2941a204 	addi	r5,r5,1672
210c712c:	8009883a 	mov	r4,r16
210c7130:	10c902c0 	call	210c902c <strcmp>
210c7134:	103ff026 	beq	r2,zero,210c70f8 <__flash_rwdata_start+0xffff5800>
210c7138:	0005883a 	mov	r2,zero
210c713c:	003ff006 	br	210c7100 <__flash_rwdata_start+0xffff5808>
210c7140:	00840034 	movhi	r2,4096
210c7144:	10806f04 	addi	r2,r2,444
210c7148:	f800283a 	ret

210c714c <__locale_charset>:
210c714c:	00840034 	movhi	r2,4096
210c7150:	10843604 	addi	r2,r2,4312
210c7154:	f800283a 	ret

210c7158 <__locale_mb_cur_max>:
210c7158:	00840034 	movhi	r2,4096
210c715c:	10892604 	addi	r2,r2,9368
210c7160:	10800017 	ldw	r2,0(r2)
210c7164:	f800283a 	ret

210c7168 <__locale_msgcharset>:
210c7168:	00840034 	movhi	r2,4096
210c716c:	10842e04 	addi	r2,r2,4280
210c7170:	f800283a 	ret

210c7174 <__locale_cjk_lang>:
210c7174:	0005883a 	mov	r2,zero
210c7178:	f800283a 	ret

210c717c <_localeconv_r>:
210c717c:	00840034 	movhi	r2,4096
210c7180:	10843e04 	addi	r2,r2,4344
210c7184:	f800283a 	ret

210c7188 <setlocale>:
210c7188:	00c40034 	movhi	r3,4096
210c718c:	18c92304 	addi	r3,r3,9356
210c7190:	2005883a 	mov	r2,r4
210c7194:	19000017 	ldw	r4,0(r3)
210c7198:	280d883a 	mov	r6,r5
210c719c:	100b883a 	mov	r5,r2
210c71a0:	10c70d01 	jmpi	210c70d0 <_setlocale_r>

210c71a4 <localeconv>:
210c71a4:	00840034 	movhi	r2,4096
210c71a8:	10843e04 	addi	r2,r2,4344
210c71ac:	f800283a 	ret

210c71b0 <__smakebuf_r>:
210c71b0:	2880030b 	ldhu	r2,12(r5)
210c71b4:	10c0008c 	andi	r3,r2,2
210c71b8:	1800401e 	bne	r3,zero,210c72bc <__smakebuf_r+0x10c>
210c71bc:	deffec04 	addi	sp,sp,-80
210c71c0:	dc000f15 	stw	r16,60(sp)
210c71c4:	2821883a 	mov	r16,r5
210c71c8:	2940038f 	ldh	r5,14(r5)
210c71cc:	dc401015 	stw	r17,64(sp)
210c71d0:	dfc01315 	stw	ra,76(sp)
210c71d4:	dcc01215 	stw	r19,72(sp)
210c71d8:	dc801115 	stw	r18,68(sp)
210c71dc:	2023883a 	mov	r17,r4
210c71e0:	28001b16 	blt	r5,zero,210c7250 <__smakebuf_r+0xa0>
210c71e4:	d80d883a 	mov	r6,sp
210c71e8:	10cab400 	call	210cab40 <_fstat_r>
210c71ec:	10001716 	blt	r2,zero,210c724c <__smakebuf_r+0x9c>
210c71f0:	d8800117 	ldw	r2,4(sp)
210c71f4:	00e00014 	movui	r3,32768
210c71f8:	10bc000c 	andi	r2,r2,61440
210c71fc:	10c03726 	beq	r2,r3,210c72dc <__smakebuf_r+0x12c>
210c7200:	80c0030b 	ldhu	r3,12(r16)
210c7204:	18c20014 	ori	r3,r3,2048
210c7208:	80c0030d 	sth	r3,12(r16)
210c720c:	00c80004 	movi	r3,8192
210c7210:	10c03c1e 	bne	r2,r3,210c7304 <__smakebuf_r+0x154>
210c7214:	8140038f 	ldh	r5,14(r16)
210c7218:	8809883a 	mov	r4,r17
210c721c:	10cab980 	call	210cab98 <_isatty_r>
210c7220:	10004e26 	beq	r2,zero,210c735c <__smakebuf_r+0x1ac>
210c7224:	8080030b 	ldhu	r2,12(r16)
210c7228:	04c00044 	movi	r19,1
210c722c:	80c010c4 	addi	r3,r16,67
210c7230:	14c4b03a 	or	r2,r2,r19
210c7234:	8080030d 	sth	r2,12(r16)
210c7238:	80c00015 	stw	r3,0(r16)
210c723c:	80c00415 	stw	r3,16(r16)
210c7240:	84c00515 	stw	r19,20(r16)
210c7244:	04810004 	movi	r18,1024
210c7248:	00000706 	br	210c7268 <__smakebuf_r+0xb8>
210c724c:	8080030b 	ldhu	r2,12(r16)
210c7250:	10c0200c 	andi	r3,r2,128
210c7254:	18001f1e 	bne	r3,zero,210c72d4 <__smakebuf_r+0x124>
210c7258:	04810004 	movi	r18,1024
210c725c:	10820014 	ori	r2,r2,2048
210c7260:	8080030d 	sth	r2,12(r16)
210c7264:	0027883a 	mov	r19,zero
210c7268:	8809883a 	mov	r4,r17
210c726c:	900b883a 	mov	r5,r18
210c7270:	10c1a280 	call	210c1a28 <_malloc_r>
210c7274:	10002e26 	beq	r2,zero,210c7330 <__smakebuf_r+0x180>
210c7278:	80c0030b 	ldhu	r3,12(r16)
210c727c:	01084334 	movhi	r4,8460
210c7280:	2118b904 	addi	r4,r4,25316
210c7284:	89000f15 	stw	r4,60(r17)
210c7288:	18c02014 	ori	r3,r3,128
210c728c:	80c0030d 	sth	r3,12(r16)
210c7290:	80800015 	stw	r2,0(r16)
210c7294:	80800415 	stw	r2,16(r16)
210c7298:	84800515 	stw	r18,20(r16)
210c729c:	98001c1e 	bne	r19,zero,210c7310 <__smakebuf_r+0x160>
210c72a0:	dfc01317 	ldw	ra,76(sp)
210c72a4:	dcc01217 	ldw	r19,72(sp)
210c72a8:	dc801117 	ldw	r18,68(sp)
210c72ac:	dc401017 	ldw	r17,64(sp)
210c72b0:	dc000f17 	ldw	r16,60(sp)
210c72b4:	dec01404 	addi	sp,sp,80
210c72b8:	f800283a 	ret
210c72bc:	288010c4 	addi	r2,r5,67
210c72c0:	28800015 	stw	r2,0(r5)
210c72c4:	28800415 	stw	r2,16(r5)
210c72c8:	00800044 	movi	r2,1
210c72cc:	28800515 	stw	r2,20(r5)
210c72d0:	f800283a 	ret
210c72d4:	04801004 	movi	r18,64
210c72d8:	003fe006 	br	210c725c <__flash_rwdata_start+0xffff5964>
210c72dc:	81000a17 	ldw	r4,40(r16)
210c72e0:	00c84374 	movhi	r3,8461
210c72e4:	18e3f204 	addi	r3,r3,-28728
210c72e8:	20ffc51e 	bne	r4,r3,210c7200 <__flash_rwdata_start+0xffff5908>
210c72ec:	80c0030b 	ldhu	r3,12(r16)
210c72f0:	01010004 	movi	r4,1024
210c72f4:	81001315 	stw	r4,76(r16)
210c72f8:	1906b03a 	or	r3,r3,r4
210c72fc:	80c0030d 	sth	r3,12(r16)
210c7300:	003fc206 	br	210c720c <__flash_rwdata_start+0xffff5914>
210c7304:	0027883a 	mov	r19,zero
210c7308:	04810004 	movi	r18,1024
210c730c:	003fd606 	br	210c7268 <__flash_rwdata_start+0xffff5970>
210c7310:	8140038f 	ldh	r5,14(r16)
210c7314:	8809883a 	mov	r4,r17
210c7318:	10cab980 	call	210cab98 <_isatty_r>
210c731c:	103fe026 	beq	r2,zero,210c72a0 <__flash_rwdata_start+0xffff59a8>
210c7320:	8080030b 	ldhu	r2,12(r16)
210c7324:	10800054 	ori	r2,r2,1
210c7328:	8080030d 	sth	r2,12(r16)
210c732c:	003fdc06 	br	210c72a0 <__flash_rwdata_start+0xffff59a8>
210c7330:	8080030b 	ldhu	r2,12(r16)
210c7334:	10c0800c 	andi	r3,r2,512
210c7338:	183fd91e 	bne	r3,zero,210c72a0 <__flash_rwdata_start+0xffff59a8>
210c733c:	10800094 	ori	r2,r2,2
210c7340:	80c010c4 	addi	r3,r16,67
210c7344:	8080030d 	sth	r2,12(r16)
210c7348:	00800044 	movi	r2,1
210c734c:	80c00015 	stw	r3,0(r16)
210c7350:	80c00415 	stw	r3,16(r16)
210c7354:	80800515 	stw	r2,20(r16)
210c7358:	003fd106 	br	210c72a0 <__flash_rwdata_start+0xffff59a8>
210c735c:	04c00044 	movi	r19,1
210c7360:	04810004 	movi	r18,1024
210c7364:	003fc006 	br	210c7268 <__flash_rwdata_start+0xffff5970>

210c7368 <memchr>:
210c7368:	208000cc 	andi	r2,r4,3
210c736c:	280f883a 	mov	r7,r5
210c7370:	10003526 	beq	r2,zero,210c7448 <memchr+0xe0>
210c7374:	30bfffc4 	addi	r2,r6,-1
210c7378:	30001b26 	beq	r6,zero,210c73e8 <memchr+0x80>
210c737c:	21800003 	ldbu	r6,0(r4)
210c7380:	28c03fcc 	andi	r3,r5,255
210c7384:	30c01a26 	beq	r6,r3,210c73f0 <memchr+0x88>
210c7388:	180d883a 	mov	r6,r3
210c738c:	00000406 	br	210c73a0 <memchr+0x38>
210c7390:	10001526 	beq	r2,zero,210c73e8 <memchr+0x80>
210c7394:	20c00003 	ldbu	r3,0(r4)
210c7398:	10bfffc4 	addi	r2,r2,-1
210c739c:	19801426 	beq	r3,r6,210c73f0 <memchr+0x88>
210c73a0:	21000044 	addi	r4,r4,1
210c73a4:	20c000cc 	andi	r3,r4,3
210c73a8:	183ff91e 	bne	r3,zero,210c7390 <__flash_rwdata_start+0xffff5a98>
210c73ac:	024000c4 	movi	r9,3
210c73b0:	48801136 	bltu	r9,r2,210c73f8 <memchr+0x90>
210c73b4:	10000c26 	beq	r2,zero,210c73e8 <memchr+0x80>
210c73b8:	20c00003 	ldbu	r3,0(r4)
210c73bc:	29403fcc 	andi	r5,r5,255
210c73c0:	19400b26 	beq	r3,r5,210c73f0 <memchr+0x88>
210c73c4:	20c00044 	addi	r3,r4,1
210c73c8:	2085883a 	add	r2,r4,r2
210c73cc:	39803fcc 	andi	r6,r7,255
210c73d0:	00000306 	br	210c73e0 <memchr+0x78>
210c73d4:	18c00044 	addi	r3,r3,1
210c73d8:	197fffc3 	ldbu	r5,-1(r3)
210c73dc:	29800426 	beq	r5,r6,210c73f0 <memchr+0x88>
210c73e0:	1809883a 	mov	r4,r3
210c73e4:	18bffb1e 	bne	r3,r2,210c73d4 <__flash_rwdata_start+0xffff5adc>
210c73e8:	0005883a 	mov	r2,zero
210c73ec:	f800283a 	ret
210c73f0:	2005883a 	mov	r2,r4
210c73f4:	f800283a 	ret
210c73f8:	28c03fcc 	andi	r3,r5,255
210c73fc:	1810923a 	slli	r8,r3,8
210c7400:	02ffbff4 	movhi	r11,65279
210c7404:	02a02074 	movhi	r10,32897
210c7408:	40c6b03a 	or	r3,r8,r3
210c740c:	1810943a 	slli	r8,r3,16
210c7410:	5affbfc4 	addi	r11,r11,-257
210c7414:	52a02004 	addi	r10,r10,-32640
210c7418:	40d0b03a 	or	r8,r8,r3
210c741c:	20c00017 	ldw	r3,0(r4)
210c7420:	40c6f03a 	xor	r3,r8,r3
210c7424:	1acd883a 	add	r6,r3,r11
210c7428:	00c6303a 	nor	r3,zero,r3
210c742c:	30c6703a 	and	r3,r6,r3
210c7430:	1a86703a 	and	r3,r3,r10
210c7434:	183fdf1e 	bne	r3,zero,210c73b4 <__flash_rwdata_start+0xffff5abc>
210c7438:	10bfff04 	addi	r2,r2,-4
210c743c:	21000104 	addi	r4,r4,4
210c7440:	48bff636 	bltu	r9,r2,210c741c <__flash_rwdata_start+0xffff5b24>
210c7444:	003fdb06 	br	210c73b4 <__flash_rwdata_start+0xffff5abc>
210c7448:	3005883a 	mov	r2,r6
210c744c:	003fd706 	br	210c73ac <__flash_rwdata_start+0xffff5ab4>

210c7450 <memcpy>:
210c7450:	deffff04 	addi	sp,sp,-4
210c7454:	dc000015 	stw	r16,0(sp)
210c7458:	00c003c4 	movi	r3,15
210c745c:	2005883a 	mov	r2,r4
210c7460:	1980432e 	bgeu	r3,r6,210c7570 <memcpy+0x120>
210c7464:	2146b03a 	or	r3,r4,r5
210c7468:	18c000cc 	andi	r3,r3,3
210c746c:	1800421e 	bne	r3,zero,210c7578 <memcpy+0x128>
210c7470:	343ffc04 	addi	r16,r6,-16
210c7474:	8020d13a 	srli	r16,r16,4
210c7478:	28c00104 	addi	r3,r5,4
210c747c:	23400104 	addi	r13,r4,4
210c7480:	801e913a 	slli	r15,r16,4
210c7484:	2b000204 	addi	r12,r5,8
210c7488:	22c00204 	addi	r11,r4,8
210c748c:	7bc00504 	addi	r15,r15,20
210c7490:	2a800304 	addi	r10,r5,12
210c7494:	22400304 	addi	r9,r4,12
210c7498:	2bdf883a 	add	r15,r5,r15
210c749c:	2811883a 	mov	r8,r5
210c74a0:	200f883a 	mov	r7,r4
210c74a4:	41000017 	ldw	r4,0(r8)
210c74a8:	39c00404 	addi	r7,r7,16
210c74ac:	18c00404 	addi	r3,r3,16
210c74b0:	393ffc15 	stw	r4,-16(r7)
210c74b4:	1bbffc17 	ldw	r14,-16(r3)
210c74b8:	6b400404 	addi	r13,r13,16
210c74bc:	5ac00404 	addi	r11,r11,16
210c74c0:	6bbffc15 	stw	r14,-16(r13)
210c74c4:	63800017 	ldw	r14,0(r12)
210c74c8:	4a400404 	addi	r9,r9,16
210c74cc:	42000404 	addi	r8,r8,16
210c74d0:	5bbffc15 	stw	r14,-16(r11)
210c74d4:	53800017 	ldw	r14,0(r10)
210c74d8:	63000404 	addi	r12,r12,16
210c74dc:	52800404 	addi	r10,r10,16
210c74e0:	4bbffc15 	stw	r14,-16(r9)
210c74e4:	1bffef1e 	bne	r3,r15,210c74a4 <__flash_rwdata_start+0xffff5bac>
210c74e8:	81c00044 	addi	r7,r16,1
210c74ec:	380e913a 	slli	r7,r7,4
210c74f0:	310003cc 	andi	r4,r6,15
210c74f4:	02c000c4 	movi	r11,3
210c74f8:	11c7883a 	add	r3,r2,r7
210c74fc:	29cb883a 	add	r5,r5,r7
210c7500:	59001f2e 	bgeu	r11,r4,210c7580 <memcpy+0x130>
210c7504:	1813883a 	mov	r9,r3
210c7508:	2811883a 	mov	r8,r5
210c750c:	200f883a 	mov	r7,r4
210c7510:	42800017 	ldw	r10,0(r8)
210c7514:	4a400104 	addi	r9,r9,4
210c7518:	39ffff04 	addi	r7,r7,-4
210c751c:	4abfff15 	stw	r10,-4(r9)
210c7520:	42000104 	addi	r8,r8,4
210c7524:	59fffa36 	bltu	r11,r7,210c7510 <__flash_rwdata_start+0xffff5c18>
210c7528:	213fff04 	addi	r4,r4,-4
210c752c:	2008d0ba 	srli	r4,r4,2
210c7530:	318000cc 	andi	r6,r6,3
210c7534:	21000044 	addi	r4,r4,1
210c7538:	2109883a 	add	r4,r4,r4
210c753c:	2109883a 	add	r4,r4,r4
210c7540:	1907883a 	add	r3,r3,r4
210c7544:	290b883a 	add	r5,r5,r4
210c7548:	30000626 	beq	r6,zero,210c7564 <memcpy+0x114>
210c754c:	198d883a 	add	r6,r3,r6
210c7550:	29c00003 	ldbu	r7,0(r5)
210c7554:	18c00044 	addi	r3,r3,1
210c7558:	29400044 	addi	r5,r5,1
210c755c:	19ffffc5 	stb	r7,-1(r3)
210c7560:	19bffb1e 	bne	r3,r6,210c7550 <__flash_rwdata_start+0xffff5c58>
210c7564:	dc000017 	ldw	r16,0(sp)
210c7568:	dec00104 	addi	sp,sp,4
210c756c:	f800283a 	ret
210c7570:	2007883a 	mov	r3,r4
210c7574:	003ff406 	br	210c7548 <__flash_rwdata_start+0xffff5c50>
210c7578:	2007883a 	mov	r3,r4
210c757c:	003ff306 	br	210c754c <__flash_rwdata_start+0xffff5c54>
210c7580:	200d883a 	mov	r6,r4
210c7584:	003ff006 	br	210c7548 <__flash_rwdata_start+0xffff5c50>

210c7588 <memmove>:
210c7588:	2005883a 	mov	r2,r4
210c758c:	29000b2e 	bgeu	r5,r4,210c75bc <memmove+0x34>
210c7590:	298f883a 	add	r7,r5,r6
210c7594:	21c0092e 	bgeu	r4,r7,210c75bc <memmove+0x34>
210c7598:	2187883a 	add	r3,r4,r6
210c759c:	198bc83a 	sub	r5,r3,r6
210c75a0:	30004b26 	beq	r6,zero,210c76d0 <memmove+0x148>
210c75a4:	39ffffc4 	addi	r7,r7,-1
210c75a8:	39000003 	ldbu	r4,0(r7)
210c75ac:	18ffffc4 	addi	r3,r3,-1
210c75b0:	19000005 	stb	r4,0(r3)
210c75b4:	197ffb1e 	bne	r3,r5,210c75a4 <__flash_rwdata_start+0xffff5cac>
210c75b8:	f800283a 	ret
210c75bc:	00c003c4 	movi	r3,15
210c75c0:	1980412e 	bgeu	r3,r6,210c76c8 <memmove+0x140>
210c75c4:	1146b03a 	or	r3,r2,r5
210c75c8:	18c000cc 	andi	r3,r3,3
210c75cc:	1800411e 	bne	r3,zero,210c76d4 <memmove+0x14c>
210c75d0:	33fffc04 	addi	r15,r6,-16
210c75d4:	781ed13a 	srli	r15,r15,4
210c75d8:	28c00104 	addi	r3,r5,4
210c75dc:	13400104 	addi	r13,r2,4
210c75e0:	781c913a 	slli	r14,r15,4
210c75e4:	2b000204 	addi	r12,r5,8
210c75e8:	12c00204 	addi	r11,r2,8
210c75ec:	73800504 	addi	r14,r14,20
210c75f0:	2a800304 	addi	r10,r5,12
210c75f4:	12400304 	addi	r9,r2,12
210c75f8:	2b9d883a 	add	r14,r5,r14
210c75fc:	2811883a 	mov	r8,r5
210c7600:	100f883a 	mov	r7,r2
210c7604:	41000017 	ldw	r4,0(r8)
210c7608:	39c00404 	addi	r7,r7,16
210c760c:	18c00404 	addi	r3,r3,16
210c7610:	393ffc15 	stw	r4,-16(r7)
210c7614:	193ffc17 	ldw	r4,-16(r3)
210c7618:	6b400404 	addi	r13,r13,16
210c761c:	5ac00404 	addi	r11,r11,16
210c7620:	693ffc15 	stw	r4,-16(r13)
210c7624:	61000017 	ldw	r4,0(r12)
210c7628:	4a400404 	addi	r9,r9,16
210c762c:	42000404 	addi	r8,r8,16
210c7630:	593ffc15 	stw	r4,-16(r11)
210c7634:	51000017 	ldw	r4,0(r10)
210c7638:	63000404 	addi	r12,r12,16
210c763c:	52800404 	addi	r10,r10,16
210c7640:	493ffc15 	stw	r4,-16(r9)
210c7644:	1bbfef1e 	bne	r3,r14,210c7604 <__flash_rwdata_start+0xffff5d0c>
210c7648:	79000044 	addi	r4,r15,1
210c764c:	2008913a 	slli	r4,r4,4
210c7650:	328003cc 	andi	r10,r6,15
210c7654:	02c000c4 	movi	r11,3
210c7658:	1107883a 	add	r3,r2,r4
210c765c:	290b883a 	add	r5,r5,r4
210c7660:	5a801e2e 	bgeu	r11,r10,210c76dc <memmove+0x154>
210c7664:	1813883a 	mov	r9,r3
210c7668:	2811883a 	mov	r8,r5
210c766c:	500f883a 	mov	r7,r10
210c7670:	41000017 	ldw	r4,0(r8)
210c7674:	4a400104 	addi	r9,r9,4
210c7678:	39ffff04 	addi	r7,r7,-4
210c767c:	493fff15 	stw	r4,-4(r9)
210c7680:	42000104 	addi	r8,r8,4
210c7684:	59fffa36 	bltu	r11,r7,210c7670 <__flash_rwdata_start+0xffff5d78>
210c7688:	513fff04 	addi	r4,r10,-4
210c768c:	2008d0ba 	srli	r4,r4,2
210c7690:	318000cc 	andi	r6,r6,3
210c7694:	21000044 	addi	r4,r4,1
210c7698:	2109883a 	add	r4,r4,r4
210c769c:	2109883a 	add	r4,r4,r4
210c76a0:	1907883a 	add	r3,r3,r4
210c76a4:	290b883a 	add	r5,r5,r4
210c76a8:	30000926 	beq	r6,zero,210c76d0 <memmove+0x148>
210c76ac:	198d883a 	add	r6,r3,r6
210c76b0:	29c00003 	ldbu	r7,0(r5)
210c76b4:	18c00044 	addi	r3,r3,1
210c76b8:	29400044 	addi	r5,r5,1
210c76bc:	19ffffc5 	stb	r7,-1(r3)
210c76c0:	19bffb1e 	bne	r3,r6,210c76b0 <__flash_rwdata_start+0xffff5db8>
210c76c4:	f800283a 	ret
210c76c8:	1007883a 	mov	r3,r2
210c76cc:	003ff606 	br	210c76a8 <__flash_rwdata_start+0xffff5db0>
210c76d0:	f800283a 	ret
210c76d4:	1007883a 	mov	r3,r2
210c76d8:	003ff406 	br	210c76ac <__flash_rwdata_start+0xffff5db4>
210c76dc:	500d883a 	mov	r6,r10
210c76e0:	003ff106 	br	210c76a8 <__flash_rwdata_start+0xffff5db0>

210c76e4 <memset>:
210c76e4:	20c000cc 	andi	r3,r4,3
210c76e8:	2005883a 	mov	r2,r4
210c76ec:	18004326 	beq	r3,zero,210c77fc <memset+0x118>
210c76f0:	31ffffc4 	addi	r7,r6,-1
210c76f4:	30004026 	beq	r6,zero,210c77f8 <memset+0x114>
210c76f8:	2813883a 	mov	r9,r5
210c76fc:	200d883a 	mov	r6,r4
210c7700:	2007883a 	mov	r3,r4
210c7704:	00000406 	br	210c7718 <memset+0x34>
210c7708:	3a3fffc4 	addi	r8,r7,-1
210c770c:	31800044 	addi	r6,r6,1
210c7710:	38003926 	beq	r7,zero,210c77f8 <memset+0x114>
210c7714:	400f883a 	mov	r7,r8
210c7718:	18c00044 	addi	r3,r3,1
210c771c:	32400005 	stb	r9,0(r6)
210c7720:	1a0000cc 	andi	r8,r3,3
210c7724:	403ff81e 	bne	r8,zero,210c7708 <__flash_rwdata_start+0xffff5e10>
210c7728:	010000c4 	movi	r4,3
210c772c:	21c02d2e 	bgeu	r4,r7,210c77e4 <memset+0x100>
210c7730:	29803fcc 	andi	r6,r5,255
210c7734:	3008923a 	slli	r4,r6,8
210c7738:	218cb03a 	or	r6,r4,r6
210c773c:	3008943a 	slli	r4,r6,16
210c7740:	218cb03a 	or	r6,r4,r6
210c7744:	010003c4 	movi	r4,15
210c7748:	21c0182e 	bgeu	r4,r7,210c77ac <memset+0xc8>
210c774c:	3b3ffc04 	addi	r12,r7,-16
210c7750:	6018d13a 	srli	r12,r12,4
210c7754:	1a000104 	addi	r8,r3,4
210c7758:	1ac00204 	addi	r11,r3,8
210c775c:	6008913a 	slli	r4,r12,4
210c7760:	1a800304 	addi	r10,r3,12
210c7764:	1813883a 	mov	r9,r3
210c7768:	21000504 	addi	r4,r4,20
210c776c:	1909883a 	add	r4,r3,r4
210c7770:	49800015 	stw	r6,0(r9)
210c7774:	41800015 	stw	r6,0(r8)
210c7778:	59800015 	stw	r6,0(r11)
210c777c:	51800015 	stw	r6,0(r10)
210c7780:	42000404 	addi	r8,r8,16
210c7784:	4a400404 	addi	r9,r9,16
210c7788:	5ac00404 	addi	r11,r11,16
210c778c:	52800404 	addi	r10,r10,16
210c7790:	413ff71e 	bne	r8,r4,210c7770 <__flash_rwdata_start+0xffff5e78>
210c7794:	63000044 	addi	r12,r12,1
210c7798:	6018913a 	slli	r12,r12,4
210c779c:	39c003cc 	andi	r7,r7,15
210c77a0:	010000c4 	movi	r4,3
210c77a4:	1b07883a 	add	r3,r3,r12
210c77a8:	21c00e2e 	bgeu	r4,r7,210c77e4 <memset+0x100>
210c77ac:	1813883a 	mov	r9,r3
210c77b0:	3811883a 	mov	r8,r7
210c77b4:	010000c4 	movi	r4,3
210c77b8:	49800015 	stw	r6,0(r9)
210c77bc:	423fff04 	addi	r8,r8,-4
210c77c0:	4a400104 	addi	r9,r9,4
210c77c4:	223ffc36 	bltu	r4,r8,210c77b8 <__flash_rwdata_start+0xffff5ec0>
210c77c8:	393fff04 	addi	r4,r7,-4
210c77cc:	2008d0ba 	srli	r4,r4,2
210c77d0:	39c000cc 	andi	r7,r7,3
210c77d4:	21000044 	addi	r4,r4,1
210c77d8:	2109883a 	add	r4,r4,r4
210c77dc:	2109883a 	add	r4,r4,r4
210c77e0:	1907883a 	add	r3,r3,r4
210c77e4:	38000426 	beq	r7,zero,210c77f8 <memset+0x114>
210c77e8:	19cf883a 	add	r7,r3,r7
210c77ec:	19400005 	stb	r5,0(r3)
210c77f0:	18c00044 	addi	r3,r3,1
210c77f4:	19fffd1e 	bne	r3,r7,210c77ec <__flash_rwdata_start+0xffff5ef4>
210c77f8:	f800283a 	ret
210c77fc:	2007883a 	mov	r3,r4
210c7800:	300f883a 	mov	r7,r6
210c7804:	003fc806 	br	210c7728 <__flash_rwdata_start+0xffff5e30>

210c7808 <_Balloc>:
210c7808:	20801317 	ldw	r2,76(r4)
210c780c:	defffc04 	addi	sp,sp,-16
210c7810:	dc400115 	stw	r17,4(sp)
210c7814:	dc000015 	stw	r16,0(sp)
210c7818:	dfc00315 	stw	ra,12(sp)
210c781c:	dc800215 	stw	r18,8(sp)
210c7820:	2023883a 	mov	r17,r4
210c7824:	2821883a 	mov	r16,r5
210c7828:	10000f26 	beq	r2,zero,210c7868 <_Balloc+0x60>
210c782c:	8407883a 	add	r3,r16,r16
210c7830:	18c7883a 	add	r3,r3,r3
210c7834:	10c7883a 	add	r3,r2,r3
210c7838:	18800017 	ldw	r2,0(r3)
210c783c:	10001126 	beq	r2,zero,210c7884 <_Balloc+0x7c>
210c7840:	11000017 	ldw	r4,0(r2)
210c7844:	19000015 	stw	r4,0(r3)
210c7848:	10000415 	stw	zero,16(r2)
210c784c:	10000315 	stw	zero,12(r2)
210c7850:	dfc00317 	ldw	ra,12(sp)
210c7854:	dc800217 	ldw	r18,8(sp)
210c7858:	dc400117 	ldw	r17,4(sp)
210c785c:	dc000017 	ldw	r16,0(sp)
210c7860:	dec00404 	addi	sp,sp,16
210c7864:	f800283a 	ret
210c7868:	01400104 	movi	r5,4
210c786c:	01800844 	movi	r6,33
210c7870:	10ca7980 	call	210ca798 <_calloc_r>
210c7874:	88801315 	stw	r2,76(r17)
210c7878:	103fec1e 	bne	r2,zero,210c782c <__flash_rwdata_start+0xffff5f34>
210c787c:	0005883a 	mov	r2,zero
210c7880:	003ff306 	br	210c7850 <__flash_rwdata_start+0xffff5f58>
210c7884:	01400044 	movi	r5,1
210c7888:	2c24983a 	sll	r18,r5,r16
210c788c:	8809883a 	mov	r4,r17
210c7890:	91800144 	addi	r6,r18,5
210c7894:	318d883a 	add	r6,r6,r6
210c7898:	318d883a 	add	r6,r6,r6
210c789c:	10ca7980 	call	210ca798 <_calloc_r>
210c78a0:	103ff626 	beq	r2,zero,210c787c <__flash_rwdata_start+0xffff5f84>
210c78a4:	14000115 	stw	r16,4(r2)
210c78a8:	14800215 	stw	r18,8(r2)
210c78ac:	003fe606 	br	210c7848 <__flash_rwdata_start+0xffff5f50>

210c78b0 <_Bfree>:
210c78b0:	28000826 	beq	r5,zero,210c78d4 <_Bfree+0x24>
210c78b4:	28c00117 	ldw	r3,4(r5)
210c78b8:	20801317 	ldw	r2,76(r4)
210c78bc:	18c7883a 	add	r3,r3,r3
210c78c0:	18c7883a 	add	r3,r3,r3
210c78c4:	10c5883a 	add	r2,r2,r3
210c78c8:	10c00017 	ldw	r3,0(r2)
210c78cc:	28c00015 	stw	r3,0(r5)
210c78d0:	11400015 	stw	r5,0(r2)
210c78d4:	f800283a 	ret

210c78d8 <__multadd>:
210c78d8:	defffa04 	addi	sp,sp,-24
210c78dc:	dc000115 	stw	r16,4(sp)
210c78e0:	2c000417 	ldw	r16,16(r5)
210c78e4:	dc800315 	stw	r18,12(sp)
210c78e8:	dc400215 	stw	r17,8(sp)
210c78ec:	dfc00515 	stw	ra,20(sp)
210c78f0:	dcc00415 	stw	r19,16(sp)
210c78f4:	2823883a 	mov	r17,r5
210c78f8:	2025883a 	mov	r18,r4
210c78fc:	2a400504 	addi	r9,r5,20
210c7900:	0015883a 	mov	r10,zero
210c7904:	4a000017 	ldw	r8,0(r9)
210c7908:	4a400104 	addi	r9,r9,4
210c790c:	52800044 	addi	r10,r10,1
210c7910:	40ffffcc 	andi	r3,r8,65535
210c7914:	1987383a 	mul	r3,r3,r6
210c7918:	4010d43a 	srli	r8,r8,16
210c791c:	19cf883a 	add	r7,r3,r7
210c7920:	4191383a 	mul	r8,r8,r6
210c7924:	3816d43a 	srli	r11,r7,16
210c7928:	38ffffcc 	andi	r3,r7,65535
210c792c:	5a0f883a 	add	r7,r11,r8
210c7930:	3810943a 	slli	r8,r7,16
210c7934:	380ed43a 	srli	r7,r7,16
210c7938:	40c7883a 	add	r3,r8,r3
210c793c:	48ffff15 	stw	r3,-4(r9)
210c7940:	543ff016 	blt	r10,r16,210c7904 <__flash_rwdata_start+0xffff600c>
210c7944:	38000926 	beq	r7,zero,210c796c <__multadd+0x94>
210c7948:	88800217 	ldw	r2,8(r17)
210c794c:	80800f0e 	bge	r16,r2,210c798c <__multadd+0xb4>
210c7950:	80800144 	addi	r2,r16,5
210c7954:	1085883a 	add	r2,r2,r2
210c7958:	1085883a 	add	r2,r2,r2
210c795c:	8885883a 	add	r2,r17,r2
210c7960:	11c00015 	stw	r7,0(r2)
210c7964:	84000044 	addi	r16,r16,1
210c7968:	8c000415 	stw	r16,16(r17)
210c796c:	8805883a 	mov	r2,r17
210c7970:	dfc00517 	ldw	ra,20(sp)
210c7974:	dcc00417 	ldw	r19,16(sp)
210c7978:	dc800317 	ldw	r18,12(sp)
210c797c:	dc400217 	ldw	r17,8(sp)
210c7980:	dc000117 	ldw	r16,4(sp)
210c7984:	dec00604 	addi	sp,sp,24
210c7988:	f800283a 	ret
210c798c:	89400117 	ldw	r5,4(r17)
210c7990:	9009883a 	mov	r4,r18
210c7994:	d9c00015 	stw	r7,0(sp)
210c7998:	29400044 	addi	r5,r5,1
210c799c:	10c78080 	call	210c7808 <_Balloc>
210c79a0:	89800417 	ldw	r6,16(r17)
210c79a4:	11000304 	addi	r4,r2,12
210c79a8:	89400304 	addi	r5,r17,12
210c79ac:	31800084 	addi	r6,r6,2
210c79b0:	318d883a 	add	r6,r6,r6
210c79b4:	318d883a 	add	r6,r6,r6
210c79b8:	1027883a 	mov	r19,r2
210c79bc:	10c74500 	call	210c7450 <memcpy>
210c79c0:	d9c00017 	ldw	r7,0(sp)
210c79c4:	88000a26 	beq	r17,zero,210c79f0 <__multadd+0x118>
210c79c8:	89000117 	ldw	r4,4(r17)
210c79cc:	90c01317 	ldw	r3,76(r18)
210c79d0:	2109883a 	add	r4,r4,r4
210c79d4:	2109883a 	add	r4,r4,r4
210c79d8:	1907883a 	add	r3,r3,r4
210c79dc:	18800017 	ldw	r2,0(r3)
210c79e0:	88800015 	stw	r2,0(r17)
210c79e4:	1c400015 	stw	r17,0(r3)
210c79e8:	9823883a 	mov	r17,r19
210c79ec:	003fd806 	br	210c7950 <__flash_rwdata_start+0xffff6058>
210c79f0:	9823883a 	mov	r17,r19
210c79f4:	003fd606 	br	210c7950 <__flash_rwdata_start+0xffff6058>

210c79f8 <__s2b>:
210c79f8:	defff904 	addi	sp,sp,-28
210c79fc:	dc400115 	stw	r17,4(sp)
210c7a00:	dc000015 	stw	r16,0(sp)
210c7a04:	2023883a 	mov	r17,r4
210c7a08:	2821883a 	mov	r16,r5
210c7a0c:	39000204 	addi	r4,r7,8
210c7a10:	01400244 	movi	r5,9
210c7a14:	dcc00315 	stw	r19,12(sp)
210c7a18:	dc800215 	stw	r18,8(sp)
210c7a1c:	dfc00615 	stw	ra,24(sp)
210c7a20:	dd400515 	stw	r21,20(sp)
210c7a24:	dd000415 	stw	r20,16(sp)
210c7a28:	3825883a 	mov	r18,r7
210c7a2c:	3027883a 	mov	r19,r6
210c7a30:	10cba480 	call	210cba48 <__divsi3>
210c7a34:	00c00044 	movi	r3,1
210c7a38:	000b883a 	mov	r5,zero
210c7a3c:	1880030e 	bge	r3,r2,210c7a4c <__s2b+0x54>
210c7a40:	18c7883a 	add	r3,r3,r3
210c7a44:	29400044 	addi	r5,r5,1
210c7a48:	18bffd16 	blt	r3,r2,210c7a40 <__flash_rwdata_start+0xffff6148>
210c7a4c:	8809883a 	mov	r4,r17
210c7a50:	10c78080 	call	210c7808 <_Balloc>
210c7a54:	d8c00717 	ldw	r3,28(sp)
210c7a58:	10c00515 	stw	r3,20(r2)
210c7a5c:	00c00044 	movi	r3,1
210c7a60:	10c00415 	stw	r3,16(r2)
210c7a64:	00c00244 	movi	r3,9
210c7a68:	1cc0210e 	bge	r3,r19,210c7af0 <__s2b+0xf8>
210c7a6c:	80eb883a 	add	r21,r16,r3
210c7a70:	a829883a 	mov	r20,r21
210c7a74:	84e1883a 	add	r16,r16,r19
210c7a78:	a1c00007 	ldb	r7,0(r20)
210c7a7c:	8809883a 	mov	r4,r17
210c7a80:	a5000044 	addi	r20,r20,1
210c7a84:	100b883a 	mov	r5,r2
210c7a88:	01800284 	movi	r6,10
210c7a8c:	39fff404 	addi	r7,r7,-48
210c7a90:	10c78d80 	call	210c78d8 <__multadd>
210c7a94:	a43ff81e 	bne	r20,r16,210c7a78 <__flash_rwdata_start+0xffff6180>
210c7a98:	ace1883a 	add	r16,r21,r19
210c7a9c:	843ffe04 	addi	r16,r16,-8
210c7aa0:	9c800a0e 	bge	r19,r18,210c7acc <__s2b+0xd4>
210c7aa4:	94e5c83a 	sub	r18,r18,r19
210c7aa8:	84a5883a 	add	r18,r16,r18
210c7aac:	81c00007 	ldb	r7,0(r16)
210c7ab0:	8809883a 	mov	r4,r17
210c7ab4:	84000044 	addi	r16,r16,1
210c7ab8:	100b883a 	mov	r5,r2
210c7abc:	01800284 	movi	r6,10
210c7ac0:	39fff404 	addi	r7,r7,-48
210c7ac4:	10c78d80 	call	210c78d8 <__multadd>
210c7ac8:	84bff81e 	bne	r16,r18,210c7aac <__flash_rwdata_start+0xffff61b4>
210c7acc:	dfc00617 	ldw	ra,24(sp)
210c7ad0:	dd400517 	ldw	r21,20(sp)
210c7ad4:	dd000417 	ldw	r20,16(sp)
210c7ad8:	dcc00317 	ldw	r19,12(sp)
210c7adc:	dc800217 	ldw	r18,8(sp)
210c7ae0:	dc400117 	ldw	r17,4(sp)
210c7ae4:	dc000017 	ldw	r16,0(sp)
210c7ae8:	dec00704 	addi	sp,sp,28
210c7aec:	f800283a 	ret
210c7af0:	84000284 	addi	r16,r16,10
210c7af4:	1827883a 	mov	r19,r3
210c7af8:	003fe906 	br	210c7aa0 <__flash_rwdata_start+0xffff61a8>

210c7afc <__hi0bits>:
210c7afc:	20bfffec 	andhi	r2,r4,65535
210c7b00:	1000141e 	bne	r2,zero,210c7b54 <__hi0bits+0x58>
210c7b04:	2008943a 	slli	r4,r4,16
210c7b08:	00800404 	movi	r2,16
210c7b0c:	20ffc02c 	andhi	r3,r4,65280
210c7b10:	1800021e 	bne	r3,zero,210c7b1c <__hi0bits+0x20>
210c7b14:	2008923a 	slli	r4,r4,8
210c7b18:	10800204 	addi	r2,r2,8
210c7b1c:	20fc002c 	andhi	r3,r4,61440
210c7b20:	1800021e 	bne	r3,zero,210c7b2c <__hi0bits+0x30>
210c7b24:	2008913a 	slli	r4,r4,4
210c7b28:	10800104 	addi	r2,r2,4
210c7b2c:	20f0002c 	andhi	r3,r4,49152
210c7b30:	1800031e 	bne	r3,zero,210c7b40 <__hi0bits+0x44>
210c7b34:	2109883a 	add	r4,r4,r4
210c7b38:	10800084 	addi	r2,r2,2
210c7b3c:	2109883a 	add	r4,r4,r4
210c7b40:	20000316 	blt	r4,zero,210c7b50 <__hi0bits+0x54>
210c7b44:	2110002c 	andhi	r4,r4,16384
210c7b48:	2000041e 	bne	r4,zero,210c7b5c <__hi0bits+0x60>
210c7b4c:	00800804 	movi	r2,32
210c7b50:	f800283a 	ret
210c7b54:	0005883a 	mov	r2,zero
210c7b58:	003fec06 	br	210c7b0c <__flash_rwdata_start+0xffff6214>
210c7b5c:	10800044 	addi	r2,r2,1
210c7b60:	f800283a 	ret

210c7b64 <__lo0bits>:
210c7b64:	20c00017 	ldw	r3,0(r4)
210c7b68:	188001cc 	andi	r2,r3,7
210c7b6c:	10000826 	beq	r2,zero,210c7b90 <__lo0bits+0x2c>
210c7b70:	1880004c 	andi	r2,r3,1
210c7b74:	1000211e 	bne	r2,zero,210c7bfc <__lo0bits+0x98>
210c7b78:	1880008c 	andi	r2,r3,2
210c7b7c:	1000211e 	bne	r2,zero,210c7c04 <__lo0bits+0xa0>
210c7b80:	1806d0ba 	srli	r3,r3,2
210c7b84:	00800084 	movi	r2,2
210c7b88:	20c00015 	stw	r3,0(r4)
210c7b8c:	f800283a 	ret
210c7b90:	18bfffcc 	andi	r2,r3,65535
210c7b94:	10001326 	beq	r2,zero,210c7be4 <__lo0bits+0x80>
210c7b98:	0005883a 	mov	r2,zero
210c7b9c:	19403fcc 	andi	r5,r3,255
210c7ba0:	2800021e 	bne	r5,zero,210c7bac <__lo0bits+0x48>
210c7ba4:	1806d23a 	srli	r3,r3,8
210c7ba8:	10800204 	addi	r2,r2,8
210c7bac:	194003cc 	andi	r5,r3,15
210c7bb0:	2800021e 	bne	r5,zero,210c7bbc <__lo0bits+0x58>
210c7bb4:	1806d13a 	srli	r3,r3,4
210c7bb8:	10800104 	addi	r2,r2,4
210c7bbc:	194000cc 	andi	r5,r3,3
210c7bc0:	2800021e 	bne	r5,zero,210c7bcc <__lo0bits+0x68>
210c7bc4:	1806d0ba 	srli	r3,r3,2
210c7bc8:	10800084 	addi	r2,r2,2
210c7bcc:	1940004c 	andi	r5,r3,1
210c7bd0:	2800081e 	bne	r5,zero,210c7bf4 <__lo0bits+0x90>
210c7bd4:	1806d07a 	srli	r3,r3,1
210c7bd8:	1800051e 	bne	r3,zero,210c7bf0 <__lo0bits+0x8c>
210c7bdc:	00800804 	movi	r2,32
210c7be0:	f800283a 	ret
210c7be4:	1806d43a 	srli	r3,r3,16
210c7be8:	00800404 	movi	r2,16
210c7bec:	003feb06 	br	210c7b9c <__flash_rwdata_start+0xffff62a4>
210c7bf0:	10800044 	addi	r2,r2,1
210c7bf4:	20c00015 	stw	r3,0(r4)
210c7bf8:	f800283a 	ret
210c7bfc:	0005883a 	mov	r2,zero
210c7c00:	f800283a 	ret
210c7c04:	1806d07a 	srli	r3,r3,1
210c7c08:	00800044 	movi	r2,1
210c7c0c:	20c00015 	stw	r3,0(r4)
210c7c10:	f800283a 	ret

210c7c14 <__i2b>:
210c7c14:	defffd04 	addi	sp,sp,-12
210c7c18:	dc000015 	stw	r16,0(sp)
210c7c1c:	04000044 	movi	r16,1
210c7c20:	dc400115 	stw	r17,4(sp)
210c7c24:	2823883a 	mov	r17,r5
210c7c28:	800b883a 	mov	r5,r16
210c7c2c:	dfc00215 	stw	ra,8(sp)
210c7c30:	10c78080 	call	210c7808 <_Balloc>
210c7c34:	14400515 	stw	r17,20(r2)
210c7c38:	14000415 	stw	r16,16(r2)
210c7c3c:	dfc00217 	ldw	ra,8(sp)
210c7c40:	dc400117 	ldw	r17,4(sp)
210c7c44:	dc000017 	ldw	r16,0(sp)
210c7c48:	dec00304 	addi	sp,sp,12
210c7c4c:	f800283a 	ret

210c7c50 <__multiply>:
210c7c50:	defffa04 	addi	sp,sp,-24
210c7c54:	dcc00315 	stw	r19,12(sp)
210c7c58:	dc800215 	stw	r18,8(sp)
210c7c5c:	2cc00417 	ldw	r19,16(r5)
210c7c60:	34800417 	ldw	r18,16(r6)
210c7c64:	dd000415 	stw	r20,16(sp)
210c7c68:	dc400115 	stw	r17,4(sp)
210c7c6c:	dfc00515 	stw	ra,20(sp)
210c7c70:	dc000015 	stw	r16,0(sp)
210c7c74:	2829883a 	mov	r20,r5
210c7c78:	3023883a 	mov	r17,r6
210c7c7c:	9c807016 	blt	r19,r18,210c7e40 <__multiply+0x1f0>
210c7c80:	9005883a 	mov	r2,r18
210c7c84:	9825883a 	mov	r18,r19
210c7c88:	1027883a 	mov	r19,r2
210c7c8c:	a0800217 	ldw	r2,8(r20)
210c7c90:	94e1883a 	add	r16,r18,r19
210c7c94:	a1400117 	ldw	r5,4(r20)
210c7c98:	1400010e 	bge	r2,r16,210c7ca0 <__multiply+0x50>
210c7c9c:	29400044 	addi	r5,r5,1
210c7ca0:	10c78080 	call	210c7808 <_Balloc>
210c7ca4:	8417883a 	add	r11,r16,r16
210c7ca8:	13000504 	addi	r12,r2,20
210c7cac:	5ad7883a 	add	r11,r11,r11
210c7cb0:	62d7883a 	add	r11,r12,r11
210c7cb4:	6007883a 	mov	r3,r12
210c7cb8:	62c0032e 	bgeu	r12,r11,210c7cc8 <__multiply+0x78>
210c7cbc:	18000015 	stw	zero,0(r3)
210c7cc0:	18c00104 	addi	r3,r3,4
210c7cc4:	1afffd36 	bltu	r3,r11,210c7cbc <__flash_rwdata_start+0xffff63c4>
210c7cc8:	9ce7883a 	add	r19,r19,r19
210c7ccc:	94a5883a 	add	r18,r18,r18
210c7cd0:	89800504 	addi	r6,r17,20
210c7cd4:	9ce7883a 	add	r19,r19,r19
210c7cd8:	a3800504 	addi	r14,r20,20
210c7cdc:	94a5883a 	add	r18,r18,r18
210c7ce0:	34db883a 	add	r13,r6,r19
210c7ce4:	7495883a 	add	r10,r14,r18
210c7ce8:	3340422e 	bgeu	r6,r13,210c7df4 <__multiply+0x1a4>
210c7cec:	34400017 	ldw	r17,0(r6)
210c7cf0:	8cbfffcc 	andi	r18,r17,65535
210c7cf4:	90001b26 	beq	r18,zero,210c7d64 <__multiply+0x114>
210c7cf8:	6013883a 	mov	r9,r12
210c7cfc:	7023883a 	mov	r17,r14
210c7d00:	0011883a 	mov	r8,zero
210c7d04:	88c00017 	ldw	r3,0(r17)
210c7d08:	4bc00017 	ldw	r15,0(r9)
210c7d0c:	8c400104 	addi	r17,r17,4
210c7d10:	19ffffcc 	andi	r7,r3,65535
210c7d14:	3c8f383a 	mul	r7,r7,r18
210c7d18:	1808d43a 	srli	r4,r3,16
210c7d1c:	797fffcc 	andi	r5,r15,65535
210c7d20:	29cb883a 	add	r5,r5,r7
210c7d24:	2a0b883a 	add	r5,r5,r8
210c7d28:	2489383a 	mul	r4,r4,r18
210c7d2c:	7806d43a 	srli	r3,r15,16
210c7d30:	2810d43a 	srli	r8,r5,16
210c7d34:	297fffcc 	andi	r5,r5,65535
210c7d38:	1907883a 	add	r3,r3,r4
210c7d3c:	1a07883a 	add	r3,r3,r8
210c7d40:	1808943a 	slli	r4,r3,16
210c7d44:	480f883a 	mov	r7,r9
210c7d48:	1810d43a 	srli	r8,r3,16
210c7d4c:	214ab03a 	or	r5,r4,r5
210c7d50:	49400015 	stw	r5,0(r9)
210c7d54:	4a400104 	addi	r9,r9,4
210c7d58:	8abfea36 	bltu	r17,r10,210c7d04 <__flash_rwdata_start+0xffff640c>
210c7d5c:	3a000115 	stw	r8,4(r7)
210c7d60:	34400017 	ldw	r17,0(r6)
210c7d64:	8822d43a 	srli	r17,r17,16
210c7d68:	88001f26 	beq	r17,zero,210c7de8 <__multiply+0x198>
210c7d6c:	60c00017 	ldw	r3,0(r12)
210c7d70:	7013883a 	mov	r9,r14
210c7d74:	601f883a 	mov	r15,r12
210c7d78:	1811883a 	mov	r8,r3
210c7d7c:	6027883a 	mov	r19,r12
210c7d80:	000f883a 	mov	r7,zero
210c7d84:	00000106 	br	210c7d8c <__multiply+0x13c>
210c7d88:	9027883a 	mov	r19,r18
210c7d8c:	4940000b 	ldhu	r5,0(r9)
210c7d90:	4010d43a 	srli	r8,r8,16
210c7d94:	193fffcc 	andi	r4,r3,65535
210c7d98:	2c4b383a 	mul	r5,r5,r17
210c7d9c:	7bc00104 	addi	r15,r15,4
210c7da0:	4a400104 	addi	r9,r9,4
210c7da4:	2a0b883a 	add	r5,r5,r8
210c7da8:	29cb883a 	add	r5,r5,r7
210c7dac:	2806943a 	slli	r3,r5,16
210c7db0:	9c800104 	addi	r18,r19,4
210c7db4:	280ad43a 	srli	r5,r5,16
210c7db8:	1908b03a 	or	r4,r3,r4
210c7dbc:	793fff15 	stw	r4,-4(r15)
210c7dc0:	48ffff17 	ldw	r3,-4(r9)
210c7dc4:	92000017 	ldw	r8,0(r18)
210c7dc8:	1806d43a 	srli	r3,r3,16
210c7dcc:	413fffcc 	andi	r4,r8,65535
210c7dd0:	1c47383a 	mul	r3,r3,r17
210c7dd4:	1907883a 	add	r3,r3,r4
210c7dd8:	1947883a 	add	r3,r3,r5
210c7ddc:	180ed43a 	srli	r7,r3,16
210c7de0:	4abfe936 	bltu	r9,r10,210c7d88 <__flash_rwdata_start+0xffff6490>
210c7de4:	98c00115 	stw	r3,4(r19)
210c7de8:	31800104 	addi	r6,r6,4
210c7dec:	63000104 	addi	r12,r12,4
210c7df0:	337fbe36 	bltu	r6,r13,210c7cec <__flash_rwdata_start+0xffff63f4>
210c7df4:	0400090e 	bge	zero,r16,210c7e1c <__multiply+0x1cc>
210c7df8:	58ffff17 	ldw	r3,-4(r11)
210c7dfc:	5affff04 	addi	r11,r11,-4
210c7e00:	18000326 	beq	r3,zero,210c7e10 <__multiply+0x1c0>
210c7e04:	00000506 	br	210c7e1c <__multiply+0x1cc>
210c7e08:	58c00017 	ldw	r3,0(r11)
210c7e0c:	1800031e 	bne	r3,zero,210c7e1c <__multiply+0x1cc>
210c7e10:	843fffc4 	addi	r16,r16,-1
210c7e14:	5affff04 	addi	r11,r11,-4
210c7e18:	803ffb1e 	bne	r16,zero,210c7e08 <__flash_rwdata_start+0xffff6510>
210c7e1c:	14000415 	stw	r16,16(r2)
210c7e20:	dfc00517 	ldw	ra,20(sp)
210c7e24:	dd000417 	ldw	r20,16(sp)
210c7e28:	dcc00317 	ldw	r19,12(sp)
210c7e2c:	dc800217 	ldw	r18,8(sp)
210c7e30:	dc400117 	ldw	r17,4(sp)
210c7e34:	dc000017 	ldw	r16,0(sp)
210c7e38:	dec00604 	addi	sp,sp,24
210c7e3c:	f800283a 	ret
210c7e40:	3029883a 	mov	r20,r6
210c7e44:	2823883a 	mov	r17,r5
210c7e48:	003f9006 	br	210c7c8c <__flash_rwdata_start+0xffff6394>

210c7e4c <__pow5mult>:
210c7e4c:	defffa04 	addi	sp,sp,-24
210c7e50:	dcc00315 	stw	r19,12(sp)
210c7e54:	dc800215 	stw	r18,8(sp)
210c7e58:	dc000015 	stw	r16,0(sp)
210c7e5c:	dfc00515 	stw	ra,20(sp)
210c7e60:	dd000415 	stw	r20,16(sp)
210c7e64:	dc400115 	stw	r17,4(sp)
210c7e68:	308000cc 	andi	r2,r6,3
210c7e6c:	3021883a 	mov	r16,r6
210c7e70:	2027883a 	mov	r19,r4
210c7e74:	2825883a 	mov	r18,r5
210c7e78:	10002e1e 	bne	r2,zero,210c7f34 <__pow5mult+0xe8>
210c7e7c:	8021d0ba 	srai	r16,r16,2
210c7e80:	80001a26 	beq	r16,zero,210c7eec <__pow5mult+0xa0>
210c7e84:	9c401217 	ldw	r17,72(r19)
210c7e88:	8800061e 	bne	r17,zero,210c7ea4 <__pow5mult+0x58>
210c7e8c:	00003406 	br	210c7f60 <__pow5mult+0x114>
210c7e90:	8021d07a 	srai	r16,r16,1
210c7e94:	80001526 	beq	r16,zero,210c7eec <__pow5mult+0xa0>
210c7e98:	88800017 	ldw	r2,0(r17)
210c7e9c:	10001c26 	beq	r2,zero,210c7f10 <__pow5mult+0xc4>
210c7ea0:	1023883a 	mov	r17,r2
210c7ea4:	80c0004c 	andi	r3,r16,1
210c7ea8:	183ff926 	beq	r3,zero,210c7e90 <__flash_rwdata_start+0xffff6598>
210c7eac:	900b883a 	mov	r5,r18
210c7eb0:	880d883a 	mov	r6,r17
210c7eb4:	9809883a 	mov	r4,r19
210c7eb8:	10c7c500 	call	210c7c50 <__multiply>
210c7ebc:	90001b26 	beq	r18,zero,210c7f2c <__pow5mult+0xe0>
210c7ec0:	91c00117 	ldw	r7,4(r18)
210c7ec4:	98c01317 	ldw	r3,76(r19)
210c7ec8:	8021d07a 	srai	r16,r16,1
210c7ecc:	39cf883a 	add	r7,r7,r7
210c7ed0:	39cf883a 	add	r7,r7,r7
210c7ed4:	19c7883a 	add	r3,r3,r7
210c7ed8:	19000017 	ldw	r4,0(r3)
210c7edc:	91000015 	stw	r4,0(r18)
210c7ee0:	1c800015 	stw	r18,0(r3)
210c7ee4:	1025883a 	mov	r18,r2
210c7ee8:	803feb1e 	bne	r16,zero,210c7e98 <__flash_rwdata_start+0xffff65a0>
210c7eec:	9005883a 	mov	r2,r18
210c7ef0:	dfc00517 	ldw	ra,20(sp)
210c7ef4:	dd000417 	ldw	r20,16(sp)
210c7ef8:	dcc00317 	ldw	r19,12(sp)
210c7efc:	dc800217 	ldw	r18,8(sp)
210c7f00:	dc400117 	ldw	r17,4(sp)
210c7f04:	dc000017 	ldw	r16,0(sp)
210c7f08:	dec00604 	addi	sp,sp,24
210c7f0c:	f800283a 	ret
210c7f10:	9809883a 	mov	r4,r19
210c7f14:	880b883a 	mov	r5,r17
210c7f18:	880d883a 	mov	r6,r17
210c7f1c:	10c7c500 	call	210c7c50 <__multiply>
210c7f20:	88800015 	stw	r2,0(r17)
210c7f24:	10000015 	stw	zero,0(r2)
210c7f28:	003fdd06 	br	210c7ea0 <__flash_rwdata_start+0xffff65a8>
210c7f2c:	1025883a 	mov	r18,r2
210c7f30:	003fd706 	br	210c7e90 <__flash_rwdata_start+0xffff6598>
210c7f34:	10bfffc4 	addi	r2,r2,-1
210c7f38:	1085883a 	add	r2,r2,r2
210c7f3c:	00c40034 	movhi	r3,4096
210c7f40:	18c09004 	addi	r3,r3,576
210c7f44:	1085883a 	add	r2,r2,r2
210c7f48:	1885883a 	add	r2,r3,r2
210c7f4c:	11800017 	ldw	r6,0(r2)
210c7f50:	000f883a 	mov	r7,zero
210c7f54:	10c78d80 	call	210c78d8 <__multadd>
210c7f58:	1025883a 	mov	r18,r2
210c7f5c:	003fc706 	br	210c7e7c <__flash_rwdata_start+0xffff6584>
210c7f60:	05000044 	movi	r20,1
210c7f64:	9809883a 	mov	r4,r19
210c7f68:	a00b883a 	mov	r5,r20
210c7f6c:	10c78080 	call	210c7808 <_Balloc>
210c7f70:	1023883a 	mov	r17,r2
210c7f74:	00809c44 	movi	r2,625
210c7f78:	88800515 	stw	r2,20(r17)
210c7f7c:	8d000415 	stw	r20,16(r17)
210c7f80:	9c401215 	stw	r17,72(r19)
210c7f84:	88000015 	stw	zero,0(r17)
210c7f88:	003fc606 	br	210c7ea4 <__flash_rwdata_start+0xffff65ac>

210c7f8c <__lshift>:
210c7f8c:	defff904 	addi	sp,sp,-28
210c7f90:	dd000415 	stw	r20,16(sp)
210c7f94:	dcc00315 	stw	r19,12(sp)
210c7f98:	3029d17a 	srai	r20,r6,5
210c7f9c:	2cc00417 	ldw	r19,16(r5)
210c7fa0:	28800217 	ldw	r2,8(r5)
210c7fa4:	dd400515 	stw	r21,20(sp)
210c7fa8:	a4e7883a 	add	r19,r20,r19
210c7fac:	dc800215 	stw	r18,8(sp)
210c7fb0:	dc400115 	stw	r17,4(sp)
210c7fb4:	dc000015 	stw	r16,0(sp)
210c7fb8:	dfc00615 	stw	ra,24(sp)
210c7fbc:	9c000044 	addi	r16,r19,1
210c7fc0:	2823883a 	mov	r17,r5
210c7fc4:	302b883a 	mov	r21,r6
210c7fc8:	2025883a 	mov	r18,r4
210c7fcc:	29400117 	ldw	r5,4(r5)
210c7fd0:	1400030e 	bge	r2,r16,210c7fe0 <__lshift+0x54>
210c7fd4:	1085883a 	add	r2,r2,r2
210c7fd8:	29400044 	addi	r5,r5,1
210c7fdc:	143ffd16 	blt	r2,r16,210c7fd4 <__flash_rwdata_start+0xffff66dc>
210c7fe0:	9009883a 	mov	r4,r18
210c7fe4:	10c78080 	call	210c7808 <_Balloc>
210c7fe8:	11c00504 	addi	r7,r2,20
210c7fec:	0500090e 	bge	zero,r20,210c8014 <__lshift+0x88>
210c7ff0:	3811883a 	mov	r8,r7
210c7ff4:	0007883a 	mov	r3,zero
210c7ff8:	40000015 	stw	zero,0(r8)
210c7ffc:	18c00044 	addi	r3,r3,1
210c8000:	42000104 	addi	r8,r8,4
210c8004:	1d3ffc1e 	bne	r3,r20,210c7ff8 <__flash_rwdata_start+0xffff6700>
210c8008:	18c7883a 	add	r3,r3,r3
210c800c:	18c7883a 	add	r3,r3,r3
210c8010:	38cf883a 	add	r7,r7,r3
210c8014:	89000417 	ldw	r4,16(r17)
210c8018:	88c00504 	addi	r3,r17,20
210c801c:	a98007cc 	andi	r6,r21,31
210c8020:	2109883a 	add	r4,r4,r4
210c8024:	2109883a 	add	r4,r4,r4
210c8028:	1909883a 	add	r4,r3,r4
210c802c:	30002326 	beq	r6,zero,210c80bc <__lshift+0x130>
210c8030:	01400804 	movi	r5,32
210c8034:	298bc83a 	sub	r5,r5,r6
210c8038:	0013883a 	mov	r9,zero
210c803c:	1a000017 	ldw	r8,0(r3)
210c8040:	3815883a 	mov	r10,r7
210c8044:	39c00104 	addi	r7,r7,4
210c8048:	4190983a 	sll	r8,r8,r6
210c804c:	18c00104 	addi	r3,r3,4
210c8050:	4a10b03a 	or	r8,r9,r8
210c8054:	3a3fff15 	stw	r8,-4(r7)
210c8058:	1a3fff17 	ldw	r8,-4(r3)
210c805c:	4152d83a 	srl	r9,r8,r5
210c8060:	193ff636 	bltu	r3,r4,210c803c <__flash_rwdata_start+0xffff6744>
210c8064:	52400115 	stw	r9,4(r10)
210c8068:	48001a1e 	bne	r9,zero,210c80d4 <__lshift+0x148>
210c806c:	843fffc4 	addi	r16,r16,-1
210c8070:	14000415 	stw	r16,16(r2)
210c8074:	88000826 	beq	r17,zero,210c8098 <__lshift+0x10c>
210c8078:	89000117 	ldw	r4,4(r17)
210c807c:	90c01317 	ldw	r3,76(r18)
210c8080:	2109883a 	add	r4,r4,r4
210c8084:	2109883a 	add	r4,r4,r4
210c8088:	1907883a 	add	r3,r3,r4
210c808c:	19000017 	ldw	r4,0(r3)
210c8090:	89000015 	stw	r4,0(r17)
210c8094:	1c400015 	stw	r17,0(r3)
210c8098:	dfc00617 	ldw	ra,24(sp)
210c809c:	dd400517 	ldw	r21,20(sp)
210c80a0:	dd000417 	ldw	r20,16(sp)
210c80a4:	dcc00317 	ldw	r19,12(sp)
210c80a8:	dc800217 	ldw	r18,8(sp)
210c80ac:	dc400117 	ldw	r17,4(sp)
210c80b0:	dc000017 	ldw	r16,0(sp)
210c80b4:	dec00704 	addi	sp,sp,28
210c80b8:	f800283a 	ret
210c80bc:	19400017 	ldw	r5,0(r3)
210c80c0:	39c00104 	addi	r7,r7,4
210c80c4:	18c00104 	addi	r3,r3,4
210c80c8:	397fff15 	stw	r5,-4(r7)
210c80cc:	193ffb36 	bltu	r3,r4,210c80bc <__flash_rwdata_start+0xffff67c4>
210c80d0:	003fe606 	br	210c806c <__flash_rwdata_start+0xffff6774>
210c80d4:	9c000084 	addi	r16,r19,2
210c80d8:	003fe406 	br	210c806c <__flash_rwdata_start+0xffff6774>

210c80dc <__mcmp>:
210c80dc:	20800417 	ldw	r2,16(r4)
210c80e0:	28c00417 	ldw	r3,16(r5)
210c80e4:	10c5c83a 	sub	r2,r2,r3
210c80e8:	1000111e 	bne	r2,zero,210c8130 <__mcmp+0x54>
210c80ec:	18c7883a 	add	r3,r3,r3
210c80f0:	18c7883a 	add	r3,r3,r3
210c80f4:	21000504 	addi	r4,r4,20
210c80f8:	29400504 	addi	r5,r5,20
210c80fc:	20c5883a 	add	r2,r4,r3
210c8100:	28cb883a 	add	r5,r5,r3
210c8104:	00000106 	br	210c810c <__mcmp+0x30>
210c8108:	20800a2e 	bgeu	r4,r2,210c8134 <__mcmp+0x58>
210c810c:	10bfff04 	addi	r2,r2,-4
210c8110:	297fff04 	addi	r5,r5,-4
210c8114:	11800017 	ldw	r6,0(r2)
210c8118:	28c00017 	ldw	r3,0(r5)
210c811c:	30fffa26 	beq	r6,r3,210c8108 <__flash_rwdata_start+0xffff6810>
210c8120:	30c00236 	bltu	r6,r3,210c812c <__mcmp+0x50>
210c8124:	00800044 	movi	r2,1
210c8128:	f800283a 	ret
210c812c:	00bfffc4 	movi	r2,-1
210c8130:	f800283a 	ret
210c8134:	0005883a 	mov	r2,zero
210c8138:	f800283a 	ret

210c813c <__mdiff>:
210c813c:	defffb04 	addi	sp,sp,-20
210c8140:	dc000015 	stw	r16,0(sp)
210c8144:	2821883a 	mov	r16,r5
210c8148:	dcc00315 	stw	r19,12(sp)
210c814c:	300b883a 	mov	r5,r6
210c8150:	2027883a 	mov	r19,r4
210c8154:	8009883a 	mov	r4,r16
210c8158:	dc800215 	stw	r18,8(sp)
210c815c:	dfc00415 	stw	ra,16(sp)
210c8160:	dc400115 	stw	r17,4(sp)
210c8164:	3025883a 	mov	r18,r6
210c8168:	10c80dc0 	call	210c80dc <__mcmp>
210c816c:	10005226 	beq	r2,zero,210c82b8 <__mdiff+0x17c>
210c8170:	10004c16 	blt	r2,zero,210c82a4 <__mdiff+0x168>
210c8174:	0023883a 	mov	r17,zero
210c8178:	81400117 	ldw	r5,4(r16)
210c817c:	9809883a 	mov	r4,r19
210c8180:	10c78080 	call	210c7808 <_Balloc>
210c8184:	83400417 	ldw	r13,16(r16)
210c8188:	93800417 	ldw	r14,16(r18)
210c818c:	81000504 	addi	r4,r16,20
210c8190:	6b59883a 	add	r12,r13,r13
210c8194:	739d883a 	add	r14,r14,r14
210c8198:	6319883a 	add	r12,r12,r12
210c819c:	91800504 	addi	r6,r18,20
210c81a0:	739d883a 	add	r14,r14,r14
210c81a4:	14400315 	stw	r17,12(r2)
210c81a8:	2319883a 	add	r12,r4,r12
210c81ac:	339d883a 	add	r14,r6,r14
210c81b0:	12400504 	addi	r9,r2,20
210c81b4:	0007883a 	mov	r3,zero
210c81b8:	22000017 	ldw	r8,0(r4)
210c81bc:	32800017 	ldw	r10,0(r6)
210c81c0:	4ac00104 	addi	r11,r9,4
210c81c4:	41ffffcc 	andi	r7,r8,65535
210c81c8:	38c7883a 	add	r3,r7,r3
210c81cc:	51ffffcc 	andi	r7,r10,65535
210c81d0:	19cfc83a 	sub	r7,r3,r7
210c81d4:	4010d43a 	srli	r8,r8,16
210c81d8:	5014d43a 	srli	r10,r10,16
210c81dc:	3807d43a 	srai	r3,r7,16
210c81e0:	39ffffcc 	andi	r7,r7,65535
210c81e4:	4291c83a 	sub	r8,r8,r10
210c81e8:	40c7883a 	add	r3,r8,r3
210c81ec:	1810943a 	slli	r8,r3,16
210c81f0:	31800104 	addi	r6,r6,4
210c81f4:	21000104 	addi	r4,r4,4
210c81f8:	41ceb03a 	or	r7,r8,r7
210c81fc:	49c00015 	stw	r7,0(r9)
210c8200:	1807d43a 	srai	r3,r3,16
210c8204:	580b883a 	mov	r5,r11
210c8208:	5813883a 	mov	r9,r11
210c820c:	33bfea36 	bltu	r6,r14,210c81b8 <__flash_rwdata_start+0xffff68c0>
210c8210:	2011883a 	mov	r8,r4
210c8214:	2300152e 	bgeu	r4,r12,210c826c <__mdiff+0x130>
210c8218:	21400017 	ldw	r5,0(r4)
210c821c:	4a400104 	addi	r9,r9,4
210c8220:	21000104 	addi	r4,r4,4
210c8224:	29ffffcc 	andi	r7,r5,65535
210c8228:	38c7883a 	add	r3,r7,r3
210c822c:	280ad43a 	srli	r5,r5,16
210c8230:	180dd43a 	srai	r6,r3,16
210c8234:	19ffffcc 	andi	r7,r3,65535
210c8238:	3147883a 	add	r3,r6,r5
210c823c:	180a943a 	slli	r5,r3,16
210c8240:	1807d43a 	srai	r3,r3,16
210c8244:	29ceb03a 	or	r7,r5,r7
210c8248:	49ffff15 	stw	r7,-4(r9)
210c824c:	233ff236 	bltu	r4,r12,210c8218 <__flash_rwdata_start+0xffff6920>
210c8250:	0206303a 	nor	r3,zero,r8
210c8254:	1b07883a 	add	r3,r3,r12
210c8258:	1806d0ba 	srli	r3,r3,2
210c825c:	18c00044 	addi	r3,r3,1
210c8260:	18c7883a 	add	r3,r3,r3
210c8264:	18c7883a 	add	r3,r3,r3
210c8268:	58cb883a 	add	r5,r11,r3
210c826c:	28ffff04 	addi	r3,r5,-4
210c8270:	3800041e 	bne	r7,zero,210c8284 <__mdiff+0x148>
210c8274:	18ffff04 	addi	r3,r3,-4
210c8278:	19000017 	ldw	r4,0(r3)
210c827c:	6b7fffc4 	addi	r13,r13,-1
210c8280:	203ffc26 	beq	r4,zero,210c8274 <__flash_rwdata_start+0xffff697c>
210c8284:	13400415 	stw	r13,16(r2)
210c8288:	dfc00417 	ldw	ra,16(sp)
210c828c:	dcc00317 	ldw	r19,12(sp)
210c8290:	dc800217 	ldw	r18,8(sp)
210c8294:	dc400117 	ldw	r17,4(sp)
210c8298:	dc000017 	ldw	r16,0(sp)
210c829c:	dec00504 	addi	sp,sp,20
210c82a0:	f800283a 	ret
210c82a4:	8005883a 	mov	r2,r16
210c82a8:	04400044 	movi	r17,1
210c82ac:	9021883a 	mov	r16,r18
210c82b0:	1025883a 	mov	r18,r2
210c82b4:	003fb006 	br	210c8178 <__flash_rwdata_start+0xffff6880>
210c82b8:	9809883a 	mov	r4,r19
210c82bc:	000b883a 	mov	r5,zero
210c82c0:	10c78080 	call	210c7808 <_Balloc>
210c82c4:	00c00044 	movi	r3,1
210c82c8:	10c00415 	stw	r3,16(r2)
210c82cc:	10000515 	stw	zero,20(r2)
210c82d0:	003fed06 	br	210c8288 <__flash_rwdata_start+0xffff6990>

210c82d4 <__ulp>:
210c82d4:	295ffc2c 	andhi	r5,r5,32752
210c82d8:	00bf3034 	movhi	r2,64704
210c82dc:	2887883a 	add	r3,r5,r2
210c82e0:	00c0020e 	bge	zero,r3,210c82ec <__ulp+0x18>
210c82e4:	0005883a 	mov	r2,zero
210c82e8:	f800283a 	ret
210c82ec:	00c7c83a 	sub	r3,zero,r3
210c82f0:	180bd53a 	srai	r5,r3,20
210c82f4:	008004c4 	movi	r2,19
210c82f8:	11400a0e 	bge	r2,r5,210c8324 <__ulp+0x50>
210c82fc:	00800c84 	movi	r2,50
210c8300:	0007883a 	mov	r3,zero
210c8304:	11400516 	blt	r2,r5,210c831c <__ulp+0x48>
210c8308:	00800cc4 	movi	r2,51
210c830c:	114bc83a 	sub	r5,r2,r5
210c8310:	00800044 	movi	r2,1
210c8314:	1144983a 	sll	r2,r2,r5
210c8318:	f800283a 	ret
210c831c:	00800044 	movi	r2,1
210c8320:	f800283a 	ret
210c8324:	00800234 	movhi	r2,8
210c8328:	1147d83a 	sra	r3,r2,r5
210c832c:	0005883a 	mov	r2,zero
210c8330:	f800283a 	ret

210c8334 <__b2d>:
210c8334:	defffa04 	addi	sp,sp,-24
210c8338:	dc000015 	stw	r16,0(sp)
210c833c:	24000417 	ldw	r16,16(r4)
210c8340:	dc400115 	stw	r17,4(sp)
210c8344:	24400504 	addi	r17,r4,20
210c8348:	8421883a 	add	r16,r16,r16
210c834c:	8421883a 	add	r16,r16,r16
210c8350:	8c21883a 	add	r16,r17,r16
210c8354:	dc800215 	stw	r18,8(sp)
210c8358:	84bfff17 	ldw	r18,-4(r16)
210c835c:	dd000415 	stw	r20,16(sp)
210c8360:	dcc00315 	stw	r19,12(sp)
210c8364:	9009883a 	mov	r4,r18
210c8368:	2829883a 	mov	r20,r5
210c836c:	dfc00515 	stw	ra,20(sp)
210c8370:	10c7afc0 	call	210c7afc <__hi0bits>
210c8374:	00c00804 	movi	r3,32
210c8378:	1887c83a 	sub	r3,r3,r2
210c837c:	a0c00015 	stw	r3,0(r20)
210c8380:	00c00284 	movi	r3,10
210c8384:	84ffff04 	addi	r19,r16,-4
210c8388:	18801216 	blt	r3,r2,210c83d4 <__b2d+0xa0>
210c838c:	014002c4 	movi	r5,11
210c8390:	2889c83a 	sub	r4,r5,r2
210c8394:	9106d83a 	srl	r3,r18,r4
210c8398:	18cffc34 	orhi	r3,r3,16368
210c839c:	8cc0282e 	bgeu	r17,r19,210c8440 <__b2d+0x10c>
210c83a0:	817ffe17 	ldw	r5,-8(r16)
210c83a4:	290ad83a 	srl	r5,r5,r4
210c83a8:	10800544 	addi	r2,r2,21
210c83ac:	9084983a 	sll	r2,r18,r2
210c83b0:	2884b03a 	or	r2,r5,r2
210c83b4:	dfc00517 	ldw	ra,20(sp)
210c83b8:	dd000417 	ldw	r20,16(sp)
210c83bc:	dcc00317 	ldw	r19,12(sp)
210c83c0:	dc800217 	ldw	r18,8(sp)
210c83c4:	dc400117 	ldw	r17,4(sp)
210c83c8:	dc000017 	ldw	r16,0(sp)
210c83cc:	dec00604 	addi	sp,sp,24
210c83d0:	f800283a 	ret
210c83d4:	113ffd44 	addi	r4,r2,-11
210c83d8:	8cc00f2e 	bgeu	r17,r19,210c8418 <__b2d+0xe4>
210c83dc:	81bffe04 	addi	r6,r16,-8
210c83e0:	817ffe17 	ldw	r5,-8(r16)
210c83e4:	20001326 	beq	r4,zero,210c8434 <__b2d+0x100>
210c83e8:	00c00ac4 	movi	r3,43
210c83ec:	1885c83a 	sub	r2,r3,r2
210c83f0:	2886d83a 	srl	r3,r5,r2
210c83f4:	9124983a 	sll	r18,r18,r4
210c83f8:	90e4b03a 	or	r18,r18,r3
210c83fc:	90cffc34 	orhi	r3,r18,16368
210c8400:	8980112e 	bgeu	r17,r6,210c8448 <__b2d+0x114>
210c8404:	81bffd17 	ldw	r6,-12(r16)
210c8408:	308cd83a 	srl	r6,r6,r2
210c840c:	2904983a 	sll	r2,r5,r4
210c8410:	1184b03a 	or	r2,r2,r6
210c8414:	003fe706 	br	210c83b4 <__flash_rwdata_start+0xffff6abc>
210c8418:	20000526 	beq	r4,zero,210c8430 <__b2d+0xfc>
210c841c:	9124983a 	sll	r18,r18,r4
210c8420:	000d883a 	mov	r6,zero
210c8424:	000b883a 	mov	r5,zero
210c8428:	90cffc34 	orhi	r3,r18,16368
210c842c:	003ff706 	br	210c840c <__flash_rwdata_start+0xffff6b14>
210c8430:	000b883a 	mov	r5,zero
210c8434:	90cffc34 	orhi	r3,r18,16368
210c8438:	2805883a 	mov	r2,r5
210c843c:	003fdd06 	br	210c83b4 <__flash_rwdata_start+0xffff6abc>
210c8440:	000b883a 	mov	r5,zero
210c8444:	003fd806 	br	210c83a8 <__flash_rwdata_start+0xffff6ab0>
210c8448:	000d883a 	mov	r6,zero
210c844c:	003fef06 	br	210c840c <__flash_rwdata_start+0xffff6b14>

210c8450 <__d2b>:
210c8450:	defff704 	addi	sp,sp,-36
210c8454:	dc000215 	stw	r16,8(sp)
210c8458:	3021883a 	mov	r16,r6
210c845c:	dc400315 	stw	r17,12(sp)
210c8460:	8022907a 	slli	r17,r16,1
210c8464:	dd400715 	stw	r21,28(sp)
210c8468:	282b883a 	mov	r21,r5
210c846c:	01400044 	movi	r5,1
210c8470:	dd000615 	stw	r20,24(sp)
210c8474:	dcc00515 	stw	r19,20(sp)
210c8478:	dc800415 	stw	r18,16(sp)
210c847c:	dfc00815 	stw	ra,32(sp)
210c8480:	3829883a 	mov	r20,r7
210c8484:	dc800917 	ldw	r18,36(sp)
210c8488:	8822d57a 	srli	r17,r17,21
210c848c:	10c78080 	call	210c7808 <_Balloc>
210c8490:	1027883a 	mov	r19,r2
210c8494:	00800434 	movhi	r2,16
210c8498:	10bfffc4 	addi	r2,r2,-1
210c849c:	808c703a 	and	r6,r16,r2
210c84a0:	88000126 	beq	r17,zero,210c84a8 <__d2b+0x58>
210c84a4:	31800434 	orhi	r6,r6,16
210c84a8:	d9800015 	stw	r6,0(sp)
210c84ac:	a8001f26 	beq	r21,zero,210c852c <__d2b+0xdc>
210c84b0:	d9000104 	addi	r4,sp,4
210c84b4:	dd400115 	stw	r21,4(sp)
210c84b8:	10c7b640 	call	210c7b64 <__lo0bits>
210c84bc:	d8c00017 	ldw	r3,0(sp)
210c84c0:	1000291e 	bne	r2,zero,210c8568 <__d2b+0x118>
210c84c4:	d9000117 	ldw	r4,4(sp)
210c84c8:	99000515 	stw	r4,20(r19)
210c84cc:	1820c03a 	cmpne	r16,r3,zero
210c84d0:	84000044 	addi	r16,r16,1
210c84d4:	98c00615 	stw	r3,24(r19)
210c84d8:	9c000415 	stw	r16,16(r19)
210c84dc:	88001b1e 	bne	r17,zero,210c854c <__d2b+0xfc>
210c84e0:	800690ba 	slli	r3,r16,2
210c84e4:	10bef384 	addi	r2,r2,-1074
210c84e8:	a0800015 	stw	r2,0(r20)
210c84ec:	98c5883a 	add	r2,r19,r3
210c84f0:	11000417 	ldw	r4,16(r2)
210c84f4:	8020917a 	slli	r16,r16,5
210c84f8:	10c7afc0 	call	210c7afc <__hi0bits>
210c84fc:	8085c83a 	sub	r2,r16,r2
210c8500:	90800015 	stw	r2,0(r18)
210c8504:	9805883a 	mov	r2,r19
210c8508:	dfc00817 	ldw	ra,32(sp)
210c850c:	dd400717 	ldw	r21,28(sp)
210c8510:	dd000617 	ldw	r20,24(sp)
210c8514:	dcc00517 	ldw	r19,20(sp)
210c8518:	dc800417 	ldw	r18,16(sp)
210c851c:	dc400317 	ldw	r17,12(sp)
210c8520:	dc000217 	ldw	r16,8(sp)
210c8524:	dec00904 	addi	sp,sp,36
210c8528:	f800283a 	ret
210c852c:	d809883a 	mov	r4,sp
210c8530:	10c7b640 	call	210c7b64 <__lo0bits>
210c8534:	d8c00017 	ldw	r3,0(sp)
210c8538:	04000044 	movi	r16,1
210c853c:	9c000415 	stw	r16,16(r19)
210c8540:	98c00515 	stw	r3,20(r19)
210c8544:	10800804 	addi	r2,r2,32
210c8548:	883fe526 	beq	r17,zero,210c84e0 <__flash_rwdata_start+0xffff6be8>
210c854c:	8c7ef344 	addi	r17,r17,-1075
210c8550:	88a3883a 	add	r17,r17,r2
210c8554:	00c00d44 	movi	r3,53
210c8558:	a4400015 	stw	r17,0(r20)
210c855c:	1885c83a 	sub	r2,r3,r2
210c8560:	90800015 	stw	r2,0(r18)
210c8564:	003fe706 	br	210c8504 <__flash_rwdata_start+0xffff6c0c>
210c8568:	01000804 	movi	r4,32
210c856c:	2089c83a 	sub	r4,r4,r2
210c8570:	1908983a 	sll	r4,r3,r4
210c8574:	d9400117 	ldw	r5,4(sp)
210c8578:	1886d83a 	srl	r3,r3,r2
210c857c:	2148b03a 	or	r4,r4,r5
210c8580:	99000515 	stw	r4,20(r19)
210c8584:	d8c00015 	stw	r3,0(sp)
210c8588:	003fd006 	br	210c84cc <__flash_rwdata_start+0xffff6bd4>

210c858c <__ratio>:
210c858c:	defff904 	addi	sp,sp,-28
210c8590:	dc400315 	stw	r17,12(sp)
210c8594:	2823883a 	mov	r17,r5
210c8598:	d9400104 	addi	r5,sp,4
210c859c:	dfc00615 	stw	ra,24(sp)
210c85a0:	dcc00515 	stw	r19,20(sp)
210c85a4:	dc800415 	stw	r18,16(sp)
210c85a8:	2027883a 	mov	r19,r4
210c85ac:	dc000215 	stw	r16,8(sp)
210c85b0:	10c83340 	call	210c8334 <__b2d>
210c85b4:	8809883a 	mov	r4,r17
210c85b8:	d80b883a 	mov	r5,sp
210c85bc:	1025883a 	mov	r18,r2
210c85c0:	1821883a 	mov	r16,r3
210c85c4:	10c83340 	call	210c8334 <__b2d>
210c85c8:	8a400417 	ldw	r9,16(r17)
210c85cc:	9a000417 	ldw	r8,16(r19)
210c85d0:	100d883a 	mov	r6,r2
210c85d4:	d8800017 	ldw	r2,0(sp)
210c85d8:	4251c83a 	sub	r8,r8,r9
210c85dc:	4012917a 	slli	r9,r8,5
210c85e0:	da000117 	ldw	r8,4(sp)
210c85e4:	4091c83a 	sub	r8,r8,r2
210c85e8:	4251883a 	add	r8,r8,r9
210c85ec:	02000d0e 	bge	zero,r8,210c8624 <__ratio+0x98>
210c85f0:	4010953a 	slli	r8,r8,20
210c85f4:	4421883a 	add	r16,r8,r16
210c85f8:	9009883a 	mov	r4,r18
210c85fc:	800b883a 	mov	r5,r16
210c8600:	180f883a 	mov	r7,r3
210c8604:	10cc3a40 	call	210cc3a4 <__divdf3>
210c8608:	dfc00617 	ldw	ra,24(sp)
210c860c:	dcc00517 	ldw	r19,20(sp)
210c8610:	dc800417 	ldw	r18,16(sp)
210c8614:	dc400317 	ldw	r17,12(sp)
210c8618:	dc000217 	ldw	r16,8(sp)
210c861c:	dec00704 	addi	sp,sp,28
210c8620:	f800283a 	ret
210c8624:	4010953a 	slli	r8,r8,20
210c8628:	1a07c83a 	sub	r3,r3,r8
210c862c:	003ff206 	br	210c85f8 <__flash_rwdata_start+0xffff6d00>

210c8630 <_mprec_log10>:
210c8630:	defffe04 	addi	sp,sp,-8
210c8634:	dc000015 	stw	r16,0(sp)
210c8638:	dfc00115 	stw	ra,4(sp)
210c863c:	008005c4 	movi	r2,23
210c8640:	2021883a 	mov	r16,r4
210c8644:	11000d0e 	bge	r2,r4,210c867c <_mprec_log10+0x4c>
210c8648:	0005883a 	mov	r2,zero
210c864c:	00cffc34 	movhi	r3,16368
210c8650:	843fffc4 	addi	r16,r16,-1
210c8654:	1009883a 	mov	r4,r2
210c8658:	180b883a 	mov	r5,r3
210c865c:	000d883a 	mov	r6,zero
210c8660:	01d00934 	movhi	r7,16420
210c8664:	10cceb40 	call	210cceb4 <__muldf3>
210c8668:	803ff91e 	bne	r16,zero,210c8650 <__flash_rwdata_start+0xffff6d58>
210c866c:	dfc00117 	ldw	ra,4(sp)
210c8670:	dc000017 	ldw	r16,0(sp)
210c8674:	dec00204 	addi	sp,sp,8
210c8678:	f800283a 	ret
210c867c:	202090fa 	slli	r16,r4,3
210c8680:	00840034 	movhi	r2,4096
210c8684:	1080a704 	addi	r2,r2,668
210c8688:	1421883a 	add	r16,r2,r16
210c868c:	80800017 	ldw	r2,0(r16)
210c8690:	80c00117 	ldw	r3,4(r16)
210c8694:	dfc00117 	ldw	ra,4(sp)
210c8698:	dc000017 	ldw	r16,0(sp)
210c869c:	dec00204 	addi	sp,sp,8
210c86a0:	f800283a 	ret

210c86a4 <__copybits>:
210c86a4:	297fffc4 	addi	r5,r5,-1
210c86a8:	280fd17a 	srai	r7,r5,5
210c86ac:	30c00417 	ldw	r3,16(r6)
210c86b0:	30800504 	addi	r2,r6,20
210c86b4:	39c00044 	addi	r7,r7,1
210c86b8:	18c7883a 	add	r3,r3,r3
210c86bc:	39cf883a 	add	r7,r7,r7
210c86c0:	18c7883a 	add	r3,r3,r3
210c86c4:	39cf883a 	add	r7,r7,r7
210c86c8:	10c7883a 	add	r3,r2,r3
210c86cc:	21cf883a 	add	r7,r4,r7
210c86d0:	10c00d2e 	bgeu	r2,r3,210c8708 <__copybits+0x64>
210c86d4:	200b883a 	mov	r5,r4
210c86d8:	12000017 	ldw	r8,0(r2)
210c86dc:	29400104 	addi	r5,r5,4
210c86e0:	10800104 	addi	r2,r2,4
210c86e4:	2a3fff15 	stw	r8,-4(r5)
210c86e8:	10fffb36 	bltu	r2,r3,210c86d8 <__flash_rwdata_start+0xffff6de0>
210c86ec:	1985c83a 	sub	r2,r3,r6
210c86f0:	10bffac4 	addi	r2,r2,-21
210c86f4:	1004d0ba 	srli	r2,r2,2
210c86f8:	10800044 	addi	r2,r2,1
210c86fc:	1085883a 	add	r2,r2,r2
210c8700:	1085883a 	add	r2,r2,r2
210c8704:	2089883a 	add	r4,r4,r2
210c8708:	21c0032e 	bgeu	r4,r7,210c8718 <__copybits+0x74>
210c870c:	20000015 	stw	zero,0(r4)
210c8710:	21000104 	addi	r4,r4,4
210c8714:	21fffd36 	bltu	r4,r7,210c870c <__flash_rwdata_start+0xffff6e14>
210c8718:	f800283a 	ret

210c871c <__any_on>:
210c871c:	20c00417 	ldw	r3,16(r4)
210c8720:	2805d17a 	srai	r2,r5,5
210c8724:	21000504 	addi	r4,r4,20
210c8728:	18800d0e 	bge	r3,r2,210c8760 <__any_on+0x44>
210c872c:	18c7883a 	add	r3,r3,r3
210c8730:	18c7883a 	add	r3,r3,r3
210c8734:	20c7883a 	add	r3,r4,r3
210c8738:	20c0192e 	bgeu	r4,r3,210c87a0 <__any_on+0x84>
210c873c:	18bfff17 	ldw	r2,-4(r3)
210c8740:	18ffff04 	addi	r3,r3,-4
210c8744:	1000041e 	bne	r2,zero,210c8758 <__any_on+0x3c>
210c8748:	20c0142e 	bgeu	r4,r3,210c879c <__any_on+0x80>
210c874c:	18ffff04 	addi	r3,r3,-4
210c8750:	19400017 	ldw	r5,0(r3)
210c8754:	283ffc26 	beq	r5,zero,210c8748 <__flash_rwdata_start+0xffff6e50>
210c8758:	00800044 	movi	r2,1
210c875c:	f800283a 	ret
210c8760:	10c00a0e 	bge	r2,r3,210c878c <__any_on+0x70>
210c8764:	1085883a 	add	r2,r2,r2
210c8768:	1085883a 	add	r2,r2,r2
210c876c:	294007cc 	andi	r5,r5,31
210c8770:	2087883a 	add	r3,r4,r2
210c8774:	283ff026 	beq	r5,zero,210c8738 <__flash_rwdata_start+0xffff6e40>
210c8778:	19800017 	ldw	r6,0(r3)
210c877c:	3144d83a 	srl	r2,r6,r5
210c8780:	114a983a 	sll	r5,r2,r5
210c8784:	29bff41e 	bne	r5,r6,210c8758 <__flash_rwdata_start+0xffff6e60>
210c8788:	003feb06 	br	210c8738 <__flash_rwdata_start+0xffff6e40>
210c878c:	1085883a 	add	r2,r2,r2
210c8790:	1085883a 	add	r2,r2,r2
210c8794:	2087883a 	add	r3,r4,r2
210c8798:	003fe706 	br	210c8738 <__flash_rwdata_start+0xffff6e40>
210c879c:	f800283a 	ret
210c87a0:	0005883a 	mov	r2,zero
210c87a4:	f800283a 	ret

210c87a8 <_putc_r>:
210c87a8:	defffc04 	addi	sp,sp,-16
210c87ac:	dc000215 	stw	r16,8(sp)
210c87b0:	dfc00315 	stw	ra,12(sp)
210c87b4:	2021883a 	mov	r16,r4
210c87b8:	20000226 	beq	r4,zero,210c87c4 <_putc_r+0x1c>
210c87bc:	20800e17 	ldw	r2,56(r4)
210c87c0:	10001b26 	beq	r2,zero,210c8830 <_putc_r+0x88>
210c87c4:	30800217 	ldw	r2,8(r6)
210c87c8:	10bfffc4 	addi	r2,r2,-1
210c87cc:	30800215 	stw	r2,8(r6)
210c87d0:	10000a16 	blt	r2,zero,210c87fc <_putc_r+0x54>
210c87d4:	30800017 	ldw	r2,0(r6)
210c87d8:	11400005 	stb	r5,0(r2)
210c87dc:	30800017 	ldw	r2,0(r6)
210c87e0:	10c00044 	addi	r3,r2,1
210c87e4:	30c00015 	stw	r3,0(r6)
210c87e8:	10800003 	ldbu	r2,0(r2)
210c87ec:	dfc00317 	ldw	ra,12(sp)
210c87f0:	dc000217 	ldw	r16,8(sp)
210c87f4:	dec00404 	addi	sp,sp,16
210c87f8:	f800283a 	ret
210c87fc:	30c00617 	ldw	r3,24(r6)
210c8800:	10c00616 	blt	r2,r3,210c881c <_putc_r+0x74>
210c8804:	30800017 	ldw	r2,0(r6)
210c8808:	00c00284 	movi	r3,10
210c880c:	11400005 	stb	r5,0(r2)
210c8810:	30800017 	ldw	r2,0(r6)
210c8814:	11400003 	ldbu	r5,0(r2)
210c8818:	28fff11e 	bne	r5,r3,210c87e0 <__flash_rwdata_start+0xffff6ee8>
210c881c:	8009883a 	mov	r4,r16
210c8820:	dfc00317 	ldw	ra,12(sp)
210c8824:	dc000217 	ldw	r16,8(sp)
210c8828:	dec00404 	addi	sp,sp,16
210c882c:	10ca5941 	jmpi	210ca594 <__swbuf_r>
210c8830:	d9400015 	stw	r5,0(sp)
210c8834:	d9800115 	stw	r6,4(sp)
210c8838:	10c66240 	call	210c6624 <__sinit>
210c883c:	d9800117 	ldw	r6,4(sp)
210c8840:	d9400017 	ldw	r5,0(sp)
210c8844:	003fdf06 	br	210c87c4 <__flash_rwdata_start+0xffff6ecc>

210c8848 <putc>:
210c8848:	00840034 	movhi	r2,4096
210c884c:	defffc04 	addi	sp,sp,-16
210c8850:	10892304 	addi	r2,r2,9356
210c8854:	dc400115 	stw	r17,4(sp)
210c8858:	14400017 	ldw	r17,0(r2)
210c885c:	dc800215 	stw	r18,8(sp)
210c8860:	dc000015 	stw	r16,0(sp)
210c8864:	dfc00315 	stw	ra,12(sp)
210c8868:	2025883a 	mov	r18,r4
210c886c:	2821883a 	mov	r16,r5
210c8870:	88000226 	beq	r17,zero,210c887c <putc+0x34>
210c8874:	88800e17 	ldw	r2,56(r17)
210c8878:	10001a26 	beq	r2,zero,210c88e4 <putc+0x9c>
210c887c:	80800217 	ldw	r2,8(r16)
210c8880:	10bfffc4 	addi	r2,r2,-1
210c8884:	80800215 	stw	r2,8(r16)
210c8888:	10000c16 	blt	r2,zero,210c88bc <putc+0x74>
210c888c:	80800017 	ldw	r2,0(r16)
210c8890:	14800005 	stb	r18,0(r2)
210c8894:	80800017 	ldw	r2,0(r16)
210c8898:	10c00044 	addi	r3,r2,1
210c889c:	80c00015 	stw	r3,0(r16)
210c88a0:	10800003 	ldbu	r2,0(r2)
210c88a4:	dfc00317 	ldw	ra,12(sp)
210c88a8:	dc800217 	ldw	r18,8(sp)
210c88ac:	dc400117 	ldw	r17,4(sp)
210c88b0:	dc000017 	ldw	r16,0(sp)
210c88b4:	dec00404 	addi	sp,sp,16
210c88b8:	f800283a 	ret
210c88bc:	80c00617 	ldw	r3,24(r16)
210c88c0:	10c00b16 	blt	r2,r3,210c88f0 <putc+0xa8>
210c88c4:	80800017 	ldw	r2,0(r16)
210c88c8:	00c00284 	movi	r3,10
210c88cc:	14800005 	stb	r18,0(r2)
210c88d0:	80800017 	ldw	r2,0(r16)
210c88d4:	11400003 	ldbu	r5,0(r2)
210c88d8:	28ffef1e 	bne	r5,r3,210c8898 <__flash_rwdata_start+0xffff6fa0>
210c88dc:	8809883a 	mov	r4,r17
210c88e0:	00000506 	br	210c88f8 <putc+0xb0>
210c88e4:	8809883a 	mov	r4,r17
210c88e8:	10c66240 	call	210c6624 <__sinit>
210c88ec:	003fe306 	br	210c887c <__flash_rwdata_start+0xffff6f84>
210c88f0:	8809883a 	mov	r4,r17
210c88f4:	900b883a 	mov	r5,r18
210c88f8:	800d883a 	mov	r6,r16
210c88fc:	dfc00317 	ldw	ra,12(sp)
210c8900:	dc800217 	ldw	r18,8(sp)
210c8904:	dc400117 	ldw	r17,4(sp)
210c8908:	dc000017 	ldw	r16,0(sp)
210c890c:	dec00404 	addi	sp,sp,16
210c8910:	10ca5941 	jmpi	210ca594 <__swbuf_r>

210c8914 <_realloc_r>:
210c8914:	defff604 	addi	sp,sp,-40
210c8918:	dd000415 	stw	r20,16(sp)
210c891c:	dc400115 	stw	r17,4(sp)
210c8920:	dfc00915 	stw	ra,36(sp)
210c8924:	df000815 	stw	fp,32(sp)
210c8928:	ddc00715 	stw	r23,28(sp)
210c892c:	dd800615 	stw	r22,24(sp)
210c8930:	dd400515 	stw	r21,20(sp)
210c8934:	dcc00315 	stw	r19,12(sp)
210c8938:	dc800215 	stw	r18,8(sp)
210c893c:	dc000015 	stw	r16,0(sp)
210c8940:	2829883a 	mov	r20,r5
210c8944:	3023883a 	mov	r17,r6
210c8948:	2800ad26 	beq	r5,zero,210c8c00 <_realloc_r+0x2ec>
210c894c:	2025883a 	mov	r18,r4
210c8950:	10ce4d80 	call	210ce4d8 <__malloc_lock>
210c8954:	a0ffff17 	ldw	r3,-4(r20)
210c8958:	043fff04 	movi	r16,-4
210c895c:	890002c4 	addi	r4,r17,11
210c8960:	01c00584 	movi	r7,22
210c8964:	a57ffe04 	addi	r21,r20,-8
210c8968:	1c20703a 	and	r16,r3,r16
210c896c:	39001d2e 	bgeu	r7,r4,210c89e4 <_realloc_r+0xd0>
210c8970:	05bffe04 	movi	r22,-8
210c8974:	25ac703a 	and	r22,r4,r22
210c8978:	b00f883a 	mov	r7,r22
210c897c:	b0006516 	blt	r22,zero,210c8b14 <_realloc_r+0x200>
210c8980:	b4406436 	bltu	r22,r17,210c8b14 <_realloc_r+0x200>
210c8984:	81c01a0e 	bge	r16,r7,210c89f0 <_realloc_r+0xdc>
210c8988:	07040034 	movhi	fp,4096
210c898c:	e7032c04 	addi	fp,fp,3248
210c8990:	e1400217 	ldw	r5,8(fp)
210c8994:	ac11883a 	add	r8,r21,r16
210c8998:	2a006226 	beq	r5,r8,210c8b24 <_realloc_r+0x210>
210c899c:	41800117 	ldw	r6,4(r8)
210c89a0:	027fff84 	movi	r9,-2
210c89a4:	3252703a 	and	r9,r6,r9
210c89a8:	4253883a 	add	r9,r8,r9
210c89ac:	49000117 	ldw	r4,4(r9)
210c89b0:	2100004c 	andi	r4,r4,1
210c89b4:	2000281e 	bne	r4,zero,210c8a58 <_realloc_r+0x144>
210c89b8:	00bfff04 	movi	r2,-4
210c89bc:	3084703a 	and	r2,r6,r2
210c89c0:	1409883a 	add	r4,r2,r16
210c89c4:	21c05e16 	blt	r4,r7,210c8b40 <_realloc_r+0x22c>
210c89c8:	40800317 	ldw	r2,12(r8)
210c89cc:	41400217 	ldw	r5,8(r8)
210c89d0:	a023883a 	mov	r17,r20
210c89d4:	2021883a 	mov	r16,r4
210c89d8:	28800315 	stw	r2,12(r5)
210c89dc:	11400215 	stw	r5,8(r2)
210c89e0:	00000406 	br	210c89f4 <_realloc_r+0xe0>
210c89e4:	01c00404 	movi	r7,16
210c89e8:	382d883a 	mov	r22,r7
210c89ec:	003fe406 	br	210c8980 <__flash_rwdata_start+0xffff7088>
210c89f0:	a023883a 	mov	r17,r20
210c89f4:	858fc83a 	sub	r7,r16,r22
210c89f8:	008003c4 	movi	r2,15
210c89fc:	18c0004c 	andi	r3,r3,1
210c8a00:	11c07236 	bltu	r2,r7,210c8bcc <_realloc_r+0x2b8>
210c8a04:	1c06b03a 	or	r3,r3,r16
210c8a08:	a8c00115 	stw	r3,4(r21)
210c8a0c:	ac21883a 	add	r16,r21,r16
210c8a10:	80800117 	ldw	r2,4(r16)
210c8a14:	10800054 	ori	r2,r2,1
210c8a18:	80800115 	stw	r2,4(r16)
210c8a1c:	9009883a 	mov	r4,r18
210c8a20:	10ce4dc0 	call	210ce4dc <__malloc_unlock>
210c8a24:	8805883a 	mov	r2,r17
210c8a28:	dfc00917 	ldw	ra,36(sp)
210c8a2c:	df000817 	ldw	fp,32(sp)
210c8a30:	ddc00717 	ldw	r23,28(sp)
210c8a34:	dd800617 	ldw	r22,24(sp)
210c8a38:	dd400517 	ldw	r21,20(sp)
210c8a3c:	dd000417 	ldw	r20,16(sp)
210c8a40:	dcc00317 	ldw	r19,12(sp)
210c8a44:	dc800217 	ldw	r18,8(sp)
210c8a48:	dc400117 	ldw	r17,4(sp)
210c8a4c:	dc000017 	ldw	r16,0(sp)
210c8a50:	dec00a04 	addi	sp,sp,40
210c8a54:	f800283a 	ret
210c8a58:	18c0004c 	andi	r3,r3,1
210c8a5c:	1800081e 	bne	r3,zero,210c8a80 <_realloc_r+0x16c>
210c8a60:	a4fffe17 	ldw	r19,-8(r20)
210c8a64:	00bfff04 	movi	r2,-4
210c8a68:	ace7c83a 	sub	r19,r21,r19
210c8a6c:	98c00117 	ldw	r3,4(r19)
210c8a70:	1886703a 	and	r3,r3,r2
210c8a74:	98000226 	beq	r19,zero,210c8a80 <_realloc_r+0x16c>
210c8a78:	1c2f883a 	add	r23,r3,r16
210c8a7c:	b9c06d0e 	bge	r23,r7,210c8c34 <_realloc_r+0x320>
210c8a80:	880b883a 	mov	r5,r17
210c8a84:	9009883a 	mov	r4,r18
210c8a88:	10c1a280 	call	210c1a28 <_malloc_r>
210c8a8c:	1023883a 	mov	r17,r2
210c8a90:	1000ef26 	beq	r2,zero,210c8e50 <_realloc_r+0x53c>
210c8a94:	a0ffff17 	ldw	r3,-4(r20)
210c8a98:	113ffe04 	addi	r4,r2,-8
210c8a9c:	00bfff84 	movi	r2,-2
210c8aa0:	1884703a 	and	r2,r3,r2
210c8aa4:	a885883a 	add	r2,r21,r2
210c8aa8:	2080bf26 	beq	r4,r2,210c8da8 <_realloc_r+0x494>
210c8aac:	81bfff04 	addi	r6,r16,-4
210c8ab0:	00800904 	movi	r2,36
210c8ab4:	11808936 	bltu	r2,r6,210c8cdc <_realloc_r+0x3c8>
210c8ab8:	00c004c4 	movi	r3,19
210c8abc:	19806c2e 	bgeu	r3,r6,210c8c70 <_realloc_r+0x35c>
210c8ac0:	a0c00017 	ldw	r3,0(r20)
210c8ac4:	88c00015 	stw	r3,0(r17)
210c8ac8:	a0c00117 	ldw	r3,4(r20)
210c8acc:	88c00115 	stw	r3,4(r17)
210c8ad0:	00c006c4 	movi	r3,27
210c8ad4:	1980ac36 	bltu	r3,r6,210c8d88 <_realloc_r+0x474>
210c8ad8:	88800204 	addi	r2,r17,8
210c8adc:	a0c00204 	addi	r3,r20,8
210c8ae0:	19000017 	ldw	r4,0(r3)
210c8ae4:	11000015 	stw	r4,0(r2)
210c8ae8:	19000117 	ldw	r4,4(r3)
210c8aec:	11000115 	stw	r4,4(r2)
210c8af0:	18c00217 	ldw	r3,8(r3)
210c8af4:	10c00215 	stw	r3,8(r2)
210c8af8:	a00b883a 	mov	r5,r20
210c8afc:	9009883a 	mov	r4,r18
210c8b00:	10c67980 	call	210c6798 <_free_r>
210c8b04:	9009883a 	mov	r4,r18
210c8b08:	10ce4dc0 	call	210ce4dc <__malloc_unlock>
210c8b0c:	8805883a 	mov	r2,r17
210c8b10:	003fc506 	br	210c8a28 <__flash_rwdata_start+0xffff7130>
210c8b14:	00800304 	movi	r2,12
210c8b18:	90800015 	stw	r2,0(r18)
210c8b1c:	0005883a 	mov	r2,zero
210c8b20:	003fc106 	br	210c8a28 <__flash_rwdata_start+0xffff7130>
210c8b24:	29800117 	ldw	r6,4(r5)
210c8b28:	00bfff04 	movi	r2,-4
210c8b2c:	b1000404 	addi	r4,r22,16
210c8b30:	3084703a 	and	r2,r6,r2
210c8b34:	140d883a 	add	r6,r2,r16
210c8b38:	31005b0e 	bge	r6,r4,210c8ca8 <_realloc_r+0x394>
210c8b3c:	2811883a 	mov	r8,r5
210c8b40:	18c0004c 	andi	r3,r3,1
210c8b44:	183fce1e 	bne	r3,zero,210c8a80 <__flash_rwdata_start+0xffff7188>
210c8b48:	a4fffe17 	ldw	r19,-8(r20)
210c8b4c:	00ffff04 	movi	r3,-4
210c8b50:	ace7c83a 	sub	r19,r21,r19
210c8b54:	99000117 	ldw	r4,4(r19)
210c8b58:	20c6703a 	and	r3,r4,r3
210c8b5c:	403fc526 	beq	r8,zero,210c8a74 <__flash_rwdata_start+0xffff717c>
210c8b60:	1c2f883a 	add	r23,r3,r16
210c8b64:	b8af883a 	add	r23,r23,r2
210c8b68:	41406026 	beq	r8,r5,210c8cec <_realloc_r+0x3d8>
210c8b6c:	b9ffc116 	blt	r23,r7,210c8a74 <__flash_rwdata_start+0xffff717c>
210c8b70:	40c00217 	ldw	r3,8(r8)
210c8b74:	40800317 	ldw	r2,12(r8)
210c8b78:	81bfff04 	addi	r6,r16,-4
210c8b7c:	01000904 	movi	r4,36
210c8b80:	18800315 	stw	r2,12(r3)
210c8b84:	10c00215 	stw	r3,8(r2)
210c8b88:	99400217 	ldw	r5,8(r19)
210c8b8c:	98c00317 	ldw	r3,12(r19)
210c8b90:	9c400204 	addi	r17,r19,8
210c8b94:	28c00315 	stw	r3,12(r5)
210c8b98:	19400215 	stw	r5,8(r3)
210c8b9c:	21802d36 	bltu	r4,r6,210c8c54 <_realloc_r+0x340>
210c8ba0:	008004c4 	movi	r2,19
210c8ba4:	1180352e 	bgeu	r2,r6,210c8c7c <_realloc_r+0x368>
210c8ba8:	a0800017 	ldw	r2,0(r20)
210c8bac:	98800215 	stw	r2,8(r19)
210c8bb0:	a0800117 	ldw	r2,4(r20)
210c8bb4:	98800315 	stw	r2,12(r19)
210c8bb8:	008006c4 	movi	r2,27
210c8bbc:	11808036 	bltu	r2,r6,210c8dc0 <_realloc_r+0x4ac>
210c8bc0:	98c00404 	addi	r3,r19,16
210c8bc4:	a5000204 	addi	r20,r20,8
210c8bc8:	00002d06 	br	210c8c80 <_realloc_r+0x36c>
210c8bcc:	1d86b03a 	or	r3,r3,r22
210c8bd0:	ad8b883a 	add	r5,r21,r22
210c8bd4:	a8c00115 	stw	r3,4(r21)
210c8bd8:	38800054 	ori	r2,r7,1
210c8bdc:	28800115 	stw	r2,4(r5)
210c8be0:	29cf883a 	add	r7,r5,r7
210c8be4:	38800117 	ldw	r2,4(r7)
210c8be8:	9009883a 	mov	r4,r18
210c8bec:	29400204 	addi	r5,r5,8
210c8bf0:	10800054 	ori	r2,r2,1
210c8bf4:	38800115 	stw	r2,4(r7)
210c8bf8:	10c67980 	call	210c6798 <_free_r>
210c8bfc:	003f8706 	br	210c8a1c <__flash_rwdata_start+0xffff7124>
210c8c00:	300b883a 	mov	r5,r6
210c8c04:	dfc00917 	ldw	ra,36(sp)
210c8c08:	df000817 	ldw	fp,32(sp)
210c8c0c:	ddc00717 	ldw	r23,28(sp)
210c8c10:	dd800617 	ldw	r22,24(sp)
210c8c14:	dd400517 	ldw	r21,20(sp)
210c8c18:	dd000417 	ldw	r20,16(sp)
210c8c1c:	dcc00317 	ldw	r19,12(sp)
210c8c20:	dc800217 	ldw	r18,8(sp)
210c8c24:	dc400117 	ldw	r17,4(sp)
210c8c28:	dc000017 	ldw	r16,0(sp)
210c8c2c:	dec00a04 	addi	sp,sp,40
210c8c30:	10c1a281 	jmpi	210c1a28 <_malloc_r>
210c8c34:	98800317 	ldw	r2,12(r19)
210c8c38:	98c00217 	ldw	r3,8(r19)
210c8c3c:	81bfff04 	addi	r6,r16,-4
210c8c40:	01000904 	movi	r4,36
210c8c44:	18800315 	stw	r2,12(r3)
210c8c48:	10c00215 	stw	r3,8(r2)
210c8c4c:	9c400204 	addi	r17,r19,8
210c8c50:	21bfd32e 	bgeu	r4,r6,210c8ba0 <__flash_rwdata_start+0xffff72a8>
210c8c54:	8809883a 	mov	r4,r17
210c8c58:	a00b883a 	mov	r5,r20
210c8c5c:	10c75880 	call	210c7588 <memmove>
210c8c60:	98c00117 	ldw	r3,4(r19)
210c8c64:	b821883a 	mov	r16,r23
210c8c68:	982b883a 	mov	r21,r19
210c8c6c:	003f6106 	br	210c89f4 <__flash_rwdata_start+0xffff70fc>
210c8c70:	8805883a 	mov	r2,r17
210c8c74:	a007883a 	mov	r3,r20
210c8c78:	003f9906 	br	210c8ae0 <__flash_rwdata_start+0xffff71e8>
210c8c7c:	8807883a 	mov	r3,r17
210c8c80:	a0800017 	ldw	r2,0(r20)
210c8c84:	b821883a 	mov	r16,r23
210c8c88:	982b883a 	mov	r21,r19
210c8c8c:	18800015 	stw	r2,0(r3)
210c8c90:	a0800117 	ldw	r2,4(r20)
210c8c94:	18800115 	stw	r2,4(r3)
210c8c98:	a0800217 	ldw	r2,8(r20)
210c8c9c:	18800215 	stw	r2,8(r3)
210c8ca0:	98c00117 	ldw	r3,4(r19)
210c8ca4:	003f5306 	br	210c89f4 <__flash_rwdata_start+0xffff70fc>
210c8ca8:	adab883a 	add	r21,r21,r22
210c8cac:	3585c83a 	sub	r2,r6,r22
210c8cb0:	e5400215 	stw	r21,8(fp)
210c8cb4:	10800054 	ori	r2,r2,1
210c8cb8:	a8800115 	stw	r2,4(r21)
210c8cbc:	a0bfff17 	ldw	r2,-4(r20)
210c8cc0:	9009883a 	mov	r4,r18
210c8cc4:	1080004c 	andi	r2,r2,1
210c8cc8:	b0acb03a 	or	r22,r22,r2
210c8ccc:	a5bfff15 	stw	r22,-4(r20)
210c8cd0:	10ce4dc0 	call	210ce4dc <__malloc_unlock>
210c8cd4:	a005883a 	mov	r2,r20
210c8cd8:	003f5306 	br	210c8a28 <__flash_rwdata_start+0xffff7130>
210c8cdc:	8809883a 	mov	r4,r17
210c8ce0:	a00b883a 	mov	r5,r20
210c8ce4:	10c75880 	call	210c7588 <memmove>
210c8ce8:	003f8306 	br	210c8af8 <__flash_rwdata_start+0xffff7200>
210c8cec:	b0800404 	addi	r2,r22,16
210c8cf0:	b8bf6016 	blt	r23,r2,210c8a74 <__flash_rwdata_start+0xffff717c>
210c8cf4:	98800317 	ldw	r2,12(r19)
210c8cf8:	98c00217 	ldw	r3,8(r19)
210c8cfc:	81bfff04 	addi	r6,r16,-4
210c8d00:	01000904 	movi	r4,36
210c8d04:	18800315 	stw	r2,12(r3)
210c8d08:	10c00215 	stw	r3,8(r2)
210c8d0c:	9c400204 	addi	r17,r19,8
210c8d10:	21804336 	bltu	r4,r6,210c8e20 <_realloc_r+0x50c>
210c8d14:	008004c4 	movi	r2,19
210c8d18:	11803f2e 	bgeu	r2,r6,210c8e18 <_realloc_r+0x504>
210c8d1c:	a0800017 	ldw	r2,0(r20)
210c8d20:	98800215 	stw	r2,8(r19)
210c8d24:	a0800117 	ldw	r2,4(r20)
210c8d28:	98800315 	stw	r2,12(r19)
210c8d2c:	008006c4 	movi	r2,27
210c8d30:	11803f36 	bltu	r2,r6,210c8e30 <_realloc_r+0x51c>
210c8d34:	98800404 	addi	r2,r19,16
210c8d38:	a5000204 	addi	r20,r20,8
210c8d3c:	a0c00017 	ldw	r3,0(r20)
210c8d40:	10c00015 	stw	r3,0(r2)
210c8d44:	a0c00117 	ldw	r3,4(r20)
210c8d48:	10c00115 	stw	r3,4(r2)
210c8d4c:	a0c00217 	ldw	r3,8(r20)
210c8d50:	10c00215 	stw	r3,8(r2)
210c8d54:	9d87883a 	add	r3,r19,r22
210c8d58:	bd85c83a 	sub	r2,r23,r22
210c8d5c:	e0c00215 	stw	r3,8(fp)
210c8d60:	10800054 	ori	r2,r2,1
210c8d64:	18800115 	stw	r2,4(r3)
210c8d68:	98800117 	ldw	r2,4(r19)
210c8d6c:	9009883a 	mov	r4,r18
210c8d70:	1080004c 	andi	r2,r2,1
210c8d74:	b0acb03a 	or	r22,r22,r2
210c8d78:	9d800115 	stw	r22,4(r19)
210c8d7c:	10ce4dc0 	call	210ce4dc <__malloc_unlock>
210c8d80:	8805883a 	mov	r2,r17
210c8d84:	003f2806 	br	210c8a28 <__flash_rwdata_start+0xffff7130>
210c8d88:	a0c00217 	ldw	r3,8(r20)
210c8d8c:	88c00215 	stw	r3,8(r17)
210c8d90:	a0c00317 	ldw	r3,12(r20)
210c8d94:	88c00315 	stw	r3,12(r17)
210c8d98:	30801126 	beq	r6,r2,210c8de0 <_realloc_r+0x4cc>
210c8d9c:	88800404 	addi	r2,r17,16
210c8da0:	a0c00404 	addi	r3,r20,16
210c8da4:	003f4e06 	br	210c8ae0 <__flash_rwdata_start+0xffff71e8>
210c8da8:	893fff17 	ldw	r4,-4(r17)
210c8dac:	00bfff04 	movi	r2,-4
210c8db0:	a023883a 	mov	r17,r20
210c8db4:	2084703a 	and	r2,r4,r2
210c8db8:	80a1883a 	add	r16,r16,r2
210c8dbc:	003f0d06 	br	210c89f4 <__flash_rwdata_start+0xffff70fc>
210c8dc0:	a0800217 	ldw	r2,8(r20)
210c8dc4:	98800415 	stw	r2,16(r19)
210c8dc8:	a0800317 	ldw	r2,12(r20)
210c8dcc:	98800515 	stw	r2,20(r19)
210c8dd0:	31000a26 	beq	r6,r4,210c8dfc <_realloc_r+0x4e8>
210c8dd4:	98c00604 	addi	r3,r19,24
210c8dd8:	a5000404 	addi	r20,r20,16
210c8ddc:	003fa806 	br	210c8c80 <__flash_rwdata_start+0xffff7388>
210c8de0:	a1000417 	ldw	r4,16(r20)
210c8de4:	88800604 	addi	r2,r17,24
210c8de8:	a0c00604 	addi	r3,r20,24
210c8dec:	89000415 	stw	r4,16(r17)
210c8df0:	a1000517 	ldw	r4,20(r20)
210c8df4:	89000515 	stw	r4,20(r17)
210c8df8:	003f3906 	br	210c8ae0 <__flash_rwdata_start+0xffff71e8>
210c8dfc:	a0800417 	ldw	r2,16(r20)
210c8e00:	a5000604 	addi	r20,r20,24
210c8e04:	98c00804 	addi	r3,r19,32
210c8e08:	98800615 	stw	r2,24(r19)
210c8e0c:	a0bfff17 	ldw	r2,-4(r20)
210c8e10:	98800715 	stw	r2,28(r19)
210c8e14:	003f9a06 	br	210c8c80 <__flash_rwdata_start+0xffff7388>
210c8e18:	8805883a 	mov	r2,r17
210c8e1c:	003fc706 	br	210c8d3c <__flash_rwdata_start+0xffff7444>
210c8e20:	8809883a 	mov	r4,r17
210c8e24:	a00b883a 	mov	r5,r20
210c8e28:	10c75880 	call	210c7588 <memmove>
210c8e2c:	003fc906 	br	210c8d54 <__flash_rwdata_start+0xffff745c>
210c8e30:	a0800217 	ldw	r2,8(r20)
210c8e34:	98800415 	stw	r2,16(r19)
210c8e38:	a0800317 	ldw	r2,12(r20)
210c8e3c:	98800515 	stw	r2,20(r19)
210c8e40:	31000726 	beq	r6,r4,210c8e60 <_realloc_r+0x54c>
210c8e44:	98800604 	addi	r2,r19,24
210c8e48:	a5000404 	addi	r20,r20,16
210c8e4c:	003fbb06 	br	210c8d3c <__flash_rwdata_start+0xffff7444>
210c8e50:	9009883a 	mov	r4,r18
210c8e54:	10ce4dc0 	call	210ce4dc <__malloc_unlock>
210c8e58:	0005883a 	mov	r2,zero
210c8e5c:	003ef206 	br	210c8a28 <__flash_rwdata_start+0xffff7130>
210c8e60:	a0c00417 	ldw	r3,16(r20)
210c8e64:	a5000604 	addi	r20,r20,24
210c8e68:	98800804 	addi	r2,r19,32
210c8e6c:	98c00615 	stw	r3,24(r19)
210c8e70:	a0ffff17 	ldw	r3,-4(r20)
210c8e74:	98c00715 	stw	r3,28(r19)
210c8e78:	003fb006 	br	210c8d3c <__flash_rwdata_start+0xffff7444>

210c8e7c <__fpclassifyd>:
210c8e7c:	00a00034 	movhi	r2,32768
210c8e80:	10bfffc4 	addi	r2,r2,-1
210c8e84:	2884703a 	and	r2,r5,r2
210c8e88:	10000726 	beq	r2,zero,210c8ea8 <__fpclassifyd+0x2c>
210c8e8c:	00fffc34 	movhi	r3,65520
210c8e90:	019ff834 	movhi	r6,32736
210c8e94:	28c7883a 	add	r3,r5,r3
210c8e98:	31bfffc4 	addi	r6,r6,-1
210c8e9c:	30c00536 	bltu	r6,r3,210c8eb4 <__fpclassifyd+0x38>
210c8ea0:	00800104 	movi	r2,4
210c8ea4:	f800283a 	ret
210c8ea8:	2000021e 	bne	r4,zero,210c8eb4 <__fpclassifyd+0x38>
210c8eac:	00800084 	movi	r2,2
210c8eb0:	f800283a 	ret
210c8eb4:	00dffc34 	movhi	r3,32752
210c8eb8:	019ff834 	movhi	r6,32736
210c8ebc:	28cb883a 	add	r5,r5,r3
210c8ec0:	31bfffc4 	addi	r6,r6,-1
210c8ec4:	317ff62e 	bgeu	r6,r5,210c8ea0 <__flash_rwdata_start+0xffff75a8>
210c8ec8:	01400434 	movhi	r5,16
210c8ecc:	297fffc4 	addi	r5,r5,-1
210c8ed0:	28800236 	bltu	r5,r2,210c8edc <__fpclassifyd+0x60>
210c8ed4:	008000c4 	movi	r2,3
210c8ed8:	f800283a 	ret
210c8edc:	10c00226 	beq	r2,r3,210c8ee8 <__fpclassifyd+0x6c>
210c8ee0:	0005883a 	mov	r2,zero
210c8ee4:	f800283a 	ret
210c8ee8:	2005003a 	cmpeq	r2,r4,zero
210c8eec:	f800283a 	ret

210c8ef0 <__sread>:
210c8ef0:	defffe04 	addi	sp,sp,-8
210c8ef4:	dc000015 	stw	r16,0(sp)
210c8ef8:	2821883a 	mov	r16,r5
210c8efc:	2940038f 	ldh	r5,14(r5)
210c8f00:	dfc00115 	stw	ra,4(sp)
210c8f04:	10cac480 	call	210cac48 <_read_r>
210c8f08:	10000716 	blt	r2,zero,210c8f28 <__sread+0x38>
210c8f0c:	80c01417 	ldw	r3,80(r16)
210c8f10:	1887883a 	add	r3,r3,r2
210c8f14:	80c01415 	stw	r3,80(r16)
210c8f18:	dfc00117 	ldw	ra,4(sp)
210c8f1c:	dc000017 	ldw	r16,0(sp)
210c8f20:	dec00204 	addi	sp,sp,8
210c8f24:	f800283a 	ret
210c8f28:	80c0030b 	ldhu	r3,12(r16)
210c8f2c:	18fbffcc 	andi	r3,r3,61439
210c8f30:	80c0030d 	sth	r3,12(r16)
210c8f34:	dfc00117 	ldw	ra,4(sp)
210c8f38:	dc000017 	ldw	r16,0(sp)
210c8f3c:	dec00204 	addi	sp,sp,8
210c8f40:	f800283a 	ret

210c8f44 <__seofread>:
210c8f44:	0005883a 	mov	r2,zero
210c8f48:	f800283a 	ret

210c8f4c <__swrite>:
210c8f4c:	2880030b 	ldhu	r2,12(r5)
210c8f50:	defffb04 	addi	sp,sp,-20
210c8f54:	dcc00315 	stw	r19,12(sp)
210c8f58:	dc800215 	stw	r18,8(sp)
210c8f5c:	dc400115 	stw	r17,4(sp)
210c8f60:	dc000015 	stw	r16,0(sp)
210c8f64:	dfc00415 	stw	ra,16(sp)
210c8f68:	10c0400c 	andi	r3,r2,256
210c8f6c:	2821883a 	mov	r16,r5
210c8f70:	2027883a 	mov	r19,r4
210c8f74:	3025883a 	mov	r18,r6
210c8f78:	3823883a 	mov	r17,r7
210c8f7c:	18000526 	beq	r3,zero,210c8f94 <__swrite+0x48>
210c8f80:	2940038f 	ldh	r5,14(r5)
210c8f84:	000d883a 	mov	r6,zero
210c8f88:	01c00084 	movi	r7,2
210c8f8c:	10cabec0 	call	210cabec <_lseek_r>
210c8f90:	8080030b 	ldhu	r2,12(r16)
210c8f94:	8140038f 	ldh	r5,14(r16)
210c8f98:	10bbffcc 	andi	r2,r2,61439
210c8f9c:	9809883a 	mov	r4,r19
210c8fa0:	900d883a 	mov	r6,r18
210c8fa4:	880f883a 	mov	r7,r17
210c8fa8:	8080030d 	sth	r2,12(r16)
210c8fac:	dfc00417 	ldw	ra,16(sp)
210c8fb0:	dcc00317 	ldw	r19,12(sp)
210c8fb4:	dc800217 	ldw	r18,8(sp)
210c8fb8:	dc400117 	ldw	r17,4(sp)
210c8fbc:	dc000017 	ldw	r16,0(sp)
210c8fc0:	dec00504 	addi	sp,sp,20
210c8fc4:	10ca6e81 	jmpi	210ca6e8 <_write_r>

210c8fc8 <__sseek>:
210c8fc8:	defffe04 	addi	sp,sp,-8
210c8fcc:	dc000015 	stw	r16,0(sp)
210c8fd0:	2821883a 	mov	r16,r5
210c8fd4:	2940038f 	ldh	r5,14(r5)
210c8fd8:	dfc00115 	stw	ra,4(sp)
210c8fdc:	10cabec0 	call	210cabec <_lseek_r>
210c8fe0:	00ffffc4 	movi	r3,-1
210c8fe4:	10c00826 	beq	r2,r3,210c9008 <__sseek+0x40>
210c8fe8:	80c0030b 	ldhu	r3,12(r16)
210c8fec:	80801415 	stw	r2,80(r16)
210c8ff0:	18c40014 	ori	r3,r3,4096
210c8ff4:	80c0030d 	sth	r3,12(r16)
210c8ff8:	dfc00117 	ldw	ra,4(sp)
210c8ffc:	dc000017 	ldw	r16,0(sp)
210c9000:	dec00204 	addi	sp,sp,8
210c9004:	f800283a 	ret
210c9008:	80c0030b 	ldhu	r3,12(r16)
210c900c:	18fbffcc 	andi	r3,r3,61439
210c9010:	80c0030d 	sth	r3,12(r16)
210c9014:	dfc00117 	ldw	ra,4(sp)
210c9018:	dc000017 	ldw	r16,0(sp)
210c901c:	dec00204 	addi	sp,sp,8
210c9020:	f800283a 	ret

210c9024 <__sclose>:
210c9024:	2940038f 	ldh	r5,14(r5)
210c9028:	10ca7441 	jmpi	210ca744 <_close_r>

210c902c <strcmp>:
210c902c:	2144b03a 	or	r2,r4,r5
210c9030:	108000cc 	andi	r2,r2,3
210c9034:	1000171e 	bne	r2,zero,210c9094 <strcmp+0x68>
210c9038:	20800017 	ldw	r2,0(r4)
210c903c:	28c00017 	ldw	r3,0(r5)
210c9040:	10c0141e 	bne	r2,r3,210c9094 <strcmp+0x68>
210c9044:	027fbff4 	movhi	r9,65279
210c9048:	4a7fbfc4 	addi	r9,r9,-257
210c904c:	0086303a 	nor	r3,zero,r2
210c9050:	02202074 	movhi	r8,32897
210c9054:	1245883a 	add	r2,r2,r9
210c9058:	42202004 	addi	r8,r8,-32640
210c905c:	10c4703a 	and	r2,r2,r3
210c9060:	1204703a 	and	r2,r2,r8
210c9064:	10000226 	beq	r2,zero,210c9070 <strcmp+0x44>
210c9068:	00001706 	br	210c90c8 <strcmp+0x9c>
210c906c:	1000161e 	bne	r2,zero,210c90c8 <strcmp+0x9c>
210c9070:	21000104 	addi	r4,r4,4
210c9074:	20c00017 	ldw	r3,0(r4)
210c9078:	29400104 	addi	r5,r5,4
210c907c:	29800017 	ldw	r6,0(r5)
210c9080:	1a4f883a 	add	r7,r3,r9
210c9084:	00c4303a 	nor	r2,zero,r3
210c9088:	3884703a 	and	r2,r7,r2
210c908c:	1204703a 	and	r2,r2,r8
210c9090:	19bff626 	beq	r3,r6,210c906c <__flash_rwdata_start+0xffff7774>
210c9094:	20800007 	ldb	r2,0(r4)
210c9098:	1000051e 	bne	r2,zero,210c90b0 <strcmp+0x84>
210c909c:	00000606 	br	210c90b8 <strcmp+0x8c>
210c90a0:	21000044 	addi	r4,r4,1
210c90a4:	20800007 	ldb	r2,0(r4)
210c90a8:	29400044 	addi	r5,r5,1
210c90ac:	10000226 	beq	r2,zero,210c90b8 <strcmp+0x8c>
210c90b0:	28c00007 	ldb	r3,0(r5)
210c90b4:	10fffa26 	beq	r2,r3,210c90a0 <__flash_rwdata_start+0xffff77a8>
210c90b8:	20800003 	ldbu	r2,0(r4)
210c90bc:	28c00003 	ldbu	r3,0(r5)
210c90c0:	10c5c83a 	sub	r2,r2,r3
210c90c4:	f800283a 	ret
210c90c8:	0005883a 	mov	r2,zero
210c90cc:	f800283a 	ret

210c90d0 <__sprint_r.part.0>:
210c90d0:	28801917 	ldw	r2,100(r5)
210c90d4:	defff604 	addi	sp,sp,-40
210c90d8:	dd400515 	stw	r21,20(sp)
210c90dc:	dcc00315 	stw	r19,12(sp)
210c90e0:	dfc00915 	stw	ra,36(sp)
210c90e4:	df000815 	stw	fp,32(sp)
210c90e8:	ddc00715 	stw	r23,28(sp)
210c90ec:	dd800615 	stw	r22,24(sp)
210c90f0:	dd000415 	stw	r20,16(sp)
210c90f4:	dc800215 	stw	r18,8(sp)
210c90f8:	dc400115 	stw	r17,4(sp)
210c90fc:	dc000015 	stw	r16,0(sp)
210c9100:	1088000c 	andi	r2,r2,8192
210c9104:	2827883a 	mov	r19,r5
210c9108:	302b883a 	mov	r21,r6
210c910c:	10002d26 	beq	r2,zero,210c91c4 <__sprint_r.part.0+0xf4>
210c9110:	30800217 	ldw	r2,8(r6)
210c9114:	35800017 	ldw	r22,0(r6)
210c9118:	10002826 	beq	r2,zero,210c91bc <__sprint_r.part.0+0xec>
210c911c:	2029883a 	mov	r20,r4
210c9120:	b5c00104 	addi	r23,r22,4
210c9124:	04bfffc4 	movi	r18,-1
210c9128:	bc400017 	ldw	r17,0(r23)
210c912c:	b4000017 	ldw	r16,0(r22)
210c9130:	0039883a 	mov	fp,zero
210c9134:	8822d0ba 	srli	r17,r17,2
210c9138:	04400316 	blt	zero,r17,210c9148 <__sprint_r.part.0+0x78>
210c913c:	00001806 	br	210c91a0 <__sprint_r.part.0+0xd0>
210c9140:	84000104 	addi	r16,r16,4
210c9144:	8f001526 	beq	r17,fp,210c919c <__sprint_r.part.0+0xcc>
210c9148:	81400017 	ldw	r5,0(r16)
210c914c:	a009883a 	mov	r4,r20
210c9150:	980d883a 	mov	r6,r19
210c9154:	10ca9600 	call	210ca960 <_fputwc_r>
210c9158:	e7000044 	addi	fp,fp,1
210c915c:	14bff81e 	bne	r2,r18,210c9140 <__flash_rwdata_start+0xffff7848>
210c9160:	9005883a 	mov	r2,r18
210c9164:	a8000215 	stw	zero,8(r21)
210c9168:	a8000115 	stw	zero,4(r21)
210c916c:	dfc00917 	ldw	ra,36(sp)
210c9170:	df000817 	ldw	fp,32(sp)
210c9174:	ddc00717 	ldw	r23,28(sp)
210c9178:	dd800617 	ldw	r22,24(sp)
210c917c:	dd400517 	ldw	r21,20(sp)
210c9180:	dd000417 	ldw	r20,16(sp)
210c9184:	dcc00317 	ldw	r19,12(sp)
210c9188:	dc800217 	ldw	r18,8(sp)
210c918c:	dc400117 	ldw	r17,4(sp)
210c9190:	dc000017 	ldw	r16,0(sp)
210c9194:	dec00a04 	addi	sp,sp,40
210c9198:	f800283a 	ret
210c919c:	a8800217 	ldw	r2,8(r21)
210c91a0:	8c63883a 	add	r17,r17,r17
210c91a4:	8c63883a 	add	r17,r17,r17
210c91a8:	1445c83a 	sub	r2,r2,r17
210c91ac:	a8800215 	stw	r2,8(r21)
210c91b0:	b5800204 	addi	r22,r22,8
210c91b4:	bdc00204 	addi	r23,r23,8
210c91b8:	103fdb1e 	bne	r2,zero,210c9128 <__flash_rwdata_start+0xffff7830>
210c91bc:	0005883a 	mov	r2,zero
210c91c0:	003fe806 	br	210c9164 <__flash_rwdata_start+0xffff786c>
210c91c4:	10c6a880 	call	210c6a88 <__sfvwrite_r>
210c91c8:	003fe606 	br	210c9164 <__flash_rwdata_start+0xffff786c>

210c91cc <__sprint_r>:
210c91cc:	30c00217 	ldw	r3,8(r6)
210c91d0:	18000126 	beq	r3,zero,210c91d8 <__sprint_r+0xc>
210c91d4:	10c90d01 	jmpi	210c90d0 <__sprint_r.part.0>
210c91d8:	30000115 	stw	zero,4(r6)
210c91dc:	0005883a 	mov	r2,zero
210c91e0:	f800283a 	ret

210c91e4 <___vfiprintf_internal_r>:
210c91e4:	deffca04 	addi	sp,sp,-216
210c91e8:	dd803215 	stw	r22,200(sp)
210c91ec:	dd403115 	stw	r21,196(sp)
210c91f0:	dfc03515 	stw	ra,212(sp)
210c91f4:	df003415 	stw	fp,208(sp)
210c91f8:	ddc03315 	stw	r23,204(sp)
210c91fc:	dd003015 	stw	r20,192(sp)
210c9200:	dcc02f15 	stw	r19,188(sp)
210c9204:	dc802e15 	stw	r18,184(sp)
210c9208:	dc402d15 	stw	r17,180(sp)
210c920c:	dc002c15 	stw	r16,176(sp)
210c9210:	d9002015 	stw	r4,128(sp)
210c9214:	d9c02215 	stw	r7,136(sp)
210c9218:	282b883a 	mov	r21,r5
210c921c:	302d883a 	mov	r22,r6
210c9220:	20000226 	beq	r4,zero,210c922c <___vfiprintf_internal_r+0x48>
210c9224:	20800e17 	ldw	r2,56(r4)
210c9228:	1001b126 	beq	r2,zero,210c98f0 <___vfiprintf_internal_r+0x70c>
210c922c:	a880030b 	ldhu	r2,12(r21)
210c9230:	10c8000c 	andi	r3,r2,8192
210c9234:	1800061e 	bne	r3,zero,210c9250 <___vfiprintf_internal_r+0x6c>
210c9238:	a9001917 	ldw	r4,100(r21)
210c923c:	00f7ffc4 	movi	r3,-8193
210c9240:	10880014 	ori	r2,r2,8192
210c9244:	20c6703a 	and	r3,r4,r3
210c9248:	a880030d 	sth	r2,12(r21)
210c924c:	a8c01915 	stw	r3,100(r21)
210c9250:	10c0020c 	andi	r3,r2,8
210c9254:	18018926 	beq	r3,zero,210c987c <___vfiprintf_internal_r+0x698>
210c9258:	a8c00417 	ldw	r3,16(r21)
210c925c:	18018726 	beq	r3,zero,210c987c <___vfiprintf_internal_r+0x698>
210c9260:	1080068c 	andi	r2,r2,26
210c9264:	00c00284 	movi	r3,10
210c9268:	10c18c26 	beq	r2,r3,210c989c <___vfiprintf_internal_r+0x6b8>
210c926c:	d8801a04 	addi	r2,sp,104
210c9270:	d8c019c4 	addi	r3,sp,103
210c9274:	07040034 	movhi	fp,4096
210c9278:	05c40034 	movhi	r23,4096
210c927c:	10c9c83a 	sub	r4,r2,r3
210c9280:	e700dd04 	addi	fp,fp,884
210c9284:	bdc0d904 	addi	r23,r23,868
210c9288:	d8801e15 	stw	r2,120(sp)
210c928c:	d8c01f15 	stw	r3,124(sp)
210c9290:	dec01a15 	stw	sp,104(sp)
210c9294:	d8001c15 	stw	zero,112(sp)
210c9298:	d8001b15 	stw	zero,108(sp)
210c929c:	d8002615 	stw	zero,152(sp)
210c92a0:	d8002315 	stw	zero,140(sp)
210c92a4:	d9002715 	stw	r4,156(sp)
210c92a8:	d811883a 	mov	r8,sp
210c92ac:	dd402115 	stw	r21,132(sp)
210c92b0:	b021883a 	mov	r16,r22
210c92b4:	80800007 	ldb	r2,0(r16)
210c92b8:	10037226 	beq	r2,zero,210ca084 <___vfiprintf_internal_r+0xea0>
210c92bc:	01000944 	movi	r4,37
210c92c0:	11037026 	beq	r2,r4,210ca084 <___vfiprintf_internal_r+0xea0>
210c92c4:	8005883a 	mov	r2,r16
210c92c8:	00000106 	br	210c92d0 <___vfiprintf_internal_r+0xec>
210c92cc:	19000326 	beq	r3,r4,210c92dc <___vfiprintf_internal_r+0xf8>
210c92d0:	10800044 	addi	r2,r2,1
210c92d4:	10c00007 	ldb	r3,0(r2)
210c92d8:	183ffc1e 	bne	r3,zero,210c92cc <__flash_rwdata_start+0xffff79d4>
210c92dc:	1425c83a 	sub	r18,r2,r16
210c92e0:	1023883a 	mov	r17,r2
210c92e4:	90001026 	beq	r18,zero,210c9328 <___vfiprintf_internal_r+0x144>
210c92e8:	d8c01c17 	ldw	r3,112(sp)
210c92ec:	d8801b17 	ldw	r2,108(sp)
210c92f0:	44000015 	stw	r16,0(r8)
210c92f4:	90c7883a 	add	r3,r18,r3
210c92f8:	10800044 	addi	r2,r2,1
210c92fc:	44800115 	stw	r18,4(r8)
210c9300:	d8c01c15 	stw	r3,112(sp)
210c9304:	d8801b15 	stw	r2,108(sp)
210c9308:	010001c4 	movi	r4,7
210c930c:	2080750e 	bge	r4,r2,210c94e4 <___vfiprintf_internal_r+0x300>
210c9310:	18036f1e 	bne	r3,zero,210ca0d0 <___vfiprintf_internal_r+0xeec>
210c9314:	d8802317 	ldw	r2,140(sp)
210c9318:	d8001b15 	stw	zero,108(sp)
210c931c:	d811883a 	mov	r8,sp
210c9320:	1485883a 	add	r2,r2,r18
210c9324:	d8802315 	stw	r2,140(sp)
210c9328:	88800007 	ldb	r2,0(r17)
210c932c:	10041026 	beq	r2,zero,210ca370 <___vfiprintf_internal_r+0x118c>
210c9330:	88c00047 	ldb	r3,1(r17)
210c9334:	88800044 	addi	r2,r17,1
210c9338:	d8001d85 	stb	zero,118(sp)
210c933c:	000f883a 	mov	r7,zero
210c9340:	027fffc4 	movi	r9,-1
210c9344:	0025883a 	mov	r18,zero
210c9348:	002b883a 	mov	r21,zero
210c934c:	01401604 	movi	r5,88
210c9350:	01800244 	movi	r6,9
210c9354:	03400a84 	movi	r13,42
210c9358:	03001b04 	movi	r12,108
210c935c:	14000044 	addi	r16,r2,1
210c9360:	18bff804 	addi	r2,r3,-32
210c9364:	28825536 	bltu	r5,r2,210c9cbc <___vfiprintf_internal_r+0xad8>
210c9368:	100490ba 	slli	r2,r2,2
210c936c:	01084374 	movhi	r4,8461
210c9370:	2124e004 	addi	r4,r4,-27776
210c9374:	1105883a 	add	r2,r2,r4
210c9378:	10800017 	ldw	r2,0(r2)
210c937c:	1000683a 	jmp	r2
210c9380:	210c9a80 	call	2210c9a8 <__flash_rwdata_start+0x103b0b0>
210c9384:	210c9cbc 	xorhi	r4,r4,12914
210c9388:	210c9cbc 	xorhi	r4,r4,12914
210c938c:	210c9aa0 	cmpeqi	r4,r4,12906
210c9390:	210c9cbc 	xorhi	r4,r4,12914
210c9394:	210c9cbc 	xorhi	r4,r4,12914
210c9398:	210c9cbc 	xorhi	r4,r4,12914
210c939c:	210c9cbc 	xorhi	r4,r4,12914
210c93a0:	210c9cbc 	xorhi	r4,r4,12914
210c93a4:	210c9cbc 	xorhi	r4,r4,12914
210c93a8:	210c9ab0 	cmpltui	r4,r4,12906
210c93ac:	210c9ad0 	cmplti	r4,r4,12907
210c93b0:	210c9cbc 	xorhi	r4,r4,12914
210c93b4:	210c98f8 	rdprs	r4,r4,12899
210c93b8:	210c99e4 	muli	r4,r4,12903
210c93bc:	210c9cbc 	xorhi	r4,r4,12914
210c93c0:	210c9964 	muli	r4,r4,12901
210c93c4:	210c9974 	orhi	r4,r4,12901
210c93c8:	210c9974 	orhi	r4,r4,12901
210c93cc:	210c9974 	orhi	r4,r4,12901
210c93d0:	210c9974 	orhi	r4,r4,12901
210c93d4:	210c9974 	orhi	r4,r4,12901
210c93d8:	210c9974 	orhi	r4,r4,12901
210c93dc:	210c9974 	orhi	r4,r4,12901
210c93e0:	210c9974 	orhi	r4,r4,12901
210c93e4:	210c9974 	orhi	r4,r4,12901
210c93e8:	210c9cbc 	xorhi	r4,r4,12914
210c93ec:	210c9cbc 	xorhi	r4,r4,12914
210c93f0:	210c9cbc 	xorhi	r4,r4,12914
210c93f4:	210c9cbc 	xorhi	r4,r4,12914
210c93f8:	210c9cbc 	xorhi	r4,r4,12914
210c93fc:	210c9cbc 	xorhi	r4,r4,12914
210c9400:	210c9cbc 	xorhi	r4,r4,12914
210c9404:	210c9cbc 	xorhi	r4,r4,12914
210c9408:	210c9cbc 	xorhi	r4,r4,12914
210c940c:	210c9cbc 	xorhi	r4,r4,12914
210c9410:	210c99a0 	cmpeqi	r4,r4,12902
210c9414:	210c9cbc 	xorhi	r4,r4,12914
210c9418:	210c9cbc 	xorhi	r4,r4,12914
210c941c:	210c9cbc 	xorhi	r4,r4,12914
210c9420:	210c9cbc 	xorhi	r4,r4,12914
210c9424:	210c9cbc 	xorhi	r4,r4,12914
210c9428:	210c9cbc 	xorhi	r4,r4,12914
210c942c:	210c9cbc 	xorhi	r4,r4,12914
210c9430:	210c9cbc 	xorhi	r4,r4,12914
210c9434:	210c9cbc 	xorhi	r4,r4,12914
210c9438:	210c9cbc 	xorhi	r4,r4,12914
210c943c:	210c952c 	andhi	r4,r4,12884
210c9440:	210c9cbc 	xorhi	r4,r4,12914
210c9444:	210c9cbc 	xorhi	r4,r4,12914
210c9448:	210c9cbc 	xorhi	r4,r4,12914
210c944c:	210c9cbc 	xorhi	r4,r4,12914
210c9450:	210c9cbc 	xorhi	r4,r4,12914
210c9454:	210c94f8 	rdprs	r4,r4,12883
210c9458:	210c9cbc 	xorhi	r4,r4,12914
210c945c:	210c9cbc 	xorhi	r4,r4,12914
210c9460:	210c9b40 	call	2210c9b4 <__flash_rwdata_start+0x103b0bc>
210c9464:	210c9cbc 	xorhi	r4,r4,12914
210c9468:	210c9cbc 	xorhi	r4,r4,12914
210c946c:	210c9cbc 	xorhi	r4,r4,12914
210c9470:	210c9cbc 	xorhi	r4,r4,12914
210c9474:	210c9cbc 	xorhi	r4,r4,12914
210c9478:	210c9cbc 	xorhi	r4,r4,12914
210c947c:	210c9cbc 	xorhi	r4,r4,12914
210c9480:	210c9cbc 	xorhi	r4,r4,12914
210c9484:	210c9cbc 	xorhi	r4,r4,12914
210c9488:	210c9cbc 	xorhi	r4,r4,12914
210c948c:	210c9ae0 	cmpeqi	r4,r4,12907
210c9490:	210c9b0c 	andi	r4,r4,12908
210c9494:	210c9cbc 	xorhi	r4,r4,12914
210c9498:	210c9cbc 	xorhi	r4,r4,12914
210c949c:	210c9cbc 	xorhi	r4,r4,12914
210c94a0:	210c9be8 	cmpgeui	r4,r4,12911
210c94a4:	210c9b0c 	andi	r4,r4,12908
210c94a8:	210c9cbc 	xorhi	r4,r4,12914
210c94ac:	210c9cbc 	xorhi	r4,r4,12914
210c94b0:	210c9bf8 	rdprs	r4,r4,12911
210c94b4:	210c9cbc 	xorhi	r4,r4,12914
210c94b8:	210c9a24 	muli	r4,r4,12904
210c94bc:	210c9530 	cmpltui	r4,r4,12884
210c94c0:	210c9c0c 	andi	r4,r4,12912
210c94c4:	210c9c4c 	andi	r4,r4,12913
210c94c8:	210c9cbc 	xorhi	r4,r4,12914
210c94cc:	210c9b94 	ori	r4,r4,12910
210c94d0:	210c9cbc 	xorhi	r4,r4,12914
210c94d4:	210c94fc 	xorhi	r4,r4,12883
210c94d8:	210c9cbc 	xorhi	r4,r4,12914
210c94dc:	210c9cbc 	xorhi	r4,r4,12914
210c94e0:	210c9c5c 	xori	r4,r4,12913
210c94e4:	42000204 	addi	r8,r8,8
210c94e8:	d8802317 	ldw	r2,140(sp)
210c94ec:	1485883a 	add	r2,r2,r18
210c94f0:	d8802315 	stw	r2,140(sp)
210c94f4:	003f8c06 	br	210c9328 <__flash_rwdata_start+0xffff7a30>
210c94f8:	ad400414 	ori	r21,r21,16
210c94fc:	a880080c 	andi	r2,r21,32
210c9500:	1001e61e 	bne	r2,zero,210c9c9c <___vfiprintf_internal_r+0xab8>
210c9504:	a880040c 	andi	r2,r21,16
210c9508:	10034726 	beq	r2,zero,210ca228 <___vfiprintf_internal_r+0x1044>
210c950c:	d8802217 	ldw	r2,136(sp)
210c9510:	001b883a 	mov	r13,zero
210c9514:	15800017 	ldw	r22,0(r2)
210c9518:	10800104 	addi	r2,r2,4
210c951c:	d8802215 	stw	r2,136(sp)
210c9520:	b009883a 	mov	r4,r22
210c9524:	00800044 	movi	r2,1
210c9528:	00000c06 	br	210c955c <___vfiprintf_internal_r+0x378>
210c952c:	ad400414 	ori	r21,r21,16
210c9530:	a880080c 	andi	r2,r21,32
210c9534:	1001491e 	bne	r2,zero,210c9a5c <___vfiprintf_internal_r+0x878>
210c9538:	a880040c 	andi	r2,r21,16
210c953c:	10032d26 	beq	r2,zero,210ca1f4 <___vfiprintf_internal_r+0x1010>
210c9540:	d9002217 	ldw	r4,136(sp)
210c9544:	001b883a 	mov	r13,zero
210c9548:	0005883a 	mov	r2,zero
210c954c:	25800017 	ldw	r22,0(r4)
210c9550:	21000104 	addi	r4,r4,4
210c9554:	d9002215 	stw	r4,136(sp)
210c9558:	b009883a 	mov	r4,r22
210c955c:	d8001d85 	stb	zero,118(sp)
210c9560:	4827883a 	mov	r19,r9
210c9564:	001d883a 	mov	r14,zero
210c9568:	48000216 	blt	r9,zero,210c9574 <___vfiprintf_internal_r+0x390>
210c956c:	00ffdfc4 	movi	r3,-129
210c9570:	a8ea703a 	and	r21,r21,r3
210c9574:	2002071e 	bne	r4,zero,210c9d94 <___vfiprintf_internal_r+0xbb0>
210c9578:	4802ad26 	beq	r9,zero,210ca030 <___vfiprintf_internal_r+0xe4c>
210c957c:	10803fcc 	andi	r2,r2,255
210c9580:	00c00044 	movi	r3,1
210c9584:	10c22b26 	beq	r2,r3,210c9e34 <___vfiprintf_internal_r+0xc50>
210c9588:	00c00084 	movi	r3,2
210c958c:	dd001a04 	addi	r20,sp,104
210c9590:	10c0dd1e 	bne	r2,r3,210c9908 <___vfiprintf_internal_r+0x724>
210c9594:	d9002617 	ldw	r4,152(sp)
210c9598:	b08003cc 	andi	r2,r22,15
210c959c:	6806973a 	slli	r3,r13,28
210c95a0:	2085883a 	add	r2,r4,r2
210c95a4:	b02cd13a 	srli	r22,r22,4
210c95a8:	10800003 	ldbu	r2,0(r2)
210c95ac:	681ad13a 	srli	r13,r13,4
210c95b0:	a53fffc4 	addi	r20,r20,-1
210c95b4:	1dacb03a 	or	r22,r3,r22
210c95b8:	a0800005 	stb	r2,0(r20)
210c95bc:	b344b03a 	or	r2,r22,r13
210c95c0:	103ff51e 	bne	r2,zero,210c9598 <__flash_rwdata_start+0xffff7ca0>
210c95c4:	d9001e17 	ldw	r4,120(sp)
210c95c8:	2527c83a 	sub	r19,r4,r20
210c95cc:	9823883a 	mov	r17,r19
210c95d0:	9a40010e 	bge	r19,r9,210c95d8 <___vfiprintf_internal_r+0x3f4>
210c95d4:	4823883a 	mov	r17,r9
210c95d8:	73803fcc 	andi	r14,r14,255
210c95dc:	7380201c 	xori	r14,r14,128
210c95e0:	73bfe004 	addi	r14,r14,-128
210c95e4:	70000126 	beq	r14,zero,210c95ec <___vfiprintf_internal_r+0x408>
210c95e8:	8c400044 	addi	r17,r17,1
210c95ec:	ab40008c 	andi	r13,r21,2
210c95f0:	68000126 	beq	r13,zero,210c95f8 <___vfiprintf_internal_r+0x414>
210c95f4:	8c400084 	addi	r17,r17,2
210c95f8:	ad80210c 	andi	r22,r21,132
210c95fc:	b001c51e 	bne	r22,zero,210c9d14 <___vfiprintf_internal_r+0xb30>
210c9600:	9447c83a 	sub	r3,r18,r17
210c9604:	00c1c30e 	bge	zero,r3,210c9d14 <___vfiprintf_internal_r+0xb30>
210c9608:	01c00404 	movi	r7,16
210c960c:	d8801c17 	ldw	r2,112(sp)
210c9610:	38c37b0e 	bge	r7,r3,210ca400 <___vfiprintf_internal_r+0x121c>
210c9614:	01040034 	movhi	r4,4096
210c9618:	2100dd04 	addi	r4,r4,884
210c961c:	dc002915 	stw	r16,164(sp)
210c9620:	d9801b17 	ldw	r6,108(sp)
210c9624:	d9002415 	stw	r4,144(sp)
210c9628:	03c001c4 	movi	r15,7
210c962c:	da402515 	stw	r9,148(sp)
210c9630:	db402815 	stw	r13,160(sp)
210c9634:	1821883a 	mov	r16,r3
210c9638:	00000506 	br	210c9650 <___vfiprintf_internal_r+0x46c>
210c963c:	31400084 	addi	r5,r6,2
210c9640:	42000204 	addi	r8,r8,8
210c9644:	200d883a 	mov	r6,r4
210c9648:	843ffc04 	addi	r16,r16,-16
210c964c:	3c000d0e 	bge	r7,r16,210c9684 <___vfiprintf_internal_r+0x4a0>
210c9650:	10800404 	addi	r2,r2,16
210c9654:	31000044 	addi	r4,r6,1
210c9658:	47000015 	stw	fp,0(r8)
210c965c:	41c00115 	stw	r7,4(r8)
210c9660:	d8801c15 	stw	r2,112(sp)
210c9664:	d9001b15 	stw	r4,108(sp)
210c9668:	793ff40e 	bge	r15,r4,210c963c <__flash_rwdata_start+0xffff7d44>
210c966c:	10019b1e 	bne	r2,zero,210c9cdc <___vfiprintf_internal_r+0xaf8>
210c9670:	843ffc04 	addi	r16,r16,-16
210c9674:	000d883a 	mov	r6,zero
210c9678:	01400044 	movi	r5,1
210c967c:	d811883a 	mov	r8,sp
210c9680:	3c3ff316 	blt	r7,r16,210c9650 <__flash_rwdata_start+0xffff7d58>
210c9684:	8007883a 	mov	r3,r16
210c9688:	da402517 	ldw	r9,148(sp)
210c968c:	db402817 	ldw	r13,160(sp)
210c9690:	dc002917 	ldw	r16,164(sp)
210c9694:	d9002417 	ldw	r4,144(sp)
210c9698:	1885883a 	add	r2,r3,r2
210c969c:	40c00115 	stw	r3,4(r8)
210c96a0:	41000015 	stw	r4,0(r8)
210c96a4:	d8801c15 	stw	r2,112(sp)
210c96a8:	d9401b15 	stw	r5,108(sp)
210c96ac:	00c001c4 	movi	r3,7
210c96b0:	19426a16 	blt	r3,r5,210ca05c <___vfiprintf_internal_r+0xe78>
210c96b4:	d8c01d87 	ldb	r3,118(sp)
210c96b8:	42000204 	addi	r8,r8,8
210c96bc:	29000044 	addi	r4,r5,1
210c96c0:	1801991e 	bne	r3,zero,210c9d28 <___vfiprintf_internal_r+0xb44>
210c96c4:	68000c26 	beq	r13,zero,210c96f8 <___vfiprintf_internal_r+0x514>
210c96c8:	d8c01d04 	addi	r3,sp,116
210c96cc:	10800084 	addi	r2,r2,2
210c96d0:	40c00015 	stw	r3,0(r8)
210c96d4:	00c00084 	movi	r3,2
210c96d8:	40c00115 	stw	r3,4(r8)
210c96dc:	d8801c15 	stw	r2,112(sp)
210c96e0:	d9001b15 	stw	r4,108(sp)
210c96e4:	00c001c4 	movi	r3,7
210c96e8:	19024c16 	blt	r3,r4,210ca01c <___vfiprintf_internal_r+0xe38>
210c96ec:	200b883a 	mov	r5,r4
210c96f0:	42000204 	addi	r8,r8,8
210c96f4:	21000044 	addi	r4,r4,1
210c96f8:	00c02004 	movi	r3,128
210c96fc:	b0c20126 	beq	r22,r3,210c9f04 <___vfiprintf_internal_r+0xd20>
210c9700:	4cedc83a 	sub	r22,r9,r19
210c9704:	0580230e 	bge	zero,r22,210c9794 <___vfiprintf_internal_r+0x5b0>
210c9708:	01c00404 	movi	r7,16
210c970c:	3d83140e 	bge	r7,r22,210ca360 <___vfiprintf_internal_r+0x117c>
210c9710:	01040034 	movhi	r4,4096
210c9714:	2100d904 	addi	r4,r4,868
210c9718:	d9002415 	stw	r4,144(sp)
210c971c:	034001c4 	movi	r13,7
210c9720:	00000506 	br	210c9738 <___vfiprintf_internal_r+0x554>
210c9724:	29000084 	addi	r4,r5,2
210c9728:	42000204 	addi	r8,r8,8
210c972c:	180b883a 	mov	r5,r3
210c9730:	b5bffc04 	addi	r22,r22,-16
210c9734:	3d800d0e 	bge	r7,r22,210c976c <___vfiprintf_internal_r+0x588>
210c9738:	10800404 	addi	r2,r2,16
210c973c:	28c00044 	addi	r3,r5,1
210c9740:	45c00015 	stw	r23,0(r8)
210c9744:	41c00115 	stw	r7,4(r8)
210c9748:	d8801c15 	stw	r2,112(sp)
210c974c:	d8c01b15 	stw	r3,108(sp)
210c9750:	68fff40e 	bge	r13,r3,210c9724 <__flash_rwdata_start+0xffff7e2c>
210c9754:	1001811e 	bne	r2,zero,210c9d5c <___vfiprintf_internal_r+0xb78>
210c9758:	b5bffc04 	addi	r22,r22,-16
210c975c:	01000044 	movi	r4,1
210c9760:	000b883a 	mov	r5,zero
210c9764:	d811883a 	mov	r8,sp
210c9768:	3dbff316 	blt	r7,r22,210c9738 <__flash_rwdata_start+0xffff7e40>
210c976c:	d8c02417 	ldw	r3,144(sp)
210c9770:	1585883a 	add	r2,r2,r22
210c9774:	45800115 	stw	r22,4(r8)
210c9778:	40c00015 	stw	r3,0(r8)
210c977c:	d8801c15 	stw	r2,112(sp)
210c9780:	d9001b15 	stw	r4,108(sp)
210c9784:	00c001c4 	movi	r3,7
210c9788:	1901d016 	blt	r3,r4,210c9ecc <___vfiprintf_internal_r+0xce8>
210c978c:	42000204 	addi	r8,r8,8
210c9790:	21000044 	addi	r4,r4,1
210c9794:	14c5883a 	add	r2,r2,r19
210c9798:	45000015 	stw	r20,0(r8)
210c979c:	44c00115 	stw	r19,4(r8)
210c97a0:	d8801c15 	stw	r2,112(sp)
210c97a4:	d9001b15 	stw	r4,108(sp)
210c97a8:	00c001c4 	movi	r3,7
210c97ac:	1901cf0e 	bge	r3,r4,210c9eec <___vfiprintf_internal_r+0xd08>
210c97b0:	1002361e 	bne	r2,zero,210ca08c <___vfiprintf_internal_r+0xea8>
210c97b4:	d8001b15 	stw	zero,108(sp)
210c97b8:	aac0010c 	andi	r11,r21,4
210c97bc:	58002826 	beq	r11,zero,210c9860 <___vfiprintf_internal_r+0x67c>
210c97c0:	9467c83a 	sub	r19,r18,r17
210c97c4:	d811883a 	mov	r8,sp
210c97c8:	04c3340e 	bge	zero,r19,210ca49c <___vfiprintf_internal_r+0x12b8>
210c97cc:	01c00404 	movi	r7,16
210c97d0:	3cc31b0e 	bge	r7,r19,210ca440 <___vfiprintf_internal_r+0x125c>
210c97d4:	00c40034 	movhi	r3,4096
210c97d8:	18c0dd04 	addi	r3,r3,884
210c97dc:	d9001b17 	ldw	r4,108(sp)
210c97e0:	d8c02415 	stw	r3,144(sp)
210c97e4:	382b883a 	mov	r21,r7
210c97e8:	050001c4 	movi	r20,7
210c97ec:	dd802017 	ldw	r22,128(sp)
210c97f0:	00000506 	br	210c9808 <___vfiprintf_internal_r+0x624>
210c97f4:	21400084 	addi	r5,r4,2
210c97f8:	42000204 	addi	r8,r8,8
210c97fc:	1809883a 	mov	r4,r3
210c9800:	9cfffc04 	addi	r19,r19,-16
210c9804:	acc00d0e 	bge	r21,r19,210c983c <___vfiprintf_internal_r+0x658>
210c9808:	10800404 	addi	r2,r2,16
210c980c:	20c00044 	addi	r3,r4,1
210c9810:	47000015 	stw	fp,0(r8)
210c9814:	45400115 	stw	r21,4(r8)
210c9818:	d8801c15 	stw	r2,112(sp)
210c981c:	d8c01b15 	stw	r3,108(sp)
210c9820:	a0fff40e 	bge	r20,r3,210c97f4 <__flash_rwdata_start+0xffff7efc>
210c9824:	10019f1e 	bne	r2,zero,210c9ea4 <___vfiprintf_internal_r+0xcc0>
210c9828:	9cfffc04 	addi	r19,r19,-16
210c982c:	01400044 	movi	r5,1
210c9830:	0009883a 	mov	r4,zero
210c9834:	d811883a 	mov	r8,sp
210c9838:	acfff316 	blt	r21,r19,210c9808 <__flash_rwdata_start+0xffff7f10>
210c983c:	d8c02417 	ldw	r3,144(sp)
210c9840:	14c5883a 	add	r2,r2,r19
210c9844:	44c00115 	stw	r19,4(r8)
210c9848:	40c00015 	stw	r3,0(r8)
210c984c:	d8801c15 	stw	r2,112(sp)
210c9850:	d9401b15 	stw	r5,108(sp)
210c9854:	00c001c4 	movi	r3,7
210c9858:	1941810e 	bge	r3,r5,210c9e60 <___vfiprintf_internal_r+0xc7c>
210c985c:	10017a1e 	bne	r2,zero,210c9e48 <___vfiprintf_internal_r+0xc64>
210c9860:	8c82a416 	blt	r17,r18,210ca2f4 <___vfiprintf_internal_r+0x1110>
210c9864:	d9002317 	ldw	r4,140(sp)
210c9868:	2449883a 	add	r4,r4,r17
210c986c:	d9002315 	stw	r4,140(sp)
210c9870:	d8001b15 	stw	zero,108(sp)
210c9874:	d811883a 	mov	r8,sp
210c9878:	003e8e06 	br	210c92b4 <__flash_rwdata_start+0xffff79bc>
210c987c:	d9002017 	ldw	r4,128(sp)
210c9880:	a80b883a 	mov	r5,r21
210c9884:	10c44300 	call	210c4430 <__swsetup_r>
210c9888:	10000c1e 	bne	r2,zero,210c98bc <___vfiprintf_internal_r+0x6d8>
210c988c:	a880030b 	ldhu	r2,12(r21)
210c9890:	00c00284 	movi	r3,10
210c9894:	1080068c 	andi	r2,r2,26
210c9898:	10fe741e 	bne	r2,r3,210c926c <__flash_rwdata_start+0xffff7974>
210c989c:	a880038f 	ldh	r2,14(r21)
210c98a0:	103e7216 	blt	r2,zero,210c926c <__flash_rwdata_start+0xffff7974>
210c98a4:	d9002017 	ldw	r4,128(sp)
210c98a8:	d9c02217 	ldw	r7,136(sp)
210c98ac:	a80b883a 	mov	r5,r21
210c98b0:	b00d883a 	mov	r6,r22
210c98b4:	10ca4d80 	call	210ca4d8 <__sbprintf>
210c98b8:	00000106 	br	210c98c0 <___vfiprintf_internal_r+0x6dc>
210c98bc:	00bfffc4 	movi	r2,-1
210c98c0:	dfc03517 	ldw	ra,212(sp)
210c98c4:	df003417 	ldw	fp,208(sp)
210c98c8:	ddc03317 	ldw	r23,204(sp)
210c98cc:	dd803217 	ldw	r22,200(sp)
210c98d0:	dd403117 	ldw	r21,196(sp)
210c98d4:	dd003017 	ldw	r20,192(sp)
210c98d8:	dcc02f17 	ldw	r19,188(sp)
210c98dc:	dc802e17 	ldw	r18,184(sp)
210c98e0:	dc402d17 	ldw	r17,180(sp)
210c98e4:	dc002c17 	ldw	r16,176(sp)
210c98e8:	dec03604 	addi	sp,sp,216
210c98ec:	f800283a 	ret
210c98f0:	10c66240 	call	210c6624 <__sinit>
210c98f4:	003e4d06 	br	210c922c <__flash_rwdata_start+0xffff7934>
210c98f8:	8005883a 	mov	r2,r16
210c98fc:	ad400114 	ori	r21,r21,4
210c9900:	80c00007 	ldb	r3,0(r16)
210c9904:	003e9506 	br	210c935c <__flash_rwdata_start+0xffff7a64>
210c9908:	b006d0fa 	srli	r3,r22,3
210c990c:	6808977a 	slli	r4,r13,29
210c9910:	681ad0fa 	srli	r13,r13,3
210c9914:	b58001cc 	andi	r22,r22,7
210c9918:	b0800c04 	addi	r2,r22,48
210c991c:	a53fffc4 	addi	r20,r20,-1
210c9920:	20ecb03a 	or	r22,r4,r3
210c9924:	a0800005 	stb	r2,0(r20)
210c9928:	b346b03a 	or	r3,r22,r13
210c992c:	183ff61e 	bne	r3,zero,210c9908 <__flash_rwdata_start+0xffff8010>
210c9930:	a8c0004c 	andi	r3,r21,1
210c9934:	a009883a 	mov	r4,r20
210c9938:	18013b26 	beq	r3,zero,210c9e28 <___vfiprintf_internal_r+0xc44>
210c993c:	10803fcc 	andi	r2,r2,255
210c9940:	1080201c 	xori	r2,r2,128
210c9944:	10bfe004 	addi	r2,r2,-128
210c9948:	00c00c04 	movi	r3,48
210c994c:	10ff1d26 	beq	r2,r3,210c95c4 <__flash_rwdata_start+0xffff7ccc>
210c9950:	d8801e17 	ldw	r2,120(sp)
210c9954:	a53fffc4 	addi	r20,r20,-1
210c9958:	20ffffc5 	stb	r3,-1(r4)
210c995c:	1527c83a 	sub	r19,r2,r20
210c9960:	003f1a06 	br	210c95cc <__flash_rwdata_start+0xffff7cd4>
210c9964:	ad402014 	ori	r21,r21,128
210c9968:	8005883a 	mov	r2,r16
210c996c:	80c00007 	ldb	r3,0(r16)
210c9970:	003e7a06 	br	210c935c <__flash_rwdata_start+0xffff7a64>
210c9974:	8005883a 	mov	r2,r16
210c9978:	0025883a 	mov	r18,zero
210c997c:	193ff404 	addi	r4,r3,-48
210c9980:	10c00007 	ldb	r3,0(r2)
210c9984:	948002a4 	muli	r18,r18,10
210c9988:	84000044 	addi	r16,r16,1
210c998c:	8005883a 	mov	r2,r16
210c9990:	9125883a 	add	r18,r18,r4
210c9994:	193ff404 	addi	r4,r3,-48
210c9998:	313ff92e 	bgeu	r6,r4,210c9980 <__flash_rwdata_start+0xffff8088>
210c999c:	003e7006 	br	210c9360 <__flash_rwdata_start+0xffff7a68>
210c99a0:	ad400414 	ori	r21,r21,16
210c99a4:	d9c01d85 	stb	r7,118(sp)
210c99a8:	a880080c 	andi	r2,r21,32
210c99ac:	d8c02217 	ldw	r3,136(sp)
210c99b0:	10005a26 	beq	r2,zero,210c9b1c <___vfiprintf_internal_r+0x938>
210c99b4:	d9002217 	ldw	r4,136(sp)
210c99b8:	18800117 	ldw	r2,4(r3)
210c99bc:	1d800017 	ldw	r22,0(r3)
210c99c0:	21000204 	addi	r4,r4,8
210c99c4:	d9002215 	stw	r4,136(sp)
210c99c8:	101b883a 	mov	r13,r2
210c99cc:	1001f416 	blt	r2,zero,210ca1a0 <___vfiprintf_internal_r+0xfbc>
210c99d0:	db801d83 	ldbu	r14,118(sp)
210c99d4:	4827883a 	mov	r19,r9
210c99d8:	00800044 	movi	r2,1
210c99dc:	b348b03a 	or	r4,r22,r13
210c99e0:	003ee106 	br	210c9568 <__flash_rwdata_start+0xffff7c70>
210c99e4:	80c00007 	ldb	r3,0(r16)
210c99e8:	80800044 	addi	r2,r16,1
210c99ec:	1b42a326 	beq	r3,r13,210ca47c <___vfiprintf_internal_r+0x1298>
210c99f0:	193ff404 	addi	r4,r3,-48
210c99f4:	1021883a 	mov	r16,r2
210c99f8:	0013883a 	mov	r9,zero
210c99fc:	313e5836 	bltu	r6,r4,210c9360 <__flash_rwdata_start+0xffff7a68>
210c9a00:	80c00007 	ldb	r3,0(r16)
210c9a04:	4a4002a4 	muli	r9,r9,10
210c9a08:	84000044 	addi	r16,r16,1
210c9a0c:	2253883a 	add	r9,r4,r9
210c9a10:	193ff404 	addi	r4,r3,-48
210c9a14:	313ffa2e 	bgeu	r6,r4,210c9a00 <__flash_rwdata_start+0xffff8108>
210c9a18:	483e510e 	bge	r9,zero,210c9360 <__flash_rwdata_start+0xffff7a68>
210c9a1c:	027fffc4 	movi	r9,-1
210c9a20:	003e4f06 	br	210c9360 <__flash_rwdata_start+0xffff7a68>
210c9a24:	d9c01d85 	stb	r7,118(sp)
210c9a28:	a880080c 	andi	r2,r21,32
210c9a2c:	10020826 	beq	r2,zero,210ca250 <___vfiprintf_internal_r+0x106c>
210c9a30:	d8c02217 	ldw	r3,136(sp)
210c9a34:	d9002317 	ldw	r4,140(sp)
210c9a38:	18800017 	ldw	r2,0(r3)
210c9a3c:	2007d7fa 	srai	r3,r4,31
210c9a40:	d9002217 	ldw	r4,136(sp)
210c9a44:	10c00115 	stw	r3,4(r2)
210c9a48:	21000104 	addi	r4,r4,4
210c9a4c:	d9002215 	stw	r4,136(sp)
210c9a50:	d9002317 	ldw	r4,140(sp)
210c9a54:	11000015 	stw	r4,0(r2)
210c9a58:	003e1606 	br	210c92b4 <__flash_rwdata_start+0xffff79bc>
210c9a5c:	d8802217 	ldw	r2,136(sp)
210c9a60:	d8c02217 	ldw	r3,136(sp)
210c9a64:	15800017 	ldw	r22,0(r2)
210c9a68:	13400117 	ldw	r13,4(r2)
210c9a6c:	18c00204 	addi	r3,r3,8
210c9a70:	0005883a 	mov	r2,zero
210c9a74:	d8c02215 	stw	r3,136(sp)
210c9a78:	b348b03a 	or	r4,r22,r13
210c9a7c:	003eb706 	br	210c955c <__flash_rwdata_start+0xffff7c64>
210c9a80:	38803fcc 	andi	r2,r7,255
210c9a84:	1080201c 	xori	r2,r2,128
210c9a88:	10bfe004 	addi	r2,r2,-128
210c9a8c:	1001e31e 	bne	r2,zero,210ca21c <___vfiprintf_internal_r+0x1038>
210c9a90:	8005883a 	mov	r2,r16
210c9a94:	01c00804 	movi	r7,32
210c9a98:	80c00007 	ldb	r3,0(r16)
210c9a9c:	003e2f06 	br	210c935c <__flash_rwdata_start+0xffff7a64>
210c9aa0:	ad400054 	ori	r21,r21,1
210c9aa4:	8005883a 	mov	r2,r16
210c9aa8:	80c00007 	ldb	r3,0(r16)
210c9aac:	003e2b06 	br	210c935c <__flash_rwdata_start+0xffff7a64>
210c9ab0:	d8c02217 	ldw	r3,136(sp)
210c9ab4:	1c800017 	ldw	r18,0(r3)
210c9ab8:	18c00104 	addi	r3,r3,4
210c9abc:	90023816 	blt	r18,zero,210ca3a0 <___vfiprintf_internal_r+0x11bc>
210c9ac0:	d8c02215 	stw	r3,136(sp)
210c9ac4:	8005883a 	mov	r2,r16
210c9ac8:	80c00007 	ldb	r3,0(r16)
210c9acc:	003e2306 	br	210c935c <__flash_rwdata_start+0xffff7a64>
210c9ad0:	8005883a 	mov	r2,r16
210c9ad4:	01c00ac4 	movi	r7,43
210c9ad8:	80c00007 	ldb	r3,0(r16)
210c9adc:	003e1f06 	br	210c935c <__flash_rwdata_start+0xffff7a64>
210c9ae0:	d8c02217 	ldw	r3,136(sp)
210c9ae4:	04400044 	movi	r17,1
210c9ae8:	d8001d85 	stb	zero,118(sp)
210c9aec:	18800017 	ldw	r2,0(r3)
210c9af0:	18c00104 	addi	r3,r3,4
210c9af4:	d8c02215 	stw	r3,136(sp)
210c9af8:	d8801005 	stb	r2,64(sp)
210c9afc:	8827883a 	mov	r19,r17
210c9b00:	dd001004 	addi	r20,sp,64
210c9b04:	0013883a 	mov	r9,zero
210c9b08:	003eb806 	br	210c95ec <__flash_rwdata_start+0xffff7cf4>
210c9b0c:	d9c01d85 	stb	r7,118(sp)
210c9b10:	a880080c 	andi	r2,r21,32
210c9b14:	d8c02217 	ldw	r3,136(sp)
210c9b18:	103fa61e 	bne	r2,zero,210c99b4 <__flash_rwdata_start+0xffff80bc>
210c9b1c:	a880040c 	andi	r2,r21,16
210c9b20:	1001dd26 	beq	r2,zero,210ca298 <___vfiprintf_internal_r+0x10b4>
210c9b24:	1d800017 	ldw	r22,0(r3)
210c9b28:	d8802217 	ldw	r2,136(sp)
210c9b2c:	b01bd7fa 	srai	r13,r22,31
210c9b30:	10800104 	addi	r2,r2,4
210c9b34:	d8802215 	stw	r2,136(sp)
210c9b38:	6805883a 	mov	r2,r13
210c9b3c:	003fa306 	br	210c99cc <__flash_rwdata_start+0xffff80d4>
210c9b40:	00840034 	movhi	r2,4096
210c9b44:	10807404 	addi	r2,r2,464
210c9b48:	d8802615 	stw	r2,152(sp)
210c9b4c:	d9c01d85 	stb	r7,118(sp)
210c9b50:	a880080c 	andi	r2,r21,32
210c9b54:	10004726 	beq	r2,zero,210c9c74 <___vfiprintf_internal_r+0xa90>
210c9b58:	d9002217 	ldw	r4,136(sp)
210c9b5c:	25800017 	ldw	r22,0(r4)
210c9b60:	23400117 	ldw	r13,4(r4)
210c9b64:	21000204 	addi	r4,r4,8
210c9b68:	d9002215 	stw	r4,136(sp)
210c9b6c:	a880004c 	andi	r2,r21,1
210c9b70:	10014e26 	beq	r2,zero,210ca0ac <___vfiprintf_internal_r+0xec8>
210c9b74:	b348b03a 	or	r4,r22,r13
210c9b78:	20019c26 	beq	r4,zero,210ca1ec <___vfiprintf_internal_r+0x1008>
210c9b7c:	00800c04 	movi	r2,48
210c9b80:	d8801d05 	stb	r2,116(sp)
210c9b84:	d8c01d45 	stb	r3,117(sp)
210c9b88:	ad400094 	ori	r21,r21,2
210c9b8c:	00800084 	movi	r2,2
210c9b90:	003e7206 	br	210c955c <__flash_rwdata_start+0xffff7c64>
210c9b94:	d8c02217 	ldw	r3,136(sp)
210c9b98:	d8001d85 	stb	zero,118(sp)
210c9b9c:	1d000017 	ldw	r20,0(r3)
210c9ba0:	1d800104 	addi	r22,r3,4
210c9ba4:	a0021c26 	beq	r20,zero,210ca418 <___vfiprintf_internal_r+0x1234>
210c9ba8:	a009883a 	mov	r4,r20
210c9bac:	48020016 	blt	r9,zero,210ca3b0 <___vfiprintf_internal_r+0x11cc>
210c9bb0:	480d883a 	mov	r6,r9
210c9bb4:	000b883a 	mov	r5,zero
210c9bb8:	da002a15 	stw	r8,168(sp)
210c9bbc:	da402b15 	stw	r9,172(sp)
210c9bc0:	10c73680 	call	210c7368 <memchr>
210c9bc4:	da002a17 	ldw	r8,168(sp)
210c9bc8:	da402b17 	ldw	r9,172(sp)
210c9bcc:	10022226 	beq	r2,zero,210ca458 <___vfiprintf_internal_r+0x1274>
210c9bd0:	1527c83a 	sub	r19,r2,r20
210c9bd4:	4cc1c916 	blt	r9,r19,210ca2fc <___vfiprintf_internal_r+0x1118>
210c9bd8:	db801d83 	ldbu	r14,118(sp)
210c9bdc:	dd802215 	stw	r22,136(sp)
210c9be0:	0013883a 	mov	r9,zero
210c9be4:	003e7906 	br	210c95cc <__flash_rwdata_start+0xffff7cd4>
210c9be8:	ad401014 	ori	r21,r21,64
210c9bec:	8005883a 	mov	r2,r16
210c9bf0:	80c00007 	ldb	r3,0(r16)
210c9bf4:	003dd906 	br	210c935c <__flash_rwdata_start+0xffff7a64>
210c9bf8:	80c00007 	ldb	r3,0(r16)
210c9bfc:	8005883a 	mov	r2,r16
210c9c00:	1b01e326 	beq	r3,r12,210ca390 <___vfiprintf_internal_r+0x11ac>
210c9c04:	ad400414 	ori	r21,r21,16
210c9c08:	003dd406 	br	210c935c <__flash_rwdata_start+0xffff7a64>
210c9c0c:	d9002217 	ldw	r4,136(sp)
210c9c10:	00800c04 	movi	r2,48
210c9c14:	d8801d05 	stb	r2,116(sp)
210c9c18:	25800017 	ldw	r22,0(r4)
210c9c1c:	00801e04 	movi	r2,120
210c9c20:	d8801d45 	stb	r2,117(sp)
210c9c24:	00840034 	movhi	r2,4096
210c9c28:	21000104 	addi	r4,r4,4
210c9c2c:	10807904 	addi	r2,r2,484
210c9c30:	d9002215 	stw	r4,136(sp)
210c9c34:	d8802615 	stw	r2,152(sp)
210c9c38:	001b883a 	mov	r13,zero
210c9c3c:	ad400094 	ori	r21,r21,2
210c9c40:	00800084 	movi	r2,2
210c9c44:	b009883a 	mov	r4,r22
210c9c48:	003e4406 	br	210c955c <__flash_rwdata_start+0xffff7c64>
210c9c4c:	ad400814 	ori	r21,r21,32
210c9c50:	8005883a 	mov	r2,r16
210c9c54:	80c00007 	ldb	r3,0(r16)
210c9c58:	003dc006 	br	210c935c <__flash_rwdata_start+0xffff7a64>
210c9c5c:	00840034 	movhi	r2,4096
210c9c60:	10807904 	addi	r2,r2,484
210c9c64:	d8802615 	stw	r2,152(sp)
210c9c68:	d9c01d85 	stb	r7,118(sp)
210c9c6c:	a880080c 	andi	r2,r21,32
210c9c70:	103fb91e 	bne	r2,zero,210c9b58 <__flash_rwdata_start+0xffff8260>
210c9c74:	a880040c 	andi	r2,r21,16
210c9c78:	10010f1e 	bne	r2,zero,210ca0b8 <___vfiprintf_internal_r+0xed4>
210c9c7c:	a880100c 	andi	r2,r21,64
210c9c80:	10010d26 	beq	r2,zero,210ca0b8 <___vfiprintf_internal_r+0xed4>
210c9c84:	d9002217 	ldw	r4,136(sp)
210c9c88:	001b883a 	mov	r13,zero
210c9c8c:	2580000b 	ldhu	r22,0(r4)
210c9c90:	21000104 	addi	r4,r4,4
210c9c94:	d9002215 	stw	r4,136(sp)
210c9c98:	003fb406 	br	210c9b6c <__flash_rwdata_start+0xffff8274>
210c9c9c:	d9002217 	ldw	r4,136(sp)
210c9ca0:	00800044 	movi	r2,1
210c9ca4:	25800017 	ldw	r22,0(r4)
210c9ca8:	23400117 	ldw	r13,4(r4)
210c9cac:	21000204 	addi	r4,r4,8
210c9cb0:	d9002215 	stw	r4,136(sp)
210c9cb4:	b348b03a 	or	r4,r22,r13
210c9cb8:	003e2806 	br	210c955c <__flash_rwdata_start+0xffff7c64>
210c9cbc:	d9c01d85 	stb	r7,118(sp)
210c9cc0:	1801ab26 	beq	r3,zero,210ca370 <___vfiprintf_internal_r+0x118c>
210c9cc4:	04400044 	movi	r17,1
210c9cc8:	d8c01005 	stb	r3,64(sp)
210c9ccc:	d8001d85 	stb	zero,118(sp)
210c9cd0:	8827883a 	mov	r19,r17
210c9cd4:	dd001004 	addi	r20,sp,64
210c9cd8:	003f8a06 	br	210c9b04 <__flash_rwdata_start+0xffff820c>
210c9cdc:	d9002017 	ldw	r4,128(sp)
210c9ce0:	d9402117 	ldw	r5,132(sp)
210c9ce4:	d9801a04 	addi	r6,sp,104
210c9ce8:	d9c02b15 	stw	r7,172(sp)
210c9cec:	dbc02a15 	stw	r15,168(sp)
210c9cf0:	10c90d00 	call	210c90d0 <__sprint_r.part.0>
210c9cf4:	d9c02b17 	ldw	r7,172(sp)
210c9cf8:	dbc02a17 	ldw	r15,168(sp)
210c9cfc:	1000631e 	bne	r2,zero,210c9e8c <___vfiprintf_internal_r+0xca8>
210c9d00:	d9801b17 	ldw	r6,108(sp)
210c9d04:	d8801c17 	ldw	r2,112(sp)
210c9d08:	d811883a 	mov	r8,sp
210c9d0c:	31400044 	addi	r5,r6,1
210c9d10:	003e4d06 	br	210c9648 <__flash_rwdata_start+0xffff7d50>
210c9d14:	d9401b17 	ldw	r5,108(sp)
210c9d18:	d8801c17 	ldw	r2,112(sp)
210c9d1c:	29000044 	addi	r4,r5,1
210c9d20:	d8c01d87 	ldb	r3,118(sp)
210c9d24:	183e6726 	beq	r3,zero,210c96c4 <__flash_rwdata_start+0xffff7dcc>
210c9d28:	00c00044 	movi	r3,1
210c9d2c:	d9401d84 	addi	r5,sp,118
210c9d30:	10c5883a 	add	r2,r2,r3
210c9d34:	41400015 	stw	r5,0(r8)
210c9d38:	40c00115 	stw	r3,4(r8)
210c9d3c:	d8801c15 	stw	r2,112(sp)
210c9d40:	d9001b15 	stw	r4,108(sp)
210c9d44:	014001c4 	movi	r5,7
210c9d48:	2900ab16 	blt	r5,r4,210c9ff8 <___vfiprintf_internal_r+0xe14>
210c9d4c:	200b883a 	mov	r5,r4
210c9d50:	42000204 	addi	r8,r8,8
210c9d54:	21000044 	addi	r4,r4,1
210c9d58:	003e5a06 	br	210c96c4 <__flash_rwdata_start+0xffff7dcc>
210c9d5c:	d9002017 	ldw	r4,128(sp)
210c9d60:	d9402117 	ldw	r5,132(sp)
210c9d64:	d9801a04 	addi	r6,sp,104
210c9d68:	d9c02b15 	stw	r7,172(sp)
210c9d6c:	db402a15 	stw	r13,168(sp)
210c9d70:	10c90d00 	call	210c90d0 <__sprint_r.part.0>
210c9d74:	d9c02b17 	ldw	r7,172(sp)
210c9d78:	db402a17 	ldw	r13,168(sp)
210c9d7c:	1000431e 	bne	r2,zero,210c9e8c <___vfiprintf_internal_r+0xca8>
210c9d80:	d9401b17 	ldw	r5,108(sp)
210c9d84:	d8801c17 	ldw	r2,112(sp)
210c9d88:	d811883a 	mov	r8,sp
210c9d8c:	29000044 	addi	r4,r5,1
210c9d90:	003e6706 	br	210c9730 <__flash_rwdata_start+0xffff7e38>
210c9d94:	10803fcc 	andi	r2,r2,255
210c9d98:	00c00044 	movi	r3,1
210c9d9c:	10fdfa1e 	bne	r2,r3,210c9588 <__flash_rwdata_start+0xffff7c90>
210c9da0:	6800021e 	bne	r13,zero,210c9dac <___vfiprintf_internal_r+0xbc8>
210c9da4:	00800244 	movi	r2,9
210c9da8:	1580222e 	bgeu	r2,r22,210c9e34 <___vfiprintf_internal_r+0xc50>
210c9dac:	dc802415 	stw	r18,144(sp)
210c9db0:	dc002515 	stw	r16,148(sp)
210c9db4:	dc401a04 	addi	r17,sp,104
210c9db8:	b021883a 	mov	r16,r22
210c9dbc:	4827883a 	mov	r19,r9
210c9dc0:	4029883a 	mov	r20,r8
210c9dc4:	702d883a 	mov	r22,r14
210c9dc8:	6825883a 	mov	r18,r13
210c9dcc:	8009883a 	mov	r4,r16
210c9dd0:	900b883a 	mov	r5,r18
210c9dd4:	01800284 	movi	r6,10
210c9dd8:	000f883a 	mov	r7,zero
210c9ddc:	10cb44c0 	call	210cb44c <__umoddi3>
210c9de0:	10800c04 	addi	r2,r2,48
210c9de4:	8c7fffc4 	addi	r17,r17,-1
210c9de8:	8009883a 	mov	r4,r16
210c9dec:	900b883a 	mov	r5,r18
210c9df0:	01800284 	movi	r6,10
210c9df4:	000f883a 	mov	r7,zero
210c9df8:	88800005 	stb	r2,0(r17)
210c9dfc:	10cae8c0 	call	210cae8c <__udivdi3>
210c9e00:	1021883a 	mov	r16,r2
210c9e04:	10c4b03a 	or	r2,r2,r3
210c9e08:	1825883a 	mov	r18,r3
210c9e0c:	103fef1e 	bne	r2,zero,210c9dcc <__flash_rwdata_start+0xffff84d4>
210c9e10:	dc802417 	ldw	r18,144(sp)
210c9e14:	dc002517 	ldw	r16,148(sp)
210c9e18:	a011883a 	mov	r8,r20
210c9e1c:	9813883a 	mov	r9,r19
210c9e20:	b01d883a 	mov	r14,r22
210c9e24:	8829883a 	mov	r20,r17
210c9e28:	d8c01e17 	ldw	r3,120(sp)
210c9e2c:	1d27c83a 	sub	r19,r3,r20
210c9e30:	003de606 	br	210c95cc <__flash_rwdata_start+0xffff7cd4>
210c9e34:	b5800c04 	addi	r22,r22,48
210c9e38:	dd8019c5 	stb	r22,103(sp)
210c9e3c:	dcc02717 	ldw	r19,156(sp)
210c9e40:	dd0019c4 	addi	r20,sp,103
210c9e44:	003de106 	br	210c95cc <__flash_rwdata_start+0xffff7cd4>
210c9e48:	d9002017 	ldw	r4,128(sp)
210c9e4c:	d9402117 	ldw	r5,132(sp)
210c9e50:	d9801a04 	addi	r6,sp,104
210c9e54:	10c90d00 	call	210c90d0 <__sprint_r.part.0>
210c9e58:	10000c1e 	bne	r2,zero,210c9e8c <___vfiprintf_internal_r+0xca8>
210c9e5c:	d8801c17 	ldw	r2,112(sp)
210c9e60:	8c80010e 	bge	r17,r18,210c9e68 <___vfiprintf_internal_r+0xc84>
210c9e64:	9023883a 	mov	r17,r18
210c9e68:	d8c02317 	ldw	r3,140(sp)
210c9e6c:	1c47883a 	add	r3,r3,r17
210c9e70:	d8c02315 	stw	r3,140(sp)
210c9e74:	103e7e26 	beq	r2,zero,210c9870 <__flash_rwdata_start+0xffff7f78>
210c9e78:	d9002017 	ldw	r4,128(sp)
210c9e7c:	d9402117 	ldw	r5,132(sp)
210c9e80:	d9801a04 	addi	r6,sp,104
210c9e84:	10c90d00 	call	210c90d0 <__sprint_r.part.0>
210c9e88:	103e7926 	beq	r2,zero,210c9870 <__flash_rwdata_start+0xffff7f78>
210c9e8c:	dd402117 	ldw	r21,132(sp)
210c9e90:	a880030b 	ldhu	r2,12(r21)
210c9e94:	1080100c 	andi	r2,r2,64
210c9e98:	103e881e 	bne	r2,zero,210c98bc <__flash_rwdata_start+0xffff7fc4>
210c9e9c:	d8802317 	ldw	r2,140(sp)
210c9ea0:	003e8706 	br	210c98c0 <__flash_rwdata_start+0xffff7fc8>
210c9ea4:	d9402117 	ldw	r5,132(sp)
210c9ea8:	b009883a 	mov	r4,r22
210c9eac:	d9801a04 	addi	r6,sp,104
210c9eb0:	10c90d00 	call	210c90d0 <__sprint_r.part.0>
210c9eb4:	103ff51e 	bne	r2,zero,210c9e8c <__flash_rwdata_start+0xffff8594>
210c9eb8:	d9001b17 	ldw	r4,108(sp)
210c9ebc:	d8801c17 	ldw	r2,112(sp)
210c9ec0:	d811883a 	mov	r8,sp
210c9ec4:	21400044 	addi	r5,r4,1
210c9ec8:	003e4d06 	br	210c9800 <__flash_rwdata_start+0xffff7f08>
210c9ecc:	1000aa1e 	bne	r2,zero,210ca178 <___vfiprintf_internal_r+0xf94>
210c9ed0:	00c00044 	movi	r3,1
210c9ed4:	9805883a 	mov	r2,r19
210c9ed8:	dd000015 	stw	r20,0(sp)
210c9edc:	dcc00115 	stw	r19,4(sp)
210c9ee0:	dcc01c15 	stw	r19,112(sp)
210c9ee4:	d8c01b15 	stw	r3,108(sp)
210c9ee8:	d811883a 	mov	r8,sp
210c9eec:	42000204 	addi	r8,r8,8
210c9ef0:	aac0010c 	andi	r11,r21,4
210c9ef4:	583fda26 	beq	r11,zero,210c9e60 <__flash_rwdata_start+0xffff8568>
210c9ef8:	9467c83a 	sub	r19,r18,r17
210c9efc:	04fe3316 	blt	zero,r19,210c97cc <__flash_rwdata_start+0xffff7ed4>
210c9f00:	003fd706 	br	210c9e60 <__flash_rwdata_start+0xffff8568>
210c9f04:	946dc83a 	sub	r22,r18,r17
210c9f08:	05bdfd0e 	bge	zero,r22,210c9700 <__flash_rwdata_start+0xffff7e08>
210c9f0c:	00c40034 	movhi	r3,4096
210c9f10:	18c0d904 	addi	r3,r3,868
210c9f14:	01c00404 	movi	r7,16
210c9f18:	d8c02415 	stw	r3,144(sp)
210c9f1c:	3d81530e 	bge	r7,r22,210ca46c <___vfiprintf_internal_r+0x1288>
210c9f20:	8007883a 	mov	r3,r16
210c9f24:	034001c4 	movi	r13,7
210c9f28:	b021883a 	mov	r16,r22
210c9f2c:	da402515 	stw	r9,148(sp)
210c9f30:	182d883a 	mov	r22,r3
210c9f34:	00000506 	br	210c9f4c <___vfiprintf_internal_r+0xd68>
210c9f38:	29800084 	addi	r6,r5,2
210c9f3c:	42000204 	addi	r8,r8,8
210c9f40:	180b883a 	mov	r5,r3
210c9f44:	843ffc04 	addi	r16,r16,-16
210c9f48:	3c000d0e 	bge	r7,r16,210c9f80 <___vfiprintf_internal_r+0xd9c>
210c9f4c:	10800404 	addi	r2,r2,16
210c9f50:	28c00044 	addi	r3,r5,1
210c9f54:	45c00015 	stw	r23,0(r8)
210c9f58:	41c00115 	stw	r7,4(r8)
210c9f5c:	d8801c15 	stw	r2,112(sp)
210c9f60:	d8c01b15 	stw	r3,108(sp)
210c9f64:	68fff40e 	bge	r13,r3,210c9f38 <__flash_rwdata_start+0xffff8640>
210c9f68:	1000151e 	bne	r2,zero,210c9fc0 <___vfiprintf_internal_r+0xddc>
210c9f6c:	843ffc04 	addi	r16,r16,-16
210c9f70:	01800044 	movi	r6,1
210c9f74:	000b883a 	mov	r5,zero
210c9f78:	d811883a 	mov	r8,sp
210c9f7c:	3c3ff316 	blt	r7,r16,210c9f4c <__flash_rwdata_start+0xffff8654>
210c9f80:	da402517 	ldw	r9,148(sp)
210c9f84:	b007883a 	mov	r3,r22
210c9f88:	802d883a 	mov	r22,r16
210c9f8c:	1821883a 	mov	r16,r3
210c9f90:	d8c02417 	ldw	r3,144(sp)
210c9f94:	1585883a 	add	r2,r2,r22
210c9f98:	45800115 	stw	r22,4(r8)
210c9f9c:	40c00015 	stw	r3,0(r8)
210c9fa0:	d8801c15 	stw	r2,112(sp)
210c9fa4:	d9801b15 	stw	r6,108(sp)
210c9fa8:	00c001c4 	movi	r3,7
210c9fac:	19806d16 	blt	r3,r6,210ca164 <___vfiprintf_internal_r+0xf80>
210c9fb0:	42000204 	addi	r8,r8,8
210c9fb4:	31000044 	addi	r4,r6,1
210c9fb8:	300b883a 	mov	r5,r6
210c9fbc:	003dd006 	br	210c9700 <__flash_rwdata_start+0xffff7e08>
210c9fc0:	d9002017 	ldw	r4,128(sp)
210c9fc4:	d9402117 	ldw	r5,132(sp)
210c9fc8:	d9801a04 	addi	r6,sp,104
210c9fcc:	d9c02b15 	stw	r7,172(sp)
210c9fd0:	db402a15 	stw	r13,168(sp)
210c9fd4:	10c90d00 	call	210c90d0 <__sprint_r.part.0>
210c9fd8:	d9c02b17 	ldw	r7,172(sp)
210c9fdc:	db402a17 	ldw	r13,168(sp)
210c9fe0:	103faa1e 	bne	r2,zero,210c9e8c <__flash_rwdata_start+0xffff8594>
210c9fe4:	d9401b17 	ldw	r5,108(sp)
210c9fe8:	d8801c17 	ldw	r2,112(sp)
210c9fec:	d811883a 	mov	r8,sp
210c9ff0:	29800044 	addi	r6,r5,1
210c9ff4:	003fd306 	br	210c9f44 <__flash_rwdata_start+0xffff864c>
210c9ff8:	1000401e 	bne	r2,zero,210ca0fc <___vfiprintf_internal_r+0xf18>
210c9ffc:	68003b26 	beq	r13,zero,210ca0ec <___vfiprintf_internal_r+0xf08>
210ca000:	d9001d04 	addi	r4,sp,116
210ca004:	00800084 	movi	r2,2
210ca008:	d9000015 	stw	r4,0(sp)
210ca00c:	d8800115 	stw	r2,4(sp)
210ca010:	1809883a 	mov	r4,r3
210ca014:	d811883a 	mov	r8,sp
210ca018:	003db406 	br	210c96ec <__flash_rwdata_start+0xffff7df4>
210ca01c:	1000451e 	bne	r2,zero,210ca134 <___vfiprintf_internal_r+0xf50>
210ca020:	01000044 	movi	r4,1
210ca024:	000b883a 	mov	r5,zero
210ca028:	d811883a 	mov	r8,sp
210ca02c:	003db206 	br	210c96f8 <__flash_rwdata_start+0xffff7e00>
210ca030:	10803fcc 	andi	r2,r2,255
210ca034:	1000071e 	bne	r2,zero,210ca054 <___vfiprintf_internal_r+0xe70>
210ca038:	a880004c 	andi	r2,r21,1
210ca03c:	10000526 	beq	r2,zero,210ca054 <___vfiprintf_internal_r+0xe70>
210ca040:	00800c04 	movi	r2,48
210ca044:	d88019c5 	stb	r2,103(sp)
210ca048:	dcc02717 	ldw	r19,156(sp)
210ca04c:	dd0019c4 	addi	r20,sp,103
210ca050:	003d5e06 	br	210c95cc <__flash_rwdata_start+0xffff7cd4>
210ca054:	dd001a04 	addi	r20,sp,104
210ca058:	003d5c06 	br	210c95cc <__flash_rwdata_start+0xffff7cd4>
210ca05c:	1000971e 	bne	r2,zero,210ca2bc <___vfiprintf_internal_r+0x10d8>
210ca060:	d8c01d87 	ldb	r3,118(sp)
210ca064:	18005826 	beq	r3,zero,210ca1c8 <___vfiprintf_internal_r+0xfe4>
210ca068:	00800044 	movi	r2,1
210ca06c:	d8c01d84 	addi	r3,sp,118
210ca070:	1009883a 	mov	r4,r2
210ca074:	d8c00015 	stw	r3,0(sp)
210ca078:	d8800115 	stw	r2,4(sp)
210ca07c:	d811883a 	mov	r8,sp
210ca080:	003f3206 	br	210c9d4c <__flash_rwdata_start+0xffff8454>
210ca084:	8023883a 	mov	r17,r16
210ca088:	003ca706 	br	210c9328 <__flash_rwdata_start+0xffff7a30>
210ca08c:	d9002017 	ldw	r4,128(sp)
210ca090:	d9402117 	ldw	r5,132(sp)
210ca094:	d9801a04 	addi	r6,sp,104
210ca098:	10c90d00 	call	210c90d0 <__sprint_r.part.0>
210ca09c:	103f7b1e 	bne	r2,zero,210c9e8c <__flash_rwdata_start+0xffff8594>
210ca0a0:	d8801c17 	ldw	r2,112(sp)
210ca0a4:	d811883a 	mov	r8,sp
210ca0a8:	003f9106 	br	210c9ef0 <__flash_rwdata_start+0xffff85f8>
210ca0ac:	00800084 	movi	r2,2
210ca0b0:	b348b03a 	or	r4,r22,r13
210ca0b4:	003d2906 	br	210c955c <__flash_rwdata_start+0xffff7c64>
210ca0b8:	d8802217 	ldw	r2,136(sp)
210ca0bc:	001b883a 	mov	r13,zero
210ca0c0:	15800017 	ldw	r22,0(r2)
210ca0c4:	10800104 	addi	r2,r2,4
210ca0c8:	d8802215 	stw	r2,136(sp)
210ca0cc:	003ea706 	br	210c9b6c <__flash_rwdata_start+0xffff8274>
210ca0d0:	d9002017 	ldw	r4,128(sp)
210ca0d4:	d9402117 	ldw	r5,132(sp)
210ca0d8:	d9801a04 	addi	r6,sp,104
210ca0dc:	10c90d00 	call	210c90d0 <__sprint_r.part.0>
210ca0e0:	103f6a1e 	bne	r2,zero,210c9e8c <__flash_rwdata_start+0xffff8594>
210ca0e4:	d811883a 	mov	r8,sp
210ca0e8:	003cff06 	br	210c94e8 <__flash_rwdata_start+0xffff7bf0>
210ca0ec:	000b883a 	mov	r5,zero
210ca0f0:	1809883a 	mov	r4,r3
210ca0f4:	d811883a 	mov	r8,sp
210ca0f8:	003d7f06 	br	210c96f8 <__flash_rwdata_start+0xffff7e00>
210ca0fc:	d9002017 	ldw	r4,128(sp)
210ca100:	d9402117 	ldw	r5,132(sp)
210ca104:	d9801a04 	addi	r6,sp,104
210ca108:	da402b15 	stw	r9,172(sp)
210ca10c:	db402a15 	stw	r13,168(sp)
210ca110:	10c90d00 	call	210c90d0 <__sprint_r.part.0>
210ca114:	da402b17 	ldw	r9,172(sp)
210ca118:	db402a17 	ldw	r13,168(sp)
210ca11c:	103f5b1e 	bne	r2,zero,210c9e8c <__flash_rwdata_start+0xffff8594>
210ca120:	d9401b17 	ldw	r5,108(sp)
210ca124:	d8801c17 	ldw	r2,112(sp)
210ca128:	d811883a 	mov	r8,sp
210ca12c:	29000044 	addi	r4,r5,1
210ca130:	003d6406 	br	210c96c4 <__flash_rwdata_start+0xffff7dcc>
210ca134:	d9002017 	ldw	r4,128(sp)
210ca138:	d9402117 	ldw	r5,132(sp)
210ca13c:	d9801a04 	addi	r6,sp,104
210ca140:	da402b15 	stw	r9,172(sp)
210ca144:	10c90d00 	call	210c90d0 <__sprint_r.part.0>
210ca148:	da402b17 	ldw	r9,172(sp)
210ca14c:	103f4f1e 	bne	r2,zero,210c9e8c <__flash_rwdata_start+0xffff8594>
210ca150:	d9401b17 	ldw	r5,108(sp)
210ca154:	d8801c17 	ldw	r2,112(sp)
210ca158:	d811883a 	mov	r8,sp
210ca15c:	29000044 	addi	r4,r5,1
210ca160:	003d6506 	br	210c96f8 <__flash_rwdata_start+0xffff7e00>
210ca164:	10009a1e 	bne	r2,zero,210ca3d0 <___vfiprintf_internal_r+0x11ec>
210ca168:	01000044 	movi	r4,1
210ca16c:	000b883a 	mov	r5,zero
210ca170:	d811883a 	mov	r8,sp
210ca174:	003d6206 	br	210c9700 <__flash_rwdata_start+0xffff7e08>
210ca178:	d9002017 	ldw	r4,128(sp)
210ca17c:	d9402117 	ldw	r5,132(sp)
210ca180:	d9801a04 	addi	r6,sp,104
210ca184:	10c90d00 	call	210c90d0 <__sprint_r.part.0>
210ca188:	103f401e 	bne	r2,zero,210c9e8c <__flash_rwdata_start+0xffff8594>
210ca18c:	d9001b17 	ldw	r4,108(sp)
210ca190:	d8801c17 	ldw	r2,112(sp)
210ca194:	d811883a 	mov	r8,sp
210ca198:	21000044 	addi	r4,r4,1
210ca19c:	003d7d06 	br	210c9794 <__flash_rwdata_start+0xffff7e9c>
210ca1a0:	05adc83a 	sub	r22,zero,r22
210ca1a4:	b004c03a 	cmpne	r2,r22,zero
210ca1a8:	035bc83a 	sub	r13,zero,r13
210ca1ac:	689bc83a 	sub	r13,r13,r2
210ca1b0:	03800b44 	movi	r14,45
210ca1b4:	db801d85 	stb	r14,118(sp)
210ca1b8:	4827883a 	mov	r19,r9
210ca1bc:	00800044 	movi	r2,1
210ca1c0:	b348b03a 	or	r4,r22,r13
210ca1c4:	003ce806 	br	210c9568 <__flash_rwdata_start+0xffff7c70>
210ca1c8:	000b883a 	mov	r5,zero
210ca1cc:	01000044 	movi	r4,1
210ca1d0:	d811883a 	mov	r8,sp
210ca1d4:	683d4826 	beq	r13,zero,210c96f8 <__flash_rwdata_start+0xffff7e00>
210ca1d8:	00800084 	movi	r2,2
210ca1dc:	d8c01d04 	addi	r3,sp,116
210ca1e0:	d8c00015 	stw	r3,0(sp)
210ca1e4:	d8800115 	stw	r2,4(sp)
210ca1e8:	003d4006 	br	210c96ec <__flash_rwdata_start+0xffff7df4>
210ca1ec:	00800084 	movi	r2,2
210ca1f0:	003cda06 	br	210c955c <__flash_rwdata_start+0xffff7c64>
210ca1f4:	a880100c 	andi	r2,r21,64
210ca1f8:	10004226 	beq	r2,zero,210ca304 <___vfiprintf_internal_r+0x1120>
210ca1fc:	d8802217 	ldw	r2,136(sp)
210ca200:	001b883a 	mov	r13,zero
210ca204:	1580000b 	ldhu	r22,0(r2)
210ca208:	10800104 	addi	r2,r2,4
210ca20c:	d8802215 	stw	r2,136(sp)
210ca210:	b009883a 	mov	r4,r22
210ca214:	0005883a 	mov	r2,zero
210ca218:	003cd006 	br	210c955c <__flash_rwdata_start+0xffff7c64>
210ca21c:	80c00007 	ldb	r3,0(r16)
210ca220:	8005883a 	mov	r2,r16
210ca224:	003c4d06 	br	210c935c <__flash_rwdata_start+0xffff7a64>
210ca228:	a880100c 	andi	r2,r21,64
210ca22c:	10004426 	beq	r2,zero,210ca340 <___vfiprintf_internal_r+0x115c>
210ca230:	d8c02217 	ldw	r3,136(sp)
210ca234:	001b883a 	mov	r13,zero
210ca238:	00800044 	movi	r2,1
210ca23c:	1d80000b 	ldhu	r22,0(r3)
210ca240:	18c00104 	addi	r3,r3,4
210ca244:	d8c02215 	stw	r3,136(sp)
210ca248:	b009883a 	mov	r4,r22
210ca24c:	003cc306 	br	210c955c <__flash_rwdata_start+0xffff7c64>
210ca250:	a880040c 	andi	r2,r21,16
210ca254:	1000091e 	bne	r2,zero,210ca27c <___vfiprintf_internal_r+0x1098>
210ca258:	aac0100c 	andi	r11,r21,64
210ca25c:	58000726 	beq	r11,zero,210ca27c <___vfiprintf_internal_r+0x1098>
210ca260:	d8c02217 	ldw	r3,136(sp)
210ca264:	d9002317 	ldw	r4,140(sp)
210ca268:	18800017 	ldw	r2,0(r3)
210ca26c:	18c00104 	addi	r3,r3,4
210ca270:	d8c02215 	stw	r3,136(sp)
210ca274:	1100000d 	sth	r4,0(r2)
210ca278:	003c0e06 	br	210c92b4 <__flash_rwdata_start+0xffff79bc>
210ca27c:	d8c02217 	ldw	r3,136(sp)
210ca280:	d9002317 	ldw	r4,140(sp)
210ca284:	18800017 	ldw	r2,0(r3)
210ca288:	18c00104 	addi	r3,r3,4
210ca28c:	d8c02215 	stw	r3,136(sp)
210ca290:	11000015 	stw	r4,0(r2)
210ca294:	003c0706 	br	210c92b4 <__flash_rwdata_start+0xffff79bc>
210ca298:	a880100c 	andi	r2,r21,64
210ca29c:	10002126 	beq	r2,zero,210ca324 <___vfiprintf_internal_r+0x1140>
210ca2a0:	1d80000f 	ldh	r22,0(r3)
210ca2a4:	d8c02217 	ldw	r3,136(sp)
210ca2a8:	b01bd7fa 	srai	r13,r22,31
210ca2ac:	18c00104 	addi	r3,r3,4
210ca2b0:	d8c02215 	stw	r3,136(sp)
210ca2b4:	6805883a 	mov	r2,r13
210ca2b8:	003dc406 	br	210c99cc <__flash_rwdata_start+0xffff80d4>
210ca2bc:	d9002017 	ldw	r4,128(sp)
210ca2c0:	d9402117 	ldw	r5,132(sp)
210ca2c4:	d9801a04 	addi	r6,sp,104
210ca2c8:	da402b15 	stw	r9,172(sp)
210ca2cc:	db402a15 	stw	r13,168(sp)
210ca2d0:	10c90d00 	call	210c90d0 <__sprint_r.part.0>
210ca2d4:	da402b17 	ldw	r9,172(sp)
210ca2d8:	db402a17 	ldw	r13,168(sp)
210ca2dc:	103eeb1e 	bne	r2,zero,210c9e8c <__flash_rwdata_start+0xffff8594>
210ca2e0:	d9401b17 	ldw	r5,108(sp)
210ca2e4:	d8801c17 	ldw	r2,112(sp)
210ca2e8:	d811883a 	mov	r8,sp
210ca2ec:	29000044 	addi	r4,r5,1
210ca2f0:	003e8b06 	br	210c9d20 <__flash_rwdata_start+0xffff8428>
210ca2f4:	9023883a 	mov	r17,r18
210ca2f8:	003d5a06 	br	210c9864 <__flash_rwdata_start+0xffff7f6c>
210ca2fc:	4827883a 	mov	r19,r9
210ca300:	003e3506 	br	210c9bd8 <__flash_rwdata_start+0xffff82e0>
210ca304:	d8c02217 	ldw	r3,136(sp)
210ca308:	001b883a 	mov	r13,zero
210ca30c:	0005883a 	mov	r2,zero
210ca310:	1d800017 	ldw	r22,0(r3)
210ca314:	18c00104 	addi	r3,r3,4
210ca318:	d8c02215 	stw	r3,136(sp)
210ca31c:	b009883a 	mov	r4,r22
210ca320:	003c8e06 	br	210c955c <__flash_rwdata_start+0xffff7c64>
210ca324:	1d800017 	ldw	r22,0(r3)
210ca328:	d9002217 	ldw	r4,136(sp)
210ca32c:	b01bd7fa 	srai	r13,r22,31
210ca330:	21000104 	addi	r4,r4,4
210ca334:	d9002215 	stw	r4,136(sp)
210ca338:	6805883a 	mov	r2,r13
210ca33c:	003da306 	br	210c99cc <__flash_rwdata_start+0xffff80d4>
210ca340:	d9002217 	ldw	r4,136(sp)
210ca344:	001b883a 	mov	r13,zero
210ca348:	00800044 	movi	r2,1
210ca34c:	25800017 	ldw	r22,0(r4)
210ca350:	21000104 	addi	r4,r4,4
210ca354:	d9002215 	stw	r4,136(sp)
210ca358:	b009883a 	mov	r4,r22
210ca35c:	003c7f06 	br	210c955c <__flash_rwdata_start+0xffff7c64>
210ca360:	00c40034 	movhi	r3,4096
210ca364:	18c0d904 	addi	r3,r3,868
210ca368:	d8c02415 	stw	r3,144(sp)
210ca36c:	003cff06 	br	210c976c <__flash_rwdata_start+0xffff7e74>
210ca370:	d8801c17 	ldw	r2,112(sp)
210ca374:	dd402117 	ldw	r21,132(sp)
210ca378:	103ec526 	beq	r2,zero,210c9e90 <__flash_rwdata_start+0xffff8598>
210ca37c:	d9002017 	ldw	r4,128(sp)
210ca380:	a80b883a 	mov	r5,r21
210ca384:	d9801a04 	addi	r6,sp,104
210ca388:	10c90d00 	call	210c90d0 <__sprint_r.part.0>
210ca38c:	003ec006 	br	210c9e90 <__flash_rwdata_start+0xffff8598>
210ca390:	80800044 	addi	r2,r16,1
210ca394:	ad400814 	ori	r21,r21,32
210ca398:	80c00047 	ldb	r3,1(r16)
210ca39c:	003bef06 	br	210c935c <__flash_rwdata_start+0xffff7a64>
210ca3a0:	04a5c83a 	sub	r18,zero,r18
210ca3a4:	8005883a 	mov	r2,r16
210ca3a8:	d8c02215 	stw	r3,136(sp)
210ca3ac:	003d5306 	br	210c98fc <__flash_rwdata_start+0xffff8004>
210ca3b0:	da002a15 	stw	r8,168(sp)
210ca3b4:	10c23680 	call	210c2368 <strlen>
210ca3b8:	1027883a 	mov	r19,r2
210ca3bc:	db801d83 	ldbu	r14,118(sp)
210ca3c0:	dd802215 	stw	r22,136(sp)
210ca3c4:	0013883a 	mov	r9,zero
210ca3c8:	da002a17 	ldw	r8,168(sp)
210ca3cc:	003c7f06 	br	210c95cc <__flash_rwdata_start+0xffff7cd4>
210ca3d0:	d9002017 	ldw	r4,128(sp)
210ca3d4:	d9402117 	ldw	r5,132(sp)
210ca3d8:	d9801a04 	addi	r6,sp,104
210ca3dc:	da402b15 	stw	r9,172(sp)
210ca3e0:	10c90d00 	call	210c90d0 <__sprint_r.part.0>
210ca3e4:	da402b17 	ldw	r9,172(sp)
210ca3e8:	103ea81e 	bne	r2,zero,210c9e8c <__flash_rwdata_start+0xffff8594>
210ca3ec:	d9401b17 	ldw	r5,108(sp)
210ca3f0:	d8801c17 	ldw	r2,112(sp)
210ca3f4:	d811883a 	mov	r8,sp
210ca3f8:	29000044 	addi	r4,r5,1
210ca3fc:	003cc006 	br	210c9700 <__flash_rwdata_start+0xffff7e08>
210ca400:	d9401b17 	ldw	r5,108(sp)
210ca404:	01040034 	movhi	r4,4096
210ca408:	2100dd04 	addi	r4,r4,884
210ca40c:	d9002415 	stw	r4,144(sp)
210ca410:	29400044 	addi	r5,r5,1
210ca414:	003c9f06 	br	210c9694 <__flash_rwdata_start+0xffff7d9c>
210ca418:	00800184 	movi	r2,6
210ca41c:	1240012e 	bgeu	r2,r9,210ca424 <___vfiprintf_internal_r+0x1240>
210ca420:	1013883a 	mov	r9,r2
210ca424:	4827883a 	mov	r19,r9
210ca428:	4823883a 	mov	r17,r9
210ca42c:	48001116 	blt	r9,zero,210ca474 <___vfiprintf_internal_r+0x1290>
210ca430:	05040034 	movhi	r20,4096
210ca434:	dd802215 	stw	r22,136(sp)
210ca438:	a5007e04 	addi	r20,r20,504
210ca43c:	003db106 	br	210c9b04 <__flash_rwdata_start+0xffff820c>
210ca440:	d9401b17 	ldw	r5,108(sp)
210ca444:	01040034 	movhi	r4,4096
210ca448:	2100dd04 	addi	r4,r4,884
210ca44c:	d9002415 	stw	r4,144(sp)
210ca450:	29400044 	addi	r5,r5,1
210ca454:	003cf906 	br	210c983c <__flash_rwdata_start+0xffff7f44>
210ca458:	4827883a 	mov	r19,r9
210ca45c:	db801d83 	ldbu	r14,118(sp)
210ca460:	dd802215 	stw	r22,136(sp)
210ca464:	0013883a 	mov	r9,zero
210ca468:	003c5806 	br	210c95cc <__flash_rwdata_start+0xffff7cd4>
210ca46c:	200d883a 	mov	r6,r4
210ca470:	003ec706 	br	210c9f90 <__flash_rwdata_start+0xffff8698>
210ca474:	0023883a 	mov	r17,zero
210ca478:	003fed06 	br	210ca430 <__flash_rwdata_start+0xffff8b38>
210ca47c:	d9002217 	ldw	r4,136(sp)
210ca480:	22400017 	ldw	r9,0(r4)
210ca484:	20c00104 	addi	r3,r4,4
210ca488:	d8c02215 	stw	r3,136(sp)
210ca48c:	483fc20e 	bge	r9,zero,210ca398 <__flash_rwdata_start+0xffff8aa0>
210ca490:	027fffc4 	movi	r9,-1
210ca494:	80c00047 	ldb	r3,1(r16)
210ca498:	003bb006 	br	210c935c <__flash_rwdata_start+0xffff7a64>
210ca49c:	8c80010e 	bge	r17,r18,210ca4a4 <___vfiprintf_internal_r+0x12c0>
210ca4a0:	9023883a 	mov	r17,r18
210ca4a4:	d8802317 	ldw	r2,140(sp)
210ca4a8:	1445883a 	add	r2,r2,r17
210ca4ac:	d8802315 	stw	r2,140(sp)
210ca4b0:	003cef06 	br	210c9870 <__flash_rwdata_start+0xffff7f78>

210ca4b4 <__vfiprintf_internal>:
210ca4b4:	2007883a 	mov	r3,r4
210ca4b8:	01040034 	movhi	r4,4096
210ca4bc:	21092304 	addi	r4,r4,9356
210ca4c0:	21000017 	ldw	r4,0(r4)
210ca4c4:	2805883a 	mov	r2,r5
210ca4c8:	300f883a 	mov	r7,r6
210ca4cc:	180b883a 	mov	r5,r3
210ca4d0:	100d883a 	mov	r6,r2
210ca4d4:	10c91e41 	jmpi	210c91e4 <___vfiprintf_internal_r>

210ca4d8 <__sbprintf>:
210ca4d8:	2880030b 	ldhu	r2,12(r5)
210ca4dc:	2ac01917 	ldw	r11,100(r5)
210ca4e0:	2a80038b 	ldhu	r10,14(r5)
210ca4e4:	2a400717 	ldw	r9,28(r5)
210ca4e8:	2a000917 	ldw	r8,36(r5)
210ca4ec:	defee204 	addi	sp,sp,-1144
210ca4f0:	00c10004 	movi	r3,1024
210ca4f4:	dc011a15 	stw	r16,1128(sp)
210ca4f8:	10bfff4c 	andi	r2,r2,65533
210ca4fc:	2821883a 	mov	r16,r5
210ca500:	d8cb883a 	add	r5,sp,r3
210ca504:	dc811c15 	stw	r18,1136(sp)
210ca508:	dc411b15 	stw	r17,1132(sp)
210ca50c:	dfc11d15 	stw	ra,1140(sp)
210ca510:	2025883a 	mov	r18,r4
210ca514:	d881030d 	sth	r2,1036(sp)
210ca518:	dac11915 	stw	r11,1124(sp)
210ca51c:	da81038d 	sth	r10,1038(sp)
210ca520:	da410715 	stw	r9,1052(sp)
210ca524:	da010915 	stw	r8,1060(sp)
210ca528:	dec10015 	stw	sp,1024(sp)
210ca52c:	dec10415 	stw	sp,1040(sp)
210ca530:	d8c10215 	stw	r3,1032(sp)
210ca534:	d8c10515 	stw	r3,1044(sp)
210ca538:	d8010615 	stw	zero,1048(sp)
210ca53c:	10c91e40 	call	210c91e4 <___vfiprintf_internal_r>
210ca540:	1023883a 	mov	r17,r2
210ca544:	10000416 	blt	r2,zero,210ca558 <__sbprintf+0x80>
210ca548:	9009883a 	mov	r4,r18
210ca54c:	d9410004 	addi	r5,sp,1024
210ca550:	10c62480 	call	210c6248 <_fflush_r>
210ca554:	10000d1e 	bne	r2,zero,210ca58c <__sbprintf+0xb4>
210ca558:	d8c1030b 	ldhu	r3,1036(sp)
210ca55c:	18c0100c 	andi	r3,r3,64
210ca560:	18000326 	beq	r3,zero,210ca570 <__sbprintf+0x98>
210ca564:	8080030b 	ldhu	r2,12(r16)
210ca568:	10801014 	ori	r2,r2,64
210ca56c:	8080030d 	sth	r2,12(r16)
210ca570:	8805883a 	mov	r2,r17
210ca574:	dfc11d17 	ldw	ra,1140(sp)
210ca578:	dc811c17 	ldw	r18,1136(sp)
210ca57c:	dc411b17 	ldw	r17,1132(sp)
210ca580:	dc011a17 	ldw	r16,1128(sp)
210ca584:	dec11e04 	addi	sp,sp,1144
210ca588:	f800283a 	ret
210ca58c:	047fffc4 	movi	r17,-1
210ca590:	003ff106 	br	210ca558 <__flash_rwdata_start+0xffff8c60>

210ca594 <__swbuf_r>:
210ca594:	defffc04 	addi	sp,sp,-16
210ca598:	dc800215 	stw	r18,8(sp)
210ca59c:	dc400115 	stw	r17,4(sp)
210ca5a0:	dc000015 	stw	r16,0(sp)
210ca5a4:	dfc00315 	stw	ra,12(sp)
210ca5a8:	2025883a 	mov	r18,r4
210ca5ac:	2823883a 	mov	r17,r5
210ca5b0:	3021883a 	mov	r16,r6
210ca5b4:	20000226 	beq	r4,zero,210ca5c0 <__swbuf_r+0x2c>
210ca5b8:	20800e17 	ldw	r2,56(r4)
210ca5bc:	10004126 	beq	r2,zero,210ca6c4 <__swbuf_r+0x130>
210ca5c0:	80c00617 	ldw	r3,24(r16)
210ca5c4:	8180030b 	ldhu	r6,12(r16)
210ca5c8:	80c00215 	stw	r3,8(r16)
210ca5cc:	30c0020c 	andi	r3,r6,8
210ca5d0:	18003526 	beq	r3,zero,210ca6a8 <__swbuf_r+0x114>
210ca5d4:	80c00417 	ldw	r3,16(r16)
210ca5d8:	18003326 	beq	r3,zero,210ca6a8 <__swbuf_r+0x114>
210ca5dc:	3088000c 	andi	r2,r6,8192
210ca5e0:	8c403fcc 	andi	r17,r17,255
210ca5e4:	10001726 	beq	r2,zero,210ca644 <__swbuf_r+0xb0>
210ca5e8:	80800017 	ldw	r2,0(r16)
210ca5ec:	81000517 	ldw	r4,20(r16)
210ca5f0:	10c7c83a 	sub	r3,r2,r3
210ca5f4:	19001d0e 	bge	r3,r4,210ca66c <__swbuf_r+0xd8>
210ca5f8:	18c00044 	addi	r3,r3,1
210ca5fc:	81400217 	ldw	r5,8(r16)
210ca600:	11000044 	addi	r4,r2,1
210ca604:	81000015 	stw	r4,0(r16)
210ca608:	297fffc4 	addi	r5,r5,-1
210ca60c:	81400215 	stw	r5,8(r16)
210ca610:	14400005 	stb	r17,0(r2)
210ca614:	80800517 	ldw	r2,20(r16)
210ca618:	10c01d26 	beq	r2,r3,210ca690 <__swbuf_r+0xfc>
210ca61c:	8080030b 	ldhu	r2,12(r16)
210ca620:	1080004c 	andi	r2,r2,1
210ca624:	1000181e 	bne	r2,zero,210ca688 <__swbuf_r+0xf4>
210ca628:	8805883a 	mov	r2,r17
210ca62c:	dfc00317 	ldw	ra,12(sp)
210ca630:	dc800217 	ldw	r18,8(sp)
210ca634:	dc400117 	ldw	r17,4(sp)
210ca638:	dc000017 	ldw	r16,0(sp)
210ca63c:	dec00404 	addi	sp,sp,16
210ca640:	f800283a 	ret
210ca644:	81001917 	ldw	r4,100(r16)
210ca648:	00b7ffc4 	movi	r2,-8193
210ca64c:	31880014 	ori	r6,r6,8192
210ca650:	2084703a 	and	r2,r4,r2
210ca654:	80801915 	stw	r2,100(r16)
210ca658:	80800017 	ldw	r2,0(r16)
210ca65c:	81000517 	ldw	r4,20(r16)
210ca660:	8180030d 	sth	r6,12(r16)
210ca664:	10c7c83a 	sub	r3,r2,r3
210ca668:	193fe316 	blt	r3,r4,210ca5f8 <__flash_rwdata_start+0xffff8d00>
210ca66c:	9009883a 	mov	r4,r18
210ca670:	800b883a 	mov	r5,r16
210ca674:	10c62480 	call	210c6248 <_fflush_r>
210ca678:	1000091e 	bne	r2,zero,210ca6a0 <__swbuf_r+0x10c>
210ca67c:	80800017 	ldw	r2,0(r16)
210ca680:	00c00044 	movi	r3,1
210ca684:	003fdd06 	br	210ca5fc <__flash_rwdata_start+0xffff8d04>
210ca688:	00800284 	movi	r2,10
210ca68c:	88bfe61e 	bne	r17,r2,210ca628 <__flash_rwdata_start+0xffff8d30>
210ca690:	9009883a 	mov	r4,r18
210ca694:	800b883a 	mov	r5,r16
210ca698:	10c62480 	call	210c6248 <_fflush_r>
210ca69c:	103fe226 	beq	r2,zero,210ca628 <__flash_rwdata_start+0xffff8d30>
210ca6a0:	00bfffc4 	movi	r2,-1
210ca6a4:	003fe106 	br	210ca62c <__flash_rwdata_start+0xffff8d34>
210ca6a8:	9009883a 	mov	r4,r18
210ca6ac:	800b883a 	mov	r5,r16
210ca6b0:	10c44300 	call	210c4430 <__swsetup_r>
210ca6b4:	103ffa1e 	bne	r2,zero,210ca6a0 <__flash_rwdata_start+0xffff8da8>
210ca6b8:	8180030b 	ldhu	r6,12(r16)
210ca6bc:	80c00417 	ldw	r3,16(r16)
210ca6c0:	003fc606 	br	210ca5dc <__flash_rwdata_start+0xffff8ce4>
210ca6c4:	10c66240 	call	210c6624 <__sinit>
210ca6c8:	003fbd06 	br	210ca5c0 <__flash_rwdata_start+0xffff8cc8>

210ca6cc <__swbuf>:
210ca6cc:	00c40034 	movhi	r3,4096
210ca6d0:	18c92304 	addi	r3,r3,9356
210ca6d4:	2005883a 	mov	r2,r4
210ca6d8:	19000017 	ldw	r4,0(r3)
210ca6dc:	280d883a 	mov	r6,r5
210ca6e0:	100b883a 	mov	r5,r2
210ca6e4:	10ca5941 	jmpi	210ca594 <__swbuf_r>

210ca6e8 <_write_r>:
210ca6e8:	defffd04 	addi	sp,sp,-12
210ca6ec:	dc000015 	stw	r16,0(sp)
210ca6f0:	04040034 	movhi	r16,4096
210ca6f4:	dc400115 	stw	r17,4(sp)
210ca6f8:	84093b04 	addi	r16,r16,9452
210ca6fc:	2023883a 	mov	r17,r4
210ca700:	2809883a 	mov	r4,r5
210ca704:	300b883a 	mov	r5,r6
210ca708:	380d883a 	mov	r6,r7
210ca70c:	dfc00215 	stw	ra,8(sp)
210ca710:	80000015 	stw	zero,0(r16)
210ca714:	10ce63c0 	call	210ce63c <write>
210ca718:	00ffffc4 	movi	r3,-1
210ca71c:	10c00526 	beq	r2,r3,210ca734 <_write_r+0x4c>
210ca720:	dfc00217 	ldw	ra,8(sp)
210ca724:	dc400117 	ldw	r17,4(sp)
210ca728:	dc000017 	ldw	r16,0(sp)
210ca72c:	dec00304 	addi	sp,sp,12
210ca730:	f800283a 	ret
210ca734:	80c00017 	ldw	r3,0(r16)
210ca738:	183ff926 	beq	r3,zero,210ca720 <__flash_rwdata_start+0xffff8e28>
210ca73c:	88c00015 	stw	r3,0(r17)
210ca740:	003ff706 	br	210ca720 <__flash_rwdata_start+0xffff8e28>

210ca744 <_close_r>:
210ca744:	defffd04 	addi	sp,sp,-12
210ca748:	dc000015 	stw	r16,0(sp)
210ca74c:	04040034 	movhi	r16,4096
210ca750:	dc400115 	stw	r17,4(sp)
210ca754:	84093b04 	addi	r16,r16,9452
210ca758:	2023883a 	mov	r17,r4
210ca75c:	2809883a 	mov	r4,r5
210ca760:	dfc00215 	stw	ra,8(sp)
210ca764:	80000015 	stw	zero,0(r16)
210ca768:	10ce1080 	call	210ce108 <close>
210ca76c:	00ffffc4 	movi	r3,-1
210ca770:	10c00526 	beq	r2,r3,210ca788 <_close_r+0x44>
210ca774:	dfc00217 	ldw	ra,8(sp)
210ca778:	dc400117 	ldw	r17,4(sp)
210ca77c:	dc000017 	ldw	r16,0(sp)
210ca780:	dec00304 	addi	sp,sp,12
210ca784:	f800283a 	ret
210ca788:	80c00017 	ldw	r3,0(r16)
210ca78c:	183ff926 	beq	r3,zero,210ca774 <__flash_rwdata_start+0xffff8e7c>
210ca790:	88c00015 	stw	r3,0(r17)
210ca794:	003ff706 	br	210ca774 <__flash_rwdata_start+0xffff8e7c>

210ca798 <_calloc_r>:
210ca798:	298b383a 	mul	r5,r5,r6
210ca79c:	defffe04 	addi	sp,sp,-8
210ca7a0:	dc000015 	stw	r16,0(sp)
210ca7a4:	dfc00115 	stw	ra,4(sp)
210ca7a8:	10c1a280 	call	210c1a28 <_malloc_r>
210ca7ac:	1021883a 	mov	r16,r2
210ca7b0:	10002826 	beq	r2,zero,210ca854 <_calloc_r+0xbc>
210ca7b4:	11bfff17 	ldw	r6,-4(r2)
210ca7b8:	00bfff04 	movi	r2,-4
210ca7bc:	00c00904 	movi	r3,36
210ca7c0:	308c703a 	and	r6,r6,r2
210ca7c4:	308d883a 	add	r6,r6,r2
210ca7c8:	19801436 	bltu	r3,r6,210ca81c <_calloc_r+0x84>
210ca7cc:	008004c4 	movi	r2,19
210ca7d0:	11800936 	bltu	r2,r6,210ca7f8 <_calloc_r+0x60>
210ca7d4:	8005883a 	mov	r2,r16
210ca7d8:	10000015 	stw	zero,0(r2)
210ca7dc:	10000115 	stw	zero,4(r2)
210ca7e0:	10000215 	stw	zero,8(r2)
210ca7e4:	8005883a 	mov	r2,r16
210ca7e8:	dfc00117 	ldw	ra,4(sp)
210ca7ec:	dc000017 	ldw	r16,0(sp)
210ca7f0:	dec00204 	addi	sp,sp,8
210ca7f4:	f800283a 	ret
210ca7f8:	80000015 	stw	zero,0(r16)
210ca7fc:	80000115 	stw	zero,4(r16)
210ca800:	008006c4 	movi	r2,27
210ca804:	11800d2e 	bgeu	r2,r6,210ca83c <_calloc_r+0xa4>
210ca808:	80000215 	stw	zero,8(r16)
210ca80c:	80000315 	stw	zero,12(r16)
210ca810:	30c00c26 	beq	r6,r3,210ca844 <_calloc_r+0xac>
210ca814:	80800404 	addi	r2,r16,16
210ca818:	003fef06 	br	210ca7d8 <__flash_rwdata_start+0xffff8ee0>
210ca81c:	8009883a 	mov	r4,r16
210ca820:	000b883a 	mov	r5,zero
210ca824:	10c76e40 	call	210c76e4 <memset>
210ca828:	8005883a 	mov	r2,r16
210ca82c:	dfc00117 	ldw	ra,4(sp)
210ca830:	dc000017 	ldw	r16,0(sp)
210ca834:	dec00204 	addi	sp,sp,8
210ca838:	f800283a 	ret
210ca83c:	80800204 	addi	r2,r16,8
210ca840:	003fe506 	br	210ca7d8 <__flash_rwdata_start+0xffff8ee0>
210ca844:	80000415 	stw	zero,16(r16)
210ca848:	80800604 	addi	r2,r16,24
210ca84c:	80000515 	stw	zero,20(r16)
210ca850:	003fe106 	br	210ca7d8 <__flash_rwdata_start+0xffff8ee0>
210ca854:	0005883a 	mov	r2,zero
210ca858:	003fe306 	br	210ca7e8 <__flash_rwdata_start+0xffff8ef0>

210ca85c <_fclose_r>:
210ca85c:	28003926 	beq	r5,zero,210ca944 <_fclose_r+0xe8>
210ca860:	defffc04 	addi	sp,sp,-16
210ca864:	dc400115 	stw	r17,4(sp)
210ca868:	dc000015 	stw	r16,0(sp)
210ca86c:	dfc00315 	stw	ra,12(sp)
210ca870:	dc800215 	stw	r18,8(sp)
210ca874:	2023883a 	mov	r17,r4
210ca878:	2821883a 	mov	r16,r5
210ca87c:	20000226 	beq	r4,zero,210ca888 <_fclose_r+0x2c>
210ca880:	20800e17 	ldw	r2,56(r4)
210ca884:	10002726 	beq	r2,zero,210ca924 <_fclose_r+0xc8>
210ca888:	8080030f 	ldh	r2,12(r16)
210ca88c:	1000071e 	bne	r2,zero,210ca8ac <_fclose_r+0x50>
210ca890:	0005883a 	mov	r2,zero
210ca894:	dfc00317 	ldw	ra,12(sp)
210ca898:	dc800217 	ldw	r18,8(sp)
210ca89c:	dc400117 	ldw	r17,4(sp)
210ca8a0:	dc000017 	ldw	r16,0(sp)
210ca8a4:	dec00404 	addi	sp,sp,16
210ca8a8:	f800283a 	ret
210ca8ac:	8809883a 	mov	r4,r17
210ca8b0:	800b883a 	mov	r5,r16
210ca8b4:	10c60400 	call	210c6040 <__sflush_r>
210ca8b8:	1025883a 	mov	r18,r2
210ca8bc:	80800b17 	ldw	r2,44(r16)
210ca8c0:	10000426 	beq	r2,zero,210ca8d4 <_fclose_r+0x78>
210ca8c4:	81400717 	ldw	r5,28(r16)
210ca8c8:	8809883a 	mov	r4,r17
210ca8cc:	103ee83a 	callr	r2
210ca8d0:	10001616 	blt	r2,zero,210ca92c <_fclose_r+0xd0>
210ca8d4:	8080030b 	ldhu	r2,12(r16)
210ca8d8:	1080200c 	andi	r2,r2,128
210ca8dc:	1000151e 	bne	r2,zero,210ca934 <_fclose_r+0xd8>
210ca8e0:	81400c17 	ldw	r5,48(r16)
210ca8e4:	28000526 	beq	r5,zero,210ca8fc <_fclose_r+0xa0>
210ca8e8:	80801004 	addi	r2,r16,64
210ca8ec:	28800226 	beq	r5,r2,210ca8f8 <_fclose_r+0x9c>
210ca8f0:	8809883a 	mov	r4,r17
210ca8f4:	10c67980 	call	210c6798 <_free_r>
210ca8f8:	80000c15 	stw	zero,48(r16)
210ca8fc:	81401117 	ldw	r5,68(r16)
210ca900:	28000326 	beq	r5,zero,210ca910 <_fclose_r+0xb4>
210ca904:	8809883a 	mov	r4,r17
210ca908:	10c67980 	call	210c6798 <_free_r>
210ca90c:	80001115 	stw	zero,68(r16)
210ca910:	10c66340 	call	210c6634 <__sfp_lock_acquire>
210ca914:	8000030d 	sth	zero,12(r16)
210ca918:	10c66380 	call	210c6638 <__sfp_lock_release>
210ca91c:	9005883a 	mov	r2,r18
210ca920:	003fdc06 	br	210ca894 <__flash_rwdata_start+0xffff8f9c>
210ca924:	10c66240 	call	210c6624 <__sinit>
210ca928:	003fd706 	br	210ca888 <__flash_rwdata_start+0xffff8f90>
210ca92c:	04bfffc4 	movi	r18,-1
210ca930:	003fe806 	br	210ca8d4 <__flash_rwdata_start+0xffff8fdc>
210ca934:	81400417 	ldw	r5,16(r16)
210ca938:	8809883a 	mov	r4,r17
210ca93c:	10c67980 	call	210c6798 <_free_r>
210ca940:	003fe706 	br	210ca8e0 <__flash_rwdata_start+0xffff8fe8>
210ca944:	0005883a 	mov	r2,zero
210ca948:	f800283a 	ret

210ca94c <fclose>:
210ca94c:	00840034 	movhi	r2,4096
210ca950:	10892304 	addi	r2,r2,9356
210ca954:	200b883a 	mov	r5,r4
210ca958:	11000017 	ldw	r4,0(r2)
210ca95c:	10ca85c1 	jmpi	210ca85c <_fclose_r>

210ca960 <_fputwc_r>:
210ca960:	3080030b 	ldhu	r2,12(r6)
210ca964:	defff804 	addi	sp,sp,-32
210ca968:	dcc00415 	stw	r19,16(sp)
210ca96c:	dc800315 	stw	r18,12(sp)
210ca970:	dc000115 	stw	r16,4(sp)
210ca974:	dfc00715 	stw	ra,28(sp)
210ca978:	dd400615 	stw	r21,24(sp)
210ca97c:	dd000515 	stw	r20,20(sp)
210ca980:	dc400215 	stw	r17,8(sp)
210ca984:	10c8000c 	andi	r3,r2,8192
210ca988:	3021883a 	mov	r16,r6
210ca98c:	2027883a 	mov	r19,r4
210ca990:	2825883a 	mov	r18,r5
210ca994:	1800051e 	bne	r3,zero,210ca9ac <_fputwc_r+0x4c>
210ca998:	30c01917 	ldw	r3,100(r6)
210ca99c:	10880014 	ori	r2,r2,8192
210ca9a0:	3080030d 	sth	r2,12(r6)
210ca9a4:	18880014 	ori	r2,r3,8192
210ca9a8:	30801915 	stw	r2,100(r6)
210ca9ac:	10c71580 	call	210c7158 <__locale_mb_cur_max>
210ca9b0:	00c00044 	movi	r3,1
210ca9b4:	10c03e26 	beq	r2,r3,210caab0 <_fputwc_r+0x150>
210ca9b8:	9809883a 	mov	r4,r19
210ca9bc:	d80b883a 	mov	r5,sp
210ca9c0:	900d883a 	mov	r6,r18
210ca9c4:	81c01704 	addi	r7,r16,92
210ca9c8:	10caca40 	call	210caca4 <_wcrtomb_r>
210ca9cc:	1029883a 	mov	r20,r2
210ca9d0:	00bfffc4 	movi	r2,-1
210ca9d4:	a0802026 	beq	r20,r2,210caa58 <_fputwc_r+0xf8>
210ca9d8:	d9400003 	ldbu	r5,0(sp)
210ca9dc:	a0001c26 	beq	r20,zero,210caa50 <_fputwc_r+0xf0>
210ca9e0:	0023883a 	mov	r17,zero
210ca9e4:	05400284 	movi	r21,10
210ca9e8:	00000906 	br	210caa10 <_fputwc_r+0xb0>
210ca9ec:	80800017 	ldw	r2,0(r16)
210ca9f0:	11400005 	stb	r5,0(r2)
210ca9f4:	80c00017 	ldw	r3,0(r16)
210ca9f8:	18c00044 	addi	r3,r3,1
210ca9fc:	80c00015 	stw	r3,0(r16)
210caa00:	8c400044 	addi	r17,r17,1
210caa04:	dc45883a 	add	r2,sp,r17
210caa08:	8d00112e 	bgeu	r17,r20,210caa50 <_fputwc_r+0xf0>
210caa0c:	11400003 	ldbu	r5,0(r2)
210caa10:	80c00217 	ldw	r3,8(r16)
210caa14:	18ffffc4 	addi	r3,r3,-1
210caa18:	80c00215 	stw	r3,8(r16)
210caa1c:	183ff30e 	bge	r3,zero,210ca9ec <__flash_rwdata_start+0xffff90f4>
210caa20:	80800617 	ldw	r2,24(r16)
210caa24:	18801916 	blt	r3,r2,210caa8c <_fputwc_r+0x12c>
210caa28:	80800017 	ldw	r2,0(r16)
210caa2c:	11400005 	stb	r5,0(r2)
210caa30:	80800017 	ldw	r2,0(r16)
210caa34:	10c00003 	ldbu	r3,0(r2)
210caa38:	10800044 	addi	r2,r2,1
210caa3c:	1d402326 	beq	r3,r21,210caacc <_fputwc_r+0x16c>
210caa40:	80800015 	stw	r2,0(r16)
210caa44:	8c400044 	addi	r17,r17,1
210caa48:	dc45883a 	add	r2,sp,r17
210caa4c:	8d3fef36 	bltu	r17,r20,210caa0c <__flash_rwdata_start+0xffff9114>
210caa50:	9005883a 	mov	r2,r18
210caa54:	00000406 	br	210caa68 <_fputwc_r+0x108>
210caa58:	80c0030b 	ldhu	r3,12(r16)
210caa5c:	a005883a 	mov	r2,r20
210caa60:	18c01014 	ori	r3,r3,64
210caa64:	80c0030d 	sth	r3,12(r16)
210caa68:	dfc00717 	ldw	ra,28(sp)
210caa6c:	dd400617 	ldw	r21,24(sp)
210caa70:	dd000517 	ldw	r20,20(sp)
210caa74:	dcc00417 	ldw	r19,16(sp)
210caa78:	dc800317 	ldw	r18,12(sp)
210caa7c:	dc400217 	ldw	r17,8(sp)
210caa80:	dc000117 	ldw	r16,4(sp)
210caa84:	dec00804 	addi	sp,sp,32
210caa88:	f800283a 	ret
210caa8c:	9809883a 	mov	r4,r19
210caa90:	29403fcc 	andi	r5,r5,255
210caa94:	800d883a 	mov	r6,r16
210caa98:	10ca5940 	call	210ca594 <__swbuf_r>
210caa9c:	10bfffe0 	cmpeqi	r2,r2,-1
210caaa0:	10803fcc 	andi	r2,r2,255
210caaa4:	103fd626 	beq	r2,zero,210caa00 <__flash_rwdata_start+0xffff9108>
210caaa8:	00bfffc4 	movi	r2,-1
210caaac:	003fee06 	br	210caa68 <__flash_rwdata_start+0xffff9170>
210caab0:	90ffffc4 	addi	r3,r18,-1
210caab4:	01003f84 	movi	r4,254
210caab8:	20ffbf36 	bltu	r4,r3,210ca9b8 <__flash_rwdata_start+0xffff90c0>
210caabc:	900b883a 	mov	r5,r18
210caac0:	dc800005 	stb	r18,0(sp)
210caac4:	1029883a 	mov	r20,r2
210caac8:	003fc506 	br	210ca9e0 <__flash_rwdata_start+0xffff90e8>
210caacc:	9809883a 	mov	r4,r19
210caad0:	a80b883a 	mov	r5,r21
210caad4:	800d883a 	mov	r6,r16
210caad8:	10ca5940 	call	210ca594 <__swbuf_r>
210caadc:	10bfffe0 	cmpeqi	r2,r2,-1
210caae0:	003fef06 	br	210caaa0 <__flash_rwdata_start+0xffff91a8>

210caae4 <fputwc>:
210caae4:	00840034 	movhi	r2,4096
210caae8:	defffc04 	addi	sp,sp,-16
210caaec:	10892304 	addi	r2,r2,9356
210caaf0:	dc000115 	stw	r16,4(sp)
210caaf4:	14000017 	ldw	r16,0(r2)
210caaf8:	dc400215 	stw	r17,8(sp)
210caafc:	dfc00315 	stw	ra,12(sp)
210cab00:	2023883a 	mov	r17,r4
210cab04:	280d883a 	mov	r6,r5
210cab08:	80000626 	beq	r16,zero,210cab24 <fputwc+0x40>
210cab0c:	80800e17 	ldw	r2,56(r16)
210cab10:	1000041e 	bne	r2,zero,210cab24 <fputwc+0x40>
210cab14:	8009883a 	mov	r4,r16
210cab18:	d9400015 	stw	r5,0(sp)
210cab1c:	10c66240 	call	210c6624 <__sinit>
210cab20:	d9800017 	ldw	r6,0(sp)
210cab24:	8009883a 	mov	r4,r16
210cab28:	880b883a 	mov	r5,r17
210cab2c:	dfc00317 	ldw	ra,12(sp)
210cab30:	dc400217 	ldw	r17,8(sp)
210cab34:	dc000117 	ldw	r16,4(sp)
210cab38:	dec00404 	addi	sp,sp,16
210cab3c:	10ca9601 	jmpi	210ca960 <_fputwc_r>

210cab40 <_fstat_r>:
210cab40:	defffd04 	addi	sp,sp,-12
210cab44:	dc000015 	stw	r16,0(sp)
210cab48:	04040034 	movhi	r16,4096
210cab4c:	dc400115 	stw	r17,4(sp)
210cab50:	84093b04 	addi	r16,r16,9452
210cab54:	2023883a 	mov	r17,r4
210cab58:	2809883a 	mov	r4,r5
210cab5c:	300b883a 	mov	r5,r6
210cab60:	dfc00215 	stw	ra,8(sp)
210cab64:	80000015 	stw	zero,0(r16)
210cab68:	10ce2100 	call	210ce210 <fstat>
210cab6c:	00ffffc4 	movi	r3,-1
210cab70:	10c00526 	beq	r2,r3,210cab88 <_fstat_r+0x48>
210cab74:	dfc00217 	ldw	ra,8(sp)
210cab78:	dc400117 	ldw	r17,4(sp)
210cab7c:	dc000017 	ldw	r16,0(sp)
210cab80:	dec00304 	addi	sp,sp,12
210cab84:	f800283a 	ret
210cab88:	80c00017 	ldw	r3,0(r16)
210cab8c:	183ff926 	beq	r3,zero,210cab74 <__flash_rwdata_start+0xffff927c>
210cab90:	88c00015 	stw	r3,0(r17)
210cab94:	003ff706 	br	210cab74 <__flash_rwdata_start+0xffff927c>

210cab98 <_isatty_r>:
210cab98:	defffd04 	addi	sp,sp,-12
210cab9c:	dc000015 	stw	r16,0(sp)
210caba0:	04040034 	movhi	r16,4096
210caba4:	dc400115 	stw	r17,4(sp)
210caba8:	84093b04 	addi	r16,r16,9452
210cabac:	2023883a 	mov	r17,r4
210cabb0:	2809883a 	mov	r4,r5
210cabb4:	dfc00215 	stw	ra,8(sp)
210cabb8:	80000015 	stw	zero,0(r16)
210cabbc:	10ce2940 	call	210ce294 <isatty>
210cabc0:	00ffffc4 	movi	r3,-1
210cabc4:	10c00526 	beq	r2,r3,210cabdc <_isatty_r+0x44>
210cabc8:	dfc00217 	ldw	ra,8(sp)
210cabcc:	dc400117 	ldw	r17,4(sp)
210cabd0:	dc000017 	ldw	r16,0(sp)
210cabd4:	dec00304 	addi	sp,sp,12
210cabd8:	f800283a 	ret
210cabdc:	80c00017 	ldw	r3,0(r16)
210cabe0:	183ff926 	beq	r3,zero,210cabc8 <__flash_rwdata_start+0xffff92d0>
210cabe4:	88c00015 	stw	r3,0(r17)
210cabe8:	003ff706 	br	210cabc8 <__flash_rwdata_start+0xffff92d0>

210cabec <_lseek_r>:
210cabec:	defffd04 	addi	sp,sp,-12
210cabf0:	dc000015 	stw	r16,0(sp)
210cabf4:	04040034 	movhi	r16,4096
210cabf8:	dc400115 	stw	r17,4(sp)
210cabfc:	84093b04 	addi	r16,r16,9452
210cac00:	2023883a 	mov	r17,r4
210cac04:	2809883a 	mov	r4,r5
210cac08:	300b883a 	mov	r5,r6
210cac0c:	380d883a 	mov	r6,r7
210cac10:	dfc00215 	stw	ra,8(sp)
210cac14:	80000015 	stw	zero,0(r16)
210cac18:	10ce3f00 	call	210ce3f0 <lseek>
210cac1c:	00ffffc4 	movi	r3,-1
210cac20:	10c00526 	beq	r2,r3,210cac38 <_lseek_r+0x4c>
210cac24:	dfc00217 	ldw	ra,8(sp)
210cac28:	dc400117 	ldw	r17,4(sp)
210cac2c:	dc000017 	ldw	r16,0(sp)
210cac30:	dec00304 	addi	sp,sp,12
210cac34:	f800283a 	ret
210cac38:	80c00017 	ldw	r3,0(r16)
210cac3c:	183ff926 	beq	r3,zero,210cac24 <__flash_rwdata_start+0xffff932c>
210cac40:	88c00015 	stw	r3,0(r17)
210cac44:	003ff706 	br	210cac24 <__flash_rwdata_start+0xffff932c>

210cac48 <_read_r>:
210cac48:	defffd04 	addi	sp,sp,-12
210cac4c:	dc000015 	stw	r16,0(sp)
210cac50:	04040034 	movhi	r16,4096
210cac54:	dc400115 	stw	r17,4(sp)
210cac58:	84093b04 	addi	r16,r16,9452
210cac5c:	2023883a 	mov	r17,r4
210cac60:	2809883a 	mov	r4,r5
210cac64:	300b883a 	mov	r5,r6
210cac68:	380d883a 	mov	r6,r7
210cac6c:	dfc00215 	stw	ra,8(sp)
210cac70:	80000015 	stw	zero,0(r16)
210cac74:	10ce4e00 	call	210ce4e0 <read>
210cac78:	00ffffc4 	movi	r3,-1
210cac7c:	10c00526 	beq	r2,r3,210cac94 <_read_r+0x4c>
210cac80:	dfc00217 	ldw	ra,8(sp)
210cac84:	dc400117 	ldw	r17,4(sp)
210cac88:	dc000017 	ldw	r16,0(sp)
210cac8c:	dec00304 	addi	sp,sp,12
210cac90:	f800283a 	ret
210cac94:	80c00017 	ldw	r3,0(r16)
210cac98:	183ff926 	beq	r3,zero,210cac80 <__flash_rwdata_start+0xffff9388>
210cac9c:	88c00015 	stw	r3,0(r17)
210caca0:	003ff706 	br	210cac80 <__flash_rwdata_start+0xffff9388>

210caca4 <_wcrtomb_r>:
210caca4:	defff604 	addi	sp,sp,-40
210caca8:	00840034 	movhi	r2,4096
210cacac:	dc800815 	stw	r18,32(sp)
210cacb0:	dc400715 	stw	r17,28(sp)
210cacb4:	dc000615 	stw	r16,24(sp)
210cacb8:	10892704 	addi	r2,r2,9372
210cacbc:	dfc00915 	stw	ra,36(sp)
210cacc0:	2021883a 	mov	r16,r4
210cacc4:	3823883a 	mov	r17,r7
210cacc8:	14800017 	ldw	r18,0(r2)
210caccc:	28001426 	beq	r5,zero,210cad20 <_wcrtomb_r+0x7c>
210cacd0:	d9400415 	stw	r5,16(sp)
210cacd4:	d9800515 	stw	r6,20(sp)
210cacd8:	10c714c0 	call	210c714c <__locale_charset>
210cacdc:	d9400417 	ldw	r5,16(sp)
210cace0:	d9800517 	ldw	r6,20(sp)
210cace4:	8009883a 	mov	r4,r16
210cace8:	dc400015 	stw	r17,0(sp)
210cacec:	100f883a 	mov	r7,r2
210cacf0:	903ee83a 	callr	r18
210cacf4:	00ffffc4 	movi	r3,-1
210cacf8:	10c0031e 	bne	r2,r3,210cad08 <_wcrtomb_r+0x64>
210cacfc:	88000015 	stw	zero,0(r17)
210cad00:	00c02284 	movi	r3,138
210cad04:	80c00015 	stw	r3,0(r16)
210cad08:	dfc00917 	ldw	ra,36(sp)
210cad0c:	dc800817 	ldw	r18,32(sp)
210cad10:	dc400717 	ldw	r17,28(sp)
210cad14:	dc000617 	ldw	r16,24(sp)
210cad18:	dec00a04 	addi	sp,sp,40
210cad1c:	f800283a 	ret
210cad20:	10c714c0 	call	210c714c <__locale_charset>
210cad24:	8009883a 	mov	r4,r16
210cad28:	dc400015 	stw	r17,0(sp)
210cad2c:	d9400104 	addi	r5,sp,4
210cad30:	000d883a 	mov	r6,zero
210cad34:	100f883a 	mov	r7,r2
210cad38:	903ee83a 	callr	r18
210cad3c:	003fed06 	br	210cacf4 <__flash_rwdata_start+0xffff93fc>

210cad40 <wcrtomb>:
210cad40:	defff604 	addi	sp,sp,-40
210cad44:	00840034 	movhi	r2,4096
210cad48:	dc800615 	stw	r18,24(sp)
210cad4c:	dc400515 	stw	r17,20(sp)
210cad50:	dc000415 	stw	r16,16(sp)
210cad54:	10892304 	addi	r2,r2,9356
210cad58:	dfc00915 	stw	ra,36(sp)
210cad5c:	dd000815 	stw	r20,32(sp)
210cad60:	dcc00715 	stw	r19,28(sp)
210cad64:	2021883a 	mov	r16,r4
210cad68:	3025883a 	mov	r18,r6
210cad6c:	14400017 	ldw	r17,0(r2)
210cad70:	20001826 	beq	r4,zero,210cadd4 <wcrtomb+0x94>
210cad74:	00840034 	movhi	r2,4096
210cad78:	10892704 	addi	r2,r2,9372
210cad7c:	15000017 	ldw	r20,0(r2)
210cad80:	2827883a 	mov	r19,r5
210cad84:	10c714c0 	call	210c714c <__locale_charset>
210cad88:	8809883a 	mov	r4,r17
210cad8c:	dc800015 	stw	r18,0(sp)
210cad90:	800b883a 	mov	r5,r16
210cad94:	980d883a 	mov	r6,r19
210cad98:	100f883a 	mov	r7,r2
210cad9c:	a03ee83a 	callr	r20
210cada0:	00ffffc4 	movi	r3,-1
210cada4:	10c0031e 	bne	r2,r3,210cadb4 <wcrtomb+0x74>
210cada8:	90000015 	stw	zero,0(r18)
210cadac:	00c02284 	movi	r3,138
210cadb0:	88c00015 	stw	r3,0(r17)
210cadb4:	dfc00917 	ldw	ra,36(sp)
210cadb8:	dd000817 	ldw	r20,32(sp)
210cadbc:	dcc00717 	ldw	r19,28(sp)
210cadc0:	dc800617 	ldw	r18,24(sp)
210cadc4:	dc400517 	ldw	r17,20(sp)
210cadc8:	dc000417 	ldw	r16,16(sp)
210cadcc:	dec00a04 	addi	sp,sp,40
210cadd0:	f800283a 	ret
210cadd4:	00840034 	movhi	r2,4096
210cadd8:	10892704 	addi	r2,r2,9372
210caddc:	14000017 	ldw	r16,0(r2)
210cade0:	10c714c0 	call	210c714c <__locale_charset>
210cade4:	8809883a 	mov	r4,r17
210cade8:	dc800015 	stw	r18,0(sp)
210cadec:	d9400104 	addi	r5,sp,4
210cadf0:	000d883a 	mov	r6,zero
210cadf4:	100f883a 	mov	r7,r2
210cadf8:	803ee83a 	callr	r16
210cadfc:	003fe806 	br	210cada0 <__flash_rwdata_start+0xffff94a8>

210cae00 <__ascii_wctomb>:
210cae00:	28000526 	beq	r5,zero,210cae18 <__ascii_wctomb+0x18>
210cae04:	00803fc4 	movi	r2,255
210cae08:	11800536 	bltu	r2,r6,210cae20 <__ascii_wctomb+0x20>
210cae0c:	29800005 	stb	r6,0(r5)
210cae10:	00800044 	movi	r2,1
210cae14:	f800283a 	ret
210cae18:	0005883a 	mov	r2,zero
210cae1c:	f800283a 	ret
210cae20:	00802284 	movi	r2,138
210cae24:	20800015 	stw	r2,0(r4)
210cae28:	00bfffc4 	movi	r2,-1
210cae2c:	f800283a 	ret

210cae30 <_wctomb_r>:
210cae30:	00840034 	movhi	r2,4096
210cae34:	defff904 	addi	sp,sp,-28
210cae38:	10892704 	addi	r2,r2,9372
210cae3c:	dfc00615 	stw	ra,24(sp)
210cae40:	dc400515 	stw	r17,20(sp)
210cae44:	dc000415 	stw	r16,16(sp)
210cae48:	3823883a 	mov	r17,r7
210cae4c:	14000017 	ldw	r16,0(r2)
210cae50:	d9000115 	stw	r4,4(sp)
210cae54:	d9400215 	stw	r5,8(sp)
210cae58:	d9800315 	stw	r6,12(sp)
210cae5c:	10c714c0 	call	210c714c <__locale_charset>
210cae60:	d9000117 	ldw	r4,4(sp)
210cae64:	d9400217 	ldw	r5,8(sp)
210cae68:	d9800317 	ldw	r6,12(sp)
210cae6c:	dc400015 	stw	r17,0(sp)
210cae70:	100f883a 	mov	r7,r2
210cae74:	803ee83a 	callr	r16
210cae78:	dfc00617 	ldw	ra,24(sp)
210cae7c:	dc400517 	ldw	r17,20(sp)
210cae80:	dc000417 	ldw	r16,16(sp)
210cae84:	dec00704 	addi	sp,sp,28
210cae88:	f800283a 	ret

210cae8c <__udivdi3>:
210cae8c:	defff504 	addi	sp,sp,-44
210cae90:	dcc00415 	stw	r19,16(sp)
210cae94:	dc000115 	stw	r16,4(sp)
210cae98:	dfc00a15 	stw	ra,40(sp)
210cae9c:	df000915 	stw	fp,36(sp)
210caea0:	ddc00815 	stw	r23,32(sp)
210caea4:	dd800715 	stw	r22,28(sp)
210caea8:	dd400615 	stw	r21,24(sp)
210caeac:	dd000515 	stw	r20,20(sp)
210caeb0:	dc800315 	stw	r18,12(sp)
210caeb4:	dc400215 	stw	r17,8(sp)
210caeb8:	2027883a 	mov	r19,r4
210caebc:	2821883a 	mov	r16,r5
210caec0:	3800421e 	bne	r7,zero,210cafcc <__udivdi3+0x140>
210caec4:	3025883a 	mov	r18,r6
210caec8:	2023883a 	mov	r17,r4
210caecc:	2980542e 	bgeu	r5,r6,210cb020 <__udivdi3+0x194>
210caed0:	00bfffd4 	movui	r2,65535
210caed4:	282d883a 	mov	r22,r5
210caed8:	1180a836 	bltu	r2,r6,210cb17c <__udivdi3+0x2f0>
210caedc:	00803fc4 	movi	r2,255
210caee0:	1181422e 	bgeu	r2,r6,210cb3ec <__udivdi3+0x560>
210caee4:	00800204 	movi	r2,8
210caee8:	1007883a 	mov	r3,r2
210caeec:	3084d83a 	srl	r2,r6,r2
210caef0:	01040034 	movhi	r4,4096
210caef4:	2100e104 	addi	r4,r4,900
210caef8:	2085883a 	add	r2,r4,r2
210caefc:	10800003 	ldbu	r2,0(r2)
210caf00:	10c7883a 	add	r3,r2,r3
210caf04:	00800804 	movi	r2,32
210caf08:	10c5c83a 	sub	r2,r2,r3
210caf0c:	10000526 	beq	r2,zero,210caf24 <__udivdi3+0x98>
210caf10:	80a0983a 	sll	r16,r16,r2
210caf14:	98c6d83a 	srl	r3,r19,r3
210caf18:	30a4983a 	sll	r18,r6,r2
210caf1c:	98a2983a 	sll	r17,r19,r2
210caf20:	80ecb03a 	or	r22,r16,r3
210caf24:	902ad43a 	srli	r21,r18,16
210caf28:	b009883a 	mov	r4,r22
210caf2c:	953fffcc 	andi	r20,r18,65535
210caf30:	a80b883a 	mov	r5,r21
210caf34:	10cbb000 	call	210cbb00 <__umodsi3>
210caf38:	b009883a 	mov	r4,r22
210caf3c:	a80b883a 	mov	r5,r21
210caf40:	1027883a 	mov	r19,r2
210caf44:	10cbaf80 	call	210cbaf8 <__udivsi3>
210caf48:	1021883a 	mov	r16,r2
210caf4c:	8806d43a 	srli	r3,r17,16
210caf50:	9804943a 	slli	r2,r19,16
210caf54:	8527383a 	mul	r19,r16,r20
210caf58:	10c4b03a 	or	r2,r2,r3
210caf5c:	14c0052e 	bgeu	r2,r19,210caf74 <__udivdi3+0xe8>
210caf60:	1485883a 	add	r2,r2,r18
210caf64:	80ffffc4 	addi	r3,r16,-1
210caf68:	14800136 	bltu	r2,r18,210caf70 <__udivdi3+0xe4>
210caf6c:	14c13436 	bltu	r2,r19,210cb440 <__udivdi3+0x5b4>
210caf70:	1821883a 	mov	r16,r3
210caf74:	14e7c83a 	sub	r19,r2,r19
210caf78:	9809883a 	mov	r4,r19
210caf7c:	a80b883a 	mov	r5,r21
210caf80:	10cbb000 	call	210cbb00 <__umodsi3>
210caf84:	102d883a 	mov	r22,r2
210caf88:	9809883a 	mov	r4,r19
210caf8c:	a80b883a 	mov	r5,r21
210caf90:	10cbaf80 	call	210cbaf8 <__udivsi3>
210caf94:	b02c943a 	slli	r22,r22,16
210caf98:	1529383a 	mul	r20,r2,r20
210caf9c:	8c7fffcc 	andi	r17,r17,65535
210cafa0:	b462b03a 	or	r17,r22,r17
210cafa4:	8d00052e 	bgeu	r17,r20,210cafbc <__udivdi3+0x130>
210cafa8:	8ca3883a 	add	r17,r17,r18
210cafac:	10ffffc4 	addi	r3,r2,-1
210cafb0:	8c80f636 	bltu	r17,r18,210cb38c <__udivdi3+0x500>
210cafb4:	8d00f52e 	bgeu	r17,r20,210cb38c <__udivdi3+0x500>
210cafb8:	10bfff84 	addi	r2,r2,-2
210cafbc:	8020943a 	slli	r16,r16,16
210cafc0:	0007883a 	mov	r3,zero
210cafc4:	1404b03a 	or	r2,r2,r16
210cafc8:	00005b06 	br	210cb138 <__udivdi3+0x2ac>
210cafcc:	29c05836 	bltu	r5,r7,210cb130 <__udivdi3+0x2a4>
210cafd0:	00bfffd4 	movui	r2,65535
210cafd4:	11c0642e 	bgeu	r2,r7,210cb168 <__udivdi3+0x2dc>
210cafd8:	00804034 	movhi	r2,256
210cafdc:	10bfffc4 	addi	r2,r2,-1
210cafe0:	11c0f32e 	bgeu	r2,r7,210cb3b0 <__udivdi3+0x524>
210cafe4:	00c00604 	movi	r3,24
210cafe8:	180b883a 	mov	r5,r3
210cafec:	38c6d83a 	srl	r3,r7,r3
210caff0:	00840034 	movhi	r2,4096
210caff4:	1080e104 	addi	r2,r2,900
210caff8:	10c7883a 	add	r3,r2,r3
210caffc:	18c00003 	ldbu	r3,0(r3)
210cb000:	01000804 	movi	r4,32
210cb004:	1947883a 	add	r3,r3,r5
210cb008:	20e5c83a 	sub	r18,r4,r3
210cb00c:	9000661e 	bne	r18,zero,210cb1a8 <__udivdi3+0x31c>
210cb010:	3c00f936 	bltu	r7,r16,210cb3f8 <__udivdi3+0x56c>
210cb014:	9985403a 	cmpgeu	r2,r19,r6
210cb018:	0007883a 	mov	r3,zero
210cb01c:	00004606 	br	210cb138 <__udivdi3+0x2ac>
210cb020:	3000041e 	bne	r6,zero,210cb034 <__udivdi3+0x1a8>
210cb024:	01000044 	movi	r4,1
210cb028:	000b883a 	mov	r5,zero
210cb02c:	10cbaf80 	call	210cbaf8 <__udivsi3>
210cb030:	1025883a 	mov	r18,r2
210cb034:	00bfffd4 	movui	r2,65535
210cb038:	1480562e 	bgeu	r2,r18,210cb194 <__udivdi3+0x308>
210cb03c:	00804034 	movhi	r2,256
210cb040:	10bfffc4 	addi	r2,r2,-1
210cb044:	1480e32e 	bgeu	r2,r18,210cb3d4 <__udivdi3+0x548>
210cb048:	00800604 	movi	r2,24
210cb04c:	1007883a 	mov	r3,r2
210cb050:	9084d83a 	srl	r2,r18,r2
210cb054:	01040034 	movhi	r4,4096
210cb058:	2100e104 	addi	r4,r4,900
210cb05c:	2085883a 	add	r2,r4,r2
210cb060:	10800003 	ldbu	r2,0(r2)
210cb064:	10c5883a 	add	r2,r2,r3
210cb068:	00c00804 	movi	r3,32
210cb06c:	1887c83a 	sub	r3,r3,r2
210cb070:	1800911e 	bne	r3,zero,210cb2b8 <__udivdi3+0x42c>
210cb074:	9028d43a 	srli	r20,r18,16
210cb078:	84a1c83a 	sub	r16,r16,r18
210cb07c:	957fffcc 	andi	r21,r18,65535
210cb080:	00c00044 	movi	r3,1
210cb084:	8009883a 	mov	r4,r16
210cb088:	a00b883a 	mov	r5,r20
210cb08c:	d8c00015 	stw	r3,0(sp)
210cb090:	10cbb000 	call	210cbb00 <__umodsi3>
210cb094:	8009883a 	mov	r4,r16
210cb098:	a00b883a 	mov	r5,r20
210cb09c:	1027883a 	mov	r19,r2
210cb0a0:	10cbaf80 	call	210cbaf8 <__udivsi3>
210cb0a4:	1021883a 	mov	r16,r2
210cb0a8:	880cd43a 	srli	r6,r17,16
210cb0ac:	9804943a 	slli	r2,r19,16
210cb0b0:	8567383a 	mul	r19,r16,r21
210cb0b4:	d8c00017 	ldw	r3,0(sp)
210cb0b8:	1188b03a 	or	r4,r2,r6
210cb0bc:	24c0052e 	bgeu	r4,r19,210cb0d4 <__udivdi3+0x248>
210cb0c0:	2489883a 	add	r4,r4,r18
210cb0c4:	80bfffc4 	addi	r2,r16,-1
210cb0c8:	24800136 	bltu	r4,r18,210cb0d0 <__udivdi3+0x244>
210cb0cc:	24c0d936 	bltu	r4,r19,210cb434 <__udivdi3+0x5a8>
210cb0d0:	1021883a 	mov	r16,r2
210cb0d4:	24e7c83a 	sub	r19,r4,r19
210cb0d8:	9809883a 	mov	r4,r19
210cb0dc:	a00b883a 	mov	r5,r20
210cb0e0:	d8c00015 	stw	r3,0(sp)
210cb0e4:	10cbb000 	call	210cbb00 <__umodsi3>
210cb0e8:	102d883a 	mov	r22,r2
210cb0ec:	9809883a 	mov	r4,r19
210cb0f0:	a00b883a 	mov	r5,r20
210cb0f4:	10cbaf80 	call	210cbaf8 <__udivsi3>
210cb0f8:	b02c943a 	slli	r22,r22,16
210cb0fc:	156b383a 	mul	r21,r2,r21
210cb100:	8c7fffcc 	andi	r17,r17,65535
210cb104:	b462b03a 	or	r17,r22,r17
210cb108:	d8c00017 	ldw	r3,0(sp)
210cb10c:	8d40052e 	bgeu	r17,r21,210cb124 <__udivdi3+0x298>
210cb110:	8ca3883a 	add	r17,r17,r18
210cb114:	113fffc4 	addi	r4,r2,-1
210cb118:	8c809a36 	bltu	r17,r18,210cb384 <__udivdi3+0x4f8>
210cb11c:	8d40992e 	bgeu	r17,r21,210cb384 <__udivdi3+0x4f8>
210cb120:	10bfff84 	addi	r2,r2,-2
210cb124:	8020943a 	slli	r16,r16,16
210cb128:	1404b03a 	or	r2,r2,r16
210cb12c:	00000206 	br	210cb138 <__udivdi3+0x2ac>
210cb130:	0007883a 	mov	r3,zero
210cb134:	0005883a 	mov	r2,zero
210cb138:	dfc00a17 	ldw	ra,40(sp)
210cb13c:	df000917 	ldw	fp,36(sp)
210cb140:	ddc00817 	ldw	r23,32(sp)
210cb144:	dd800717 	ldw	r22,28(sp)
210cb148:	dd400617 	ldw	r21,24(sp)
210cb14c:	dd000517 	ldw	r20,20(sp)
210cb150:	dcc00417 	ldw	r19,16(sp)
210cb154:	dc800317 	ldw	r18,12(sp)
210cb158:	dc400217 	ldw	r17,8(sp)
210cb15c:	dc000117 	ldw	r16,4(sp)
210cb160:	dec00b04 	addi	sp,sp,44
210cb164:	f800283a 	ret
210cb168:	00803fc4 	movi	r2,255
210cb16c:	11c0932e 	bgeu	r2,r7,210cb3bc <__udivdi3+0x530>
210cb170:	00c00204 	movi	r3,8
210cb174:	180b883a 	mov	r5,r3
210cb178:	003f9c06 	br	210cafec <__flash_rwdata_start+0xffff96f4>
210cb17c:	00804034 	movhi	r2,256
210cb180:	10bfffc4 	addi	r2,r2,-1
210cb184:	1180902e 	bgeu	r2,r6,210cb3c8 <__udivdi3+0x53c>
210cb188:	00800604 	movi	r2,24
210cb18c:	1007883a 	mov	r3,r2
210cb190:	003f5606 	br	210caeec <__flash_rwdata_start+0xffff95f4>
210cb194:	00803fc4 	movi	r2,255
210cb198:	1480912e 	bgeu	r2,r18,210cb3e0 <__udivdi3+0x554>
210cb19c:	00800204 	movi	r2,8
210cb1a0:	1007883a 	mov	r3,r2
210cb1a4:	003faa06 	br	210cb050 <__flash_rwdata_start+0xffff9758>
210cb1a8:	30eed83a 	srl	r23,r6,r3
210cb1ac:	3c8e983a 	sll	r7,r7,r18
210cb1b0:	80f8d83a 	srl	fp,r16,r3
210cb1b4:	98c6d83a 	srl	r3,r19,r3
210cb1b8:	3deeb03a 	or	r23,r7,r23
210cb1bc:	b828d43a 	srli	r20,r23,16
210cb1c0:	84a0983a 	sll	r16,r16,r18
210cb1c4:	e009883a 	mov	r4,fp
210cb1c8:	a00b883a 	mov	r5,r20
210cb1cc:	80e2b03a 	or	r17,r16,r3
210cb1d0:	34aa983a 	sll	r21,r6,r18
210cb1d4:	10cbb000 	call	210cbb00 <__umodsi3>
210cb1d8:	e009883a 	mov	r4,fp
210cb1dc:	a00b883a 	mov	r5,r20
210cb1e0:	102d883a 	mov	r22,r2
210cb1e4:	10cbaf80 	call	210cbaf8 <__udivsi3>
210cb1e8:	1021883a 	mov	r16,r2
210cb1ec:	bf3fffcc 	andi	fp,r23,65535
210cb1f0:	b004943a 	slli	r2,r22,16
210cb1f4:	8808d43a 	srli	r4,r17,16
210cb1f8:	872d383a 	mul	r22,r16,fp
210cb1fc:	1104b03a 	or	r2,r2,r4
210cb200:	1580042e 	bgeu	r2,r22,210cb214 <__udivdi3+0x388>
210cb204:	15c5883a 	add	r2,r2,r23
210cb208:	80ffffc4 	addi	r3,r16,-1
210cb20c:	15c0812e 	bgeu	r2,r23,210cb414 <__udivdi3+0x588>
210cb210:	1821883a 	mov	r16,r3
210cb214:	15adc83a 	sub	r22,r2,r22
210cb218:	b009883a 	mov	r4,r22
210cb21c:	a00b883a 	mov	r5,r20
210cb220:	10cbb000 	call	210cbb00 <__umodsi3>
210cb224:	a00b883a 	mov	r5,r20
210cb228:	b009883a 	mov	r4,r22
210cb22c:	d8800015 	stw	r2,0(sp)
210cb230:	10cbaf80 	call	210cbaf8 <__udivsi3>
210cb234:	d8c00017 	ldw	r3,0(sp)
210cb238:	170b383a 	mul	r5,r2,fp
210cb23c:	8c7fffcc 	andi	r17,r17,65535
210cb240:	1806943a 	slli	r3,r3,16
210cb244:	1c46b03a 	or	r3,r3,r17
210cb248:	1940042e 	bgeu	r3,r5,210cb25c <__udivdi3+0x3d0>
210cb24c:	1dc7883a 	add	r3,r3,r23
210cb250:	113fffc4 	addi	r4,r2,-1
210cb254:	1dc06b2e 	bgeu	r3,r23,210cb404 <__udivdi3+0x578>
210cb258:	2005883a 	mov	r2,r4
210cb25c:	8020943a 	slli	r16,r16,16
210cb260:	a9ffffcc 	andi	r7,r21,65535
210cb264:	a82ad43a 	srli	r21,r21,16
210cb268:	1404b03a 	or	r2,r2,r16
210cb26c:	113fffcc 	andi	r4,r2,65535
210cb270:	100cd43a 	srli	r6,r2,16
210cb274:	21d3383a 	mul	r9,r4,r7
210cb278:	2549383a 	mul	r4,r4,r21
210cb27c:	31cf383a 	mul	r7,r6,r7
210cb280:	4810d43a 	srli	r8,r9,16
210cb284:	1947c83a 	sub	r3,r3,r5
210cb288:	3909883a 	add	r4,r7,r4
210cb28c:	2209883a 	add	r4,r4,r8
210cb290:	354d383a 	mul	r6,r6,r21
210cb294:	21c0022e 	bgeu	r4,r7,210cb2a0 <__udivdi3+0x414>
210cb298:	01400074 	movhi	r5,1
210cb29c:	314d883a 	add	r6,r6,r5
210cb2a0:	202ad43a 	srli	r21,r4,16
210cb2a4:	354d883a 	add	r6,r6,r21
210cb2a8:	19803f36 	bltu	r3,r6,210cb3a8 <__udivdi3+0x51c>
210cb2ac:	19803926 	beq	r3,r6,210cb394 <__udivdi3+0x508>
210cb2b0:	0007883a 	mov	r3,zero
210cb2b4:	003fa006 	br	210cb138 <__flash_rwdata_start+0xffff9840>
210cb2b8:	90e4983a 	sll	r18,r18,r3
210cb2bc:	80aad83a 	srl	r21,r16,r2
210cb2c0:	80e0983a 	sll	r16,r16,r3
210cb2c4:	9028d43a 	srli	r20,r18,16
210cb2c8:	9884d83a 	srl	r2,r19,r2
210cb2cc:	a809883a 	mov	r4,r21
210cb2d0:	a00b883a 	mov	r5,r20
210cb2d4:	80acb03a 	or	r22,r16,r2
210cb2d8:	98e2983a 	sll	r17,r19,r3
210cb2dc:	10cbb000 	call	210cbb00 <__umodsi3>
210cb2e0:	a809883a 	mov	r4,r21
210cb2e4:	a00b883a 	mov	r5,r20
210cb2e8:	1021883a 	mov	r16,r2
210cb2ec:	10cbaf80 	call	210cbaf8 <__udivsi3>
210cb2f0:	957fffcc 	andi	r21,r18,65535
210cb2f4:	8020943a 	slli	r16,r16,16
210cb2f8:	b00ad43a 	srli	r5,r22,16
210cb2fc:	1567383a 	mul	r19,r2,r21
210cb300:	102f883a 	mov	r23,r2
210cb304:	8148b03a 	or	r4,r16,r5
210cb308:	24c0062e 	bgeu	r4,r19,210cb324 <__udivdi3+0x498>
210cb30c:	2489883a 	add	r4,r4,r18
210cb310:	10bfffc4 	addi	r2,r2,-1
210cb314:	24804536 	bltu	r4,r18,210cb42c <__udivdi3+0x5a0>
210cb318:	24c0442e 	bgeu	r4,r19,210cb42c <__udivdi3+0x5a0>
210cb31c:	bdffff84 	addi	r23,r23,-2
210cb320:	2489883a 	add	r4,r4,r18
210cb324:	24e7c83a 	sub	r19,r4,r19
210cb328:	9809883a 	mov	r4,r19
210cb32c:	a00b883a 	mov	r5,r20
210cb330:	10cbb000 	call	210cbb00 <__umodsi3>
210cb334:	1021883a 	mov	r16,r2
210cb338:	9809883a 	mov	r4,r19
210cb33c:	a00b883a 	mov	r5,r20
210cb340:	10cbaf80 	call	210cbaf8 <__udivsi3>
210cb344:	8020943a 	slli	r16,r16,16
210cb348:	1007883a 	mov	r3,r2
210cb34c:	1545383a 	mul	r2,r2,r21
210cb350:	b13fffcc 	andi	r4,r22,65535
210cb354:	8108b03a 	or	r4,r16,r4
210cb358:	2080062e 	bgeu	r4,r2,210cb374 <__udivdi3+0x4e8>
210cb35c:	2489883a 	add	r4,r4,r18
210cb360:	197fffc4 	addi	r5,r3,-1
210cb364:	24802f36 	bltu	r4,r18,210cb424 <__udivdi3+0x598>
210cb368:	20802e2e 	bgeu	r4,r2,210cb424 <__udivdi3+0x598>
210cb36c:	18ffff84 	addi	r3,r3,-2
210cb370:	2489883a 	add	r4,r4,r18
210cb374:	b82e943a 	slli	r23,r23,16
210cb378:	20a1c83a 	sub	r16,r4,r2
210cb37c:	1dc6b03a 	or	r3,r3,r23
210cb380:	003f4006 	br	210cb084 <__flash_rwdata_start+0xffff978c>
210cb384:	2005883a 	mov	r2,r4
210cb388:	003f6606 	br	210cb124 <__flash_rwdata_start+0xffff982c>
210cb38c:	1805883a 	mov	r2,r3
210cb390:	003f0a06 	br	210cafbc <__flash_rwdata_start+0xffff96c4>
210cb394:	2006943a 	slli	r3,r4,16
210cb398:	9c88983a 	sll	r4,r19,r18
210cb39c:	4a7fffcc 	andi	r9,r9,65535
210cb3a0:	1a47883a 	add	r3,r3,r9
210cb3a4:	20ffc22e 	bgeu	r4,r3,210cb2b0 <__flash_rwdata_start+0xffff99b8>
210cb3a8:	10bfffc4 	addi	r2,r2,-1
210cb3ac:	003fc006 	br	210cb2b0 <__flash_rwdata_start+0xffff99b8>
210cb3b0:	00c00404 	movi	r3,16
210cb3b4:	180b883a 	mov	r5,r3
210cb3b8:	003f0c06 	br	210cafec <__flash_rwdata_start+0xffff96f4>
210cb3bc:	0007883a 	mov	r3,zero
210cb3c0:	000b883a 	mov	r5,zero
210cb3c4:	003f0906 	br	210cafec <__flash_rwdata_start+0xffff96f4>
210cb3c8:	00800404 	movi	r2,16
210cb3cc:	1007883a 	mov	r3,r2
210cb3d0:	003ec606 	br	210caeec <__flash_rwdata_start+0xffff95f4>
210cb3d4:	00800404 	movi	r2,16
210cb3d8:	1007883a 	mov	r3,r2
210cb3dc:	003f1c06 	br	210cb050 <__flash_rwdata_start+0xffff9758>
210cb3e0:	0005883a 	mov	r2,zero
210cb3e4:	0007883a 	mov	r3,zero
210cb3e8:	003f1906 	br	210cb050 <__flash_rwdata_start+0xffff9758>
210cb3ec:	0005883a 	mov	r2,zero
210cb3f0:	0007883a 	mov	r3,zero
210cb3f4:	003ebd06 	br	210caeec <__flash_rwdata_start+0xffff95f4>
210cb3f8:	0007883a 	mov	r3,zero
210cb3fc:	00800044 	movi	r2,1
210cb400:	003f4d06 	br	210cb138 <__flash_rwdata_start+0xffff9840>
210cb404:	197f942e 	bgeu	r3,r5,210cb258 <__flash_rwdata_start+0xffff9960>
210cb408:	10bfff84 	addi	r2,r2,-2
210cb40c:	1dc7883a 	add	r3,r3,r23
210cb410:	003f9206 	br	210cb25c <__flash_rwdata_start+0xffff9964>
210cb414:	15bf7e2e 	bgeu	r2,r22,210cb210 <__flash_rwdata_start+0xffff9918>
210cb418:	843fff84 	addi	r16,r16,-2
210cb41c:	15c5883a 	add	r2,r2,r23
210cb420:	003f7c06 	br	210cb214 <__flash_rwdata_start+0xffff991c>
210cb424:	2807883a 	mov	r3,r5
210cb428:	003fd206 	br	210cb374 <__flash_rwdata_start+0xffff9a7c>
210cb42c:	102f883a 	mov	r23,r2
210cb430:	003fbc06 	br	210cb324 <__flash_rwdata_start+0xffff9a2c>
210cb434:	843fff84 	addi	r16,r16,-2
210cb438:	2489883a 	add	r4,r4,r18
210cb43c:	003f2506 	br	210cb0d4 <__flash_rwdata_start+0xffff97dc>
210cb440:	843fff84 	addi	r16,r16,-2
210cb444:	1485883a 	add	r2,r2,r18
210cb448:	003eca06 	br	210caf74 <__flash_rwdata_start+0xffff967c>

210cb44c <__umoddi3>:
210cb44c:	defff404 	addi	sp,sp,-48
210cb450:	ddc00915 	stw	r23,36(sp)
210cb454:	dc400315 	stw	r17,12(sp)
210cb458:	dc000215 	stw	r16,8(sp)
210cb45c:	dfc00b15 	stw	ra,44(sp)
210cb460:	df000a15 	stw	fp,40(sp)
210cb464:	dd800815 	stw	r22,32(sp)
210cb468:	dd400715 	stw	r21,28(sp)
210cb46c:	dd000615 	stw	r20,24(sp)
210cb470:	dcc00515 	stw	r19,20(sp)
210cb474:	dc800415 	stw	r18,16(sp)
210cb478:	2021883a 	mov	r16,r4
210cb47c:	2823883a 	mov	r17,r5
210cb480:	282f883a 	mov	r23,r5
210cb484:	3800381e 	bne	r7,zero,210cb568 <__umoddi3+0x11c>
210cb488:	3027883a 	mov	r19,r6
210cb48c:	2029883a 	mov	r20,r4
210cb490:	29804e2e 	bgeu	r5,r6,210cb5cc <__umoddi3+0x180>
210cb494:	00bfffd4 	movui	r2,65535
210cb498:	11809c36 	bltu	r2,r6,210cb70c <__umoddi3+0x2c0>
210cb49c:	00803fc4 	movi	r2,255
210cb4a0:	11813b2e 	bgeu	r2,r6,210cb990 <__umoddi3+0x544>
210cb4a4:	01400204 	movi	r5,8
210cb4a8:	2805883a 	mov	r2,r5
210cb4ac:	314ad83a 	srl	r5,r6,r5
210cb4b0:	00c40034 	movhi	r3,4096
210cb4b4:	18c0e104 	addi	r3,r3,900
210cb4b8:	194b883a 	add	r5,r3,r5
210cb4bc:	29000003 	ldbu	r4,0(r5)
210cb4c0:	2089883a 	add	r4,r4,r2
210cb4c4:	00800804 	movi	r2,32
210cb4c8:	1105c83a 	sub	r2,r2,r4
210cb4cc:	1000ec26 	beq	r2,zero,210cb880 <__umoddi3+0x434>
210cb4d0:	88a2983a 	sll	r17,r17,r2
210cb4d4:	8108d83a 	srl	r4,r16,r4
210cb4d8:	30a6983a 	sll	r19,r6,r2
210cb4dc:	80a8983a 	sll	r20,r16,r2
210cb4e0:	1025883a 	mov	r18,r2
210cb4e4:	892eb03a 	or	r23,r17,r4
210cb4e8:	982cd43a 	srli	r22,r19,16
210cb4ec:	b809883a 	mov	r4,r23
210cb4f0:	9d7fffcc 	andi	r21,r19,65535
210cb4f4:	b00b883a 	mov	r5,r22
210cb4f8:	10cbb000 	call	210cbb00 <__umodsi3>
210cb4fc:	b809883a 	mov	r4,r23
210cb500:	b00b883a 	mov	r5,r22
210cb504:	1021883a 	mov	r16,r2
210cb508:	10cbaf80 	call	210cbaf8 <__udivsi3>
210cb50c:	8020943a 	slli	r16,r16,16
210cb510:	a00cd43a 	srli	r6,r20,16
210cb514:	1545383a 	mul	r2,r2,r21
210cb518:	8188b03a 	or	r4,r16,r6
210cb51c:	2080042e 	bgeu	r4,r2,210cb530 <__umoddi3+0xe4>
210cb520:	24c9883a 	add	r4,r4,r19
210cb524:	24c00236 	bltu	r4,r19,210cb530 <__umoddi3+0xe4>
210cb528:	2080012e 	bgeu	r4,r2,210cb530 <__umoddi3+0xe4>
210cb52c:	24c9883a 	add	r4,r4,r19
210cb530:	20a3c83a 	sub	r17,r4,r2
210cb534:	8809883a 	mov	r4,r17
210cb538:	b00b883a 	mov	r5,r22
210cb53c:	10cbb000 	call	210cbb00 <__umodsi3>
210cb540:	8809883a 	mov	r4,r17
210cb544:	b00b883a 	mov	r5,r22
210cb548:	1021883a 	mov	r16,r2
210cb54c:	10cbaf80 	call	210cbaf8 <__udivsi3>
210cb550:	8006943a 	slli	r3,r16,16
210cb554:	1545383a 	mul	r2,r2,r21
210cb558:	a13fffcc 	andi	r4,r20,65535
210cb55c:	1906b03a 	or	r3,r3,r4
210cb560:	1880532e 	bgeu	r3,r2,210cb6b0 <__umoddi3+0x264>
210cb564:	00004e06 	br	210cb6a0 <__umoddi3+0x254>
210cb568:	29c05536 	bltu	r5,r7,210cb6c0 <__umoddi3+0x274>
210cb56c:	00bfffd4 	movui	r2,65535
210cb570:	11c0612e 	bgeu	r2,r7,210cb6f8 <__umoddi3+0x2ac>
210cb574:	00804034 	movhi	r2,256
210cb578:	10bfffc4 	addi	r2,r2,-1
210cb57c:	11c0f82e 	bgeu	r2,r7,210cb960 <__umoddi3+0x514>
210cb580:	01400604 	movi	r5,24
210cb584:	282b883a 	mov	r21,r5
210cb588:	394ad83a 	srl	r5,r7,r5
210cb58c:	00c40034 	movhi	r3,4096
210cb590:	18c0e104 	addi	r3,r3,900
210cb594:	194b883a 	add	r5,r3,r5
210cb598:	28800003 	ldbu	r2,0(r5)
210cb59c:	00c00804 	movi	r3,32
210cb5a0:	156b883a 	add	r21,r2,r21
210cb5a4:	1d69c83a 	sub	r20,r3,r21
210cb5a8:	a000631e 	bne	r20,zero,210cb738 <__umoddi3+0x2ec>
210cb5ac:	3c400136 	bltu	r7,r17,210cb5b4 <__umoddi3+0x168>
210cb5b0:	81810436 	bltu	r16,r6,210cb9c4 <__umoddi3+0x578>
210cb5b4:	8185c83a 	sub	r2,r16,r6
210cb5b8:	89e3c83a 	sub	r17,r17,r7
210cb5bc:	8087803a 	cmpltu	r3,r16,r2
210cb5c0:	88efc83a 	sub	r23,r17,r3
210cb5c4:	b807883a 	mov	r3,r23
210cb5c8:	00003f06 	br	210cb6c8 <__umoddi3+0x27c>
210cb5cc:	3000041e 	bne	r6,zero,210cb5e0 <__umoddi3+0x194>
210cb5d0:	01000044 	movi	r4,1
210cb5d4:	000b883a 	mov	r5,zero
210cb5d8:	10cbaf80 	call	210cbaf8 <__udivsi3>
210cb5dc:	1027883a 	mov	r19,r2
210cb5e0:	00bfffd4 	movui	r2,65535
210cb5e4:	14c04f2e 	bgeu	r2,r19,210cb724 <__umoddi3+0x2d8>
210cb5e8:	00804034 	movhi	r2,256
210cb5ec:	10bfffc4 	addi	r2,r2,-1
210cb5f0:	14c0e42e 	bgeu	r2,r19,210cb984 <__umoddi3+0x538>
210cb5f4:	00800604 	movi	r2,24
210cb5f8:	1007883a 	mov	r3,r2
210cb5fc:	9884d83a 	srl	r2,r19,r2
210cb600:	01040034 	movhi	r4,4096
210cb604:	2100e104 	addi	r4,r4,900
210cb608:	2085883a 	add	r2,r4,r2
210cb60c:	11000003 	ldbu	r4,0(r2)
210cb610:	00800804 	movi	r2,32
210cb614:	20c7883a 	add	r3,r4,r3
210cb618:	10c5c83a 	sub	r2,r2,r3
210cb61c:	10009a1e 	bne	r2,zero,210cb888 <__umoddi3+0x43c>
210cb620:	982cd43a 	srli	r22,r19,16
210cb624:	8ce3c83a 	sub	r17,r17,r19
210cb628:	9c3fffcc 	andi	r16,r19,65535
210cb62c:	0025883a 	mov	r18,zero
210cb630:	8809883a 	mov	r4,r17
210cb634:	b00b883a 	mov	r5,r22
210cb638:	10cbb000 	call	210cbb00 <__umodsi3>
210cb63c:	8809883a 	mov	r4,r17
210cb640:	b00b883a 	mov	r5,r22
210cb644:	102b883a 	mov	r21,r2
210cb648:	10cbaf80 	call	210cbaf8 <__udivsi3>
210cb64c:	a806943a 	slli	r3,r21,16
210cb650:	a008d43a 	srli	r4,r20,16
210cb654:	1405383a 	mul	r2,r2,r16
210cb658:	190cb03a 	or	r6,r3,r4
210cb65c:	3080032e 	bgeu	r6,r2,210cb66c <__umoddi3+0x220>
210cb660:	34cd883a 	add	r6,r6,r19
210cb664:	34c00136 	bltu	r6,r19,210cb66c <__umoddi3+0x220>
210cb668:	3080d436 	bltu	r6,r2,210cb9bc <__umoddi3+0x570>
210cb66c:	30abc83a 	sub	r21,r6,r2
210cb670:	a809883a 	mov	r4,r21
210cb674:	b00b883a 	mov	r5,r22
210cb678:	10cbb000 	call	210cbb00 <__umodsi3>
210cb67c:	1023883a 	mov	r17,r2
210cb680:	a809883a 	mov	r4,r21
210cb684:	b00b883a 	mov	r5,r22
210cb688:	10cbaf80 	call	210cbaf8 <__udivsi3>
210cb68c:	8822943a 	slli	r17,r17,16
210cb690:	1405383a 	mul	r2,r2,r16
210cb694:	a13fffcc 	andi	r4,r20,65535
210cb698:	8906b03a 	or	r3,r17,r4
210cb69c:	1880042e 	bgeu	r3,r2,210cb6b0 <__umoddi3+0x264>
210cb6a0:	1cc7883a 	add	r3,r3,r19
210cb6a4:	1cc00236 	bltu	r3,r19,210cb6b0 <__umoddi3+0x264>
210cb6a8:	1880012e 	bgeu	r3,r2,210cb6b0 <__umoddi3+0x264>
210cb6ac:	1cc7883a 	add	r3,r3,r19
210cb6b0:	1887c83a 	sub	r3,r3,r2
210cb6b4:	1c84d83a 	srl	r2,r3,r18
210cb6b8:	0007883a 	mov	r3,zero
210cb6bc:	00000206 	br	210cb6c8 <__umoddi3+0x27c>
210cb6c0:	2005883a 	mov	r2,r4
210cb6c4:	2807883a 	mov	r3,r5
210cb6c8:	dfc00b17 	ldw	ra,44(sp)
210cb6cc:	df000a17 	ldw	fp,40(sp)
210cb6d0:	ddc00917 	ldw	r23,36(sp)
210cb6d4:	dd800817 	ldw	r22,32(sp)
210cb6d8:	dd400717 	ldw	r21,28(sp)
210cb6dc:	dd000617 	ldw	r20,24(sp)
210cb6e0:	dcc00517 	ldw	r19,20(sp)
210cb6e4:	dc800417 	ldw	r18,16(sp)
210cb6e8:	dc400317 	ldw	r17,12(sp)
210cb6ec:	dc000217 	ldw	r16,8(sp)
210cb6f0:	dec00c04 	addi	sp,sp,48
210cb6f4:	f800283a 	ret
210cb6f8:	00803fc4 	movi	r2,255
210cb6fc:	11c0952e 	bgeu	r2,r7,210cb954 <__umoddi3+0x508>
210cb700:	01400204 	movi	r5,8
210cb704:	282b883a 	mov	r21,r5
210cb708:	003f9f06 	br	210cb588 <__flash_rwdata_start+0xffff9c90>
210cb70c:	00804034 	movhi	r2,256
210cb710:	10bfffc4 	addi	r2,r2,-1
210cb714:	1180952e 	bgeu	r2,r6,210cb96c <__umoddi3+0x520>
210cb718:	01400604 	movi	r5,24
210cb71c:	2805883a 	mov	r2,r5
210cb720:	003f6206 	br	210cb4ac <__flash_rwdata_start+0xffff9bb4>
210cb724:	00803fc4 	movi	r2,255
210cb728:	14c0932e 	bgeu	r2,r19,210cb978 <__umoddi3+0x52c>
210cb72c:	00800204 	movi	r2,8
210cb730:	1007883a 	mov	r3,r2
210cb734:	003fb106 	br	210cb5fc <__flash_rwdata_start+0xffff9d04>
210cb738:	3548d83a 	srl	r4,r6,r21
210cb73c:	3d0e983a 	sll	r7,r7,r20
210cb740:	8d10983a 	sll	r8,r17,r20
210cb744:	8d6cd83a 	srl	r22,r17,r21
210cb748:	3922b03a 	or	r17,r7,r4
210cb74c:	882ed43a 	srli	r23,r17,16
210cb750:	8564d83a 	srl	r18,r16,r21
210cb754:	b009883a 	mov	r4,r22
210cb758:	b80b883a 	mov	r5,r23
210cb75c:	44a4b03a 	or	r18,r8,r18
210cb760:	3526983a 	sll	r19,r6,r20
210cb764:	10cbb000 	call	210cbb00 <__umodsi3>
210cb768:	b009883a 	mov	r4,r22
210cb76c:	b80b883a 	mov	r5,r23
210cb770:	1039883a 	mov	fp,r2
210cb774:	10cbaf80 	call	210cbaf8 <__udivsi3>
210cb778:	102d883a 	mov	r22,r2
210cb77c:	8a3fffcc 	andi	r8,r17,65535
210cb780:	e004943a 	slli	r2,fp,16
210cb784:	900cd43a 	srli	r6,r18,16
210cb788:	b239383a 	mul	fp,r22,r8
210cb78c:	8520983a 	sll	r16,r16,r20
210cb790:	118ab03a 	or	r5,r2,r6
210cb794:	2f00042e 	bgeu	r5,fp,210cb7a8 <__umoddi3+0x35c>
210cb798:	2c4b883a 	add	r5,r5,r17
210cb79c:	b0bfffc4 	addi	r2,r22,-1
210cb7a0:	2c40822e 	bgeu	r5,r17,210cb9ac <__umoddi3+0x560>
210cb7a4:	102d883a 	mov	r22,r2
210cb7a8:	2f39c83a 	sub	fp,r5,fp
210cb7ac:	e009883a 	mov	r4,fp
210cb7b0:	b80b883a 	mov	r5,r23
210cb7b4:	da000115 	stw	r8,4(sp)
210cb7b8:	10cbb000 	call	210cbb00 <__umodsi3>
210cb7bc:	e009883a 	mov	r4,fp
210cb7c0:	b80b883a 	mov	r5,r23
210cb7c4:	d8800015 	stw	r2,0(sp)
210cb7c8:	10cbaf80 	call	210cbaf8 <__udivsi3>
210cb7cc:	d9800017 	ldw	r6,0(sp)
210cb7d0:	da000117 	ldw	r8,4(sp)
210cb7d4:	94bfffcc 	andi	r18,r18,65535
210cb7d8:	300c943a 	slli	r6,r6,16
210cb7dc:	1209383a 	mul	r4,r2,r8
210cb7e0:	3490b03a 	or	r8,r6,r18
210cb7e4:	4100042e 	bgeu	r8,r4,210cb7f8 <__umoddi3+0x3ac>
210cb7e8:	4451883a 	add	r8,r8,r17
210cb7ec:	10ffffc4 	addi	r3,r2,-1
210cb7f0:	44406a2e 	bgeu	r8,r17,210cb99c <__umoddi3+0x550>
210cb7f4:	1805883a 	mov	r2,r3
210cb7f8:	b012943a 	slli	r9,r22,16
210cb7fc:	9abfffcc 	andi	r10,r19,65535
210cb800:	980ed43a 	srli	r7,r19,16
210cb804:	124ab03a 	or	r5,r2,r9
210cb808:	2a7fffcc 	andi	r9,r5,65535
210cb80c:	280ad43a 	srli	r5,r5,16
210cb810:	4a8d383a 	mul	r6,r9,r10
210cb814:	49d3383a 	mul	r9,r9,r7
210cb818:	2a95383a 	mul	r10,r5,r10
210cb81c:	3004d43a 	srli	r2,r6,16
210cb820:	4111c83a 	sub	r8,r8,r4
210cb824:	5253883a 	add	r9,r10,r9
210cb828:	4893883a 	add	r9,r9,r2
210cb82c:	29cb383a 	mul	r5,r5,r7
210cb830:	4a80022e 	bgeu	r9,r10,210cb83c <__umoddi3+0x3f0>
210cb834:	00800074 	movhi	r2,1
210cb838:	288b883a 	add	r5,r5,r2
210cb83c:	4808d43a 	srli	r4,r9,16
210cb840:	4812943a 	slli	r9,r9,16
210cb844:	31bfffcc 	andi	r6,r6,65535
210cb848:	290b883a 	add	r5,r5,r4
210cb84c:	498d883a 	add	r6,r9,r6
210cb850:	41403a36 	bltu	r8,r5,210cb93c <__umoddi3+0x4f0>
210cb854:	41405d26 	beq	r8,r5,210cb9cc <__umoddi3+0x580>
210cb858:	4149c83a 	sub	r4,r8,r5
210cb85c:	300f883a 	mov	r7,r6
210cb860:	81cfc83a 	sub	r7,r16,r7
210cb864:	81c7803a 	cmpltu	r3,r16,r7
210cb868:	20c7c83a 	sub	r3,r4,r3
210cb86c:	1d44983a 	sll	r2,r3,r21
210cb870:	3d0ed83a 	srl	r7,r7,r20
210cb874:	1d06d83a 	srl	r3,r3,r20
210cb878:	11c4b03a 	or	r2,r2,r7
210cb87c:	003f9206 	br	210cb6c8 <__flash_rwdata_start+0xffff9dd0>
210cb880:	0025883a 	mov	r18,zero
210cb884:	003f1806 	br	210cb4e8 <__flash_rwdata_start+0xffff9bf0>
210cb888:	98a6983a 	sll	r19,r19,r2
210cb88c:	88e8d83a 	srl	r20,r17,r3
210cb890:	80c6d83a 	srl	r3,r16,r3
210cb894:	982cd43a 	srli	r22,r19,16
210cb898:	88a2983a 	sll	r17,r17,r2
210cb89c:	a009883a 	mov	r4,r20
210cb8a0:	b00b883a 	mov	r5,r22
210cb8a4:	88eab03a 	or	r21,r17,r3
210cb8a8:	1025883a 	mov	r18,r2
210cb8ac:	10cbb000 	call	210cbb00 <__umodsi3>
210cb8b0:	a009883a 	mov	r4,r20
210cb8b4:	b00b883a 	mov	r5,r22
210cb8b8:	1023883a 	mov	r17,r2
210cb8bc:	10cbaf80 	call	210cbaf8 <__udivsi3>
210cb8c0:	9f3fffcc 	andi	fp,r19,65535
210cb8c4:	8822943a 	slli	r17,r17,16
210cb8c8:	a80ad43a 	srli	r5,r21,16
210cb8cc:	1705383a 	mul	r2,r2,fp
210cb8d0:	84a8983a 	sll	r20,r16,r18
210cb8d4:	8948b03a 	or	r4,r17,r5
210cb8d8:	2080042e 	bgeu	r4,r2,210cb8ec <__umoddi3+0x4a0>
210cb8dc:	24c9883a 	add	r4,r4,r19
210cb8e0:	24c00236 	bltu	r4,r19,210cb8ec <__umoddi3+0x4a0>
210cb8e4:	2080012e 	bgeu	r4,r2,210cb8ec <__umoddi3+0x4a0>
210cb8e8:	24c9883a 	add	r4,r4,r19
210cb8ec:	20afc83a 	sub	r23,r4,r2
210cb8f0:	b809883a 	mov	r4,r23
210cb8f4:	b00b883a 	mov	r5,r22
210cb8f8:	10cbb000 	call	210cbb00 <__umodsi3>
210cb8fc:	1023883a 	mov	r17,r2
210cb900:	b809883a 	mov	r4,r23
210cb904:	b00b883a 	mov	r5,r22
210cb908:	10cbaf80 	call	210cbaf8 <__udivsi3>
210cb90c:	8822943a 	slli	r17,r17,16
210cb910:	1705383a 	mul	r2,r2,fp
210cb914:	a93fffcc 	andi	r4,r21,65535
210cb918:	8908b03a 	or	r4,r17,r4
210cb91c:	2080042e 	bgeu	r4,r2,210cb930 <__umoddi3+0x4e4>
210cb920:	24c9883a 	add	r4,r4,r19
210cb924:	24c00236 	bltu	r4,r19,210cb930 <__umoddi3+0x4e4>
210cb928:	2080012e 	bgeu	r4,r2,210cb930 <__umoddi3+0x4e4>
210cb92c:	24c9883a 	add	r4,r4,r19
210cb930:	20a3c83a 	sub	r17,r4,r2
210cb934:	e021883a 	mov	r16,fp
210cb938:	003f3d06 	br	210cb630 <__flash_rwdata_start+0xffff9d38>
210cb93c:	34cfc83a 	sub	r7,r6,r19
210cb940:	2c4bc83a 	sub	r5,r5,r17
210cb944:	31cd803a 	cmpltu	r6,r6,r7
210cb948:	298dc83a 	sub	r6,r5,r6
210cb94c:	4189c83a 	sub	r4,r8,r6
210cb950:	003fc306 	br	210cb860 <__flash_rwdata_start+0xffff9f68>
210cb954:	000b883a 	mov	r5,zero
210cb958:	002b883a 	mov	r21,zero
210cb95c:	003f0a06 	br	210cb588 <__flash_rwdata_start+0xffff9c90>
210cb960:	01400404 	movi	r5,16
210cb964:	282b883a 	mov	r21,r5
210cb968:	003f0706 	br	210cb588 <__flash_rwdata_start+0xffff9c90>
210cb96c:	01400404 	movi	r5,16
210cb970:	2805883a 	mov	r2,r5
210cb974:	003ecd06 	br	210cb4ac <__flash_rwdata_start+0xffff9bb4>
210cb978:	0005883a 	mov	r2,zero
210cb97c:	0007883a 	mov	r3,zero
210cb980:	003f1e06 	br	210cb5fc <__flash_rwdata_start+0xffff9d04>
210cb984:	00800404 	movi	r2,16
210cb988:	1007883a 	mov	r3,r2
210cb98c:	003f1b06 	br	210cb5fc <__flash_rwdata_start+0xffff9d04>
210cb990:	000b883a 	mov	r5,zero
210cb994:	0005883a 	mov	r2,zero
210cb998:	003ec406 	br	210cb4ac <__flash_rwdata_start+0xffff9bb4>
210cb99c:	413f952e 	bgeu	r8,r4,210cb7f4 <__flash_rwdata_start+0xffff9efc>
210cb9a0:	10bfff84 	addi	r2,r2,-2
210cb9a4:	4451883a 	add	r8,r8,r17
210cb9a8:	003f9306 	br	210cb7f8 <__flash_rwdata_start+0xffff9f00>
210cb9ac:	2f3f7d2e 	bgeu	r5,fp,210cb7a4 <__flash_rwdata_start+0xffff9eac>
210cb9b0:	b5bfff84 	addi	r22,r22,-2
210cb9b4:	2c4b883a 	add	r5,r5,r17
210cb9b8:	003f7b06 	br	210cb7a8 <__flash_rwdata_start+0xffff9eb0>
210cb9bc:	34cd883a 	add	r6,r6,r19
210cb9c0:	003f2a06 	br	210cb66c <__flash_rwdata_start+0xffff9d74>
210cb9c4:	8005883a 	mov	r2,r16
210cb9c8:	003efe06 	br	210cb5c4 <__flash_rwdata_start+0xffff9ccc>
210cb9cc:	81bfdb36 	bltu	r16,r6,210cb93c <__flash_rwdata_start+0xffffa044>
210cb9d0:	300f883a 	mov	r7,r6
210cb9d4:	0009883a 	mov	r4,zero
210cb9d8:	003fa106 	br	210cb860 <__flash_rwdata_start+0xffff9f68>

210cb9dc <udivmodsi4>:
210cb9dc:	2900182e 	bgeu	r5,r4,210cba40 <udivmodsi4+0x64>
210cb9e0:	28001716 	blt	r5,zero,210cba40 <udivmodsi4+0x64>
210cb9e4:	00800804 	movi	r2,32
210cb9e8:	00c00044 	movi	r3,1
210cb9ec:	00000206 	br	210cb9f8 <udivmodsi4+0x1c>
210cb9f0:	10001126 	beq	r2,zero,210cba38 <udivmodsi4+0x5c>
210cb9f4:	28000516 	blt	r5,zero,210cba0c <udivmodsi4+0x30>
210cb9f8:	294b883a 	add	r5,r5,r5
210cb9fc:	10bfffc4 	addi	r2,r2,-1
210cba00:	18c7883a 	add	r3,r3,r3
210cba04:	293ffa36 	bltu	r5,r4,210cb9f0 <__flash_rwdata_start+0xffffa0f8>
210cba08:	18000b26 	beq	r3,zero,210cba38 <udivmodsi4+0x5c>
210cba0c:	0005883a 	mov	r2,zero
210cba10:	21400236 	bltu	r4,r5,210cba1c <udivmodsi4+0x40>
210cba14:	2149c83a 	sub	r4,r4,r5
210cba18:	10c4b03a 	or	r2,r2,r3
210cba1c:	1806d07a 	srli	r3,r3,1
210cba20:	280ad07a 	srli	r5,r5,1
210cba24:	183ffa1e 	bne	r3,zero,210cba10 <__flash_rwdata_start+0xffffa118>
210cba28:	3000011e 	bne	r6,zero,210cba30 <udivmodsi4+0x54>
210cba2c:	f800283a 	ret
210cba30:	2005883a 	mov	r2,r4
210cba34:	f800283a 	ret
210cba38:	0005883a 	mov	r2,zero
210cba3c:	003ffa06 	br	210cba28 <__flash_rwdata_start+0xffffa130>
210cba40:	00c00044 	movi	r3,1
210cba44:	003ff106 	br	210cba0c <__flash_rwdata_start+0xffffa114>

210cba48 <__divsi3>:
210cba48:	defffe04 	addi	sp,sp,-8
210cba4c:	dfc00115 	stw	ra,4(sp)
210cba50:	dc000015 	stw	r16,0(sp)
210cba54:	20000b16 	blt	r4,zero,210cba84 <__divsi3+0x3c>
210cba58:	0021883a 	mov	r16,zero
210cba5c:	28000c16 	blt	r5,zero,210cba90 <__divsi3+0x48>
210cba60:	000d883a 	mov	r6,zero
210cba64:	10cb9dc0 	call	210cb9dc <udivmodsi4>
210cba68:	0407c83a 	sub	r3,zero,r16
210cba6c:	1884f03a 	xor	r2,r3,r2
210cba70:	1405883a 	add	r2,r2,r16
210cba74:	dfc00117 	ldw	ra,4(sp)
210cba78:	dc000017 	ldw	r16,0(sp)
210cba7c:	dec00204 	addi	sp,sp,8
210cba80:	f800283a 	ret
210cba84:	0109c83a 	sub	r4,zero,r4
210cba88:	04000044 	movi	r16,1
210cba8c:	283ff40e 	bge	r5,zero,210cba60 <__flash_rwdata_start+0xffffa168>
210cba90:	014bc83a 	sub	r5,zero,r5
210cba94:	8400005c 	xori	r16,r16,1
210cba98:	003ff106 	br	210cba60 <__flash_rwdata_start+0xffffa168>

210cba9c <__modsi3>:
210cba9c:	defffd04 	addi	sp,sp,-12
210cbaa0:	dfc00215 	stw	ra,8(sp)
210cbaa4:	dc400115 	stw	r17,4(sp)
210cbaa8:	dc000015 	stw	r16,0(sp)
210cbaac:	20000c16 	blt	r4,zero,210cbae0 <__modsi3+0x44>
210cbab0:	0023883a 	mov	r17,zero
210cbab4:	0021883a 	mov	r16,zero
210cbab8:	28000d16 	blt	r5,zero,210cbaf0 <__modsi3+0x54>
210cbabc:	01800044 	movi	r6,1
210cbac0:	10cb9dc0 	call	210cb9dc <udivmodsi4>
210cbac4:	1404f03a 	xor	r2,r2,r16
210cbac8:	8885883a 	add	r2,r17,r2
210cbacc:	dfc00217 	ldw	ra,8(sp)
210cbad0:	dc400117 	ldw	r17,4(sp)
210cbad4:	dc000017 	ldw	r16,0(sp)
210cbad8:	dec00304 	addi	sp,sp,12
210cbadc:	f800283a 	ret
210cbae0:	0109c83a 	sub	r4,zero,r4
210cbae4:	04400044 	movi	r17,1
210cbae8:	043fffc4 	movi	r16,-1
210cbaec:	283ff30e 	bge	r5,zero,210cbabc <__flash_rwdata_start+0xffffa1c4>
210cbaf0:	014bc83a 	sub	r5,zero,r5
210cbaf4:	003ff106 	br	210cbabc <__flash_rwdata_start+0xffffa1c4>

210cbaf8 <__udivsi3>:
210cbaf8:	000d883a 	mov	r6,zero
210cbafc:	10cb9dc1 	jmpi	210cb9dc <udivmodsi4>

210cbb00 <__umodsi3>:
210cbb00:	01800044 	movi	r6,1
210cbb04:	10cb9dc1 	jmpi	210cb9dc <udivmodsi4>

210cbb08 <__adddf3>:
210cbb08:	02000434 	movhi	r8,16
210cbb0c:	423fffc4 	addi	r8,r8,-1
210cbb10:	defffb04 	addi	sp,sp,-20
210cbb14:	2a12703a 	and	r9,r5,r8
210cbb18:	2806d7fa 	srli	r3,r5,31
210cbb1c:	3a10703a 	and	r8,r7,r8
210cbb20:	3804d53a 	srli	r2,r7,20
210cbb24:	3014d77a 	srli	r10,r6,29
210cbb28:	dc000015 	stw	r16,0(sp)
210cbb2c:	481290fa 	slli	r9,r9,3
210cbb30:	2820d53a 	srli	r16,r5,20
210cbb34:	401090fa 	slli	r8,r8,3
210cbb38:	200ad77a 	srli	r5,r4,29
210cbb3c:	380ed7fa 	srli	r7,r7,31
210cbb40:	dc800215 	stw	r18,8(sp)
210cbb44:	dc400115 	stw	r17,4(sp)
210cbb48:	dfc00415 	stw	ra,16(sp)
210cbb4c:	dcc00315 	stw	r19,12(sp)
210cbb50:	1c803fcc 	andi	r18,r3,255
210cbb54:	8401ffcc 	andi	r16,r16,2047
210cbb58:	494ab03a 	or	r5,r9,r5
210cbb5c:	202290fa 	slli	r17,r4,3
210cbb60:	1081ffcc 	andi	r2,r2,2047
210cbb64:	4290b03a 	or	r8,r8,r10
210cbb68:	300c90fa 	slli	r6,r6,3
210cbb6c:	91c07026 	beq	r18,r7,210cbd30 <__adddf3+0x228>
210cbb70:	8087c83a 	sub	r3,r16,r2
210cbb74:	00c0b30e 	bge	zero,r3,210cbe44 <__adddf3+0x33c>
210cbb78:	10002a1e 	bne	r2,zero,210cbc24 <__adddf3+0x11c>
210cbb7c:	4184b03a 	or	r2,r8,r6
210cbb80:	1000991e 	bne	r2,zero,210cbde8 <__adddf3+0x2e0>
210cbb84:	888001cc 	andi	r2,r17,7
210cbb88:	10005b26 	beq	r2,zero,210cbcf8 <__adddf3+0x1f0>
210cbb8c:	88c003cc 	andi	r3,r17,15
210cbb90:	00800104 	movi	r2,4
210cbb94:	18805826 	beq	r3,r2,210cbcf8 <__adddf3+0x1f0>
210cbb98:	89800104 	addi	r6,r17,4
210cbb9c:	3463803a 	cmpltu	r17,r6,r17
210cbba0:	2c4b883a 	add	r5,r5,r17
210cbba4:	2880202c 	andhi	r2,r5,128
210cbba8:	9007883a 	mov	r3,r18
210cbbac:	3023883a 	mov	r17,r6
210cbbb0:	10005426 	beq	r2,zero,210cbd04 <__adddf3+0x1fc>
210cbbb4:	84000044 	addi	r16,r16,1
210cbbb8:	0081ffc4 	movi	r2,2047
210cbbbc:	8080c126 	beq	r16,r2,210cbec4 <__adddf3+0x3bc>
210cbbc0:	013fe034 	movhi	r4,65408
210cbbc4:	213fffc4 	addi	r4,r4,-1
210cbbc8:	290a703a 	and	r5,r5,r4
210cbbcc:	2804977a 	slli	r2,r5,29
210cbbd0:	280a927a 	slli	r5,r5,9
210cbbd4:	8822d0fa 	srli	r17,r17,3
210cbbd8:	8401ffcc 	andi	r16,r16,2047
210cbbdc:	2808d33a 	srli	r4,r5,12
210cbbe0:	1444b03a 	or	r2,r2,r17
210cbbe4:	8401ffcc 	andi	r16,r16,2047
210cbbe8:	800a953a 	slli	r5,r16,20
210cbbec:	18c03fcc 	andi	r3,r3,255
210cbbf0:	04000434 	movhi	r16,16
210cbbf4:	180697fa 	slli	r3,r3,31
210cbbf8:	843fffc4 	addi	r16,r16,-1
210cbbfc:	2420703a 	and	r16,r4,r16
210cbc00:	8160b03a 	or	r16,r16,r5
210cbc04:	80c6b03a 	or	r3,r16,r3
210cbc08:	dfc00417 	ldw	ra,16(sp)
210cbc0c:	dcc00317 	ldw	r19,12(sp)
210cbc10:	dc800217 	ldw	r18,8(sp)
210cbc14:	dc400117 	ldw	r17,4(sp)
210cbc18:	dc000017 	ldw	r16,0(sp)
210cbc1c:	dec00504 	addi	sp,sp,20
210cbc20:	f800283a 	ret
210cbc24:	0081ffc4 	movi	r2,2047
210cbc28:	80bfd626 	beq	r16,r2,210cbb84 <__flash_rwdata_start+0xffffa28c>
210cbc2c:	42002034 	orhi	r8,r8,128
210cbc30:	00800e04 	movi	r2,56
210cbc34:	10c0a616 	blt	r2,r3,210cbed0 <__adddf3+0x3c8>
210cbc38:	008007c4 	movi	r2,31
210cbc3c:	10c0c916 	blt	r2,r3,210cbf64 <__adddf3+0x45c>
210cbc40:	00800804 	movi	r2,32
210cbc44:	10c5c83a 	sub	r2,r2,r3
210cbc48:	408e983a 	sll	r7,r8,r2
210cbc4c:	30c8d83a 	srl	r4,r6,r3
210cbc50:	3084983a 	sll	r2,r6,r2
210cbc54:	40c6d83a 	srl	r3,r8,r3
210cbc58:	390cb03a 	or	r6,r7,r4
210cbc5c:	1004c03a 	cmpne	r2,r2,zero
210cbc60:	308cb03a 	or	r6,r6,r2
210cbc64:	898dc83a 	sub	r6,r17,r6
210cbc68:	89a3803a 	cmpltu	r17,r17,r6
210cbc6c:	28cbc83a 	sub	r5,r5,r3
210cbc70:	2c4bc83a 	sub	r5,r5,r17
210cbc74:	3023883a 	mov	r17,r6
210cbc78:	2880202c 	andhi	r2,r5,128
210cbc7c:	10006d26 	beq	r2,zero,210cbe34 <__adddf3+0x32c>
210cbc80:	04c02034 	movhi	r19,128
210cbc84:	9cffffc4 	addi	r19,r19,-1
210cbc88:	2ce6703a 	and	r19,r5,r19
210cbc8c:	98007e26 	beq	r19,zero,210cbe88 <__adddf3+0x380>
210cbc90:	9809883a 	mov	r4,r19
210cbc94:	10ce0a40 	call	210ce0a4 <__clzsi2>
210cbc98:	10fffe04 	addi	r3,r2,-8
210cbc9c:	010007c4 	movi	r4,31
210cbca0:	20c07f16 	blt	r4,r3,210cbea0 <__adddf3+0x398>
210cbca4:	01400a04 	movi	r5,40
210cbca8:	2885c83a 	sub	r2,r5,r2
210cbcac:	888ad83a 	srl	r5,r17,r2
210cbcb0:	98e6983a 	sll	r19,r19,r3
210cbcb4:	88e2983a 	sll	r17,r17,r3
210cbcb8:	2ce6b03a 	or	r19,r5,r19
210cbcbc:	1c007c16 	blt	r3,r16,210cbeb0 <__adddf3+0x3a8>
210cbcc0:	1c21c83a 	sub	r16,r3,r16
210cbcc4:	81400044 	addi	r5,r16,1
210cbcc8:	00c007c4 	movi	r3,31
210cbccc:	19409816 	blt	r3,r5,210cbf30 <__adddf3+0x428>
210cbcd0:	1c21c83a 	sub	r16,r3,r16
210cbcd4:	8c08983a 	sll	r4,r17,r16
210cbcd8:	8946d83a 	srl	r3,r17,r5
210cbcdc:	9c20983a 	sll	r16,r19,r16
210cbce0:	2008c03a 	cmpne	r4,r4,zero
210cbce4:	994ad83a 	srl	r5,r19,r5
210cbce8:	1c06b03a 	or	r3,r3,r16
210cbcec:	1922b03a 	or	r17,r3,r4
210cbcf0:	0021883a 	mov	r16,zero
210cbcf4:	003fa306 	br	210cbb84 <__flash_rwdata_start+0xffffa28c>
210cbcf8:	2880202c 	andhi	r2,r5,128
210cbcfc:	9007883a 	mov	r3,r18
210cbd00:	103fac1e 	bne	r2,zero,210cbbb4 <__flash_rwdata_start+0xffffa2bc>
210cbd04:	2804977a 	slli	r2,r5,29
210cbd08:	8822d0fa 	srli	r17,r17,3
210cbd0c:	0101ffc4 	movi	r4,2047
210cbd10:	280ad0fa 	srli	r5,r5,3
210cbd14:	1444b03a 	or	r2,r2,r17
210cbd18:	81002c26 	beq	r16,r4,210cbdcc <__adddf3+0x2c4>
210cbd1c:	8120703a 	and	r16,r16,r4
210cbd20:	01000434 	movhi	r4,16
210cbd24:	213fffc4 	addi	r4,r4,-1
210cbd28:	2908703a 	and	r4,r5,r4
210cbd2c:	003fad06 	br	210cbbe4 <__flash_rwdata_start+0xffffa2ec>
210cbd30:	8089c83a 	sub	r4,r16,r2
210cbd34:	01006a0e 	bge	zero,r4,210cbee0 <__adddf3+0x3d8>
210cbd38:	10003326 	beq	r2,zero,210cbe08 <__adddf3+0x300>
210cbd3c:	0081ffc4 	movi	r2,2047
210cbd40:	80bf9026 	beq	r16,r2,210cbb84 <__flash_rwdata_start+0xffffa28c>
210cbd44:	42002034 	orhi	r8,r8,128
210cbd48:	00800e04 	movi	r2,56
210cbd4c:	1100b116 	blt	r2,r4,210cc014 <__adddf3+0x50c>
210cbd50:	008007c4 	movi	r2,31
210cbd54:	1100e216 	blt	r2,r4,210cc0e0 <__adddf3+0x5d8>
210cbd58:	00800804 	movi	r2,32
210cbd5c:	1105c83a 	sub	r2,r2,r4
210cbd60:	4092983a 	sll	r9,r8,r2
210cbd64:	310ed83a 	srl	r7,r6,r4
210cbd68:	3084983a 	sll	r2,r6,r2
210cbd6c:	4110d83a 	srl	r8,r8,r4
210cbd70:	49ccb03a 	or	r6,r9,r7
210cbd74:	1004c03a 	cmpne	r2,r2,zero
210cbd78:	308cb03a 	or	r6,r6,r2
210cbd7c:	344d883a 	add	r6,r6,r17
210cbd80:	3463803a 	cmpltu	r17,r6,r17
210cbd84:	414b883a 	add	r5,r8,r5
210cbd88:	2c4b883a 	add	r5,r5,r17
210cbd8c:	3023883a 	mov	r17,r6
210cbd90:	2880202c 	andhi	r2,r5,128
210cbd94:	10002726 	beq	r2,zero,210cbe34 <__adddf3+0x32c>
210cbd98:	84000044 	addi	r16,r16,1
210cbd9c:	0081ffc4 	movi	r2,2047
210cbda0:	8080ae26 	beq	r16,r2,210cc05c <__adddf3+0x554>
210cbda4:	00bfe034 	movhi	r2,65408
210cbda8:	10bfffc4 	addi	r2,r2,-1
210cbdac:	288a703a 	and	r5,r5,r2
210cbdb0:	880cd07a 	srli	r6,r17,1
210cbdb4:	280897fa 	slli	r4,r5,31
210cbdb8:	88c0004c 	andi	r3,r17,1
210cbdbc:	30e2b03a 	or	r17,r6,r3
210cbdc0:	280ad07a 	srli	r5,r5,1
210cbdc4:	8922b03a 	or	r17,r17,r4
210cbdc8:	003f6e06 	br	210cbb84 <__flash_rwdata_start+0xffffa28c>
210cbdcc:	1148b03a 	or	r4,r2,r5
210cbdd0:	20003c26 	beq	r4,zero,210cbec4 <__adddf3+0x3bc>
210cbdd4:	29000234 	orhi	r4,r5,8
210cbdd8:	01400434 	movhi	r5,16
210cbddc:	297fffc4 	addi	r5,r5,-1
210cbde0:	2148703a 	and	r4,r4,r5
210cbde4:	003f7f06 	br	210cbbe4 <__flash_rwdata_start+0xffffa2ec>
210cbde8:	18ffffc4 	addi	r3,r3,-1
210cbdec:	18004d1e 	bne	r3,zero,210cbf24 <__adddf3+0x41c>
210cbdf0:	898dc83a 	sub	r6,r17,r6
210cbdf4:	89a3803a 	cmpltu	r17,r17,r6
210cbdf8:	2a0bc83a 	sub	r5,r5,r8
210cbdfc:	2c4bc83a 	sub	r5,r5,r17
210cbe00:	3023883a 	mov	r17,r6
210cbe04:	003f9c06 	br	210cbc78 <__flash_rwdata_start+0xffffa380>
210cbe08:	4184b03a 	or	r2,r8,r6
210cbe0c:	103f5d26 	beq	r2,zero,210cbb84 <__flash_rwdata_start+0xffffa28c>
210cbe10:	213fffc4 	addi	r4,r4,-1
210cbe14:	203fd926 	beq	r4,zero,210cbd7c <__flash_rwdata_start+0xffffa484>
210cbe18:	0081ffc4 	movi	r2,2047
210cbe1c:	80bfca1e 	bne	r16,r2,210cbd48 <__flash_rwdata_start+0xffffa450>
210cbe20:	003f5806 	br	210cbb84 <__flash_rwdata_start+0xffffa28c>
210cbe24:	10c8b03a 	or	r4,r2,r3
210cbe28:	20008b26 	beq	r4,zero,210cc058 <__adddf3+0x550>
210cbe2c:	100b883a 	mov	r5,r2
210cbe30:	1823883a 	mov	r17,r3
210cbe34:	888001cc 	andi	r2,r17,7
210cbe38:	103f541e 	bne	r2,zero,210cbb8c <__flash_rwdata_start+0xffffa294>
210cbe3c:	9007883a 	mov	r3,r18
210cbe40:	003fb006 	br	210cbd04 <__flash_rwdata_start+0xffffa40c>
210cbe44:	1800531e 	bne	r3,zero,210cbf94 <__adddf3+0x48c>
210cbe48:	80800044 	addi	r2,r16,1
210cbe4c:	1081ffcc 	andi	r2,r2,2047
210cbe50:	00c00044 	movi	r3,1
210cbe54:	1880990e 	bge	r3,r2,210cc0bc <__adddf3+0x5b4>
210cbe58:	8985c83a 	sub	r2,r17,r6
210cbe5c:	8887803a 	cmpltu	r3,r17,r2
210cbe60:	2a27c83a 	sub	r19,r5,r8
210cbe64:	98e7c83a 	sub	r19,r19,r3
210cbe68:	98c0202c 	andhi	r3,r19,128
210cbe6c:	18006226 	beq	r3,zero,210cbff8 <__adddf3+0x4f0>
210cbe70:	3463c83a 	sub	r17,r6,r17
210cbe74:	4151c83a 	sub	r8,r8,r5
210cbe78:	344d803a 	cmpltu	r6,r6,r17
210cbe7c:	41a7c83a 	sub	r19,r8,r6
210cbe80:	3825883a 	mov	r18,r7
210cbe84:	983f821e 	bne	r19,zero,210cbc90 <__flash_rwdata_start+0xffffa398>
210cbe88:	8809883a 	mov	r4,r17
210cbe8c:	10ce0a40 	call	210ce0a4 <__clzsi2>
210cbe90:	10800804 	addi	r2,r2,32
210cbe94:	10fffe04 	addi	r3,r2,-8
210cbe98:	010007c4 	movi	r4,31
210cbe9c:	20ff810e 	bge	r4,r3,210cbca4 <__flash_rwdata_start+0xffffa3ac>
210cbea0:	14fff604 	addi	r19,r2,-40
210cbea4:	8ce6983a 	sll	r19,r17,r19
210cbea8:	0023883a 	mov	r17,zero
210cbeac:	1c3f840e 	bge	r3,r16,210cbcc0 <__flash_rwdata_start+0xffffa3c8>
210cbeb0:	017fe034 	movhi	r5,65408
210cbeb4:	297fffc4 	addi	r5,r5,-1
210cbeb8:	80e1c83a 	sub	r16,r16,r3
210cbebc:	994a703a 	and	r5,r19,r5
210cbec0:	003f3006 	br	210cbb84 <__flash_rwdata_start+0xffffa28c>
210cbec4:	0009883a 	mov	r4,zero
210cbec8:	0005883a 	mov	r2,zero
210cbecc:	003f4506 	br	210cbbe4 <__flash_rwdata_start+0xffffa2ec>
210cbed0:	418cb03a 	or	r6,r8,r6
210cbed4:	300cc03a 	cmpne	r6,r6,zero
210cbed8:	0007883a 	mov	r3,zero
210cbedc:	003f6106 	br	210cbc64 <__flash_rwdata_start+0xffffa36c>
210cbee0:	2000921e 	bne	r4,zero,210cc12c <__adddf3+0x624>
210cbee4:	80800044 	addi	r2,r16,1
210cbee8:	11c1ffcc 	andi	r7,r2,2047
210cbeec:	01000044 	movi	r4,1
210cbef0:	21c0610e 	bge	r4,r7,210cc078 <__adddf3+0x570>
210cbef4:	0101ffc4 	movi	r4,2047
210cbef8:	1100a326 	beq	r2,r4,210cc188 <__adddf3+0x680>
210cbefc:	344d883a 	add	r6,r6,r17
210cbf00:	3463803a 	cmpltu	r17,r6,r17
210cbf04:	414b883a 	add	r5,r8,r5
210cbf08:	2c4b883a 	add	r5,r5,r17
210cbf0c:	282297fa 	slli	r17,r5,31
210cbf10:	300cd07a 	srli	r6,r6,1
210cbf14:	280ad07a 	srli	r5,r5,1
210cbf18:	1021883a 	mov	r16,r2
210cbf1c:	89a2b03a 	or	r17,r17,r6
210cbf20:	003f1806 	br	210cbb84 <__flash_rwdata_start+0xffffa28c>
210cbf24:	0081ffc4 	movi	r2,2047
210cbf28:	80bf411e 	bne	r16,r2,210cbc30 <__flash_rwdata_start+0xffffa338>
210cbf2c:	003f1506 	br	210cbb84 <__flash_rwdata_start+0xffffa28c>
210cbf30:	80bff844 	addi	r2,r16,-31
210cbf34:	00c00804 	movi	r3,32
210cbf38:	9884d83a 	srl	r2,r19,r2
210cbf3c:	28c04a26 	beq	r5,r3,210cc068 <__adddf3+0x560>
210cbf40:	00c00fc4 	movi	r3,63
210cbf44:	1c21c83a 	sub	r16,r3,r16
210cbf48:	9c26983a 	sll	r19,r19,r16
210cbf4c:	9c62b03a 	or	r17,r19,r17
210cbf50:	8822c03a 	cmpne	r17,r17,zero
210cbf54:	88a2b03a 	or	r17,r17,r2
210cbf58:	000b883a 	mov	r5,zero
210cbf5c:	0021883a 	mov	r16,zero
210cbf60:	003fb406 	br	210cbe34 <__flash_rwdata_start+0xffffa53c>
210cbf64:	18bff804 	addi	r2,r3,-32
210cbf68:	01000804 	movi	r4,32
210cbf6c:	4084d83a 	srl	r2,r8,r2
210cbf70:	19003f26 	beq	r3,r4,210cc070 <__adddf3+0x568>
210cbf74:	01001004 	movi	r4,64
210cbf78:	20c7c83a 	sub	r3,r4,r3
210cbf7c:	40d0983a 	sll	r8,r8,r3
210cbf80:	418cb03a 	or	r6,r8,r6
210cbf84:	300cc03a 	cmpne	r6,r6,zero
210cbf88:	308cb03a 	or	r6,r6,r2
210cbf8c:	0007883a 	mov	r3,zero
210cbf90:	003f3406 	br	210cbc64 <__flash_rwdata_start+0xffffa36c>
210cbf94:	80002326 	beq	r16,zero,210cc024 <__adddf3+0x51c>
210cbf98:	0101ffc4 	movi	r4,2047
210cbf9c:	11005e26 	beq	r2,r4,210cc118 <__adddf3+0x610>
210cbfa0:	00c7c83a 	sub	r3,zero,r3
210cbfa4:	29402034 	orhi	r5,r5,128
210cbfa8:	01000e04 	movi	r4,56
210cbfac:	20c07216 	blt	r4,r3,210cc178 <__adddf3+0x670>
210cbfb0:	010007c4 	movi	r4,31
210cbfb4:	20c0ce16 	blt	r4,r3,210cc2f0 <__adddf3+0x7e8>
210cbfb8:	01000804 	movi	r4,32
210cbfbc:	20c9c83a 	sub	r4,r4,r3
210cbfc0:	2914983a 	sll	r10,r5,r4
210cbfc4:	88d2d83a 	srl	r9,r17,r3
210cbfc8:	8908983a 	sll	r4,r17,r4
210cbfcc:	28c6d83a 	srl	r3,r5,r3
210cbfd0:	5262b03a 	or	r17,r10,r9
210cbfd4:	2008c03a 	cmpne	r4,r4,zero
210cbfd8:	8922b03a 	or	r17,r17,r4
210cbfdc:	3463c83a 	sub	r17,r6,r17
210cbfe0:	40c7c83a 	sub	r3,r8,r3
210cbfe4:	344d803a 	cmpltu	r6,r6,r17
210cbfe8:	198bc83a 	sub	r5,r3,r6
210cbfec:	1021883a 	mov	r16,r2
210cbff0:	3825883a 	mov	r18,r7
210cbff4:	003f2006 	br	210cbc78 <__flash_rwdata_start+0xffffa380>
210cbff8:	9886b03a 	or	r3,r19,r2
210cbffc:	1800141e 	bne	r3,zero,210cc050 <__adddf3+0x548>
210cc000:	0007883a 	mov	r3,zero
210cc004:	000b883a 	mov	r5,zero
210cc008:	0023883a 	mov	r17,zero
210cc00c:	0021883a 	mov	r16,zero
210cc010:	003f3c06 	br	210cbd04 <__flash_rwdata_start+0xffffa40c>
210cc014:	418cb03a 	or	r6,r8,r6
210cc018:	300cc03a 	cmpne	r6,r6,zero
210cc01c:	0011883a 	mov	r8,zero
210cc020:	003f5606 	br	210cbd7c <__flash_rwdata_start+0xffffa484>
210cc024:	2c48b03a 	or	r4,r5,r17
210cc028:	20003b26 	beq	r4,zero,210cc118 <__adddf3+0x610>
210cc02c:	00c6303a 	nor	r3,zero,r3
210cc030:	1800371e 	bne	r3,zero,210cc110 <__adddf3+0x608>
210cc034:	3463c83a 	sub	r17,r6,r17
210cc038:	414bc83a 	sub	r5,r8,r5
210cc03c:	344d803a 	cmpltu	r6,r6,r17
210cc040:	298bc83a 	sub	r5,r5,r6
210cc044:	1021883a 	mov	r16,r2
210cc048:	3825883a 	mov	r18,r7
210cc04c:	003f0a06 	br	210cbc78 <__flash_rwdata_start+0xffffa380>
210cc050:	1023883a 	mov	r17,r2
210cc054:	003f0d06 	br	210cbc8c <__flash_rwdata_start+0xffffa394>
210cc058:	0007883a 	mov	r3,zero
210cc05c:	000b883a 	mov	r5,zero
210cc060:	0023883a 	mov	r17,zero
210cc064:	003f2706 	br	210cbd04 <__flash_rwdata_start+0xffffa40c>
210cc068:	0027883a 	mov	r19,zero
210cc06c:	003fb706 	br	210cbf4c <__flash_rwdata_start+0xffffa654>
210cc070:	0011883a 	mov	r8,zero
210cc074:	003fc206 	br	210cbf80 <__flash_rwdata_start+0xffffa688>
210cc078:	2c44b03a 	or	r2,r5,r17
210cc07c:	8000871e 	bne	r16,zero,210cc29c <__adddf3+0x794>
210cc080:	1000b126 	beq	r2,zero,210cc348 <__adddf3+0x840>
210cc084:	4184b03a 	or	r2,r8,r6
210cc088:	103ebe26 	beq	r2,zero,210cbb84 <__flash_rwdata_start+0xffffa28c>
210cc08c:	3445883a 	add	r2,r6,r17
210cc090:	1463803a 	cmpltu	r17,r2,r17
210cc094:	414b883a 	add	r5,r8,r5
210cc098:	2c4b883a 	add	r5,r5,r17
210cc09c:	28c0202c 	andhi	r3,r5,128
210cc0a0:	1023883a 	mov	r17,r2
210cc0a4:	183f6326 	beq	r3,zero,210cbe34 <__flash_rwdata_start+0xffffa53c>
210cc0a8:	00bfe034 	movhi	r2,65408
210cc0ac:	10bfffc4 	addi	r2,r2,-1
210cc0b0:	2021883a 	mov	r16,r4
210cc0b4:	288a703a 	and	r5,r5,r2
210cc0b8:	003eb206 	br	210cbb84 <__flash_rwdata_start+0xffffa28c>
210cc0bc:	2c44b03a 	or	r2,r5,r17
210cc0c0:	8000251e 	bne	r16,zero,210cc158 <__adddf3+0x650>
210cc0c4:	10004b1e 	bne	r2,zero,210cc1f4 <__adddf3+0x6ec>
210cc0c8:	4184b03a 	or	r2,r8,r6
210cc0cc:	103fe226 	beq	r2,zero,210cc058 <__flash_rwdata_start+0xffffa760>
210cc0d0:	400b883a 	mov	r5,r8
210cc0d4:	3023883a 	mov	r17,r6
210cc0d8:	3825883a 	mov	r18,r7
210cc0dc:	003ea906 	br	210cbb84 <__flash_rwdata_start+0xffffa28c>
210cc0e0:	20bff804 	addi	r2,r4,-32
210cc0e4:	01c00804 	movi	r7,32
210cc0e8:	4084d83a 	srl	r2,r8,r2
210cc0ec:	21c07e26 	beq	r4,r7,210cc2e8 <__adddf3+0x7e0>
210cc0f0:	01c01004 	movi	r7,64
210cc0f4:	3909c83a 	sub	r4,r7,r4
210cc0f8:	4110983a 	sll	r8,r8,r4
210cc0fc:	418cb03a 	or	r6,r8,r6
210cc100:	300cc03a 	cmpne	r6,r6,zero
210cc104:	308cb03a 	or	r6,r6,r2
210cc108:	0011883a 	mov	r8,zero
210cc10c:	003f1b06 	br	210cbd7c <__flash_rwdata_start+0xffffa484>
210cc110:	0101ffc4 	movi	r4,2047
210cc114:	113fa41e 	bne	r2,r4,210cbfa8 <__flash_rwdata_start+0xffffa6b0>
210cc118:	400b883a 	mov	r5,r8
210cc11c:	3023883a 	mov	r17,r6
210cc120:	1021883a 	mov	r16,r2
210cc124:	3825883a 	mov	r18,r7
210cc128:	003e9606 	br	210cbb84 <__flash_rwdata_start+0xffffa28c>
210cc12c:	80001a1e 	bne	r16,zero,210cc198 <__adddf3+0x690>
210cc130:	2c4eb03a 	or	r7,r5,r17
210cc134:	38005526 	beq	r7,zero,210cc28c <__adddf3+0x784>
210cc138:	0108303a 	nor	r4,zero,r4
210cc13c:	2000511e 	bne	r4,zero,210cc284 <__adddf3+0x77c>
210cc140:	89a3883a 	add	r17,r17,r6
210cc144:	414b883a 	add	r5,r8,r5
210cc148:	898d803a 	cmpltu	r6,r17,r6
210cc14c:	298b883a 	add	r5,r5,r6
210cc150:	1021883a 	mov	r16,r2
210cc154:	003f0e06 	br	210cbd90 <__flash_rwdata_start+0xffffa498>
210cc158:	1000341e 	bne	r2,zero,210cc22c <__adddf3+0x724>
210cc15c:	4184b03a 	or	r2,r8,r6
210cc160:	10006f26 	beq	r2,zero,210cc320 <__adddf3+0x818>
210cc164:	400b883a 	mov	r5,r8
210cc168:	3023883a 	mov	r17,r6
210cc16c:	3825883a 	mov	r18,r7
210cc170:	0401ffc4 	movi	r16,2047
210cc174:	003e8306 	br	210cbb84 <__flash_rwdata_start+0xffffa28c>
210cc178:	2c62b03a 	or	r17,r5,r17
210cc17c:	8822c03a 	cmpne	r17,r17,zero
210cc180:	0007883a 	mov	r3,zero
210cc184:	003f9506 	br	210cbfdc <__flash_rwdata_start+0xffffa6e4>
210cc188:	1021883a 	mov	r16,r2
210cc18c:	000b883a 	mov	r5,zero
210cc190:	0023883a 	mov	r17,zero
210cc194:	003edb06 	br	210cbd04 <__flash_rwdata_start+0xffffa40c>
210cc198:	01c1ffc4 	movi	r7,2047
210cc19c:	11c03b26 	beq	r2,r7,210cc28c <__adddf3+0x784>
210cc1a0:	0109c83a 	sub	r4,zero,r4
210cc1a4:	29402034 	orhi	r5,r5,128
210cc1a8:	01c00e04 	movi	r7,56
210cc1ac:	39006216 	blt	r7,r4,210cc338 <__adddf3+0x830>
210cc1b0:	01c007c4 	movi	r7,31
210cc1b4:	39006b16 	blt	r7,r4,210cc364 <__adddf3+0x85c>
210cc1b8:	01c00804 	movi	r7,32
210cc1bc:	390fc83a 	sub	r7,r7,r4
210cc1c0:	29d4983a 	sll	r10,r5,r7
210cc1c4:	8912d83a 	srl	r9,r17,r4
210cc1c8:	89ce983a 	sll	r7,r17,r7
210cc1cc:	2908d83a 	srl	r4,r5,r4
210cc1d0:	5262b03a 	or	r17,r10,r9
210cc1d4:	380ac03a 	cmpne	r5,r7,zero
210cc1d8:	8962b03a 	or	r17,r17,r5
210cc1dc:	89a3883a 	add	r17,r17,r6
210cc1e0:	2211883a 	add	r8,r4,r8
210cc1e4:	898d803a 	cmpltu	r6,r17,r6
210cc1e8:	418b883a 	add	r5,r8,r6
210cc1ec:	1021883a 	mov	r16,r2
210cc1f0:	003ee706 	br	210cbd90 <__flash_rwdata_start+0xffffa498>
210cc1f4:	4184b03a 	or	r2,r8,r6
210cc1f8:	103e6226 	beq	r2,zero,210cbb84 <__flash_rwdata_start+0xffffa28c>
210cc1fc:	8987c83a 	sub	r3,r17,r6
210cc200:	88c9803a 	cmpltu	r4,r17,r3
210cc204:	2a05c83a 	sub	r2,r5,r8
210cc208:	1105c83a 	sub	r2,r2,r4
210cc20c:	1100202c 	andhi	r4,r2,128
210cc210:	203f0426 	beq	r4,zero,210cbe24 <__flash_rwdata_start+0xffffa52c>
210cc214:	3463c83a 	sub	r17,r6,r17
210cc218:	414bc83a 	sub	r5,r8,r5
210cc21c:	344d803a 	cmpltu	r6,r6,r17
210cc220:	298bc83a 	sub	r5,r5,r6
210cc224:	3825883a 	mov	r18,r7
210cc228:	003e5606 	br	210cbb84 <__flash_rwdata_start+0xffffa28c>
210cc22c:	4184b03a 	or	r2,r8,r6
210cc230:	10002b26 	beq	r2,zero,210cc2e0 <__adddf3+0x7d8>
210cc234:	2804d0fa 	srli	r2,r5,3
210cc238:	8822d0fa 	srli	r17,r17,3
210cc23c:	280a977a 	slli	r5,r5,29
210cc240:	10c0022c 	andhi	r3,r2,8
210cc244:	2c62b03a 	or	r17,r5,r17
210cc248:	18000826 	beq	r3,zero,210cc26c <__adddf3+0x764>
210cc24c:	4008d0fa 	srli	r4,r8,3
210cc250:	20c0022c 	andhi	r3,r4,8
210cc254:	1800051e 	bne	r3,zero,210cc26c <__adddf3+0x764>
210cc258:	300cd0fa 	srli	r6,r6,3
210cc25c:	4010977a 	slli	r8,r8,29
210cc260:	2005883a 	mov	r2,r4
210cc264:	3825883a 	mov	r18,r7
210cc268:	41a2b03a 	or	r17,r8,r6
210cc26c:	880ad77a 	srli	r5,r17,29
210cc270:	100490fa 	slli	r2,r2,3
210cc274:	882290fa 	slli	r17,r17,3
210cc278:	0401ffc4 	movi	r16,2047
210cc27c:	288ab03a 	or	r5,r5,r2
210cc280:	003e4006 	br	210cbb84 <__flash_rwdata_start+0xffffa28c>
210cc284:	01c1ffc4 	movi	r7,2047
210cc288:	11ffc71e 	bne	r2,r7,210cc1a8 <__flash_rwdata_start+0xffffa8b0>
210cc28c:	400b883a 	mov	r5,r8
210cc290:	3023883a 	mov	r17,r6
210cc294:	1021883a 	mov	r16,r2
210cc298:	003e3a06 	br	210cbb84 <__flash_rwdata_start+0xffffa28c>
210cc29c:	10002d26 	beq	r2,zero,210cc354 <__adddf3+0x84c>
210cc2a0:	4184b03a 	or	r2,r8,r6
210cc2a4:	10000e26 	beq	r2,zero,210cc2e0 <__adddf3+0x7d8>
210cc2a8:	2804d0fa 	srli	r2,r5,3
210cc2ac:	8822d0fa 	srli	r17,r17,3
210cc2b0:	280a977a 	slli	r5,r5,29
210cc2b4:	10c0022c 	andhi	r3,r2,8
210cc2b8:	2c62b03a 	or	r17,r5,r17
210cc2bc:	183feb26 	beq	r3,zero,210cc26c <__flash_rwdata_start+0xffffa974>
210cc2c0:	4008d0fa 	srli	r4,r8,3
210cc2c4:	20c0022c 	andhi	r3,r4,8
210cc2c8:	183fe81e 	bne	r3,zero,210cc26c <__flash_rwdata_start+0xffffa974>
210cc2cc:	300cd0fa 	srli	r6,r6,3
210cc2d0:	4010977a 	slli	r8,r8,29
210cc2d4:	2005883a 	mov	r2,r4
210cc2d8:	41a2b03a 	or	r17,r8,r6
210cc2dc:	003fe306 	br	210cc26c <__flash_rwdata_start+0xffffa974>
210cc2e0:	0401ffc4 	movi	r16,2047
210cc2e4:	003e2706 	br	210cbb84 <__flash_rwdata_start+0xffffa28c>
210cc2e8:	0011883a 	mov	r8,zero
210cc2ec:	003f8306 	br	210cc0fc <__flash_rwdata_start+0xffffa804>
210cc2f0:	193ff804 	addi	r4,r3,-32
210cc2f4:	02400804 	movi	r9,32
210cc2f8:	2908d83a 	srl	r4,r5,r4
210cc2fc:	1a402526 	beq	r3,r9,210cc394 <__adddf3+0x88c>
210cc300:	02401004 	movi	r9,64
210cc304:	48c7c83a 	sub	r3,r9,r3
210cc308:	28ca983a 	sll	r5,r5,r3
210cc30c:	2c62b03a 	or	r17,r5,r17
210cc310:	8822c03a 	cmpne	r17,r17,zero
210cc314:	8922b03a 	or	r17,r17,r4
210cc318:	0007883a 	mov	r3,zero
210cc31c:	003f2f06 	br	210cbfdc <__flash_rwdata_start+0xffffa6e4>
210cc320:	01402034 	movhi	r5,128
210cc324:	0007883a 	mov	r3,zero
210cc328:	297fffc4 	addi	r5,r5,-1
210cc32c:	047ffe04 	movi	r17,-8
210cc330:	0401ffc4 	movi	r16,2047
210cc334:	003e7306 	br	210cbd04 <__flash_rwdata_start+0xffffa40c>
210cc338:	2c62b03a 	or	r17,r5,r17
210cc33c:	8822c03a 	cmpne	r17,r17,zero
210cc340:	0009883a 	mov	r4,zero
210cc344:	003fa506 	br	210cc1dc <__flash_rwdata_start+0xffffa8e4>
210cc348:	400b883a 	mov	r5,r8
210cc34c:	3023883a 	mov	r17,r6
210cc350:	003e0c06 	br	210cbb84 <__flash_rwdata_start+0xffffa28c>
210cc354:	400b883a 	mov	r5,r8
210cc358:	3023883a 	mov	r17,r6
210cc35c:	0401ffc4 	movi	r16,2047
210cc360:	003e0806 	br	210cbb84 <__flash_rwdata_start+0xffffa28c>
210cc364:	21fff804 	addi	r7,r4,-32
210cc368:	02400804 	movi	r9,32
210cc36c:	29ced83a 	srl	r7,r5,r7
210cc370:	22400a26 	beq	r4,r9,210cc39c <__adddf3+0x894>
210cc374:	02401004 	movi	r9,64
210cc378:	4909c83a 	sub	r4,r9,r4
210cc37c:	290a983a 	sll	r5,r5,r4
210cc380:	2c62b03a 	or	r17,r5,r17
210cc384:	8822c03a 	cmpne	r17,r17,zero
210cc388:	89e2b03a 	or	r17,r17,r7
210cc38c:	0009883a 	mov	r4,zero
210cc390:	003f9206 	br	210cc1dc <__flash_rwdata_start+0xffffa8e4>
210cc394:	000b883a 	mov	r5,zero
210cc398:	003fdc06 	br	210cc30c <__flash_rwdata_start+0xffffaa14>
210cc39c:	000b883a 	mov	r5,zero
210cc3a0:	003ff706 	br	210cc380 <__flash_rwdata_start+0xffffaa88>

210cc3a4 <__divdf3>:
210cc3a4:	defff204 	addi	sp,sp,-56
210cc3a8:	dd000815 	stw	r20,32(sp)
210cc3ac:	2828d53a 	srli	r20,r5,20
210cc3b0:	dd800a15 	stw	r22,40(sp)
210cc3b4:	282cd7fa 	srli	r22,r5,31
210cc3b8:	dc000415 	stw	r16,16(sp)
210cc3bc:	04000434 	movhi	r16,16
210cc3c0:	df000c15 	stw	fp,48(sp)
210cc3c4:	dcc00715 	stw	r19,28(sp)
210cc3c8:	dc800615 	stw	r18,24(sp)
210cc3cc:	dc400515 	stw	r17,20(sp)
210cc3d0:	843fffc4 	addi	r16,r16,-1
210cc3d4:	dfc00d15 	stw	ra,52(sp)
210cc3d8:	ddc00b15 	stw	r23,44(sp)
210cc3dc:	dd400915 	stw	r21,36(sp)
210cc3e0:	a501ffcc 	andi	r20,r20,2047
210cc3e4:	2025883a 	mov	r18,r4
210cc3e8:	2027883a 	mov	r19,r4
210cc3ec:	2c22703a 	and	r17,r5,r16
210cc3f0:	b7003fcc 	andi	fp,r22,255
210cc3f4:	a0005e26 	beq	r20,zero,210cc570 <__divdf3+0x1cc>
210cc3f8:	0081ffc4 	movi	r2,2047
210cc3fc:	a0803526 	beq	r20,r2,210cc4d4 <__divdf3+0x130>
210cc400:	8c000434 	orhi	r16,r17,16
210cc404:	2004d77a 	srli	r2,r4,29
210cc408:	802090fa 	slli	r16,r16,3
210cc40c:	202690fa 	slli	r19,r4,3
210cc410:	a53f0044 	addi	r20,r20,-1023
210cc414:	80a2b03a 	or	r17,r16,r2
210cc418:	0025883a 	mov	r18,zero
210cc41c:	0011883a 	mov	r8,zero
210cc420:	380ad53a 	srli	r5,r7,20
210cc424:	382ed7fa 	srli	r23,r7,31
210cc428:	04000434 	movhi	r16,16
210cc42c:	843fffc4 	addi	r16,r16,-1
210cc430:	2941ffcc 	andi	r5,r5,2047
210cc434:	302b883a 	mov	r21,r6
210cc438:	3c20703a 	and	r16,r7,r16
210cc43c:	ba403fcc 	andi	r9,r23,255
210cc440:	28006726 	beq	r5,zero,210cc5e0 <__divdf3+0x23c>
210cc444:	0081ffc4 	movi	r2,2047
210cc448:	28805f26 	beq	r5,r2,210cc5c8 <__divdf3+0x224>
210cc44c:	84000434 	orhi	r16,r16,16
210cc450:	3004d77a 	srli	r2,r6,29
210cc454:	802090fa 	slli	r16,r16,3
210cc458:	302a90fa 	slli	r21,r6,3
210cc45c:	297f0044 	addi	r5,r5,-1023
210cc460:	80a0b03a 	or	r16,r16,r2
210cc464:	000f883a 	mov	r7,zero
210cc468:	3c86b03a 	or	r3,r7,r18
210cc46c:	180690ba 	slli	r3,r3,2
210cc470:	00884374 	movhi	r2,8461
210cc474:	10b12504 	addi	r2,r2,-15212
210cc478:	1887883a 	add	r3,r3,r2
210cc47c:	18c00017 	ldw	r3,0(r3)
210cc480:	b5c8f03a 	xor	r4,r22,r23
210cc484:	200d883a 	mov	r6,r4
210cc488:	24803fcc 	andi	r18,r4,255
210cc48c:	a169c83a 	sub	r20,r20,r5
210cc490:	1800683a 	jmp	r3
210cc494:	210cc6dc 	xori	r4,r4,13083
210cc498:	210cc50c 	andi	r4,r4,13076
210cc49c:	210cc6a0 	cmpeqi	r4,r4,13082
210cc4a0:	210cc4f0 	cmpltui	r4,r4,13075
210cc4a4:	210cc6a0 	cmpeqi	r4,r4,13082
210cc4a8:	210cc674 	orhi	r4,r4,13081
210cc4ac:	210cc6a0 	cmpeqi	r4,r4,13082
210cc4b0:	210cc4f0 	cmpltui	r4,r4,13075
210cc4b4:	210cc50c 	andi	r4,r4,13076
210cc4b8:	210cc50c 	andi	r4,r4,13076
210cc4bc:	210cc674 	orhi	r4,r4,13081
210cc4c0:	210cc4f0 	cmpltui	r4,r4,13075
210cc4c4:	210cc500 	call	2210cc50 <__flash_rwdata_start+0x103b358>
210cc4c8:	210cc500 	call	2210cc50 <__flash_rwdata_start+0x103b358>
210cc4cc:	210cc500 	call	2210cc50 <__flash_rwdata_start+0x103b358>
210cc4d0:	210cc6b0 	cmpltui	r4,r4,13082
210cc4d4:	8904b03a 	or	r2,r17,r4
210cc4d8:	1000631e 	bne	r2,zero,210cc668 <__divdf3+0x2c4>
210cc4dc:	04800204 	movi	r18,8
210cc4e0:	0023883a 	mov	r17,zero
210cc4e4:	0027883a 	mov	r19,zero
210cc4e8:	02000084 	movi	r8,2
210cc4ec:	003fcc06 	br	210cc420 <__flash_rwdata_start+0xffffab28>
210cc4f0:	8023883a 	mov	r17,r16
210cc4f4:	a827883a 	mov	r19,r21
210cc4f8:	4839883a 	mov	fp,r9
210cc4fc:	3811883a 	mov	r8,r7
210cc500:	00800084 	movi	r2,2
210cc504:	40812a1e 	bne	r8,r2,210cc9b0 <__divdf3+0x60c>
210cc508:	e025883a 	mov	r18,fp
210cc50c:	9180004c 	andi	r6,r18,1
210cc510:	0101ffc4 	movi	r4,2047
210cc514:	000b883a 	mov	r5,zero
210cc518:	0027883a 	mov	r19,zero
210cc51c:	2008953a 	slli	r4,r4,20
210cc520:	30c03fcc 	andi	r3,r6,255
210cc524:	04000434 	movhi	r16,16
210cc528:	180697fa 	slli	r3,r3,31
210cc52c:	843fffc4 	addi	r16,r16,-1
210cc530:	2c20703a 	and	r16,r5,r16
210cc534:	8120b03a 	or	r16,r16,r4
210cc538:	80c6b03a 	or	r3,r16,r3
210cc53c:	9805883a 	mov	r2,r19
210cc540:	dfc00d17 	ldw	ra,52(sp)
210cc544:	df000c17 	ldw	fp,48(sp)
210cc548:	ddc00b17 	ldw	r23,44(sp)
210cc54c:	dd800a17 	ldw	r22,40(sp)
210cc550:	dd400917 	ldw	r21,36(sp)
210cc554:	dd000817 	ldw	r20,32(sp)
210cc558:	dcc00717 	ldw	r19,28(sp)
210cc55c:	dc800617 	ldw	r18,24(sp)
210cc560:	dc400517 	ldw	r17,20(sp)
210cc564:	dc000417 	ldw	r16,16(sp)
210cc568:	dec00e04 	addi	sp,sp,56
210cc56c:	f800283a 	ret
210cc570:	8904b03a 	or	r2,r17,r4
210cc574:	10003726 	beq	r2,zero,210cc654 <__divdf3+0x2b0>
210cc578:	88011c26 	beq	r17,zero,210cc9ec <__divdf3+0x648>
210cc57c:	8809883a 	mov	r4,r17
210cc580:	d9800315 	stw	r6,12(sp)
210cc584:	d9c00115 	stw	r7,4(sp)
210cc588:	10ce0a40 	call	210ce0a4 <__clzsi2>
210cc58c:	d9800317 	ldw	r6,12(sp)
210cc590:	d9c00117 	ldw	r7,4(sp)
210cc594:	1007883a 	mov	r3,r2
210cc598:	01000a04 	movi	r4,40
210cc59c:	1cfffe04 	addi	r19,r3,-8
210cc5a0:	20c9c83a 	sub	r4,r4,r3
210cc5a4:	8cca983a 	sll	r5,r17,r19
210cc5a8:	9108d83a 	srl	r4,r18,r4
210cc5ac:	94e6983a 	sll	r19,r18,r19
210cc5b0:	2162b03a 	or	r17,r4,r5
210cc5b4:	053f0344 	movi	r20,-1011
210cc5b8:	a0e9c83a 	sub	r20,r20,r3
210cc5bc:	0025883a 	mov	r18,zero
210cc5c0:	0011883a 	mov	r8,zero
210cc5c4:	003f9606 	br	210cc420 <__flash_rwdata_start+0xffffab28>
210cc5c8:	8184b03a 	or	r2,r16,r6
210cc5cc:	10001f1e 	bne	r2,zero,210cc64c <__divdf3+0x2a8>
210cc5d0:	0021883a 	mov	r16,zero
210cc5d4:	002b883a 	mov	r21,zero
210cc5d8:	01c00084 	movi	r7,2
210cc5dc:	003fa206 	br	210cc468 <__flash_rwdata_start+0xffffab70>
210cc5e0:	8184b03a 	or	r2,r16,r6
210cc5e4:	10001526 	beq	r2,zero,210cc63c <__divdf3+0x298>
210cc5e8:	80010c26 	beq	r16,zero,210cca1c <__divdf3+0x678>
210cc5ec:	8009883a 	mov	r4,r16
210cc5f0:	d9800315 	stw	r6,12(sp)
210cc5f4:	da000215 	stw	r8,8(sp)
210cc5f8:	da400015 	stw	r9,0(sp)
210cc5fc:	10ce0a40 	call	210ce0a4 <__clzsi2>
210cc600:	d9800317 	ldw	r6,12(sp)
210cc604:	da000217 	ldw	r8,8(sp)
210cc608:	da400017 	ldw	r9,0(sp)
210cc60c:	1007883a 	mov	r3,r2
210cc610:	01000a04 	movi	r4,40
210cc614:	1d7ffe04 	addi	r21,r3,-8
210cc618:	20c9c83a 	sub	r4,r4,r3
210cc61c:	8560983a 	sll	r16,r16,r21
210cc620:	3108d83a 	srl	r4,r6,r4
210cc624:	356a983a 	sll	r21,r6,r21
210cc628:	2420b03a 	or	r16,r4,r16
210cc62c:	017f0344 	movi	r5,-1011
210cc630:	28cbc83a 	sub	r5,r5,r3
210cc634:	000f883a 	mov	r7,zero
210cc638:	003f8b06 	br	210cc468 <__flash_rwdata_start+0xffffab70>
210cc63c:	0021883a 	mov	r16,zero
210cc640:	002b883a 	mov	r21,zero
210cc644:	01c00044 	movi	r7,1
210cc648:	003f8706 	br	210cc468 <__flash_rwdata_start+0xffffab70>
210cc64c:	01c000c4 	movi	r7,3
210cc650:	003f8506 	br	210cc468 <__flash_rwdata_start+0xffffab70>
210cc654:	04800104 	movi	r18,4
210cc658:	0023883a 	mov	r17,zero
210cc65c:	0027883a 	mov	r19,zero
210cc660:	02000044 	movi	r8,1
210cc664:	003f6e06 	br	210cc420 <__flash_rwdata_start+0xffffab28>
210cc668:	04800304 	movi	r18,12
210cc66c:	020000c4 	movi	r8,3
210cc670:	003f6b06 	br	210cc420 <__flash_rwdata_start+0xffffab28>
210cc674:	01400434 	movhi	r5,16
210cc678:	000d883a 	mov	r6,zero
210cc67c:	297fffc4 	addi	r5,r5,-1
210cc680:	04ffffc4 	movi	r19,-1
210cc684:	0101ffc4 	movi	r4,2047
210cc688:	003fa406 	br	210cc51c <__flash_rwdata_start+0xffffac24>
210cc68c:	043f0084 	movi	r16,-1022
210cc690:	8521c83a 	sub	r16,r16,r20
210cc694:	00800e04 	movi	r2,56
210cc698:	1401200e 	bge	r2,r16,210ccb1c <__divdf3+0x778>
210cc69c:	9180004c 	andi	r6,r18,1
210cc6a0:	0009883a 	mov	r4,zero
210cc6a4:	000b883a 	mov	r5,zero
210cc6a8:	0027883a 	mov	r19,zero
210cc6ac:	003f9b06 	br	210cc51c <__flash_rwdata_start+0xffffac24>
210cc6b0:	8880022c 	andhi	r2,r17,8
210cc6b4:	1000c726 	beq	r2,zero,210cc9d4 <__divdf3+0x630>
210cc6b8:	8080022c 	andhi	r2,r16,8
210cc6bc:	1000c51e 	bne	r2,zero,210cc9d4 <__divdf3+0x630>
210cc6c0:	00800434 	movhi	r2,16
210cc6c4:	81400234 	orhi	r5,r16,8
210cc6c8:	10bfffc4 	addi	r2,r2,-1
210cc6cc:	b80d883a 	mov	r6,r23
210cc6d0:	288a703a 	and	r5,r5,r2
210cc6d4:	a827883a 	mov	r19,r21
210cc6d8:	003fea06 	br	210cc684 <__flash_rwdata_start+0xffffad8c>
210cc6dc:	8440ea36 	bltu	r16,r17,210cca88 <__divdf3+0x6e4>
210cc6e0:	8c00e826 	beq	r17,r16,210cca84 <__divdf3+0x6e0>
210cc6e4:	a53fffc4 	addi	r20,r20,-1
210cc6e8:	882d883a 	mov	r22,r17
210cc6ec:	000d883a 	mov	r6,zero
210cc6f0:	a804d63a 	srli	r2,r21,24
210cc6f4:	8020923a 	slli	r16,r16,8
210cc6f8:	b009883a 	mov	r4,r22
210cc6fc:	d9800315 	stw	r6,12(sp)
210cc700:	1420b03a 	or	r16,r2,r16
210cc704:	802ed43a 	srli	r23,r16,16
210cc708:	873fffcc 	andi	fp,r16,65535
210cc70c:	a82a923a 	slli	r21,r21,8
210cc710:	b80b883a 	mov	r5,r23
210cc714:	10cbaf80 	call	210cbaf8 <__udivsi3>
210cc718:	b009883a 	mov	r4,r22
210cc71c:	b80b883a 	mov	r5,r23
210cc720:	1023883a 	mov	r17,r2
210cc724:	10cbb000 	call	210cbb00 <__umodsi3>
210cc728:	1004943a 	slli	r2,r2,16
210cc72c:	9808d43a 	srli	r4,r19,16
210cc730:	8f2d383a 	mul	r22,r17,fp
210cc734:	d9800317 	ldw	r6,12(sp)
210cc738:	1106b03a 	or	r3,r2,r4
210cc73c:	1d80062e 	bgeu	r3,r22,210cc758 <__divdf3+0x3b4>
210cc740:	1c07883a 	add	r3,r3,r16
210cc744:	88bfffc4 	addi	r2,r17,-1
210cc748:	1c00dc36 	bltu	r3,r16,210ccabc <__divdf3+0x718>
210cc74c:	1d80db2e 	bgeu	r3,r22,210ccabc <__divdf3+0x718>
210cc750:	8c7fff84 	addi	r17,r17,-2
210cc754:	1c07883a 	add	r3,r3,r16
210cc758:	1dadc83a 	sub	r22,r3,r22
210cc75c:	b009883a 	mov	r4,r22
210cc760:	b80b883a 	mov	r5,r23
210cc764:	d9800315 	stw	r6,12(sp)
210cc768:	10cbaf80 	call	210cbaf8 <__udivsi3>
210cc76c:	b009883a 	mov	r4,r22
210cc770:	b80b883a 	mov	r5,r23
210cc774:	d8800015 	stw	r2,0(sp)
210cc778:	10cbb000 	call	210cbb00 <__umodsi3>
210cc77c:	da400017 	ldw	r9,0(sp)
210cc780:	1004943a 	slli	r2,r2,16
210cc784:	9cffffcc 	andi	r19,r19,65535
210cc788:	4f07383a 	mul	r3,r9,fp
210cc78c:	14c8b03a 	or	r4,r2,r19
210cc790:	d9800317 	ldw	r6,12(sp)
210cc794:	20c0062e 	bgeu	r4,r3,210cc7b0 <__divdf3+0x40c>
210cc798:	2409883a 	add	r4,r4,r16
210cc79c:	48bfffc4 	addi	r2,r9,-1
210cc7a0:	2400c436 	bltu	r4,r16,210ccab4 <__divdf3+0x710>
210cc7a4:	20c0c32e 	bgeu	r4,r3,210ccab4 <__divdf3+0x710>
210cc7a8:	4a7fff84 	addi	r9,r9,-2
210cc7ac:	2409883a 	add	r4,r4,r16
210cc7b0:	8822943a 	slli	r17,r17,16
210cc7b4:	a80ed43a 	srli	r7,r21,16
210cc7b8:	aa3fffcc 	andi	r8,r21,65535
210cc7bc:	4c62b03a 	or	r17,r9,r17
210cc7c0:	8816d43a 	srli	r11,r17,16
210cc7c4:	897fffcc 	andi	r5,r17,65535
210cc7c8:	2a15383a 	mul	r10,r5,r8
210cc7cc:	5a19383a 	mul	r12,r11,r8
210cc7d0:	29cb383a 	mul	r5,r5,r7
210cc7d4:	5012d43a 	srli	r9,r10,16
210cc7d8:	20c5c83a 	sub	r2,r4,r3
210cc7dc:	614b883a 	add	r5,r12,r5
210cc7e0:	2a4b883a 	add	r5,r5,r9
210cc7e4:	59c7383a 	mul	r3,r11,r7
210cc7e8:	2b00022e 	bgeu	r5,r12,210cc7f4 <__divdf3+0x450>
210cc7ec:	01000074 	movhi	r4,1
210cc7f0:	1907883a 	add	r3,r3,r4
210cc7f4:	2808d43a 	srli	r4,r5,16
210cc7f8:	280a943a 	slli	r5,r5,16
210cc7fc:	54ffffcc 	andi	r19,r10,65535
210cc800:	1907883a 	add	r3,r3,r4
210cc804:	2ccb883a 	add	r5,r5,r19
210cc808:	10c09336 	bltu	r2,r3,210cca58 <__divdf3+0x6b4>
210cc80c:	10c0ad26 	beq	r2,r3,210ccac4 <__divdf3+0x720>
210cc810:	10c7c83a 	sub	r3,r2,r3
210cc814:	3167c83a 	sub	r19,r6,r5
210cc818:	34ed803a 	cmpltu	r22,r6,r19
210cc81c:	1dadc83a 	sub	r22,r3,r22
210cc820:	b400b226 	beq	r22,r16,210ccaec <__divdf3+0x748>
210cc824:	b009883a 	mov	r4,r22
210cc828:	b80b883a 	mov	r5,r23
210cc82c:	d9c00115 	stw	r7,4(sp)
210cc830:	da000215 	stw	r8,8(sp)
210cc834:	10cbaf80 	call	210cbaf8 <__udivsi3>
210cc838:	b009883a 	mov	r4,r22
210cc83c:	b80b883a 	mov	r5,r23
210cc840:	d8800315 	stw	r2,12(sp)
210cc844:	10cbb000 	call	210cbb00 <__umodsi3>
210cc848:	d9800317 	ldw	r6,12(sp)
210cc84c:	1004943a 	slli	r2,r2,16
210cc850:	9808d43a 	srli	r4,r19,16
210cc854:	372d383a 	mul	r22,r6,fp
210cc858:	d9c00117 	ldw	r7,4(sp)
210cc85c:	1106b03a 	or	r3,r2,r4
210cc860:	da000217 	ldw	r8,8(sp)
210cc864:	1d80062e 	bgeu	r3,r22,210cc880 <__divdf3+0x4dc>
210cc868:	1c07883a 	add	r3,r3,r16
210cc86c:	30bfffc4 	addi	r2,r6,-1
210cc870:	1c00a036 	bltu	r3,r16,210ccaf4 <__divdf3+0x750>
210cc874:	1d809f2e 	bgeu	r3,r22,210ccaf4 <__divdf3+0x750>
210cc878:	31bfff84 	addi	r6,r6,-2
210cc87c:	1c07883a 	add	r3,r3,r16
210cc880:	1dadc83a 	sub	r22,r3,r22
210cc884:	b009883a 	mov	r4,r22
210cc888:	b80b883a 	mov	r5,r23
210cc88c:	d9800315 	stw	r6,12(sp)
210cc890:	d9c00115 	stw	r7,4(sp)
210cc894:	da000215 	stw	r8,8(sp)
210cc898:	10cbaf80 	call	210cbaf8 <__udivsi3>
210cc89c:	b009883a 	mov	r4,r22
210cc8a0:	b80b883a 	mov	r5,r23
210cc8a4:	d8800015 	stw	r2,0(sp)
210cc8a8:	10cbb000 	call	210cbb00 <__umodsi3>
210cc8ac:	da400017 	ldw	r9,0(sp)
210cc8b0:	1004943a 	slli	r2,r2,16
210cc8b4:	993fffcc 	andi	r4,r19,65535
210cc8b8:	4f39383a 	mul	fp,r9,fp
210cc8bc:	1106b03a 	or	r3,r2,r4
210cc8c0:	d9800317 	ldw	r6,12(sp)
210cc8c4:	d9c00117 	ldw	r7,4(sp)
210cc8c8:	da000217 	ldw	r8,8(sp)
210cc8cc:	1f00062e 	bgeu	r3,fp,210cc8e8 <__divdf3+0x544>
210cc8d0:	1c07883a 	add	r3,r3,r16
210cc8d4:	48bfffc4 	addi	r2,r9,-1
210cc8d8:	1c008836 	bltu	r3,r16,210ccafc <__divdf3+0x758>
210cc8dc:	1f00872e 	bgeu	r3,fp,210ccafc <__divdf3+0x758>
210cc8e0:	4a7fff84 	addi	r9,r9,-2
210cc8e4:	1c07883a 	add	r3,r3,r16
210cc8e8:	3008943a 	slli	r4,r6,16
210cc8ec:	1f07c83a 	sub	r3,r3,fp
210cc8f0:	4926b03a 	or	r19,r9,r4
210cc8f4:	993fffcc 	andi	r4,r19,65535
210cc8f8:	980cd43a 	srli	r6,r19,16
210cc8fc:	220b383a 	mul	r5,r4,r8
210cc900:	21c5383a 	mul	r2,r4,r7
210cc904:	3211383a 	mul	r8,r6,r8
210cc908:	2808d43a 	srli	r4,r5,16
210cc90c:	31cf383a 	mul	r7,r6,r7
210cc910:	4085883a 	add	r2,r8,r2
210cc914:	1105883a 	add	r2,r2,r4
210cc918:	1200022e 	bgeu	r2,r8,210cc924 <__divdf3+0x580>
210cc91c:	01000074 	movhi	r4,1
210cc920:	390f883a 	add	r7,r7,r4
210cc924:	1008d43a 	srli	r4,r2,16
210cc928:	1004943a 	slli	r2,r2,16
210cc92c:	297fffcc 	andi	r5,r5,65535
210cc930:	390f883a 	add	r7,r7,r4
210cc934:	1145883a 	add	r2,r2,r5
210cc938:	19c06536 	bltu	r3,r7,210ccad0 <__divdf3+0x72c>
210cc93c:	19c09f26 	beq	r3,r7,210ccbbc <__divdf3+0x818>
210cc940:	9cc00054 	ori	r19,r19,1
210cc944:	a100ffc4 	addi	r4,r20,1023
210cc948:	013f500e 	bge	zero,r4,210cc68c <__flash_rwdata_start+0xffffad94>
210cc94c:	988001cc 	andi	r2,r19,7
210cc950:	10000726 	beq	r2,zero,210cc970 <__divdf3+0x5cc>
210cc954:	98c003cc 	andi	r3,r19,15
210cc958:	00800104 	movi	r2,4
210cc95c:	18800426 	beq	r3,r2,210cc970 <__divdf3+0x5cc>
210cc960:	9885883a 	add	r2,r19,r2
210cc964:	14e1803a 	cmpltu	r16,r2,r19
210cc968:	8c23883a 	add	r17,r17,r16
210cc96c:	1027883a 	mov	r19,r2
210cc970:	8880402c 	andhi	r2,r17,256
210cc974:	10000426 	beq	r2,zero,210cc988 <__divdf3+0x5e4>
210cc978:	00bfc034 	movhi	r2,65280
210cc97c:	10bfffc4 	addi	r2,r2,-1
210cc980:	a1010004 	addi	r4,r20,1024
210cc984:	88a2703a 	and	r17,r17,r2
210cc988:	0081ff84 	movi	r2,2046
210cc98c:	113edf16 	blt	r2,r4,210cc50c <__flash_rwdata_start+0xffffac14>
210cc990:	9826d0fa 	srli	r19,r19,3
210cc994:	8804977a 	slli	r2,r17,29
210cc998:	8820927a 	slli	r16,r17,9
210cc99c:	2101ffcc 	andi	r4,r4,2047
210cc9a0:	14e6b03a 	or	r19,r2,r19
210cc9a4:	800ad33a 	srli	r5,r16,12
210cc9a8:	9180004c 	andi	r6,r18,1
210cc9ac:	003edb06 	br	210cc51c <__flash_rwdata_start+0xffffac24>
210cc9b0:	008000c4 	movi	r2,3
210cc9b4:	4080a826 	beq	r8,r2,210ccc58 <__divdf3+0x8b4>
210cc9b8:	00800044 	movi	r2,1
210cc9bc:	4080551e 	bne	r8,r2,210ccb14 <__divdf3+0x770>
210cc9c0:	e00d883a 	mov	r6,fp
210cc9c4:	0009883a 	mov	r4,zero
210cc9c8:	000b883a 	mov	r5,zero
210cc9cc:	0027883a 	mov	r19,zero
210cc9d0:	003ed206 	br	210cc51c <__flash_rwdata_start+0xffffac24>
210cc9d4:	00800434 	movhi	r2,16
210cc9d8:	89400234 	orhi	r5,r17,8
210cc9dc:	10bfffc4 	addi	r2,r2,-1
210cc9e0:	b00d883a 	mov	r6,r22
210cc9e4:	288a703a 	and	r5,r5,r2
210cc9e8:	003f2606 	br	210cc684 <__flash_rwdata_start+0xffffad8c>
210cc9ec:	d9800315 	stw	r6,12(sp)
210cc9f0:	d9c00115 	stw	r7,4(sp)
210cc9f4:	10ce0a40 	call	210ce0a4 <__clzsi2>
210cc9f8:	10c00804 	addi	r3,r2,32
210cc9fc:	010009c4 	movi	r4,39
210cca00:	d9800317 	ldw	r6,12(sp)
210cca04:	d9c00117 	ldw	r7,4(sp)
210cca08:	20fee30e 	bge	r4,r3,210cc598 <__flash_rwdata_start+0xffffaca0>
210cca0c:	117ffe04 	addi	r5,r2,-8
210cca10:	9162983a 	sll	r17,r18,r5
210cca14:	0027883a 	mov	r19,zero
210cca18:	003ee606 	br	210cc5b4 <__flash_rwdata_start+0xffffacbc>
210cca1c:	3009883a 	mov	r4,r6
210cca20:	d9800315 	stw	r6,12(sp)
210cca24:	da000215 	stw	r8,8(sp)
210cca28:	da400015 	stw	r9,0(sp)
210cca2c:	10ce0a40 	call	210ce0a4 <__clzsi2>
210cca30:	10c00804 	addi	r3,r2,32
210cca34:	010009c4 	movi	r4,39
210cca38:	d9800317 	ldw	r6,12(sp)
210cca3c:	da000217 	ldw	r8,8(sp)
210cca40:	da400017 	ldw	r9,0(sp)
210cca44:	20fef20e 	bge	r4,r3,210cc610 <__flash_rwdata_start+0xffffad18>
210cca48:	10bffe04 	addi	r2,r2,-8
210cca4c:	a8a0983a 	sll	r16,r21,r2
210cca50:	002b883a 	mov	r21,zero
210cca54:	003ef506 	br	210cc62c <__flash_rwdata_start+0xffffad34>
210cca58:	354d883a 	add	r6,r6,r21
210cca5c:	3549803a 	cmpltu	r4,r6,r21
210cca60:	2409883a 	add	r4,r4,r16
210cca64:	2089883a 	add	r4,r4,r2
210cca68:	88bfffc4 	addi	r2,r17,-1
210cca6c:	81000c2e 	bgeu	r16,r4,210ccaa0 <__divdf3+0x6fc>
210cca70:	20c04436 	bltu	r4,r3,210ccb84 <__divdf3+0x7e0>
210cca74:	19006f26 	beq	r3,r4,210ccc34 <__divdf3+0x890>
210cca78:	20c7c83a 	sub	r3,r4,r3
210cca7c:	1023883a 	mov	r17,r2
210cca80:	003f6406 	br	210cc814 <__flash_rwdata_start+0xffffaf1c>
210cca84:	9d7f1736 	bltu	r19,r21,210cc6e4 <__flash_rwdata_start+0xffffadec>
210cca88:	9806d07a 	srli	r3,r19,1
210cca8c:	880497fa 	slli	r2,r17,31
210cca90:	980c97fa 	slli	r6,r19,31
210cca94:	882cd07a 	srli	r22,r17,1
210cca98:	18a6b03a 	or	r19,r3,r2
210cca9c:	003f1406 	br	210cc6f0 <__flash_rwdata_start+0xffffadf8>
210ccaa0:	243ff51e 	bne	r4,r16,210cca78 <__flash_rwdata_start+0xffffb180>
210ccaa4:	357ff22e 	bgeu	r6,r21,210cca70 <__flash_rwdata_start+0xffffb178>
210ccaa8:	80c7c83a 	sub	r3,r16,r3
210ccaac:	1023883a 	mov	r17,r2
210ccab0:	003f5806 	br	210cc814 <__flash_rwdata_start+0xffffaf1c>
210ccab4:	1013883a 	mov	r9,r2
210ccab8:	003f3d06 	br	210cc7b0 <__flash_rwdata_start+0xffffaeb8>
210ccabc:	1023883a 	mov	r17,r2
210ccac0:	003f2506 	br	210cc758 <__flash_rwdata_start+0xffffae60>
210ccac4:	317fe436 	bltu	r6,r5,210cca58 <__flash_rwdata_start+0xffffb160>
210ccac8:	0007883a 	mov	r3,zero
210ccacc:	003f5106 	br	210cc814 <__flash_rwdata_start+0xffffaf1c>
210ccad0:	1c07883a 	add	r3,r3,r16
210ccad4:	993fffc4 	addi	r4,r19,-1
210ccad8:	1c000a2e 	bgeu	r3,r16,210ccb04 <__divdf3+0x760>
210ccadc:	2027883a 	mov	r19,r4
210ccae0:	19ff971e 	bne	r3,r7,210cc940 <__flash_rwdata_start+0xffffb048>
210ccae4:	a8bf961e 	bne	r21,r2,210cc940 <__flash_rwdata_start+0xffffb048>
210ccae8:	003f9606 	br	210cc944 <__flash_rwdata_start+0xffffb04c>
210ccaec:	04ffffc4 	movi	r19,-1
210ccaf0:	003f9406 	br	210cc944 <__flash_rwdata_start+0xffffb04c>
210ccaf4:	100d883a 	mov	r6,r2
210ccaf8:	003f6106 	br	210cc880 <__flash_rwdata_start+0xffffaf88>
210ccafc:	1013883a 	mov	r9,r2
210ccb00:	003f7906 	br	210cc8e8 <__flash_rwdata_start+0xffffaff0>
210ccb04:	19c02636 	bltu	r3,r7,210ccba0 <__divdf3+0x7fc>
210ccb08:	38c04d26 	beq	r7,r3,210ccc40 <__divdf3+0x89c>
210ccb0c:	2027883a 	mov	r19,r4
210ccb10:	003f8b06 	br	210cc940 <__flash_rwdata_start+0xffffb048>
210ccb14:	e025883a 	mov	r18,fp
210ccb18:	003f8a06 	br	210cc944 <__flash_rwdata_start+0xffffb04c>
210ccb1c:	008007c4 	movi	r2,31
210ccb20:	14002a16 	blt	r2,r16,210ccbcc <__divdf3+0x828>
210ccb24:	a5010784 	addi	r20,r20,1054
210ccb28:	8d04983a 	sll	r2,r17,r20
210ccb2c:	9c06d83a 	srl	r3,r19,r16
210ccb30:	9d28983a 	sll	r20,r19,r20
210ccb34:	8c20d83a 	srl	r16,r17,r16
210ccb38:	1886b03a 	or	r3,r3,r2
210ccb3c:	a004c03a 	cmpne	r2,r20,zero
210ccb40:	1884b03a 	or	r2,r3,r2
210ccb44:	10c001cc 	andi	r3,r2,7
210ccb48:	18000726 	beq	r3,zero,210ccb68 <__divdf3+0x7c4>
210ccb4c:	110003cc 	andi	r4,r2,15
210ccb50:	00c00104 	movi	r3,4
210ccb54:	20c00426 	beq	r4,r3,210ccb68 <__divdf3+0x7c4>
210ccb58:	10c00104 	addi	r3,r2,4
210ccb5c:	1885803a 	cmpltu	r2,r3,r2
210ccb60:	80a1883a 	add	r16,r16,r2
210ccb64:	1805883a 	mov	r2,r3
210ccb68:	80c0202c 	andhi	r3,r16,128
210ccb6c:	18002d26 	beq	r3,zero,210ccc24 <__divdf3+0x880>
210ccb70:	9180004c 	andi	r6,r18,1
210ccb74:	01000044 	movi	r4,1
210ccb78:	000b883a 	mov	r5,zero
210ccb7c:	0027883a 	mov	r19,zero
210ccb80:	003e6606 	br	210cc51c <__flash_rwdata_start+0xffffac24>
210ccb84:	354d883a 	add	r6,r6,r21
210ccb88:	356d803a 	cmpltu	r22,r6,r21
210ccb8c:	b42d883a 	add	r22,r22,r16
210ccb90:	b12d883a 	add	r22,r22,r4
210ccb94:	8c7fff84 	addi	r17,r17,-2
210ccb98:	b0c7c83a 	sub	r3,r22,r3
210ccb9c:	003f1d06 	br	210cc814 <__flash_rwdata_start+0xffffaf1c>
210ccba0:	ad4b883a 	add	r5,r21,r21
210ccba4:	2d6b803a 	cmpltu	r21,r5,r21
210ccba8:	ac2b883a 	add	r21,r21,r16
210ccbac:	1d47883a 	add	r3,r3,r21
210ccbb0:	993fff84 	addi	r4,r19,-2
210ccbb4:	282b883a 	mov	r21,r5
210ccbb8:	003fc806 	br	210ccadc <__flash_rwdata_start+0xffffb1e4>
210ccbbc:	103fc41e 	bne	r2,zero,210ccad0 <__flash_rwdata_start+0xffffb1d8>
210ccbc0:	002b883a 	mov	r21,zero
210ccbc4:	a8bf5e1e 	bne	r21,r2,210cc940 <__flash_rwdata_start+0xffffb048>
210ccbc8:	003f5e06 	br	210cc944 <__flash_rwdata_start+0xffffb04c>
210ccbcc:	00bef884 	movi	r2,-1054
210ccbd0:	1505c83a 	sub	r2,r2,r20
210ccbd4:	00c00804 	movi	r3,32
210ccbd8:	8884d83a 	srl	r2,r17,r2
210ccbdc:	80c01c26 	beq	r16,r3,210ccc50 <__divdf3+0x8ac>
210ccbe0:	a0c10f84 	addi	r3,r20,1086
210ccbe4:	88c6983a 	sll	r3,r17,r3
210ccbe8:	1cc6b03a 	or	r3,r3,r19
210ccbec:	1806c03a 	cmpne	r3,r3,zero
210ccbf0:	1884b03a 	or	r2,r3,r2
210ccbf4:	140001cc 	andi	r16,r2,7
210ccbf8:	8000061e 	bne	r16,zero,210ccc14 <__divdf3+0x870>
210ccbfc:	000b883a 	mov	r5,zero
210ccc00:	1004d0fa 	srli	r2,r2,3
210ccc04:	9180004c 	andi	r6,r18,1
210ccc08:	0009883a 	mov	r4,zero
210ccc0c:	1426b03a 	or	r19,r2,r16
210ccc10:	003e4206 	br	210cc51c <__flash_rwdata_start+0xffffac24>
210ccc14:	110003cc 	andi	r4,r2,15
210ccc18:	00c00104 	movi	r3,4
210ccc1c:	0021883a 	mov	r16,zero
210ccc20:	20ffcd1e 	bne	r4,r3,210ccb58 <__flash_rwdata_start+0xffffb260>
210ccc24:	800a927a 	slli	r5,r16,9
210ccc28:	8020977a 	slli	r16,r16,29
210ccc2c:	280ad33a 	srli	r5,r5,12
210ccc30:	003ff306 	br	210ccc00 <__flash_rwdata_start+0xffffb308>
210ccc34:	317fd336 	bltu	r6,r5,210ccb84 <__flash_rwdata_start+0xffffb28c>
210ccc38:	1023883a 	mov	r17,r2
210ccc3c:	003fa206 	br	210ccac8 <__flash_rwdata_start+0xffffb1d0>
210ccc40:	a8bfd736 	bltu	r21,r2,210ccba0 <__flash_rwdata_start+0xffffb2a8>
210ccc44:	2027883a 	mov	r19,r4
210ccc48:	a8bf3d1e 	bne	r21,r2,210cc940 <__flash_rwdata_start+0xffffb048>
210ccc4c:	003f3d06 	br	210cc944 <__flash_rwdata_start+0xffffb04c>
210ccc50:	0007883a 	mov	r3,zero
210ccc54:	003fe406 	br	210ccbe8 <__flash_rwdata_start+0xffffb2f0>
210ccc58:	00800434 	movhi	r2,16
210ccc5c:	89400234 	orhi	r5,r17,8
210ccc60:	10bfffc4 	addi	r2,r2,-1
210ccc64:	e00d883a 	mov	r6,fp
210ccc68:	288a703a 	and	r5,r5,r2
210ccc6c:	003e8506 	br	210cc684 <__flash_rwdata_start+0xffffad8c>

210ccc70 <__eqdf2>:
210ccc70:	2804d53a 	srli	r2,r5,20
210ccc74:	3806d53a 	srli	r3,r7,20
210ccc78:	02000434 	movhi	r8,16
210ccc7c:	423fffc4 	addi	r8,r8,-1
210ccc80:	1081ffcc 	andi	r2,r2,2047
210ccc84:	0241ffc4 	movi	r9,2047
210ccc88:	2a14703a 	and	r10,r5,r8
210ccc8c:	18c1ffcc 	andi	r3,r3,2047
210ccc90:	3a10703a 	and	r8,r7,r8
210ccc94:	280ad7fa 	srli	r5,r5,31
210ccc98:	380ed7fa 	srli	r7,r7,31
210ccc9c:	12400f26 	beq	r2,r9,210cccdc <__eqdf2+0x6c>
210ccca0:	0241ffc4 	movi	r9,2047
210ccca4:	1a400326 	beq	r3,r9,210cccb4 <__eqdf2+0x44>
210ccca8:	10c00526 	beq	r2,r3,210cccc0 <__eqdf2+0x50>
210cccac:	00800044 	movi	r2,1
210cccb0:	f800283a 	ret
210cccb4:	4192b03a 	or	r9,r8,r6
210cccb8:	483ffc1e 	bne	r9,zero,210cccac <__flash_rwdata_start+0xffffb3b4>
210cccbc:	10fffb1e 	bne	r2,r3,210cccac <__flash_rwdata_start+0xffffb3b4>
210cccc0:	523ffa1e 	bne	r10,r8,210cccac <__flash_rwdata_start+0xffffb3b4>
210cccc4:	21bff91e 	bne	r4,r6,210cccac <__flash_rwdata_start+0xffffb3b4>
210cccc8:	29c00826 	beq	r5,r7,210cccec <__eqdf2+0x7c>
210ccccc:	103ff71e 	bne	r2,zero,210cccac <__flash_rwdata_start+0xffffb3b4>
210cccd0:	5104b03a 	or	r2,r10,r4
210cccd4:	1004c03a 	cmpne	r2,r2,zero
210cccd8:	f800283a 	ret
210cccdc:	5112b03a 	or	r9,r10,r4
210ccce0:	483fef26 	beq	r9,zero,210ccca0 <__flash_rwdata_start+0xffffb3a8>
210ccce4:	00800044 	movi	r2,1
210ccce8:	f800283a 	ret
210cccec:	0005883a 	mov	r2,zero
210cccf0:	f800283a 	ret

210cccf4 <__gedf2>:
210cccf4:	2804d53a 	srli	r2,r5,20
210cccf8:	3806d53a 	srli	r3,r7,20
210cccfc:	02000434 	movhi	r8,16
210ccd00:	423fffc4 	addi	r8,r8,-1
210ccd04:	0241ffc4 	movi	r9,2047
210ccd08:	1081ffcc 	andi	r2,r2,2047
210ccd0c:	2a14703a 	and	r10,r5,r8
210ccd10:	1a46703a 	and	r3,r3,r9
210ccd14:	3a10703a 	and	r8,r7,r8
210ccd18:	280ad7fa 	srli	r5,r5,31
210ccd1c:	380ed7fa 	srli	r7,r7,31
210ccd20:	12400b26 	beq	r2,r9,210ccd50 <__gedf2+0x5c>
210ccd24:	1a401626 	beq	r3,r9,210ccd80 <__gedf2+0x8c>
210ccd28:	10000c1e 	bne	r2,zero,210ccd5c <__gedf2+0x68>
210ccd2c:	5112b03a 	or	r9,r10,r4
210ccd30:	4813003a 	cmpeq	r9,r9,zero
210ccd34:	4817883a 	mov	r11,r9
210ccd38:	18000c1e 	bne	r3,zero,210ccd6c <__gedf2+0x78>
210ccd3c:	4198b03a 	or	r12,r8,r6
210ccd40:	60000a1e 	bne	r12,zero,210ccd6c <__gedf2+0x78>
210ccd44:	48001326 	beq	r9,zero,210ccd94 <__gedf2+0xa0>
210ccd48:	0005883a 	mov	r2,zero
210ccd4c:	f800283a 	ret
210ccd50:	5112b03a 	or	r9,r10,r4
210ccd54:	4800191e 	bne	r9,zero,210ccdbc <__gedf2+0xc8>
210ccd58:	18800926 	beq	r3,r2,210ccd80 <__gedf2+0x8c>
210ccd5c:	18000b1e 	bne	r3,zero,210ccd8c <__gedf2+0x98>
210ccd60:	4192b03a 	or	r9,r8,r6
210ccd64:	0017883a 	mov	r11,zero
210ccd68:	48000a26 	beq	r9,zero,210ccd94 <__gedf2+0xa0>
210ccd6c:	39c03fcc 	andi	r7,r7,255
210ccd70:	58000726 	beq	r11,zero,210ccd90 <__gedf2+0x9c>
210ccd74:	3800081e 	bne	r7,zero,210ccd98 <__gedf2+0xa4>
210ccd78:	00bfffc4 	movi	r2,-1
210ccd7c:	f800283a 	ret
210ccd80:	4192b03a 	or	r9,r8,r6
210ccd84:	48000d1e 	bne	r9,zero,210ccdbc <__gedf2+0xc8>
210ccd88:	103fe826 	beq	r2,zero,210ccd2c <__flash_rwdata_start+0xffffb434>
210ccd8c:	39c03fcc 	andi	r7,r7,255
210ccd90:	29c00326 	beq	r5,r7,210ccda0 <__gedf2+0xac>
210ccd94:	283ff81e 	bne	r5,zero,210ccd78 <__flash_rwdata_start+0xffffb480>
210ccd98:	00800044 	movi	r2,1
210ccd9c:	f800283a 	ret
210ccda0:	18bffc16 	blt	r3,r2,210ccd94 <__flash_rwdata_start+0xffffb49c>
210ccda4:	10c00316 	blt	r2,r3,210ccdb4 <__gedf2+0xc0>
210ccda8:	42bffa36 	bltu	r8,r10,210ccd94 <__flash_rwdata_start+0xffffb49c>
210ccdac:	52000526 	beq	r10,r8,210ccdc4 <__gedf2+0xd0>
210ccdb0:	523fe52e 	bgeu	r10,r8,210ccd48 <__flash_rwdata_start+0xffffb450>
210ccdb4:	283ff026 	beq	r5,zero,210ccd78 <__flash_rwdata_start+0xffffb480>
210ccdb8:	003ff706 	br	210ccd98 <__flash_rwdata_start+0xffffb4a0>
210ccdbc:	00bfff84 	movi	r2,-2
210ccdc0:	f800283a 	ret
210ccdc4:	313ff336 	bltu	r6,r4,210ccd94 <__flash_rwdata_start+0xffffb49c>
210ccdc8:	21bfdf2e 	bgeu	r4,r6,210ccd48 <__flash_rwdata_start+0xffffb450>
210ccdcc:	283fea26 	beq	r5,zero,210ccd78 <__flash_rwdata_start+0xffffb480>
210ccdd0:	003ff106 	br	210ccd98 <__flash_rwdata_start+0xffffb4a0>

210ccdd4 <__ledf2>:
210ccdd4:	2804d53a 	srli	r2,r5,20
210ccdd8:	3810d53a 	srli	r8,r7,20
210ccddc:	00c00434 	movhi	r3,16
210ccde0:	18ffffc4 	addi	r3,r3,-1
210ccde4:	0241ffc4 	movi	r9,2047
210ccde8:	1081ffcc 	andi	r2,r2,2047
210ccdec:	28d4703a 	and	r10,r5,r3
210ccdf0:	4250703a 	and	r8,r8,r9
210ccdf4:	38c6703a 	and	r3,r7,r3
210ccdf8:	280ad7fa 	srli	r5,r5,31
210ccdfc:	380ed7fa 	srli	r7,r7,31
210cce00:	12400b26 	beq	r2,r9,210cce30 <__ledf2+0x5c>
210cce04:	42401926 	beq	r8,r9,210cce6c <__ledf2+0x98>
210cce08:	10000c1e 	bne	r2,zero,210cce3c <__ledf2+0x68>
210cce0c:	5112b03a 	or	r9,r10,r4
210cce10:	4813003a 	cmpeq	r9,r9,zero
210cce14:	4817883a 	mov	r11,r9
210cce18:	40000f26 	beq	r8,zero,210cce58 <__ledf2+0x84>
210cce1c:	39c03fcc 	andi	r7,r7,255
210cce20:	58001826 	beq	r11,zero,210cce84 <__ledf2+0xb0>
210cce24:	38000a1e 	bne	r7,zero,210cce50 <__ledf2+0x7c>
210cce28:	00bfffc4 	movi	r2,-1
210cce2c:	f800283a 	ret
210cce30:	5112b03a 	or	r9,r10,r4
210cce34:	48000f1e 	bne	r9,zero,210cce74 <__ledf2+0xa0>
210cce38:	40800c26 	beq	r8,r2,210cce6c <__ledf2+0x98>
210cce3c:	4000101e 	bne	r8,zero,210cce80 <__ledf2+0xac>
210cce40:	1992b03a 	or	r9,r3,r6
210cce44:	0017883a 	mov	r11,zero
210cce48:	483ff41e 	bne	r9,zero,210cce1c <__flash_rwdata_start+0xffffb524>
210cce4c:	283ff61e 	bne	r5,zero,210cce28 <__flash_rwdata_start+0xffffb530>
210cce50:	00800044 	movi	r2,1
210cce54:	f800283a 	ret
210cce58:	1998b03a 	or	r12,r3,r6
210cce5c:	603fef1e 	bne	r12,zero,210cce1c <__flash_rwdata_start+0xffffb524>
210cce60:	483ffa26 	beq	r9,zero,210cce4c <__flash_rwdata_start+0xffffb554>
210cce64:	0005883a 	mov	r2,zero
210cce68:	f800283a 	ret
210cce6c:	1992b03a 	or	r9,r3,r6
210cce70:	48000226 	beq	r9,zero,210cce7c <__ledf2+0xa8>
210cce74:	00800084 	movi	r2,2
210cce78:	f800283a 	ret
210cce7c:	103fe326 	beq	r2,zero,210cce0c <__flash_rwdata_start+0xffffb514>
210cce80:	39c03fcc 	andi	r7,r7,255
210cce84:	29fff11e 	bne	r5,r7,210cce4c <__flash_rwdata_start+0xffffb554>
210cce88:	40bff016 	blt	r8,r2,210cce4c <__flash_rwdata_start+0xffffb554>
210cce8c:	12000316 	blt	r2,r8,210cce9c <__ledf2+0xc8>
210cce90:	1abfee36 	bltu	r3,r10,210cce4c <__flash_rwdata_start+0xffffb554>
210cce94:	50c00326 	beq	r10,r3,210ccea4 <__ledf2+0xd0>
210cce98:	50fff22e 	bgeu	r10,r3,210cce64 <__flash_rwdata_start+0xffffb56c>
210cce9c:	283fe226 	beq	r5,zero,210cce28 <__flash_rwdata_start+0xffffb530>
210ccea0:	003feb06 	br	210cce50 <__flash_rwdata_start+0xffffb558>
210ccea4:	313fe936 	bltu	r6,r4,210cce4c <__flash_rwdata_start+0xffffb554>
210ccea8:	21bfee2e 	bgeu	r4,r6,210cce64 <__flash_rwdata_start+0xffffb56c>
210cceac:	283fde26 	beq	r5,zero,210cce28 <__flash_rwdata_start+0xffffb530>
210cceb0:	003fe706 	br	210cce50 <__flash_rwdata_start+0xffffb558>

210cceb4 <__muldf3>:
210cceb4:	defff204 	addi	sp,sp,-56
210cceb8:	2804d53a 	srli	r2,r5,20
210ccebc:	dd800a15 	stw	r22,40(sp)
210ccec0:	282cd7fa 	srli	r22,r5,31
210ccec4:	dc000415 	stw	r16,16(sp)
210ccec8:	04000434 	movhi	r16,16
210ccecc:	df000c15 	stw	fp,48(sp)
210cced0:	dd000815 	stw	r20,32(sp)
210cced4:	dcc00715 	stw	r19,28(sp)
210cced8:	dc800615 	stw	r18,24(sp)
210ccedc:	dc400515 	stw	r17,20(sp)
210ccee0:	843fffc4 	addi	r16,r16,-1
210ccee4:	dfc00d15 	stw	ra,52(sp)
210ccee8:	ddc00b15 	stw	r23,44(sp)
210cceec:	dd400915 	stw	r21,36(sp)
210ccef0:	1501ffcc 	andi	r20,r2,2047
210ccef4:	2023883a 	mov	r17,r4
210ccef8:	2025883a 	mov	r18,r4
210ccefc:	2c20703a 	and	r16,r5,r16
210ccf00:	b027883a 	mov	r19,r22
210ccf04:	b7003fcc 	andi	fp,r22,255
210ccf08:	a0005926 	beq	r20,zero,210cd070 <__muldf3+0x1bc>
210ccf0c:	0081ffc4 	movi	r2,2047
210ccf10:	a0803426 	beq	r20,r2,210ccfe4 <__muldf3+0x130>
210ccf14:	84000434 	orhi	r16,r16,16
210ccf18:	2004d77a 	srli	r2,r4,29
210ccf1c:	802090fa 	slli	r16,r16,3
210ccf20:	202490fa 	slli	r18,r4,3
210ccf24:	a53f0044 	addi	r20,r20,-1023
210ccf28:	80a0b03a 	or	r16,r16,r2
210ccf2c:	002b883a 	mov	r21,zero
210ccf30:	0015883a 	mov	r10,zero
210ccf34:	3812d53a 	srli	r9,r7,20
210ccf38:	3806d7fa 	srli	r3,r7,31
210ccf3c:	02000434 	movhi	r8,16
210ccf40:	423fffc4 	addi	r8,r8,-1
210ccf44:	4941ffcc 	andi	r5,r9,2047
210ccf48:	302f883a 	mov	r23,r6
210ccf4c:	3a22703a 	and	r17,r7,r8
210ccf50:	1ac03fcc 	andi	r11,r3,255
210ccf54:	28006226 	beq	r5,zero,210cd0e0 <__muldf3+0x22c>
210ccf58:	0081ffc4 	movi	r2,2047
210ccf5c:	28805a26 	beq	r5,r2,210cd0c8 <__muldf3+0x214>
210ccf60:	8a000434 	orhi	r8,r17,16
210ccf64:	3004d77a 	srli	r2,r6,29
210ccf68:	401090fa 	slli	r8,r8,3
210ccf6c:	302e90fa 	slli	r23,r6,3
210ccf70:	297f0044 	addi	r5,r5,-1023
210ccf74:	40a2b03a 	or	r17,r8,r2
210ccf78:	0013883a 	mov	r9,zero
210ccf7c:	4d4cb03a 	or	r6,r9,r21
210ccf80:	300c90ba 	slli	r6,r6,2
210ccf84:	02084374 	movhi	r8,8461
210ccf88:	4233e904 	addi	r8,r8,-12380
210ccf8c:	320d883a 	add	r6,r6,r8
210ccf90:	31800017 	ldw	r6,0(r6)
210ccf94:	a14b883a 	add	r5,r20,r5
210ccf98:	1dacf03a 	xor	r22,r3,r22
210ccf9c:	2b000044 	addi	r12,r5,1
210ccfa0:	3000683a 	jmp	r6
210ccfa4:	210cd1e0 	cmpeqi	r4,r4,13127
210ccfa8:	210cd1cc 	andi	r4,r4,13127
210ccfac:	210cd1cc 	andi	r4,r4,13127
210ccfb0:	210cd1b8 	rdprs	r4,r4,13126
210ccfb4:	210cd000 	call	2210cd00 <__flash_rwdata_start+0x103b408>
210ccfb8:	210cd000 	call	2210cd00 <__flash_rwdata_start+0x103b408>
210ccfbc:	210cd1a0 	cmpeqi	r4,r4,13126
210ccfc0:	210cd1b8 	rdprs	r4,r4,13126
210ccfc4:	210cd000 	call	2210cd00 <__flash_rwdata_start+0x103b408>
210ccfc8:	210cd1a0 	cmpeqi	r4,r4,13126
210ccfcc:	210cd000 	call	2210cd00 <__flash_rwdata_start+0x103b408>
210ccfd0:	210cd1b8 	rdprs	r4,r4,13126
210ccfd4:	210cd004 	addi	r4,r4,13120
210ccfd8:	210cd004 	addi	r4,r4,13120
210ccfdc:	210cd004 	addi	r4,r4,13120
210ccfe0:	210cd3dc 	xori	r4,r4,13135
210ccfe4:	8104b03a 	or	r2,r16,r4
210ccfe8:	10006a1e 	bne	r2,zero,210cd194 <__muldf3+0x2e0>
210ccfec:	05400204 	movi	r21,8
210ccff0:	0021883a 	mov	r16,zero
210ccff4:	0025883a 	mov	r18,zero
210ccff8:	02800084 	movi	r10,2
210ccffc:	003fcd06 	br	210ccf34 <__flash_rwdata_start+0xffffb63c>
210cd000:	b039883a 	mov	fp,r22
210cd004:	00800084 	movi	r2,2
210cd008:	50804e1e 	bne	r10,r2,210cd144 <__muldf3+0x290>
210cd00c:	e4c0004c 	andi	r19,fp,1
210cd010:	0101ffc4 	movi	r4,2047
210cd014:	0021883a 	mov	r16,zero
210cd018:	0025883a 	mov	r18,zero
210cd01c:	2008953a 	slli	r4,r4,20
210cd020:	98c03fcc 	andi	r3,r19,255
210cd024:	01400434 	movhi	r5,16
210cd028:	297fffc4 	addi	r5,r5,-1
210cd02c:	180697fa 	slli	r3,r3,31
210cd030:	8160703a 	and	r16,r16,r5
210cd034:	8120b03a 	or	r16,r16,r4
210cd038:	80c6b03a 	or	r3,r16,r3
210cd03c:	9005883a 	mov	r2,r18
210cd040:	dfc00d17 	ldw	ra,52(sp)
210cd044:	df000c17 	ldw	fp,48(sp)
210cd048:	ddc00b17 	ldw	r23,44(sp)
210cd04c:	dd800a17 	ldw	r22,40(sp)
210cd050:	dd400917 	ldw	r21,36(sp)
210cd054:	dd000817 	ldw	r20,32(sp)
210cd058:	dcc00717 	ldw	r19,28(sp)
210cd05c:	dc800617 	ldw	r18,24(sp)
210cd060:	dc400517 	ldw	r17,20(sp)
210cd064:	dc000417 	ldw	r16,16(sp)
210cd068:	dec00e04 	addi	sp,sp,56
210cd06c:	f800283a 	ret
210cd070:	8104b03a 	or	r2,r16,r4
210cd074:	10004226 	beq	r2,zero,210cd180 <__muldf3+0x2cc>
210cd078:	8000f926 	beq	r16,zero,210cd460 <__muldf3+0x5ac>
210cd07c:	8009883a 	mov	r4,r16
210cd080:	d9800315 	stw	r6,12(sp)
210cd084:	d9c00015 	stw	r7,0(sp)
210cd088:	10ce0a40 	call	210ce0a4 <__clzsi2>
210cd08c:	d9800317 	ldw	r6,12(sp)
210cd090:	d9c00017 	ldw	r7,0(sp)
210cd094:	1007883a 	mov	r3,r2
210cd098:	01000a04 	movi	r4,40
210cd09c:	18bffe04 	addi	r2,r3,-8
210cd0a0:	20c9c83a 	sub	r4,r4,r3
210cd0a4:	80a0983a 	sll	r16,r16,r2
210cd0a8:	8908d83a 	srl	r4,r17,r4
210cd0ac:	88a4983a 	sll	r18,r17,r2
210cd0b0:	2420b03a 	or	r16,r4,r16
210cd0b4:	017f0344 	movi	r5,-1011
210cd0b8:	28e9c83a 	sub	r20,r5,r3
210cd0bc:	002b883a 	mov	r21,zero
210cd0c0:	0015883a 	mov	r10,zero
210cd0c4:	003f9b06 	br	210ccf34 <__flash_rwdata_start+0xffffb63c>
210cd0c8:	8984b03a 	or	r2,r17,r6
210cd0cc:	10002a1e 	bne	r2,zero,210cd178 <__muldf3+0x2c4>
210cd0d0:	0023883a 	mov	r17,zero
210cd0d4:	002f883a 	mov	r23,zero
210cd0d8:	02400084 	movi	r9,2
210cd0dc:	003fa706 	br	210ccf7c <__flash_rwdata_start+0xffffb684>
210cd0e0:	8984b03a 	or	r2,r17,r6
210cd0e4:	10002026 	beq	r2,zero,210cd168 <__muldf3+0x2b4>
210cd0e8:	8800cc26 	beq	r17,zero,210cd41c <__muldf3+0x568>
210cd0ec:	8809883a 	mov	r4,r17
210cd0f0:	d8c00215 	stw	r3,8(sp)
210cd0f4:	d9800315 	stw	r6,12(sp)
210cd0f8:	da800015 	stw	r10,0(sp)
210cd0fc:	dac00115 	stw	r11,4(sp)
210cd100:	10ce0a40 	call	210ce0a4 <__clzsi2>
210cd104:	d8c00217 	ldw	r3,8(sp)
210cd108:	d9800317 	ldw	r6,12(sp)
210cd10c:	da800017 	ldw	r10,0(sp)
210cd110:	dac00117 	ldw	r11,4(sp)
210cd114:	1009883a 	mov	r4,r2
210cd118:	01400a04 	movi	r5,40
210cd11c:	25fffe04 	addi	r23,r4,-8
210cd120:	290bc83a 	sub	r5,r5,r4
210cd124:	8dd0983a 	sll	r8,r17,r23
210cd128:	314ad83a 	srl	r5,r6,r5
210cd12c:	35ee983a 	sll	r23,r6,r23
210cd130:	2a22b03a 	or	r17,r5,r8
210cd134:	017f0344 	movi	r5,-1011
210cd138:	290bc83a 	sub	r5,r5,r4
210cd13c:	0013883a 	mov	r9,zero
210cd140:	003f8e06 	br	210ccf7c <__flash_rwdata_start+0xffffb684>
210cd144:	008000c4 	movi	r2,3
210cd148:	50811d26 	beq	r10,r2,210cd5c0 <__muldf3+0x70c>
210cd14c:	00800044 	movi	r2,1
210cd150:	5080e01e 	bne	r10,r2,210cd4d4 <__muldf3+0x620>
210cd154:	e0a6703a 	and	r19,fp,r2
210cd158:	0009883a 	mov	r4,zero
210cd15c:	0021883a 	mov	r16,zero
210cd160:	0025883a 	mov	r18,zero
210cd164:	003fad06 	br	210cd01c <__flash_rwdata_start+0xffffb724>
210cd168:	0023883a 	mov	r17,zero
210cd16c:	002f883a 	mov	r23,zero
210cd170:	02400044 	movi	r9,1
210cd174:	003f8106 	br	210ccf7c <__flash_rwdata_start+0xffffb684>
210cd178:	024000c4 	movi	r9,3
210cd17c:	003f7f06 	br	210ccf7c <__flash_rwdata_start+0xffffb684>
210cd180:	05400104 	movi	r21,4
210cd184:	0021883a 	mov	r16,zero
210cd188:	0025883a 	mov	r18,zero
210cd18c:	02800044 	movi	r10,1
210cd190:	003f6806 	br	210ccf34 <__flash_rwdata_start+0xffffb63c>
210cd194:	05400304 	movi	r21,12
210cd198:	028000c4 	movi	r10,3
210cd19c:	003f6506 	br	210ccf34 <__flash_rwdata_start+0xffffb63c>
210cd1a0:	04000434 	movhi	r16,16
210cd1a4:	0027883a 	mov	r19,zero
210cd1a8:	843fffc4 	addi	r16,r16,-1
210cd1ac:	04bfffc4 	movi	r18,-1
210cd1b0:	0101ffc4 	movi	r4,2047
210cd1b4:	003f9906 	br	210cd01c <__flash_rwdata_start+0xffffb724>
210cd1b8:	8821883a 	mov	r16,r17
210cd1bc:	b825883a 	mov	r18,r23
210cd1c0:	5839883a 	mov	fp,r11
210cd1c4:	4815883a 	mov	r10,r9
210cd1c8:	003f8e06 	br	210cd004 <__flash_rwdata_start+0xffffb70c>
210cd1cc:	8821883a 	mov	r16,r17
210cd1d0:	b825883a 	mov	r18,r23
210cd1d4:	b039883a 	mov	fp,r22
210cd1d8:	4815883a 	mov	r10,r9
210cd1dc:	003f8906 	br	210cd004 <__flash_rwdata_start+0xffffb70c>
210cd1e0:	b80cd43a 	srli	r6,r23,16
210cd1e4:	9006d43a 	srli	r3,r18,16
210cd1e8:	90bfffcc 	andi	r2,r18,65535
210cd1ec:	bdffffcc 	andi	r23,r23,65535
210cd1f0:	b891383a 	mul	r8,r23,r2
210cd1f4:	b8c9383a 	mul	r4,r23,r3
210cd1f8:	309b383a 	mul	r13,r6,r2
210cd1fc:	400ed43a 	srli	r7,r8,16
210cd200:	30df383a 	mul	r15,r6,r3
210cd204:	235b883a 	add	r13,r4,r13
210cd208:	69db883a 	add	r13,r13,r7
210cd20c:	6900022e 	bgeu	r13,r4,210cd218 <__muldf3+0x364>
210cd210:	01000074 	movhi	r4,1
210cd214:	791f883a 	add	r15,r15,r4
210cd218:	8828d43a 	srli	r20,r17,16
210cd21c:	8c7fffcc 	andi	r17,r17,65535
210cd220:	888f383a 	mul	r7,r17,r2
210cd224:	88d3383a 	mul	r9,r17,r3
210cd228:	a0a5383a 	mul	r18,r20,r2
210cd22c:	3816d43a 	srli	r11,r7,16
210cd230:	6814943a 	slli	r10,r13,16
210cd234:	4ca5883a 	add	r18,r9,r18
210cd238:	423fffcc 	andi	r8,r8,65535
210cd23c:	92e5883a 	add	r18,r18,r11
210cd240:	6808d43a 	srli	r4,r13,16
210cd244:	5215883a 	add	r10,r10,r8
210cd248:	a0c7383a 	mul	r3,r20,r3
210cd24c:	9240022e 	bgeu	r18,r9,210cd258 <__muldf3+0x3a4>
210cd250:	00800074 	movhi	r2,1
210cd254:	1887883a 	add	r3,r3,r2
210cd258:	802ad43a 	srli	r21,r16,16
210cd25c:	80bfffcc 	andi	r2,r16,65535
210cd260:	b893383a 	mul	r9,r23,r2
210cd264:	3091383a 	mul	r8,r6,r2
210cd268:	bd6f383a 	mul	r23,r23,r21
210cd26c:	9026943a 	slli	r19,r18,16
210cd270:	481ad43a 	srli	r13,r9,16
210cd274:	9024d43a 	srli	r18,r18,16
210cd278:	39ffffcc 	andi	r7,r7,65535
210cd27c:	ba11883a 	add	r8,r23,r8
210cd280:	99e7883a 	add	r19,r19,r7
210cd284:	4351883a 	add	r8,r8,r13
210cd288:	1c97883a 	add	r11,r3,r18
210cd28c:	354d383a 	mul	r6,r6,r21
210cd290:	9925883a 	add	r18,r19,r4
210cd294:	45c0022e 	bgeu	r8,r23,210cd2a0 <__muldf3+0x3ec>
210cd298:	00c00074 	movhi	r3,1
210cd29c:	30cd883a 	add	r6,r6,r3
210cd2a0:	8889383a 	mul	r4,r17,r2
210cd2a4:	8d63383a 	mul	r17,r17,r21
210cd2a8:	a085383a 	mul	r2,r20,r2
210cd2ac:	200ed43a 	srli	r7,r4,16
210cd2b0:	401cd43a 	srli	r14,r8,16
210cd2b4:	401a943a 	slli	r13,r8,16
210cd2b8:	8885883a 	add	r2,r17,r2
210cd2bc:	4a3fffcc 	andi	r8,r9,65535
210cd2c0:	11c5883a 	add	r2,r2,r7
210cd2c4:	339d883a 	add	r14,r6,r14
210cd2c8:	6a11883a 	add	r8,r13,r8
210cd2cc:	a561383a 	mul	r16,r20,r21
210cd2d0:	1440022e 	bgeu	r2,r17,210cd2dc <__muldf3+0x428>
210cd2d4:	00c00074 	movhi	r3,1
210cd2d8:	80e1883a 	add	r16,r16,r3
210cd2dc:	1006943a 	slli	r3,r2,16
210cd2e0:	213fffcc 	andi	r4,r4,65535
210cd2e4:	93db883a 	add	r13,r18,r15
210cd2e8:	1909883a 	add	r4,r3,r4
210cd2ec:	22c7883a 	add	r3,r4,r11
210cd2f0:	6cd3803a 	cmpltu	r9,r13,r19
210cd2f4:	6a09883a 	add	r4,r13,r8
210cd2f8:	1a5b883a 	add	r13,r3,r9
210cd2fc:	2211803a 	cmpltu	r8,r4,r8
210cd300:	734d883a 	add	r6,r14,r13
210cd304:	100ed43a 	srli	r7,r2,16
210cd308:	6a53803a 	cmpltu	r9,r13,r9
210cd30c:	3205883a 	add	r2,r6,r8
210cd310:	1ac7803a 	cmpltu	r3,r3,r11
210cd314:	1211803a 	cmpltu	r8,r2,r8
210cd318:	48c6b03a 	or	r3,r9,r3
210cd31c:	338d803a 	cmpltu	r6,r6,r14
210cd320:	19c7883a 	add	r3,r3,r7
210cd324:	418cb03a 	or	r6,r8,r6
210cd328:	1987883a 	add	r3,r3,r6
210cd32c:	2024927a 	slli	r18,r4,9
210cd330:	1c07883a 	add	r3,r3,r16
210cd334:	1806927a 	slli	r3,r3,9
210cd338:	1020d5fa 	srli	r16,r2,23
210cd33c:	2008d5fa 	srli	r4,r4,23
210cd340:	9294b03a 	or	r10,r18,r10
210cd344:	1004927a 	slli	r2,r2,9
210cd348:	5024c03a 	cmpne	r18,r10,zero
210cd34c:	1c20b03a 	or	r16,r3,r16
210cd350:	9108b03a 	or	r4,r18,r4
210cd354:	80c0402c 	andhi	r3,r16,256
210cd358:	20a4b03a 	or	r18,r4,r2
210cd35c:	18000726 	beq	r3,zero,210cd37c <__muldf3+0x4c8>
210cd360:	9006d07a 	srli	r3,r18,1
210cd364:	800897fa 	slli	r4,r16,31
210cd368:	9080004c 	andi	r2,r18,1
210cd36c:	8020d07a 	srli	r16,r16,1
210cd370:	10c4b03a 	or	r2,r2,r3
210cd374:	1124b03a 	or	r18,r2,r4
210cd378:	600b883a 	mov	r5,r12
210cd37c:	2900ffc4 	addi	r4,r5,1023
210cd380:	01004b0e 	bge	zero,r4,210cd4b0 <__muldf3+0x5fc>
210cd384:	908001cc 	andi	r2,r18,7
210cd388:	10000726 	beq	r2,zero,210cd3a8 <__muldf3+0x4f4>
210cd38c:	90c003cc 	andi	r3,r18,15
210cd390:	00800104 	movi	r2,4
210cd394:	18800426 	beq	r3,r2,210cd3a8 <__muldf3+0x4f4>
210cd398:	9087883a 	add	r3,r18,r2
210cd39c:	1c85803a 	cmpltu	r2,r3,r18
210cd3a0:	80a1883a 	add	r16,r16,r2
210cd3a4:	1825883a 	mov	r18,r3
210cd3a8:	8080402c 	andhi	r2,r16,256
210cd3ac:	10000426 	beq	r2,zero,210cd3c0 <__muldf3+0x50c>
210cd3b0:	00bfc034 	movhi	r2,65280
210cd3b4:	10bfffc4 	addi	r2,r2,-1
210cd3b8:	29010004 	addi	r4,r5,1024
210cd3bc:	80a0703a 	and	r16,r16,r2
210cd3c0:	0081ff84 	movi	r2,2046
210cd3c4:	1100320e 	bge	r2,r4,210cd490 <__muldf3+0x5dc>
210cd3c8:	b4c0004c 	andi	r19,r22,1
210cd3cc:	0101ffc4 	movi	r4,2047
210cd3d0:	0021883a 	mov	r16,zero
210cd3d4:	0025883a 	mov	r18,zero
210cd3d8:	003f1006 	br	210cd01c <__flash_rwdata_start+0xffffb724>
210cd3dc:	8080022c 	andhi	r2,r16,8
210cd3e0:	10000926 	beq	r2,zero,210cd408 <__muldf3+0x554>
210cd3e4:	8880022c 	andhi	r2,r17,8
210cd3e8:	1000071e 	bne	r2,zero,210cd408 <__muldf3+0x554>
210cd3ec:	00800434 	movhi	r2,16
210cd3f0:	8c000234 	orhi	r16,r17,8
210cd3f4:	10bfffc4 	addi	r2,r2,-1
210cd3f8:	1827883a 	mov	r19,r3
210cd3fc:	80a0703a 	and	r16,r16,r2
210cd400:	b825883a 	mov	r18,r23
210cd404:	003f6a06 	br	210cd1b0 <__flash_rwdata_start+0xffffb8b8>
210cd408:	00800434 	movhi	r2,16
210cd40c:	84000234 	orhi	r16,r16,8
210cd410:	10bfffc4 	addi	r2,r2,-1
210cd414:	80a0703a 	and	r16,r16,r2
210cd418:	003f6506 	br	210cd1b0 <__flash_rwdata_start+0xffffb8b8>
210cd41c:	3009883a 	mov	r4,r6
210cd420:	d8c00215 	stw	r3,8(sp)
210cd424:	d9800315 	stw	r6,12(sp)
210cd428:	da800015 	stw	r10,0(sp)
210cd42c:	dac00115 	stw	r11,4(sp)
210cd430:	10ce0a40 	call	210ce0a4 <__clzsi2>
210cd434:	11000804 	addi	r4,r2,32
210cd438:	014009c4 	movi	r5,39
210cd43c:	d8c00217 	ldw	r3,8(sp)
210cd440:	d9800317 	ldw	r6,12(sp)
210cd444:	da800017 	ldw	r10,0(sp)
210cd448:	dac00117 	ldw	r11,4(sp)
210cd44c:	293f320e 	bge	r5,r4,210cd118 <__flash_rwdata_start+0xffffb820>
210cd450:	10bffe04 	addi	r2,r2,-8
210cd454:	b8a2983a 	sll	r17,r23,r2
210cd458:	002f883a 	mov	r23,zero
210cd45c:	003f3506 	br	210cd134 <__flash_rwdata_start+0xffffb83c>
210cd460:	d9800315 	stw	r6,12(sp)
210cd464:	d9c00015 	stw	r7,0(sp)
210cd468:	10ce0a40 	call	210ce0a4 <__clzsi2>
210cd46c:	10c00804 	addi	r3,r2,32
210cd470:	010009c4 	movi	r4,39
210cd474:	d9800317 	ldw	r6,12(sp)
210cd478:	d9c00017 	ldw	r7,0(sp)
210cd47c:	20ff060e 	bge	r4,r3,210cd098 <__flash_rwdata_start+0xffffb7a0>
210cd480:	10bffe04 	addi	r2,r2,-8
210cd484:	88a0983a 	sll	r16,r17,r2
210cd488:	0025883a 	mov	r18,zero
210cd48c:	003f0906 	br	210cd0b4 <__flash_rwdata_start+0xffffb7bc>
210cd490:	9004d0fa 	srli	r2,r18,3
210cd494:	8024977a 	slli	r18,r16,29
210cd498:	8020927a 	slli	r16,r16,9
210cd49c:	2101ffcc 	andi	r4,r4,2047
210cd4a0:	90a4b03a 	or	r18,r18,r2
210cd4a4:	8020d33a 	srli	r16,r16,12
210cd4a8:	b4c0004c 	andi	r19,r22,1
210cd4ac:	003edb06 	br	210cd01c <__flash_rwdata_start+0xffffb724>
210cd4b0:	00ff0084 	movi	r3,-1022
210cd4b4:	1947c83a 	sub	r3,r3,r5
210cd4b8:	00800e04 	movi	r2,56
210cd4bc:	10c0080e 	bge	r2,r3,210cd4e0 <__muldf3+0x62c>
210cd4c0:	b4c0004c 	andi	r19,r22,1
210cd4c4:	0009883a 	mov	r4,zero
210cd4c8:	0021883a 	mov	r16,zero
210cd4cc:	0025883a 	mov	r18,zero
210cd4d0:	003ed206 	br	210cd01c <__flash_rwdata_start+0xffffb724>
210cd4d4:	600b883a 	mov	r5,r12
210cd4d8:	e02d883a 	mov	r22,fp
210cd4dc:	003fa706 	br	210cd37c <__flash_rwdata_start+0xffffba84>
210cd4e0:	008007c4 	movi	r2,31
210cd4e4:	10c01816 	blt	r2,r3,210cd548 <__muldf3+0x694>
210cd4e8:	29410784 	addi	r5,r5,1054
210cd4ec:	8144983a 	sll	r2,r16,r5
210cd4f0:	90c8d83a 	srl	r4,r18,r3
210cd4f4:	914a983a 	sll	r5,r18,r5
210cd4f8:	80c6d83a 	srl	r3,r16,r3
210cd4fc:	2088b03a 	or	r4,r4,r2
210cd500:	2804c03a 	cmpne	r2,r5,zero
210cd504:	2084b03a 	or	r2,r4,r2
210cd508:	110001cc 	andi	r4,r2,7
210cd50c:	20000726 	beq	r4,zero,210cd52c <__muldf3+0x678>
210cd510:	114003cc 	andi	r5,r2,15
210cd514:	01000104 	movi	r4,4
210cd518:	29000426 	beq	r5,r4,210cd52c <__muldf3+0x678>
210cd51c:	11000104 	addi	r4,r2,4
210cd520:	2085803a 	cmpltu	r2,r4,r2
210cd524:	1887883a 	add	r3,r3,r2
210cd528:	2005883a 	mov	r2,r4
210cd52c:	1900202c 	andhi	r4,r3,128
210cd530:	20001826 	beq	r4,zero,210cd594 <__muldf3+0x6e0>
210cd534:	b4c0004c 	andi	r19,r22,1
210cd538:	01000044 	movi	r4,1
210cd53c:	0021883a 	mov	r16,zero
210cd540:	0025883a 	mov	r18,zero
210cd544:	003eb506 	br	210cd01c <__flash_rwdata_start+0xffffb724>
210cd548:	00bef884 	movi	r2,-1054
210cd54c:	1145c83a 	sub	r2,r2,r5
210cd550:	8088d83a 	srl	r4,r16,r2
210cd554:	00800804 	movi	r2,32
210cd558:	18801726 	beq	r3,r2,210cd5b8 <__muldf3+0x704>
210cd55c:	28810f84 	addi	r2,r5,1086
210cd560:	8084983a 	sll	r2,r16,r2
210cd564:	1484b03a 	or	r2,r2,r18
210cd568:	1004c03a 	cmpne	r2,r2,zero
210cd56c:	1104b03a 	or	r2,r2,r4
210cd570:	10c001cc 	andi	r3,r2,7
210cd574:	18000b1e 	bne	r3,zero,210cd5a4 <__muldf3+0x6f0>
210cd578:	0021883a 	mov	r16,zero
210cd57c:	1004d0fa 	srli	r2,r2,3
210cd580:	b4c0004c 	andi	r19,r22,1
210cd584:	0009883a 	mov	r4,zero
210cd588:	10e4b03a 	or	r18,r2,r3
210cd58c:	003ea306 	br	210cd01c <__flash_rwdata_start+0xffffb724>
210cd590:	0007883a 	mov	r3,zero
210cd594:	1820927a 	slli	r16,r3,9
210cd598:	1806977a 	slli	r3,r3,29
210cd59c:	8020d33a 	srli	r16,r16,12
210cd5a0:	003ff606 	br	210cd57c <__flash_rwdata_start+0xffffbc84>
210cd5a4:	110003cc 	andi	r4,r2,15
210cd5a8:	00c00104 	movi	r3,4
210cd5ac:	20fff826 	beq	r4,r3,210cd590 <__flash_rwdata_start+0xffffbc98>
210cd5b0:	0007883a 	mov	r3,zero
210cd5b4:	003fd906 	br	210cd51c <__flash_rwdata_start+0xffffbc24>
210cd5b8:	0005883a 	mov	r2,zero
210cd5bc:	003fe906 	br	210cd564 <__flash_rwdata_start+0xffffbc6c>
210cd5c0:	00800434 	movhi	r2,16
210cd5c4:	84000234 	orhi	r16,r16,8
210cd5c8:	10bfffc4 	addi	r2,r2,-1
210cd5cc:	e4c0004c 	andi	r19,fp,1
210cd5d0:	80a0703a 	and	r16,r16,r2
210cd5d4:	003ef606 	br	210cd1b0 <__flash_rwdata_start+0xffffb8b8>

210cd5d8 <__subdf3>:
210cd5d8:	00c00434 	movhi	r3,16
210cd5dc:	18ffffc4 	addi	r3,r3,-1
210cd5e0:	defffb04 	addi	sp,sp,-20
210cd5e4:	28d2703a 	and	r9,r5,r3
210cd5e8:	3814d53a 	srli	r10,r7,20
210cd5ec:	38c6703a 	and	r3,r7,r3
210cd5f0:	3004d77a 	srli	r2,r6,29
210cd5f4:	dc800215 	stw	r18,8(sp)
210cd5f8:	dc000015 	stw	r16,0(sp)
210cd5fc:	2824d7fa 	srli	r18,r5,31
210cd600:	2820d53a 	srli	r16,r5,20
210cd604:	481290fa 	slli	r9,r9,3
210cd608:	200ad77a 	srli	r5,r4,29
210cd60c:	180690fa 	slli	r3,r3,3
210cd610:	dc400115 	stw	r17,4(sp)
210cd614:	dfc00415 	stw	ra,16(sp)
210cd618:	202290fa 	slli	r17,r4,3
210cd61c:	dcc00315 	stw	r19,12(sp)
210cd620:	5281ffcc 	andi	r10,r10,2047
210cd624:	0101ffc4 	movi	r4,2047
210cd628:	9011883a 	mov	r8,r18
210cd62c:	8401ffcc 	andi	r16,r16,2047
210cd630:	94803fcc 	andi	r18,r18,255
210cd634:	494ab03a 	or	r5,r9,r5
210cd638:	380ed7fa 	srli	r7,r7,31
210cd63c:	1886b03a 	or	r3,r3,r2
210cd640:	300c90fa 	slli	r6,r6,3
210cd644:	51009026 	beq	r10,r4,210cd888 <__subdf3+0x2b0>
210cd648:	39c0005c 	xori	r7,r7,1
210cd64c:	8285c83a 	sub	r2,r16,r10
210cd650:	91c06f26 	beq	r18,r7,210cd810 <__subdf3+0x238>
210cd654:	0080b10e 	bge	zero,r2,210cd91c <__subdf3+0x344>
210cd658:	50002a1e 	bne	r10,zero,210cd704 <__subdf3+0x12c>
210cd65c:	1988b03a 	or	r4,r3,r6
210cd660:	2000941e 	bne	r4,zero,210cd8b4 <__subdf3+0x2dc>
210cd664:	888001cc 	andi	r2,r17,7
210cd668:	10005b26 	beq	r2,zero,210cd7d8 <__subdf3+0x200>
210cd66c:	88c003cc 	andi	r3,r17,15
210cd670:	00800104 	movi	r2,4
210cd674:	18805826 	beq	r3,r2,210cd7d8 <__subdf3+0x200>
210cd678:	88c00104 	addi	r3,r17,4
210cd67c:	1c63803a 	cmpltu	r17,r3,r17
210cd680:	2c4b883a 	add	r5,r5,r17
210cd684:	2880202c 	andhi	r2,r5,128
210cd688:	9200004c 	andi	r8,r18,1
210cd68c:	1823883a 	mov	r17,r3
210cd690:	10005426 	beq	r2,zero,210cd7e4 <__subdf3+0x20c>
210cd694:	84000044 	addi	r16,r16,1
210cd698:	0081ffc4 	movi	r2,2047
210cd69c:	8080bf26 	beq	r16,r2,210cd99c <__subdf3+0x3c4>
210cd6a0:	013fe034 	movhi	r4,65408
210cd6a4:	213fffc4 	addi	r4,r4,-1
210cd6a8:	290a703a 	and	r5,r5,r4
210cd6ac:	2804977a 	slli	r2,r5,29
210cd6b0:	280a927a 	slli	r5,r5,9
210cd6b4:	8822d0fa 	srli	r17,r17,3
210cd6b8:	8401ffcc 	andi	r16,r16,2047
210cd6bc:	2808d33a 	srli	r4,r5,12
210cd6c0:	1444b03a 	or	r2,r2,r17
210cd6c4:	8401ffcc 	andi	r16,r16,2047
210cd6c8:	800a953a 	slli	r5,r16,20
210cd6cc:	40c03fcc 	andi	r3,r8,255
210cd6d0:	04000434 	movhi	r16,16
210cd6d4:	180697fa 	slli	r3,r3,31
210cd6d8:	843fffc4 	addi	r16,r16,-1
210cd6dc:	2420703a 	and	r16,r4,r16
210cd6e0:	8160b03a 	or	r16,r16,r5
210cd6e4:	80c6b03a 	or	r3,r16,r3
210cd6e8:	dfc00417 	ldw	ra,16(sp)
210cd6ec:	dcc00317 	ldw	r19,12(sp)
210cd6f0:	dc800217 	ldw	r18,8(sp)
210cd6f4:	dc400117 	ldw	r17,4(sp)
210cd6f8:	dc000017 	ldw	r16,0(sp)
210cd6fc:	dec00504 	addi	sp,sp,20
210cd700:	f800283a 	ret
210cd704:	0101ffc4 	movi	r4,2047
210cd708:	813fd626 	beq	r16,r4,210cd664 <__flash_rwdata_start+0xffffbd6c>
210cd70c:	18c02034 	orhi	r3,r3,128
210cd710:	01000e04 	movi	r4,56
210cd714:	2080a416 	blt	r4,r2,210cd9a8 <__subdf3+0x3d0>
210cd718:	010007c4 	movi	r4,31
210cd71c:	2080c716 	blt	r4,r2,210cda3c <__subdf3+0x464>
210cd720:	01000804 	movi	r4,32
210cd724:	2089c83a 	sub	r4,r4,r2
210cd728:	1910983a 	sll	r8,r3,r4
210cd72c:	308ed83a 	srl	r7,r6,r2
210cd730:	3108983a 	sll	r4,r6,r4
210cd734:	1884d83a 	srl	r2,r3,r2
210cd738:	41ccb03a 	or	r6,r8,r7
210cd73c:	2008c03a 	cmpne	r4,r4,zero
210cd740:	310cb03a 	or	r6,r6,r4
210cd744:	898dc83a 	sub	r6,r17,r6
210cd748:	89a3803a 	cmpltu	r17,r17,r6
210cd74c:	288bc83a 	sub	r5,r5,r2
210cd750:	2c4bc83a 	sub	r5,r5,r17
210cd754:	3023883a 	mov	r17,r6
210cd758:	2880202c 	andhi	r2,r5,128
210cd75c:	10006b26 	beq	r2,zero,210cd90c <__subdf3+0x334>
210cd760:	04c02034 	movhi	r19,128
210cd764:	9cffffc4 	addi	r19,r19,-1
210cd768:	2ce6703a 	and	r19,r5,r19
210cd76c:	98007c26 	beq	r19,zero,210cd960 <__subdf3+0x388>
210cd770:	9809883a 	mov	r4,r19
210cd774:	10ce0a40 	call	210ce0a4 <__clzsi2>
210cd778:	10fffe04 	addi	r3,r2,-8
210cd77c:	010007c4 	movi	r4,31
210cd780:	20c07d16 	blt	r4,r3,210cd978 <__subdf3+0x3a0>
210cd784:	01400a04 	movi	r5,40
210cd788:	2885c83a 	sub	r2,r5,r2
210cd78c:	888ad83a 	srl	r5,r17,r2
210cd790:	98e6983a 	sll	r19,r19,r3
210cd794:	88e2983a 	sll	r17,r17,r3
210cd798:	2ce6b03a 	or	r19,r5,r19
210cd79c:	1c007a16 	blt	r3,r16,210cd988 <__subdf3+0x3b0>
210cd7a0:	1c21c83a 	sub	r16,r3,r16
210cd7a4:	81400044 	addi	r5,r16,1
210cd7a8:	00c007c4 	movi	r3,31
210cd7ac:	19409616 	blt	r3,r5,210cda08 <__subdf3+0x430>
210cd7b0:	1c21c83a 	sub	r16,r3,r16
210cd7b4:	8c08983a 	sll	r4,r17,r16
210cd7b8:	8946d83a 	srl	r3,r17,r5
210cd7bc:	9c20983a 	sll	r16,r19,r16
210cd7c0:	2008c03a 	cmpne	r4,r4,zero
210cd7c4:	994ad83a 	srl	r5,r19,r5
210cd7c8:	1c06b03a 	or	r3,r3,r16
210cd7cc:	1922b03a 	or	r17,r3,r4
210cd7d0:	0021883a 	mov	r16,zero
210cd7d4:	003fa306 	br	210cd664 <__flash_rwdata_start+0xffffbd6c>
210cd7d8:	2880202c 	andhi	r2,r5,128
210cd7dc:	9200004c 	andi	r8,r18,1
210cd7e0:	103fac1e 	bne	r2,zero,210cd694 <__flash_rwdata_start+0xffffbd9c>
210cd7e4:	2804977a 	slli	r2,r5,29
210cd7e8:	8822d0fa 	srli	r17,r17,3
210cd7ec:	00c1ffc4 	movi	r3,2047
210cd7f0:	280ad0fa 	srli	r5,r5,3
210cd7f4:	1444b03a 	or	r2,r2,r17
210cd7f8:	80c02726 	beq	r16,r3,210cd898 <__subdf3+0x2c0>
210cd7fc:	01000434 	movhi	r4,16
210cd800:	213fffc4 	addi	r4,r4,-1
210cd804:	80e0703a 	and	r16,r16,r3
210cd808:	2908703a 	and	r4,r5,r4
210cd80c:	003fad06 	br	210cd6c4 <__flash_rwdata_start+0xffffbdcc>
210cd810:	0080690e 	bge	zero,r2,210cd9b8 <__subdf3+0x3e0>
210cd814:	50002f26 	beq	r10,zero,210cd8d4 <__subdf3+0x2fc>
210cd818:	0101ffc4 	movi	r4,2047
210cd81c:	813f9126 	beq	r16,r4,210cd664 <__flash_rwdata_start+0xffffbd6c>
210cd820:	18c02034 	orhi	r3,r3,128
210cd824:	01000e04 	movi	r4,56
210cd828:	2080b00e 	bge	r4,r2,210cdaec <__subdf3+0x514>
210cd82c:	198cb03a 	or	r6,r3,r6
210cd830:	300ec03a 	cmpne	r7,r6,zero
210cd834:	0005883a 	mov	r2,zero
210cd838:	3c4f883a 	add	r7,r7,r17
210cd83c:	3c63803a 	cmpltu	r17,r7,r17
210cd840:	114b883a 	add	r5,r2,r5
210cd844:	2c4b883a 	add	r5,r5,r17
210cd848:	3823883a 	mov	r17,r7
210cd84c:	2880202c 	andhi	r2,r5,128
210cd850:	10002e26 	beq	r2,zero,210cd90c <__subdf3+0x334>
210cd854:	84000044 	addi	r16,r16,1
210cd858:	0081ffc4 	movi	r2,2047
210cd85c:	8080de26 	beq	r16,r2,210cdbd8 <__subdf3+0x600>
210cd860:	00bfe034 	movhi	r2,65408
210cd864:	10bfffc4 	addi	r2,r2,-1
210cd868:	288a703a 	and	r5,r5,r2
210cd86c:	880cd07a 	srli	r6,r17,1
210cd870:	280897fa 	slli	r4,r5,31
210cd874:	88c0004c 	andi	r3,r17,1
210cd878:	30e2b03a 	or	r17,r6,r3
210cd87c:	280ad07a 	srli	r5,r5,1
210cd880:	8922b03a 	or	r17,r17,r4
210cd884:	003f7706 	br	210cd664 <__flash_rwdata_start+0xffffbd6c>
210cd888:	1984b03a 	or	r2,r3,r6
210cd88c:	103f6e26 	beq	r2,zero,210cd648 <__flash_rwdata_start+0xffffbd50>
210cd890:	39c03fcc 	andi	r7,r7,255
210cd894:	003f6d06 	br	210cd64c <__flash_rwdata_start+0xffffbd54>
210cd898:	1146b03a 	or	r3,r2,r5
210cd89c:	18003f26 	beq	r3,zero,210cd99c <__subdf3+0x3c4>
210cd8a0:	00c00434 	movhi	r3,16
210cd8a4:	29000234 	orhi	r4,r5,8
210cd8a8:	18ffffc4 	addi	r3,r3,-1
210cd8ac:	20c8703a 	and	r4,r4,r3
210cd8b0:	003f8406 	br	210cd6c4 <__flash_rwdata_start+0xffffbdcc>
210cd8b4:	10bfffc4 	addi	r2,r2,-1
210cd8b8:	1000501e 	bne	r2,zero,210cd9fc <__subdf3+0x424>
210cd8bc:	898fc83a 	sub	r7,r17,r6
210cd8c0:	89e3803a 	cmpltu	r17,r17,r7
210cd8c4:	28cbc83a 	sub	r5,r5,r3
210cd8c8:	2c4bc83a 	sub	r5,r5,r17
210cd8cc:	3823883a 	mov	r17,r7
210cd8d0:	003fa106 	br	210cd758 <__flash_rwdata_start+0xffffbe60>
210cd8d4:	1988b03a 	or	r4,r3,r6
210cd8d8:	203f6226 	beq	r4,zero,210cd664 <__flash_rwdata_start+0xffffbd6c>
210cd8dc:	10bfffc4 	addi	r2,r2,-1
210cd8e0:	10009b1e 	bne	r2,zero,210cdb50 <__subdf3+0x578>
210cd8e4:	344d883a 	add	r6,r6,r17
210cd8e8:	3463803a 	cmpltu	r17,r6,r17
210cd8ec:	194b883a 	add	r5,r3,r5
210cd8f0:	2c4b883a 	add	r5,r5,r17
210cd8f4:	3023883a 	mov	r17,r6
210cd8f8:	003fd406 	br	210cd84c <__flash_rwdata_start+0xffffbf54>
210cd8fc:	1106b03a 	or	r3,r2,r4
210cd900:	1800b426 	beq	r3,zero,210cdbd4 <__subdf3+0x5fc>
210cd904:	100b883a 	mov	r5,r2
210cd908:	2023883a 	mov	r17,r4
210cd90c:	888001cc 	andi	r2,r17,7
210cd910:	103f561e 	bne	r2,zero,210cd66c <__flash_rwdata_start+0xffffbd74>
210cd914:	9200004c 	andi	r8,r18,1
210cd918:	003fb206 	br	210cd7e4 <__flash_rwdata_start+0xffffbeec>
210cd91c:	1000531e 	bne	r2,zero,210cda6c <__subdf3+0x494>
210cd920:	80800044 	addi	r2,r16,1
210cd924:	1081ffcc 	andi	r2,r2,2047
210cd928:	01000044 	movi	r4,1
210cd92c:	2080a00e 	bge	r4,r2,210cdbb0 <__subdf3+0x5d8>
210cd930:	8985c83a 	sub	r2,r17,r6
210cd934:	8889803a 	cmpltu	r4,r17,r2
210cd938:	28e7c83a 	sub	r19,r5,r3
210cd93c:	9927c83a 	sub	r19,r19,r4
210cd940:	9900202c 	andhi	r4,r19,128
210cd944:	20006226 	beq	r4,zero,210cdad0 <__subdf3+0x4f8>
210cd948:	3463c83a 	sub	r17,r6,r17
210cd94c:	194bc83a 	sub	r5,r3,r5
210cd950:	344d803a 	cmpltu	r6,r6,r17
210cd954:	29a7c83a 	sub	r19,r5,r6
210cd958:	3825883a 	mov	r18,r7
210cd95c:	983f841e 	bne	r19,zero,210cd770 <__flash_rwdata_start+0xffffbe78>
210cd960:	8809883a 	mov	r4,r17
210cd964:	10ce0a40 	call	210ce0a4 <__clzsi2>
210cd968:	10800804 	addi	r2,r2,32
210cd96c:	10fffe04 	addi	r3,r2,-8
210cd970:	010007c4 	movi	r4,31
210cd974:	20ff830e 	bge	r4,r3,210cd784 <__flash_rwdata_start+0xffffbe8c>
210cd978:	14fff604 	addi	r19,r2,-40
210cd97c:	8ce6983a 	sll	r19,r17,r19
210cd980:	0023883a 	mov	r17,zero
210cd984:	1c3f860e 	bge	r3,r16,210cd7a0 <__flash_rwdata_start+0xffffbea8>
210cd988:	017fe034 	movhi	r5,65408
210cd98c:	297fffc4 	addi	r5,r5,-1
210cd990:	80e1c83a 	sub	r16,r16,r3
210cd994:	994a703a 	and	r5,r19,r5
210cd998:	003f3206 	br	210cd664 <__flash_rwdata_start+0xffffbd6c>
210cd99c:	0009883a 	mov	r4,zero
210cd9a0:	0005883a 	mov	r2,zero
210cd9a4:	003f4706 	br	210cd6c4 <__flash_rwdata_start+0xffffbdcc>
210cd9a8:	198cb03a 	or	r6,r3,r6
210cd9ac:	300cc03a 	cmpne	r6,r6,zero
210cd9b0:	0005883a 	mov	r2,zero
210cd9b4:	003f6306 	br	210cd744 <__flash_rwdata_start+0xffffbe4c>
210cd9b8:	10009d1e 	bne	r2,zero,210cdc30 <__subdf3+0x658>
210cd9bc:	81c00044 	addi	r7,r16,1
210cd9c0:	3881ffcc 	andi	r2,r7,2047
210cd9c4:	02400044 	movi	r9,1
210cd9c8:	4880680e 	bge	r9,r2,210cdb6c <__subdf3+0x594>
210cd9cc:	0081ffc4 	movi	r2,2047
210cd9d0:	3880ae26 	beq	r7,r2,210cdc8c <__subdf3+0x6b4>
210cd9d4:	344d883a 	add	r6,r6,r17
210cd9d8:	3463803a 	cmpltu	r17,r6,r17
210cd9dc:	194b883a 	add	r5,r3,r5
210cd9e0:	2c4b883a 	add	r5,r5,r17
210cd9e4:	282297fa 	slli	r17,r5,31
210cd9e8:	300cd07a 	srli	r6,r6,1
210cd9ec:	280ad07a 	srli	r5,r5,1
210cd9f0:	3821883a 	mov	r16,r7
210cd9f4:	89a2b03a 	or	r17,r17,r6
210cd9f8:	003f1a06 	br	210cd664 <__flash_rwdata_start+0xffffbd6c>
210cd9fc:	0101ffc4 	movi	r4,2047
210cda00:	813f431e 	bne	r16,r4,210cd710 <__flash_rwdata_start+0xffffbe18>
210cda04:	003f1706 	br	210cd664 <__flash_rwdata_start+0xffffbd6c>
210cda08:	80bff844 	addi	r2,r16,-31
210cda0c:	00c00804 	movi	r3,32
210cda10:	9884d83a 	srl	r2,r19,r2
210cda14:	28c05126 	beq	r5,r3,210cdb5c <__subdf3+0x584>
210cda18:	00c00fc4 	movi	r3,63
210cda1c:	1c21c83a 	sub	r16,r3,r16
210cda20:	9c26983a 	sll	r19,r19,r16
210cda24:	9c62b03a 	or	r17,r19,r17
210cda28:	8822c03a 	cmpne	r17,r17,zero
210cda2c:	88a2b03a 	or	r17,r17,r2
210cda30:	000b883a 	mov	r5,zero
210cda34:	0021883a 	mov	r16,zero
210cda38:	003fb406 	br	210cd90c <__flash_rwdata_start+0xffffc014>
210cda3c:	113ff804 	addi	r4,r2,-32
210cda40:	01c00804 	movi	r7,32
210cda44:	1908d83a 	srl	r4,r3,r4
210cda48:	11c04626 	beq	r2,r7,210cdb64 <__subdf3+0x58c>
210cda4c:	01c01004 	movi	r7,64
210cda50:	3885c83a 	sub	r2,r7,r2
210cda54:	1884983a 	sll	r2,r3,r2
210cda58:	118cb03a 	or	r6,r2,r6
210cda5c:	300cc03a 	cmpne	r6,r6,zero
210cda60:	310cb03a 	or	r6,r6,r4
210cda64:	0005883a 	mov	r2,zero
210cda68:	003f3606 	br	210cd744 <__flash_rwdata_start+0xffffbe4c>
210cda6c:	80002b26 	beq	r16,zero,210cdb1c <__subdf3+0x544>
210cda70:	0101ffc4 	movi	r4,2047
210cda74:	51006926 	beq	r10,r4,210cdc1c <__subdf3+0x644>
210cda78:	0085c83a 	sub	r2,zero,r2
210cda7c:	29402034 	orhi	r5,r5,128
210cda80:	01000e04 	movi	r4,56
210cda84:	20807d16 	blt	r4,r2,210cdc7c <__subdf3+0x6a4>
210cda88:	010007c4 	movi	r4,31
210cda8c:	2080d916 	blt	r4,r2,210cddf4 <__subdf3+0x81c>
210cda90:	01000804 	movi	r4,32
210cda94:	2089c83a 	sub	r4,r4,r2
210cda98:	2912983a 	sll	r9,r5,r4
210cda9c:	8890d83a 	srl	r8,r17,r2
210cdaa0:	8908983a 	sll	r4,r17,r4
210cdaa4:	2884d83a 	srl	r2,r5,r2
210cdaa8:	4a22b03a 	or	r17,r9,r8
210cdaac:	2008c03a 	cmpne	r4,r4,zero
210cdab0:	8922b03a 	or	r17,r17,r4
210cdab4:	3463c83a 	sub	r17,r6,r17
210cdab8:	1885c83a 	sub	r2,r3,r2
210cdabc:	344d803a 	cmpltu	r6,r6,r17
210cdac0:	118bc83a 	sub	r5,r2,r6
210cdac4:	5021883a 	mov	r16,r10
210cdac8:	3825883a 	mov	r18,r7
210cdacc:	003f2206 	br	210cd758 <__flash_rwdata_start+0xffffbe60>
210cdad0:	9886b03a 	or	r3,r19,r2
210cdad4:	18001c1e 	bne	r3,zero,210cdb48 <__subdf3+0x570>
210cdad8:	0011883a 	mov	r8,zero
210cdadc:	000b883a 	mov	r5,zero
210cdae0:	0023883a 	mov	r17,zero
210cdae4:	0021883a 	mov	r16,zero
210cdae8:	003f3e06 	br	210cd7e4 <__flash_rwdata_start+0xffffbeec>
210cdaec:	010007c4 	movi	r4,31
210cdaf0:	20803c16 	blt	r4,r2,210cdbe4 <__subdf3+0x60c>
210cdaf4:	01000804 	movi	r4,32
210cdaf8:	2089c83a 	sub	r4,r4,r2
210cdafc:	1912983a 	sll	r9,r3,r4
210cdb00:	308ed83a 	srl	r7,r6,r2
210cdb04:	3108983a 	sll	r4,r6,r4
210cdb08:	1884d83a 	srl	r2,r3,r2
210cdb0c:	49ceb03a 	or	r7,r9,r7
210cdb10:	2008c03a 	cmpne	r4,r4,zero
210cdb14:	390eb03a 	or	r7,r7,r4
210cdb18:	003f4706 	br	210cd838 <__flash_rwdata_start+0xffffbf40>
210cdb1c:	2c48b03a 	or	r4,r5,r17
210cdb20:	20003e26 	beq	r4,zero,210cdc1c <__subdf3+0x644>
210cdb24:	0084303a 	nor	r2,zero,r2
210cdb28:	10003a1e 	bne	r2,zero,210cdc14 <__subdf3+0x63c>
210cdb2c:	3463c83a 	sub	r17,r6,r17
210cdb30:	194bc83a 	sub	r5,r3,r5
210cdb34:	344d803a 	cmpltu	r6,r6,r17
210cdb38:	298bc83a 	sub	r5,r5,r6
210cdb3c:	5021883a 	mov	r16,r10
210cdb40:	3825883a 	mov	r18,r7
210cdb44:	003f0406 	br	210cd758 <__flash_rwdata_start+0xffffbe60>
210cdb48:	1023883a 	mov	r17,r2
210cdb4c:	003f0706 	br	210cd76c <__flash_rwdata_start+0xffffbe74>
210cdb50:	0101ffc4 	movi	r4,2047
210cdb54:	813f331e 	bne	r16,r4,210cd824 <__flash_rwdata_start+0xffffbf2c>
210cdb58:	003ec206 	br	210cd664 <__flash_rwdata_start+0xffffbd6c>
210cdb5c:	0027883a 	mov	r19,zero
210cdb60:	003fb006 	br	210cda24 <__flash_rwdata_start+0xffffc12c>
210cdb64:	0005883a 	mov	r2,zero
210cdb68:	003fbb06 	br	210cda58 <__flash_rwdata_start+0xffffc160>
210cdb6c:	2c44b03a 	or	r2,r5,r17
210cdb70:	80008b1e 	bne	r16,zero,210cdda0 <__subdf3+0x7c8>
210cdb74:	1000b526 	beq	r2,zero,210cde4c <__subdf3+0x874>
210cdb78:	1984b03a 	or	r2,r3,r6
210cdb7c:	103eb926 	beq	r2,zero,210cd664 <__flash_rwdata_start+0xffffbd6c>
210cdb80:	3449883a 	add	r4,r6,r17
210cdb84:	2463803a 	cmpltu	r17,r4,r17
210cdb88:	194b883a 	add	r5,r3,r5
210cdb8c:	2c4b883a 	add	r5,r5,r17
210cdb90:	2880202c 	andhi	r2,r5,128
210cdb94:	2023883a 	mov	r17,r4
210cdb98:	103f5c26 	beq	r2,zero,210cd90c <__flash_rwdata_start+0xffffc014>
210cdb9c:	00bfe034 	movhi	r2,65408
210cdba0:	10bfffc4 	addi	r2,r2,-1
210cdba4:	4821883a 	mov	r16,r9
210cdba8:	288a703a 	and	r5,r5,r2
210cdbac:	003ead06 	br	210cd664 <__flash_rwdata_start+0xffffbd6c>
210cdbb0:	2c44b03a 	or	r2,r5,r17
210cdbb4:	8000291e 	bne	r16,zero,210cdc5c <__subdf3+0x684>
210cdbb8:	10004f1e 	bne	r2,zero,210cdcf8 <__subdf3+0x720>
210cdbbc:	1984b03a 	or	r2,r3,r6
210cdbc0:	10000426 	beq	r2,zero,210cdbd4 <__subdf3+0x5fc>
210cdbc4:	180b883a 	mov	r5,r3
210cdbc8:	3023883a 	mov	r17,r6
210cdbcc:	3825883a 	mov	r18,r7
210cdbd0:	003ea406 	br	210cd664 <__flash_rwdata_start+0xffffbd6c>
210cdbd4:	0011883a 	mov	r8,zero
210cdbd8:	000b883a 	mov	r5,zero
210cdbdc:	0023883a 	mov	r17,zero
210cdbe0:	003f0006 	br	210cd7e4 <__flash_rwdata_start+0xffffbeec>
210cdbe4:	11fff804 	addi	r7,r2,-32
210cdbe8:	19c8d83a 	srl	r4,r3,r7
210cdbec:	01c00804 	movi	r7,32
210cdbf0:	11c07e26 	beq	r2,r7,210cddec <__subdf3+0x814>
210cdbf4:	01c01004 	movi	r7,64
210cdbf8:	3885c83a 	sub	r2,r7,r2
210cdbfc:	1884983a 	sll	r2,r3,r2
210cdc00:	118cb03a 	or	r6,r2,r6
210cdc04:	300ec03a 	cmpne	r7,r6,zero
210cdc08:	390eb03a 	or	r7,r7,r4
210cdc0c:	0005883a 	mov	r2,zero
210cdc10:	003f0906 	br	210cd838 <__flash_rwdata_start+0xffffbf40>
210cdc14:	0101ffc4 	movi	r4,2047
210cdc18:	513f991e 	bne	r10,r4,210cda80 <__flash_rwdata_start+0xffffc188>
210cdc1c:	180b883a 	mov	r5,r3
210cdc20:	3023883a 	mov	r17,r6
210cdc24:	5021883a 	mov	r16,r10
210cdc28:	3825883a 	mov	r18,r7
210cdc2c:	003e8d06 	br	210cd664 <__flash_rwdata_start+0xffffbd6c>
210cdc30:	80001a1e 	bne	r16,zero,210cdc9c <__subdf3+0x6c4>
210cdc34:	2c48b03a 	or	r4,r5,r17
210cdc38:	20005526 	beq	r4,zero,210cdd90 <__subdf3+0x7b8>
210cdc3c:	0084303a 	nor	r2,zero,r2
210cdc40:	1000511e 	bne	r2,zero,210cdd88 <__subdf3+0x7b0>
210cdc44:	89a3883a 	add	r17,r17,r6
210cdc48:	194b883a 	add	r5,r3,r5
210cdc4c:	898d803a 	cmpltu	r6,r17,r6
210cdc50:	298b883a 	add	r5,r5,r6
210cdc54:	5021883a 	mov	r16,r10
210cdc58:	003efc06 	br	210cd84c <__flash_rwdata_start+0xffffbf54>
210cdc5c:	1000341e 	bne	r2,zero,210cdd30 <__subdf3+0x758>
210cdc60:	1984b03a 	or	r2,r3,r6
210cdc64:	10006f26 	beq	r2,zero,210cde24 <__subdf3+0x84c>
210cdc68:	180b883a 	mov	r5,r3
210cdc6c:	3023883a 	mov	r17,r6
210cdc70:	3825883a 	mov	r18,r7
210cdc74:	0401ffc4 	movi	r16,2047
210cdc78:	003e7a06 	br	210cd664 <__flash_rwdata_start+0xffffbd6c>
210cdc7c:	2c62b03a 	or	r17,r5,r17
210cdc80:	8822c03a 	cmpne	r17,r17,zero
210cdc84:	0005883a 	mov	r2,zero
210cdc88:	003f8a06 	br	210cdab4 <__flash_rwdata_start+0xffffc1bc>
210cdc8c:	3821883a 	mov	r16,r7
210cdc90:	000b883a 	mov	r5,zero
210cdc94:	0023883a 	mov	r17,zero
210cdc98:	003ed206 	br	210cd7e4 <__flash_rwdata_start+0xffffbeec>
210cdc9c:	0101ffc4 	movi	r4,2047
210cdca0:	51003b26 	beq	r10,r4,210cdd90 <__subdf3+0x7b8>
210cdca4:	0085c83a 	sub	r2,zero,r2
210cdca8:	29402034 	orhi	r5,r5,128
210cdcac:	01000e04 	movi	r4,56
210cdcb0:	20806216 	blt	r4,r2,210cde3c <__subdf3+0x864>
210cdcb4:	010007c4 	movi	r4,31
210cdcb8:	20806b16 	blt	r4,r2,210cde68 <__subdf3+0x890>
210cdcbc:	01000804 	movi	r4,32
210cdcc0:	2089c83a 	sub	r4,r4,r2
210cdcc4:	2912983a 	sll	r9,r5,r4
210cdcc8:	888ed83a 	srl	r7,r17,r2
210cdccc:	8908983a 	sll	r4,r17,r4
210cdcd0:	2884d83a 	srl	r2,r5,r2
210cdcd4:	49e2b03a 	or	r17,r9,r7
210cdcd8:	2008c03a 	cmpne	r4,r4,zero
210cdcdc:	8922b03a 	or	r17,r17,r4
210cdce0:	89a3883a 	add	r17,r17,r6
210cdce4:	10c5883a 	add	r2,r2,r3
210cdce8:	898d803a 	cmpltu	r6,r17,r6
210cdcec:	118b883a 	add	r5,r2,r6
210cdcf0:	5021883a 	mov	r16,r10
210cdcf4:	003ed506 	br	210cd84c <__flash_rwdata_start+0xffffbf54>
210cdcf8:	1984b03a 	or	r2,r3,r6
210cdcfc:	103e5926 	beq	r2,zero,210cd664 <__flash_rwdata_start+0xffffbd6c>
210cdd00:	8989c83a 	sub	r4,r17,r6
210cdd04:	8911803a 	cmpltu	r8,r17,r4
210cdd08:	28c5c83a 	sub	r2,r5,r3
210cdd0c:	1205c83a 	sub	r2,r2,r8
210cdd10:	1200202c 	andhi	r8,r2,128
210cdd14:	403ef926 	beq	r8,zero,210cd8fc <__flash_rwdata_start+0xffffc004>
210cdd18:	3463c83a 	sub	r17,r6,r17
210cdd1c:	194bc83a 	sub	r5,r3,r5
210cdd20:	344d803a 	cmpltu	r6,r6,r17
210cdd24:	298bc83a 	sub	r5,r5,r6
210cdd28:	3825883a 	mov	r18,r7
210cdd2c:	003e4d06 	br	210cd664 <__flash_rwdata_start+0xffffbd6c>
210cdd30:	1984b03a 	or	r2,r3,r6
210cdd34:	10002b26 	beq	r2,zero,210cdde4 <__subdf3+0x80c>
210cdd38:	2808d0fa 	srli	r4,r5,3
210cdd3c:	8822d0fa 	srli	r17,r17,3
210cdd40:	280a977a 	slli	r5,r5,29
210cdd44:	2080022c 	andhi	r2,r4,8
210cdd48:	2c62b03a 	or	r17,r5,r17
210cdd4c:	10000826 	beq	r2,zero,210cdd70 <__subdf3+0x798>
210cdd50:	1810d0fa 	srli	r8,r3,3
210cdd54:	4080022c 	andhi	r2,r8,8
210cdd58:	1000051e 	bne	r2,zero,210cdd70 <__subdf3+0x798>
210cdd5c:	300cd0fa 	srli	r6,r6,3
210cdd60:	1804977a 	slli	r2,r3,29
210cdd64:	4009883a 	mov	r4,r8
210cdd68:	3825883a 	mov	r18,r7
210cdd6c:	11a2b03a 	or	r17,r2,r6
210cdd70:	880ad77a 	srli	r5,r17,29
210cdd74:	200890fa 	slli	r4,r4,3
210cdd78:	882290fa 	slli	r17,r17,3
210cdd7c:	0401ffc4 	movi	r16,2047
210cdd80:	290ab03a 	or	r5,r5,r4
210cdd84:	003e3706 	br	210cd664 <__flash_rwdata_start+0xffffbd6c>
210cdd88:	0101ffc4 	movi	r4,2047
210cdd8c:	513fc71e 	bne	r10,r4,210cdcac <__flash_rwdata_start+0xffffc3b4>
210cdd90:	180b883a 	mov	r5,r3
210cdd94:	3023883a 	mov	r17,r6
210cdd98:	5021883a 	mov	r16,r10
210cdd9c:	003e3106 	br	210cd664 <__flash_rwdata_start+0xffffbd6c>
210cdda0:	10002d26 	beq	r2,zero,210cde58 <__subdf3+0x880>
210cdda4:	1984b03a 	or	r2,r3,r6
210cdda8:	10000e26 	beq	r2,zero,210cdde4 <__subdf3+0x80c>
210cddac:	2808d0fa 	srli	r4,r5,3
210cddb0:	8822d0fa 	srli	r17,r17,3
210cddb4:	280a977a 	slli	r5,r5,29
210cddb8:	2080022c 	andhi	r2,r4,8
210cddbc:	2c62b03a 	or	r17,r5,r17
210cddc0:	103feb26 	beq	r2,zero,210cdd70 <__flash_rwdata_start+0xffffc478>
210cddc4:	180ed0fa 	srli	r7,r3,3
210cddc8:	3880022c 	andhi	r2,r7,8
210cddcc:	103fe81e 	bne	r2,zero,210cdd70 <__flash_rwdata_start+0xffffc478>
210cddd0:	300cd0fa 	srli	r6,r6,3
210cddd4:	1804977a 	slli	r2,r3,29
210cddd8:	3809883a 	mov	r4,r7
210cdddc:	11a2b03a 	or	r17,r2,r6
210cdde0:	003fe306 	br	210cdd70 <__flash_rwdata_start+0xffffc478>
210cdde4:	0401ffc4 	movi	r16,2047
210cdde8:	003e1e06 	br	210cd664 <__flash_rwdata_start+0xffffbd6c>
210cddec:	0005883a 	mov	r2,zero
210cddf0:	003f8306 	br	210cdc00 <__flash_rwdata_start+0xffffc308>
210cddf4:	113ff804 	addi	r4,r2,-32
210cddf8:	02000804 	movi	r8,32
210cddfc:	2908d83a 	srl	r4,r5,r4
210cde00:	12002526 	beq	r2,r8,210cde98 <__subdf3+0x8c0>
210cde04:	02001004 	movi	r8,64
210cde08:	4085c83a 	sub	r2,r8,r2
210cde0c:	288a983a 	sll	r5,r5,r2
210cde10:	2c62b03a 	or	r17,r5,r17
210cde14:	8822c03a 	cmpne	r17,r17,zero
210cde18:	8922b03a 	or	r17,r17,r4
210cde1c:	0005883a 	mov	r2,zero
210cde20:	003f2406 	br	210cdab4 <__flash_rwdata_start+0xffffc1bc>
210cde24:	01402034 	movhi	r5,128
210cde28:	0011883a 	mov	r8,zero
210cde2c:	297fffc4 	addi	r5,r5,-1
210cde30:	047ffe04 	movi	r17,-8
210cde34:	0401ffc4 	movi	r16,2047
210cde38:	003e6a06 	br	210cd7e4 <__flash_rwdata_start+0xffffbeec>
210cde3c:	2c62b03a 	or	r17,r5,r17
210cde40:	8822c03a 	cmpne	r17,r17,zero
210cde44:	0005883a 	mov	r2,zero
210cde48:	003fa506 	br	210cdce0 <__flash_rwdata_start+0xffffc3e8>
210cde4c:	180b883a 	mov	r5,r3
210cde50:	3023883a 	mov	r17,r6
210cde54:	003e0306 	br	210cd664 <__flash_rwdata_start+0xffffbd6c>
210cde58:	180b883a 	mov	r5,r3
210cde5c:	3023883a 	mov	r17,r6
210cde60:	0401ffc4 	movi	r16,2047
210cde64:	003dff06 	br	210cd664 <__flash_rwdata_start+0xffffbd6c>
210cde68:	113ff804 	addi	r4,r2,-32
210cde6c:	01c00804 	movi	r7,32
210cde70:	2908d83a 	srl	r4,r5,r4
210cde74:	11c00a26 	beq	r2,r7,210cdea0 <__subdf3+0x8c8>
210cde78:	01c01004 	movi	r7,64
210cde7c:	3885c83a 	sub	r2,r7,r2
210cde80:	288a983a 	sll	r5,r5,r2
210cde84:	2c62b03a 	or	r17,r5,r17
210cde88:	8822c03a 	cmpne	r17,r17,zero
210cde8c:	8922b03a 	or	r17,r17,r4
210cde90:	0005883a 	mov	r2,zero
210cde94:	003f9206 	br	210cdce0 <__flash_rwdata_start+0xffffc3e8>
210cde98:	000b883a 	mov	r5,zero
210cde9c:	003fdc06 	br	210cde10 <__flash_rwdata_start+0xffffc518>
210cdea0:	000b883a 	mov	r5,zero
210cdea4:	003ff706 	br	210cde84 <__flash_rwdata_start+0xffffc58c>

210cdea8 <__fixdfsi>:
210cdea8:	2806d53a 	srli	r3,r5,20
210cdeac:	00800434 	movhi	r2,16
210cdeb0:	10bfffc4 	addi	r2,r2,-1
210cdeb4:	18c1ffcc 	andi	r3,r3,2047
210cdeb8:	0180ff84 	movi	r6,1022
210cdebc:	2884703a 	and	r2,r5,r2
210cdec0:	280ad7fa 	srli	r5,r5,31
210cdec4:	30c0130e 	bge	r6,r3,210cdf14 <__fixdfsi+0x6c>
210cdec8:	01810744 	movi	r6,1053
210cdecc:	30c00d16 	blt	r6,r3,210cdf04 <__fixdfsi+0x5c>
210cded0:	01810cc4 	movi	r6,1075
210cded4:	30cdc83a 	sub	r6,r6,r3
210cded8:	01c007c4 	movi	r7,31
210cdedc:	10800434 	orhi	r2,r2,16
210cdee0:	39800e0e 	bge	r7,r6,210cdf1c <__fixdfsi+0x74>
210cdee4:	010104c4 	movi	r4,1043
210cdee8:	20c7c83a 	sub	r3,r4,r3
210cdeec:	10c6d83a 	srl	r3,r2,r3
210cdef0:	29403fcc 	andi	r5,r5,255
210cdef4:	0145c83a 	sub	r2,zero,r5
210cdef8:	1884f03a 	xor	r2,r3,r2
210cdefc:	1145883a 	add	r2,r2,r5
210cdf00:	f800283a 	ret
210cdf04:	00a00034 	movhi	r2,32768
210cdf08:	10bfffc4 	addi	r2,r2,-1
210cdf0c:	2885883a 	add	r2,r5,r2
210cdf10:	f800283a 	ret
210cdf14:	0005883a 	mov	r2,zero
210cdf18:	f800283a 	ret
210cdf1c:	18fefb44 	addi	r3,r3,-1043
210cdf20:	2188d83a 	srl	r4,r4,r6
210cdf24:	10c6983a 	sll	r3,r2,r3
210cdf28:	20c6b03a 	or	r3,r4,r3
210cdf2c:	003ff006 	br	210cdef0 <__flash_rwdata_start+0xffffc5f8>

210cdf30 <__floatsidf>:
210cdf30:	defffd04 	addi	sp,sp,-12
210cdf34:	dc400115 	stw	r17,4(sp)
210cdf38:	dfc00215 	stw	ra,8(sp)
210cdf3c:	dc000015 	stw	r16,0(sp)
210cdf40:	2023883a 	mov	r17,r4
210cdf44:	20001426 	beq	r4,zero,210cdf98 <__floatsidf+0x68>
210cdf48:	2020d7fa 	srli	r16,r4,31
210cdf4c:	80000126 	beq	r16,zero,210cdf54 <__floatsidf+0x24>
210cdf50:	0123c83a 	sub	r17,zero,r4
210cdf54:	8809883a 	mov	r4,r17
210cdf58:	10ce0a40 	call	210ce0a4 <__clzsi2>
210cdf5c:	01410784 	movi	r5,1054
210cdf60:	00c00284 	movi	r3,10
210cdf64:	288bc83a 	sub	r5,r5,r2
210cdf68:	18801c16 	blt	r3,r2,210cdfdc <__floatsidf+0xac>
210cdf6c:	00c002c4 	movi	r3,11
210cdf70:	1887c83a 	sub	r3,r3,r2
210cdf74:	88c8d83a 	srl	r4,r17,r3
210cdf78:	00c00434 	movhi	r3,16
210cdf7c:	18ffffc4 	addi	r3,r3,-1
210cdf80:	10800544 	addi	r2,r2,21
210cdf84:	20c8703a 	and	r4,r4,r3
210cdf88:	8884983a 	sll	r2,r17,r2
210cdf8c:	28c1ffcc 	andi	r3,r5,2047
210cdf90:	800d883a 	mov	r6,r16
210cdf94:	00000406 	br	210cdfa8 <__floatsidf+0x78>
210cdf98:	000d883a 	mov	r6,zero
210cdf9c:	0007883a 	mov	r3,zero
210cdfa0:	0009883a 	mov	r4,zero
210cdfa4:	0005883a 	mov	r2,zero
210cdfa8:	180a953a 	slli	r5,r3,20
210cdfac:	31803fcc 	andi	r6,r6,255
210cdfb0:	00c00434 	movhi	r3,16
210cdfb4:	300c97fa 	slli	r6,r6,31
210cdfb8:	18ffffc4 	addi	r3,r3,-1
210cdfbc:	20c6703a 	and	r3,r4,r3
210cdfc0:	1946b03a 	or	r3,r3,r5
210cdfc4:	1986b03a 	or	r3,r3,r6
210cdfc8:	dfc00217 	ldw	ra,8(sp)
210cdfcc:	dc400117 	ldw	r17,4(sp)
210cdfd0:	dc000017 	ldw	r16,0(sp)
210cdfd4:	dec00304 	addi	sp,sp,12
210cdfd8:	f800283a 	ret
210cdfdc:	10fffd44 	addi	r3,r2,-11
210cdfe0:	88c8983a 	sll	r4,r17,r3
210cdfe4:	00800434 	movhi	r2,16
210cdfe8:	10bfffc4 	addi	r2,r2,-1
210cdfec:	2088703a 	and	r4,r4,r2
210cdff0:	28c1ffcc 	andi	r3,r5,2047
210cdff4:	800d883a 	mov	r6,r16
210cdff8:	0005883a 	mov	r2,zero
210cdffc:	003fea06 	br	210cdfa8 <__flash_rwdata_start+0xffffc6b0>

210ce000 <__floatunsidf>:
210ce000:	defffe04 	addi	sp,sp,-8
210ce004:	dc000015 	stw	r16,0(sp)
210ce008:	dfc00115 	stw	ra,4(sp)
210ce00c:	2021883a 	mov	r16,r4
210ce010:	20001026 	beq	r4,zero,210ce054 <__floatunsidf+0x54>
210ce014:	10ce0a40 	call	210ce0a4 <__clzsi2>
210ce018:	01410784 	movi	r5,1054
210ce01c:	100d883a 	mov	r6,r2
210ce020:	288bc83a 	sub	r5,r5,r2
210ce024:	00800284 	movi	r2,10
210ce028:	11801616 	blt	r2,r6,210ce084 <__floatunsidf+0x84>
210ce02c:	008002c4 	movi	r2,11
210ce030:	1185c83a 	sub	r2,r2,r6
210ce034:	8084d83a 	srl	r2,r16,r2
210ce038:	00c00434 	movhi	r3,16
210ce03c:	31c00544 	addi	r7,r6,21
210ce040:	18ffffc4 	addi	r3,r3,-1
210ce044:	81e0983a 	sll	r16,r16,r7
210ce048:	10cc703a 	and	r6,r2,r3
210ce04c:	2941ffcc 	andi	r5,r5,2047
210ce050:	00000206 	br	210ce05c <__floatunsidf+0x5c>
210ce054:	000b883a 	mov	r5,zero
210ce058:	000d883a 	mov	r6,zero
210ce05c:	280a953a 	slli	r5,r5,20
210ce060:	00c00434 	movhi	r3,16
210ce064:	18ffffc4 	addi	r3,r3,-1
210ce068:	30c6703a 	and	r3,r6,r3
210ce06c:	8005883a 	mov	r2,r16
210ce070:	1946b03a 	or	r3,r3,r5
210ce074:	dfc00117 	ldw	ra,4(sp)
210ce078:	dc000017 	ldw	r16,0(sp)
210ce07c:	dec00204 	addi	sp,sp,8
210ce080:	f800283a 	ret
210ce084:	31bffd44 	addi	r6,r6,-11
210ce088:	818c983a 	sll	r6,r16,r6
210ce08c:	00800434 	movhi	r2,16
210ce090:	10bfffc4 	addi	r2,r2,-1
210ce094:	2941ffcc 	andi	r5,r5,2047
210ce098:	0021883a 	mov	r16,zero
210ce09c:	308c703a 	and	r6,r6,r2
210ce0a0:	003fee06 	br	210ce05c <__flash_rwdata_start+0xffffc764>

210ce0a4 <__clzsi2>:
210ce0a4:	00bfffd4 	movui	r2,65535
210ce0a8:	11000b36 	bltu	r2,r4,210ce0d8 <__clzsi2+0x34>
210ce0ac:	00803fc4 	movi	r2,255
210ce0b0:	1100122e 	bgeu	r2,r4,210ce0fc <__clzsi2+0x58>
210ce0b4:	00c00204 	movi	r3,8
210ce0b8:	01400604 	movi	r5,24
210ce0bc:	20c8d83a 	srl	r4,r4,r3
210ce0c0:	00840034 	movhi	r2,4096
210ce0c4:	1080e104 	addi	r2,r2,900
210ce0c8:	1109883a 	add	r4,r2,r4
210ce0cc:	20800003 	ldbu	r2,0(r4)
210ce0d0:	2885c83a 	sub	r2,r5,r2
210ce0d4:	f800283a 	ret
210ce0d8:	00804034 	movhi	r2,256
210ce0dc:	10bfffc4 	addi	r2,r2,-1
210ce0e0:	11000336 	bltu	r2,r4,210ce0f0 <__clzsi2+0x4c>
210ce0e4:	00c00404 	movi	r3,16
210ce0e8:	180b883a 	mov	r5,r3
210ce0ec:	003ff306 	br	210ce0bc <__flash_rwdata_start+0xffffc7c4>
210ce0f0:	00c00604 	movi	r3,24
210ce0f4:	01400204 	movi	r5,8
210ce0f8:	003ff006 	br	210ce0bc <__flash_rwdata_start+0xffffc7c4>
210ce0fc:	0007883a 	mov	r3,zero
210ce100:	01400804 	movi	r5,32
210ce104:	003fed06 	br	210ce0bc <__flash_rwdata_start+0xffffc7c4>

210ce108 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
210ce108:	defffd04 	addi	sp,sp,-12
210ce10c:	dc000015 	stw	r16,0(sp)
210ce110:	dfc00215 	stw	ra,8(sp)
210ce114:	dc400115 	stw	r17,4(sp)
210ce118:	2021883a 	mov	r16,r4
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
210ce11c:	20002016 	blt	r4,zero,210ce1a0 <close+0x98>
210ce120:	20c00324 	muli	r3,r4,12
210ce124:	00840034 	movhi	r2,4096
210ce128:	10844c04 	addi	r2,r2,4400
210ce12c:	1885883a 	add	r2,r3,r2

  if (fd)
210ce130:	10001b26 	beq	r2,zero,210ce1a0 <close+0x98>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
210ce134:	10c00017 	ldw	r3,0(r2)
210ce138:	18c00417 	ldw	r3,16(r3)
210ce13c:	18000c26 	beq	r3,zero,210ce170 <close+0x68>
210ce140:	1009883a 	mov	r4,r2
210ce144:	183ee83a 	callr	r3

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
210ce148:	8009883a 	mov	r4,r16
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
210ce14c:	1023883a 	mov	r17,r2

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
210ce150:	10ce5cc0 	call	210ce5cc <alt_release_fd>
    if (rval < 0)
    {
      ALT_ERRNO = -rval;
      return -1;
    }
    return 0;
210ce154:	0005883a 	mov	r2,zero
    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    if (rval < 0)
210ce158:	88000816 	blt	r17,zero,210ce17c <close+0x74>
  else
  {
    ALT_ERRNO = EBADFD;
    return -1;
  }
}
210ce15c:	dfc00217 	ldw	ra,8(sp)
210ce160:	dc400117 	ldw	r17,4(sp)
210ce164:	dc000017 	ldw	r16,0(sp)
210ce168:	dec00304 	addi	sp,sp,12
210ce16c:	f800283a 	ret

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
210ce170:	10ce5cc0 	call	210ce5cc <alt_release_fd>
    if (rval < 0)
    {
      ALT_ERRNO = -rval;
      return -1;
    }
    return 0;
210ce174:	0005883a 	mov	r2,zero
210ce178:	003ff806 	br	210ce15c <__flash_rwdata_start+0xffffc864>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
210ce17c:	00840034 	movhi	r2,4096
210ce180:	10892d04 	addi	r2,r2,9396
210ce184:	10800017 	ldw	r2,0(r2)
210ce188:	10000e26 	beq	r2,zero,210ce1c4 <close+0xbc>
210ce18c:	103ee83a 	callr	r2
    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    if (rval < 0)
    {
      ALT_ERRNO = -rval;
210ce190:	0463c83a 	sub	r17,zero,r17
210ce194:	14400015 	stw	r17,0(r2)
      return -1;
210ce198:	00bfffc4 	movi	r2,-1
210ce19c:	003fef06 	br	210ce15c <__flash_rwdata_start+0xffffc864>
210ce1a0:	00840034 	movhi	r2,4096
210ce1a4:	10892d04 	addi	r2,r2,9396
210ce1a8:	10800017 	ldw	r2,0(r2)
210ce1ac:	10000826 	beq	r2,zero,210ce1d0 <close+0xc8>
210ce1b0:	103ee83a 	callr	r2
    }
    return 0;
  }
  else
  {
    ALT_ERRNO = EBADFD;
210ce1b4:	00c01444 	movi	r3,81
210ce1b8:	10c00015 	stw	r3,0(r2)
    return -1;
210ce1bc:	00bfffc4 	movi	r2,-1
210ce1c0:	003fe606 	br	210ce15c <__flash_rwdata_start+0xffffc864>
210ce1c4:	00840034 	movhi	r2,4096
210ce1c8:	10893b04 	addi	r2,r2,9452
210ce1cc:	003ff006 	br	210ce190 <__flash_rwdata_start+0xffffc898>
210ce1d0:	00840034 	movhi	r2,4096
210ce1d4:	10893b04 	addi	r2,r2,9452
210ce1d8:	003ff606 	br	210ce1b4 <__flash_rwdata_start+0xffffc8bc>

210ce1dc <alt_dcache_flush_all>:
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
210ce1dc:	0005883a 	mov	r2,zero
210ce1e0:	00d00004 	movi	r3,16384
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
210ce1e4:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
210ce1e8:	10800804 	addi	r2,r2,32
210ce1ec:	10fffd1e 	bne	r2,r3,210ce1e4 <__flash_rwdata_start+0xffffc8ec>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
210ce1f0:	f800283a 	ret

210ce1f4 <alt_dev_null_write>:
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  return len;
}
210ce1f4:	3005883a 	mov	r2,r6
210ce1f8:	f800283a 	ret

210ce1fc <_exit>:
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
210ce1fc:	20000226 	beq	r4,zero,210ce208 <_exit+0xc>
    ALT_SIM_FAIL();
210ce200:	002af070 	cmpltui	zero,zero,43969
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
210ce204:	003fff06 	br	210ce204 <__flash_rwdata_start+0xffffc90c>
  } else {
    ALT_SIM_PASS();
210ce208:	002af0b0 	cmpltui	zero,zero,43970
210ce20c:	003ffd06 	br	210ce204 <__flash_rwdata_start+0xffffc90c>

210ce210 <fstat>:
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
210ce210:	20000d16 	blt	r4,zero,210ce248 <fstat+0x38>
210ce214:	21000324 	muli	r4,r4,12
210ce218:	00840034 	movhi	r2,4096
210ce21c:	10844c04 	addi	r2,r2,4400
210ce220:	2089883a 	add	r4,r4,r2
  
  if (fd)
210ce224:	20000826 	beq	r4,zero,210ce248 <fstat+0x38>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
210ce228:	20800017 	ldw	r2,0(r4)
210ce22c:	10800817 	ldw	r2,32(r2)
210ce230:	10000126 	beq	r2,zero,210ce238 <fstat+0x28>
    {
      return fd->dev->fstat(fd, st);
210ce234:	1000683a 	jmp	r2
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
210ce238:	00880004 	movi	r2,8192
210ce23c:	28800115 	stw	r2,4(r5)
      return 0;
210ce240:	0005883a 	mov	r2,zero
210ce244:	f800283a 	ret
210ce248:	00840034 	movhi	r2,4096
210ce24c:	10892d04 	addi	r2,r2,9396
210ce250:	10800017 	ldw	r2,0(r2)
210ce254:	10000926 	beq	r2,zero,210ce27c <fstat+0x6c>
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
210ce258:	deffff04 	addi	sp,sp,-4
210ce25c:	dfc00015 	stw	ra,0(sp)
210ce260:	103ee83a 	callr	r2
      return 0;
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
210ce264:	00c01444 	movi	r3,81
210ce268:	10c00015 	stw	r3,0(r2)
    return -1;
210ce26c:	00bfffc4 	movi	r2,-1
  }
}
210ce270:	dfc00017 	ldw	ra,0(sp)
210ce274:	dec00104 	addi	sp,sp,4
210ce278:	f800283a 	ret
210ce27c:	00840034 	movhi	r2,4096
210ce280:	10893b04 	addi	r2,r2,9452
      return 0;
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
210ce284:	00c01444 	movi	r3,81
210ce288:	10c00015 	stw	r3,0(r2)
    return -1;
210ce28c:	00bfffc4 	movi	r2,-1
  }
}
210ce290:	f800283a 	ret

210ce294 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
210ce294:	defff004 	addi	sp,sp,-64
210ce298:	dfc00f15 	stw	ra,60(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
210ce29c:	20001316 	blt	r4,zero,210ce2ec <isatty+0x58>
210ce2a0:	20800324 	muli	r2,r4,12
210ce2a4:	00c40034 	movhi	r3,4096
210ce2a8:	18c44c04 	addi	r3,r3,4400
210ce2ac:	10c5883a 	add	r2,r2,r3
  
  if (fd)
210ce2b0:	10000e26 	beq	r2,zero,210ce2ec <isatty+0x58>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
210ce2b4:	10800017 	ldw	r2,0(r2)
210ce2b8:	10800817 	ldw	r2,32(r2)
210ce2bc:	10000726 	beq	r2,zero,210ce2dc <isatty+0x48>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
210ce2c0:	d80b883a 	mov	r5,sp
210ce2c4:	10ce2100 	call	210ce210 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
210ce2c8:	d8800117 	ldw	r2,4(sp)
210ce2cc:	10880020 	cmpeqi	r2,r2,8192
  else
  {
    ALT_ERRNO = EBADFD;
    return 0;
  }
}
210ce2d0:	dfc00f17 	ldw	ra,60(sp)
210ce2d4:	dec01004 	addi	sp,sp,64
210ce2d8:	f800283a 	ret
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    {
      return 1;
210ce2dc:	00800044 	movi	r2,1
  else
  {
    ALT_ERRNO = EBADFD;
    return 0;
  }
}
210ce2e0:	dfc00f17 	ldw	ra,60(sp)
210ce2e4:	dec01004 	addi	sp,sp,64
210ce2e8:	f800283a 	ret
210ce2ec:	00840034 	movhi	r2,4096
210ce2f0:	10892d04 	addi	r2,r2,9396
210ce2f4:	10800017 	ldw	r2,0(r2)
210ce2f8:	10000726 	beq	r2,zero,210ce318 <isatty+0x84>
210ce2fc:	103ee83a 	callr	r2
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
210ce300:	00c01444 	movi	r3,81
210ce304:	10c00015 	stw	r3,0(r2)
    return 0;
210ce308:	0005883a 	mov	r2,zero
  }
}
210ce30c:	dfc00f17 	ldw	ra,60(sp)
210ce310:	dec01004 	addi	sp,sp,64
210ce314:	f800283a 	ret
210ce318:	00840034 	movhi	r2,4096
210ce31c:	10893b04 	addi	r2,r2,9452
210ce320:	003ff706 	br	210ce300 <__flash_rwdata_start+0xffffca08>

210ce324 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
210ce324:	deffff04 	addi	sp,sp,-4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
210ce328:	01040034 	movhi	r4,4096
210ce32c:	01484374 	movhi	r5,8461
210ce330:	dfc00015 	stw	ra,0(sp)
210ce334:	2101a304 	addi	r4,r4,1676
210ce338:	29463e04 	addi	r5,r5,6392
210ce33c:	21400a26 	beq	r4,r5,210ce368 <alt_load+0x44>
  {
    while( to != end )
210ce340:	00840034 	movhi	r2,4096
210ce344:	10893604 	addi	r2,r2,9432
210ce348:	20800726 	beq	r4,r2,210ce368 <alt_load+0x44>
    {
      *to++ = *from++;
210ce34c:	21800104 	addi	r6,r4,4
210ce350:	118dc83a 	sub	r6,r2,r6
210ce354:	300cd0ba 	srli	r6,r6,2
210ce358:	31800044 	addi	r6,r6,1
210ce35c:	318d883a 	add	r6,r6,r6
210ce360:	318d883a 	add	r6,r6,r6
210ce364:	10c74500 	call	210c7450 <memcpy>

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
210ce368:	01084334 	movhi	r4,8460
210ce36c:	01484334 	movhi	r5,8460
210ce370:	21000804 	addi	r4,r4,32
210ce374:	29400804 	addi	r5,r5,32
210ce378:	21400a26 	beq	r4,r5,210ce3a4 <alt_load+0x80>
  {
    while( to != end )
210ce37c:	00884334 	movhi	r2,8460
210ce380:	10806404 	addi	r2,r2,400
210ce384:	20800726 	beq	r4,r2,210ce3a4 <alt_load+0x80>
    {
      *to++ = *from++;
210ce388:	21800104 	addi	r6,r4,4
210ce38c:	118dc83a 	sub	r6,r2,r6
210ce390:	300cd0ba 	srli	r6,r6,2
210ce394:	31800044 	addi	r6,r6,1
210ce398:	318d883a 	add	r6,r6,r6
210ce39c:	318d883a 	add	r6,r6,r6
210ce3a0:	10c74500 	call	210c7450 <memcpy>

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
210ce3a4:	01040034 	movhi	r4,4096
210ce3a8:	01484374 	movhi	r5,8461
210ce3ac:	21000004 	addi	r4,r4,0
210ce3b0:	29449b04 	addi	r5,r5,4716
210ce3b4:	21400a26 	beq	r4,r5,210ce3e0 <alt_load+0xbc>
  {
    while( to != end )
210ce3b8:	00840034 	movhi	r2,4096
210ce3bc:	1081a304 	addi	r2,r2,1676
210ce3c0:	20800726 	beq	r4,r2,210ce3e0 <alt_load+0xbc>
    {
      *to++ = *from++;
210ce3c4:	21800104 	addi	r6,r4,4
210ce3c8:	118dc83a 	sub	r6,r2,r6
210ce3cc:	300cd0ba 	srli	r6,r6,2
210ce3d0:	31800044 	addi	r6,r6,1
210ce3d4:	318d883a 	add	r6,r6,r6
210ce3d8:	318d883a 	add	r6,r6,r6
210ce3dc:	10c74500 	call	210c7450 <memcpy>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
210ce3e0:	10ce1dc0 	call	210ce1dc <alt_dcache_flush_all>
  alt_icache_flush_all();
}
210ce3e4:	dfc00017 	ldw	ra,0(sp)
210ce3e8:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
210ce3ec:	10d087c1 	jmpi	210d087c <alt_icache_flush_all>

210ce3f0 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
210ce3f0:	defffe04 	addi	sp,sp,-8
210ce3f4:	dfc00115 	stw	ra,4(sp)
210ce3f8:	dc000015 	stw	r16,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
210ce3fc:	20000e16 	blt	r4,zero,210ce438 <lseek+0x48>
210ce400:	21000324 	muli	r4,r4,12
210ce404:	00840034 	movhi	r2,4096
210ce408:	10844c04 	addi	r2,r2,4400
210ce40c:	2089883a 	add	r4,r4,r2
  
  if (fd) 
210ce410:	20000926 	beq	r4,zero,210ce438 <lseek+0x48>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
210ce414:	20800017 	ldw	r2,0(r4)
210ce418:	10800717 	ldw	r2,28(r2)
210ce41c:	10000f26 	beq	r2,zero,210ce45c <lseek+0x6c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
210ce420:	103ee83a 	callr	r2
  else  
  {
    rc = -EBADFD;
  }

  if (rc < 0)
210ce424:	10001216 	blt	r2,zero,210ce470 <lseek+0x80>
    ALT_ERRNO = -rc;
    rc = -1;
  }

  return rc;
}
210ce428:	dfc00117 	ldw	ra,4(sp)
210ce42c:	dc000017 	ldw	r16,0(sp)
210ce430:	dec00204 	addi	sp,sp,8
210ce434:	f800283a 	ret
210ce438:	04001444 	movi	r16,81
210ce43c:	00840034 	movhi	r2,4096
210ce440:	10892d04 	addi	r2,r2,9396
210ce444:	10800017 	ldw	r2,0(r2)
210ce448:	10000626 	beq	r2,zero,210ce464 <lseek+0x74>
210ce44c:	103ee83a 	callr	r2
    rc = -EBADFD;
  }

  if (rc < 0)
  {
    ALT_ERRNO = -rc;
210ce450:	14000015 	stw	r16,0(r2)
    rc = -1;
210ce454:	00bfffc4 	movi	r2,-1
210ce458:	003ff306 	br	210ce428 <__flash_rwdata_start+0xffffcb30>
210ce45c:	04002184 	movi	r16,134
210ce460:	003ff606 	br	210ce43c <__flash_rwdata_start+0xffffcb44>
210ce464:	00840034 	movhi	r2,4096
210ce468:	10893b04 	addi	r2,r2,9452
210ce46c:	003ff806 	br	210ce450 <__flash_rwdata_start+0xffffcb58>
210ce470:	00a1c83a 	sub	r16,zero,r2
210ce474:	003ff106 	br	210ce43c <__flash_rwdata_start+0xffffcb44>

210ce478 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
210ce478:	defffe04 	addi	sp,sp,-8
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
210ce47c:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
210ce480:	dfc00115 	stw	ra,4(sp)
210ce484:	dc000015 	stw	r16,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
210ce488:	10ce7240 	call	210ce724 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
210ce48c:	10ce7440 	call	210ce744 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
210ce490:	01040034 	movhi	r4,4096
210ce494:	21012404 	addi	r4,r4,1168
210ce498:	200b883a 	mov	r5,r4
210ce49c:	200d883a 	mov	r6,r4
210ce4a0:	10d098c0 	call	210d098c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
210ce4a4:	10d073c0 	call	210d073c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
210ce4a8:	01084374 	movhi	r4,8461
210ce4ac:	2101e804 	addi	r4,r4,1952
210ce4b0:	10d10c80 	call	210d10c8 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
210ce4b4:	d1201f17 	ldw	r4,-32644(gp)
210ce4b8:	d1601e17 	ldw	r5,-32648(gp)
210ce4bc:	d1a01d17 	ldw	r6,-32652(gp)
210ce4c0:	10c160c0 	call	210c160c <main>
  close(STDOUT_FILENO);
210ce4c4:	01000044 	movi	r4,1
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
210ce4c8:	1021883a 	mov	r16,r2
  close(STDOUT_FILENO);
210ce4cc:	10ce1080 	call	210ce108 <close>
  exit (result);
210ce4d0:	8009883a 	mov	r4,r16
210ce4d4:	10c16a00 	call	210c16a0 <exit>

210ce4d8 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
210ce4d8:	f800283a 	ret

210ce4dc <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
210ce4dc:	f800283a 	ret

210ce4e0 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
210ce4e0:	defffe04 	addi	sp,sp,-8
210ce4e4:	dfc00115 	stw	ra,4(sp)
210ce4e8:	dc000015 	stw	r16,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
210ce4ec:	20002516 	blt	r4,zero,210ce584 <read+0xa4>
210ce4f0:	20800324 	muli	r2,r4,12
210ce4f4:	00c40034 	movhi	r3,4096
210ce4f8:	18c44c04 	addi	r3,r3,4400
210ce4fc:	10c9883a 	add	r4,r2,r3
  
  if (fd)
210ce500:	20002026 	beq	r4,zero,210ce584 <read+0xa4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
210ce504:	20800217 	ldw	r2,8(r4)
210ce508:	00c00044 	movi	r3,1
210ce50c:	108000cc 	andi	r2,r2,3
210ce510:	10c00a26 	beq	r2,r3,210ce53c <read+0x5c>
        (fd->dev->read))
210ce514:	20800017 	ldw	r2,0(r4)
210ce518:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
210ce51c:	10000726 	beq	r2,zero,210ce53c <read+0x5c>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
210ce520:	103ee83a 	callr	r2
210ce524:	1021883a 	mov	r16,r2
210ce528:	80000d16 	blt	r16,zero,210ce560 <read+0x80>
  else
  {
    ALT_ERRNO = EBADFD;
  }
  return -1;
}
210ce52c:	dfc00117 	ldw	ra,4(sp)
210ce530:	dc000017 	ldw	r16,0(sp)
210ce534:	dec00204 	addi	sp,sp,8
210ce538:	f800283a 	ret
210ce53c:	00840034 	movhi	r2,4096
210ce540:	10892d04 	addi	r2,r2,9396
210ce544:	10800017 	ldw	r2,0(r2)
210ce548:	10001726 	beq	r2,zero,210ce5a8 <read+0xc8>
210ce54c:	103ee83a 	callr	r2
        }
        return rval;
      }
      else
      {
        ALT_ERRNO = EACCES;
210ce550:	00c00344 	movi	r3,13
210ce554:	10c00015 	stw	r3,0(r2)
    }
  else
  {
    ALT_ERRNO = EBADFD;
  }
  return -1;
210ce558:	00bfffc4 	movi	r2,-1
210ce55c:	003ff306 	br	210ce52c <__flash_rwdata_start+0xffffcc34>
210ce560:	00840034 	movhi	r2,4096
210ce564:	10892d04 	addi	r2,r2,9396
210ce568:	10800017 	ldw	r2,0(r2)
210ce56c:	10001126 	beq	r2,zero,210ce5b4 <read+0xd4>
210ce570:	103ee83a 	callr	r2
    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
        {
          ALT_ERRNO = -rval;
210ce574:	0421c83a 	sub	r16,zero,r16
210ce578:	14000015 	stw	r16,0(r2)
          return -1;
210ce57c:	00bfffc4 	movi	r2,-1
210ce580:	003fea06 	br	210ce52c <__flash_rwdata_start+0xffffcc34>
210ce584:	00840034 	movhi	r2,4096
210ce588:	10892d04 	addi	r2,r2,9396
210ce58c:	10800017 	ldw	r2,0(r2)
210ce590:	10000b26 	beq	r2,zero,210ce5c0 <read+0xe0>
210ce594:	103ee83a 	callr	r2
        ALT_ERRNO = EACCES;
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
210ce598:	00c01444 	movi	r3,81
210ce59c:	10c00015 	stw	r3,0(r2)
  }
  return -1;
210ce5a0:	00bfffc4 	movi	r2,-1
210ce5a4:	003fe106 	br	210ce52c <__flash_rwdata_start+0xffffcc34>
210ce5a8:	00840034 	movhi	r2,4096
210ce5ac:	10893b04 	addi	r2,r2,9452
210ce5b0:	003fe706 	br	210ce550 <__flash_rwdata_start+0xffffcc58>
210ce5b4:	00840034 	movhi	r2,4096
210ce5b8:	10893b04 	addi	r2,r2,9452
210ce5bc:	003fed06 	br	210ce574 <__flash_rwdata_start+0xffffcc7c>
210ce5c0:	00840034 	movhi	r2,4096
210ce5c4:	10893b04 	addi	r2,r2,9452
210ce5c8:	003ff306 	br	210ce598 <__flash_rwdata_start+0xffffcca0>

210ce5cc <alt_release_fd>:
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  if (fd > 2)
210ce5cc:	00800084 	movi	r2,2
210ce5d0:	1100060e 	bge	r2,r4,210ce5ec <alt_release_fd+0x20>
  {
    alt_fd_list[fd].fd_flags = 0;
210ce5d4:	21000324 	muli	r4,r4,12
210ce5d8:	00840034 	movhi	r2,4096
210ce5dc:	10844c04 	addi	r2,r2,4400
210ce5e0:	1107883a 	add	r3,r2,r4
210ce5e4:	18000215 	stw	zero,8(r3)
    alt_fd_list[fd].dev      = 0;
210ce5e8:	18000015 	stw	zero,0(r3)
210ce5ec:	f800283a 	ret

210ce5f0 <sbrk>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
210ce5f0:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
210ce5f4:	00bfff84 	movi	r2,-2
210ce5f8:	2884703a 	and	r2,r5,r2
210ce5fc:	1001703a 	wrctl	status,r2
  char *prev_heap_end; 

  context = alt_irq_disable_all();

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
210ce600:	d0a00c17 	ldw	r2,-32720(gp)
210ce604:	00ffff04 	movi	r3,-4
210ce608:	108000c4 	addi	r2,r2,3
210ce60c:	10c4703a 	and	r2,r2,r3
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
210ce610:	00c80034 	movhi	r3,8192
  char *prev_heap_end; 

  context = alt_irq_disable_all();

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
210ce614:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
210ce618:	1109883a 	add	r4,r2,r4
210ce61c:	18c00004 	addi	r3,r3,0
210ce620:	19000336 	bltu	r3,r4,210ce630 <sbrk+0x40>
    return (caddr_t)-1;
  }
#endif

  prev_heap_end = heap_end; 
  heap_end += incr; 
210ce624:	d1200c15 	stw	r4,-32720(gp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
210ce628:	2801703a 	wrctl	status,r5
#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
} 
210ce62c:	f800283a 	ret
210ce630:	2801703a 	wrctl	status,r5
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
210ce634:	00bfffc4 	movi	r2,-1
210ce638:	f800283a 	ret

210ce63c <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
210ce63c:	defffe04 	addi	sp,sp,-8
210ce640:	dfc00115 	stw	ra,4(sp)
210ce644:	dc000015 	stw	r16,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
210ce648:	20002716 	blt	r4,zero,210ce6e8 <write+0xac>
210ce64c:	20800324 	muli	r2,r4,12
210ce650:	00c40034 	movhi	r3,4096
210ce654:	18c44c04 	addi	r3,r3,4400
210ce658:	10c9883a 	add	r4,r2,r3
  
  if (fd)
210ce65c:	20002226 	beq	r4,zero,210ce6e8 <write+0xac>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
210ce660:	20800217 	ldw	r2,8(r4)
210ce664:	108000cc 	andi	r2,r2,3
210ce668:	10000a26 	beq	r2,zero,210ce694 <write+0x58>
210ce66c:	20800017 	ldw	r2,0(r4)
210ce670:	10800617 	ldw	r2,24(r2)
210ce674:	10000726 	beq	r2,zero,210ce694 <write+0x58>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
210ce678:	103ee83a 	callr	r2
210ce67c:	1021883a 	mov	r16,r2
210ce680:	80001016 	blt	r16,zero,210ce6c4 <write+0x88>
  else  
  {
    ALT_ERRNO = EBADFD;
  }
  return -1;
}
210ce684:	dfc00117 	ldw	ra,4(sp)
210ce688:	dc000017 	ldw	r16,0(sp)
210ce68c:	dec00204 	addi	sp,sp,8
210ce690:	f800283a 	ret
210ce694:	00840034 	movhi	r2,4096
210ce698:	10892d04 	addi	r2,r2,9396
210ce69c:	10800017 	ldw	r2,0(r2)
210ce6a0:	10000526 	beq	r2,zero,210ce6b8 <write+0x7c>
210ce6a4:	103ee83a 	callr	r2
      }
      return rval;
    }
    else
    {
      ALT_ERRNO = EACCES;
210ce6a8:	00c00344 	movi	r3,13
210ce6ac:	10c00015 	stw	r3,0(r2)
  }
  else  
  {
    ALT_ERRNO = EBADFD;
  }
  return -1;
210ce6b0:	00bfffc4 	movi	r2,-1
210ce6b4:	003ff306 	br	210ce684 <__flash_rwdata_start+0xffffcd8c>
210ce6b8:	00840034 	movhi	r2,4096
210ce6bc:	10893b04 	addi	r2,r2,9452
210ce6c0:	003ff906 	br	210ce6a8 <__flash_rwdata_start+0xffffcdb0>
210ce6c4:	00840034 	movhi	r2,4096
210ce6c8:	10892d04 	addi	r2,r2,9396
210ce6cc:	10800017 	ldw	r2,0(r2)
210ce6d0:	10000e26 	beq	r2,zero,210ce70c <write+0xd0>
210ce6d4:	103ee83a 	callr	r2
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
      {
        ALT_ERRNO = -rval;
210ce6d8:	0421c83a 	sub	r16,zero,r16
210ce6dc:	14000015 	stw	r16,0(r2)
        return -1;
210ce6e0:	00bfffc4 	movi	r2,-1
210ce6e4:	003fe706 	br	210ce684 <__flash_rwdata_start+0xffffcd8c>
210ce6e8:	00840034 	movhi	r2,4096
210ce6ec:	10892d04 	addi	r2,r2,9396
210ce6f0:	10800017 	ldw	r2,0(r2)
210ce6f4:	10000826 	beq	r2,zero,210ce718 <write+0xdc>
210ce6f8:	103ee83a 	callr	r2
      ALT_ERRNO = EACCES;
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
210ce6fc:	00c01444 	movi	r3,81
210ce700:	10c00015 	stw	r3,0(r2)
  }
  return -1;
210ce704:	00bfffc4 	movi	r2,-1
210ce708:	003fde06 	br	210ce684 <__flash_rwdata_start+0xffffcd8c>
210ce70c:	00840034 	movhi	r2,4096
210ce710:	10893b04 	addi	r2,r2,9452
210ce714:	003ff006 	br	210ce6d8 <__flash_rwdata_start+0xffffcde0>
210ce718:	00840034 	movhi	r2,4096
210ce71c:	10893b04 	addi	r2,r2,9452
210ce720:	003ff606 	br	210ce6fc <__flash_rwdata_start+0xffffce04>

210ce724 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
210ce724:	deffff04 	addi	sp,sp,-4
210ce728:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU_1, cpu_1);
210ce72c:	10d0efc0 	call	210d0efc <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
210ce730:	00800044 	movi	r2,1
210ce734:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
210ce738:	dfc00017 	ldw	ra,0(sp)
210ce73c:	dec00104 	addi	sp,sp,4
210ce740:	f800283a 	ret

210ce744 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
210ce744:	defffe04 	addi	sp,sp,-8
210ce748:	dc000015 	stw	r16,0(sp)
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_1, jtag_uart_1);
210ce74c:	04040034 	movhi	r16,4096
210ce750:	84051404 	addi	r16,r16,5200
210ce754:	000d883a 	mov	r6,zero
210ce758:	8009883a 	mov	r4,r16
210ce75c:	000b883a 	mov	r5,zero
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
210ce760:	dfc00115 	stw	ra,4(sp)
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_1, jtag_uart_1);
210ce764:	10ce9680 	call	210ce968 <altera_avalon_jtag_uart_init>

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
210ce768:	01440034 	movhi	r5,4096
210ce76c:	813ff604 	addi	r4,r16,-40
210ce770:	29492904 	addi	r5,r5,9380
210ce774:	10d06c40 	call	210d06c4 <alt_dev_llist_insert>
    ALTERA_AVALON_MAILBOX_SIMPLE_INIT ( MAILBOX_SIMPLE_0_1, mailbox_simple_0_1);
210ce778:	01040034 	movhi	r4,4096
210ce77c:	2104f804 	addi	r4,r4,5088
210ce780:	000b883a 	mov	r5,zero
210ce784:	018000c4 	movi	r6,3
210ce788:	10cee780 	call	210cee78 <altera_avalon_mailbox_simple_init>
    ALTERA_AVALON_MAILBOX_SIMPLE_INIT ( MAILBOX_SIMPLE_1_0, mailbox_simple_1_0);
210ce78c:	01040034 	movhi	r4,4096
210ce790:	2104e604 	addi	r4,r4,5016
210ce794:	000b883a 	mov	r5,zero
210ce798:	01bfffc4 	movi	r6,-1
210ce79c:	10cee780 	call	210cee78 <altera_avalon_mailbox_simple_init>
    ALTERA_MSGDMA_INIT ( READ_DMA_CB, read_dma_cb);
210ce7a0:	01040034 	movhi	r4,4096
210ce7a4:	2104ce04 	addi	r4,r4,4920
210ce7a8:	21400717 	ldw	r5,28(r4)
210ce7ac:	21800817 	ldw	r6,32(r4)
210ce7b0:	10cfdfc0 	call	210cfdfc <alt_msgdma_init>
    ALTERA_MSGDMA_INIT ( READ_DMA_CR, read_dma_cr);
210ce7b4:	01040034 	movhi	r4,4096
210ce7b8:	2104b604 	addi	r4,r4,4824
210ce7bc:	21400717 	ldw	r5,28(r4)
210ce7c0:	21800817 	ldw	r6,32(r4)
}
210ce7c4:	dfc00117 	ldw	ra,4(sp)
210ce7c8:	dc000017 	ldw	r16,0(sp)
210ce7cc:	dec00204 	addi	sp,sp,8
{
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_1, jtag_uart_1);
    ALTERA_AVALON_MAILBOX_SIMPLE_INIT ( MAILBOX_SIMPLE_0_1, mailbox_simple_0_1);
    ALTERA_AVALON_MAILBOX_SIMPLE_INIT ( MAILBOX_SIMPLE_1_0, mailbox_simple_1_0);
    ALTERA_MSGDMA_INIT ( READ_DMA_CB, read_dma_cb);
    ALTERA_MSGDMA_INIT ( READ_DMA_CR, read_dma_cr);
210ce7d0:	10cfdfc1 	jmpi	210cfdfc <alt_msgdma_init>

210ce7d4 <altera_avalon_jtag_uart_read_fd>:
int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
210ce7d4:	20800017 	ldw	r2,0(r4)
210ce7d8:	21c00217 	ldw	r7,8(r4)
210ce7dc:	11000a04 	addi	r4,r2,40
210ce7e0:	10ceaac1 	jmpi	210ceaac <altera_avalon_jtag_uart_read>

210ce7e4 <altera_avalon_jtag_uart_write_fd>:
int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
210ce7e4:	20800017 	ldw	r2,0(r4)
210ce7e8:	21c00217 	ldw	r7,8(r4)
210ce7ec:	11000a04 	addi	r4,r2,40
210ce7f0:	10cebe81 	jmpi	210cebe8 <altera_avalon_jtag_uart_write>

210ce7f4 <altera_avalon_jtag_uart_close_fd>:
int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
210ce7f4:	20800017 	ldw	r2,0(r4)
210ce7f8:	21400217 	ldw	r5,8(r4)
210ce7fc:	11000a04 	addi	r4,r2,40
210ce800:	10ce9e81 	jmpi	210ce9e8 <altera_avalon_jtag_uart_close>

210ce804 <altera_avalon_jtag_uart_ioctl_fd>:
int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
210ce804:	21000017 	ldw	r4,0(r4)
210ce808:	21000a04 	addi	r4,r4,40
210ce80c:	10cea381 	jmpi	210cea38 <altera_avalon_jtag_uart_ioctl>

210ce810 <altera_avalon_jtag_uart_timeout>:
static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
210ce810:	20800017 	ldw	r2,0(r4)
210ce814:	10800104 	addi	r2,r2,4
210ce818:	10c00037 	ldwio	r3,0(r2)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
210ce81c:	18c1000c 	andi	r3,r3,1024
210ce820:	18000a1e 	bne	r3,zero,210ce84c <altera_avalon_jtag_uart_timeout+0x3c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    sp->host_inactive = 0;
  }
  else if (sp->host_inactive < INT_MAX - 2) {
210ce824:	20800917 	ldw	r2,36(r4)
210ce828:	00e00034 	movhi	r3,32768
210ce82c:	18ffff04 	addi	r3,r3,-4
210ce830:	18800236 	bltu	r3,r2,210ce83c <altera_avalon_jtag_uart_timeout+0x2c>
    sp->host_inactive++;
210ce834:	10800044 	addi	r2,r2,1
210ce838:	20800915 	stw	r2,36(r4)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
210ce83c:	00840034 	movhi	r2,4096
210ce840:	10894404 	addi	r2,r2,9488
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
210ce844:	10800017 	ldw	r2,0(r2)
210ce848:	f800283a 	ret

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
210ce84c:	20c00817 	ldw	r3,32(r4)
210ce850:	18c10014 	ori	r3,r3,1024
210ce854:	10c00035 	stwio	r3,0(r2)
210ce858:	00840034 	movhi	r2,4096
210ce85c:	10894404 	addi	r2,r2,9488
    sp->host_inactive = 0;
210ce860:	20000915 	stw	zero,36(r4)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
210ce864:	10800017 	ldw	r2,0(r2)
210ce868:	f800283a 	ret

210ce86c <altera_avalon_jtag_uart_irq>:
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  unsigned int base = sp->base;
210ce86c:	21c00017 	ldw	r7,0(r4)
      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
210ce870:	02bfff84 	movi	r10,-2
      }

      if (space > 0)
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
210ce874:	02ffff44 	movi	r11,-3
210ce878:	3a400104 	addi	r9,r7,4
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
210ce87c:	4a000037 	ldwio	r8,0(r9)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
210ce880:	4080c00c 	andi	r2,r8,768
210ce884:	10003726 	beq	r2,zero,210ce964 <altera_avalon_jtag_uart_irq+0xf8>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
210ce888:	4080400c 	andi	r2,r8,256
210ce88c:	10001626 	beq	r2,zero,210ce8e8 <altera_avalon_jtag_uart_irq+0x7c>
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
210ce890:	20800a17 	ldw	r2,40(r4)
        if (next == sp->rx_out)
210ce894:	21800b17 	ldw	r6,44(r4)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
210ce898:	10800044 	addi	r2,r2,1
210ce89c:	1081ffcc 	andi	r2,r2,2047
        if (next == sp->rx_out)
210ce8a0:	30800c1e 	bne	r6,r2,210ce8d4 <altera_avalon_jtag_uart_irq+0x68>
210ce8a4:	00002906 	br	210ce94c <altera_avalon_jtag_uart_irq+0xe0>
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
210ce8a8:	20c00a17 	ldw	r3,40(r4)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
210ce8ac:	20800a17 	ldw	r2,40(r4)
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
210ce8b0:	20c7883a 	add	r3,r4,r3
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
210ce8b4:	10800044 	addi	r2,r2,1
210ce8b8:	1081ffcc 	andi	r2,r2,2047
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
210ce8bc:	19400e05 	stb	r5,56(r3)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
210ce8c0:	20800a15 	stw	r2,40(r4)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
210ce8c4:	20800a17 	ldw	r2,40(r4)
210ce8c8:	10800044 	addi	r2,r2,1
210ce8cc:	1081ffcc 	andi	r2,r2,2047
        if (next == sp->rx_out)
210ce8d0:	30800326 	beq	r6,r2,210ce8e0 <altera_avalon_jtag_uart_irq+0x74>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
210ce8d4:	39400037 	ldwio	r5,0(r7)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
210ce8d8:	28a0000c 	andi	r2,r5,32768
210ce8dc:	103ff21e 	bne	r2,zero,210ce8a8 <__flash_rwdata_start+0xffffcfb0>

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
210ce8e0:	297fffec 	andhi	r5,r5,65535
210ce8e4:	2800191e 	bne	r5,zero,210ce94c <altera_avalon_jtag_uart_irq+0xe0>
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
210ce8e8:	4080800c 	andi	r2,r8,512
210ce8ec:	103fe326 	beq	r2,zero,210ce87c <__flash_rwdata_start+0xffffcf84>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
210ce8f0:	4010d43a 	srli	r8,r8,16

      while (space > 0 && sp->tx_out != sp->tx_in)
210ce8f4:	40000b1e 	bne	r8,zero,210ce924 <altera_avalon_jtag_uart_irq+0xb8>
210ce8f8:	003fe006 	br	210ce87c <__flash_rwdata_start+0xffffcf84>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
210ce8fc:	20800d17 	ldw	r2,52(r4)
210ce900:	2085883a 	add	r2,r4,r2
210ce904:	10820e07 	ldb	r2,2104(r2)
210ce908:	38800035 	stwio	r2,0(r7)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
210ce90c:	20800d17 	ldw	r2,52(r4)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
210ce910:	423fffc4 	addi	r8,r8,-1

      while (space > 0 && sp->tx_out != sp->tx_in)
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
210ce914:	10800044 	addi	r2,r2,1
210ce918:	1081ffcc 	andi	r2,r2,2047
210ce91c:	20800d15 	stw	r2,52(r4)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
210ce920:	403fd626 	beq	r8,zero,210ce87c <__flash_rwdata_start+0xffffcf84>
210ce924:	20c00d17 	ldw	r3,52(r4)
210ce928:	20800c17 	ldw	r2,48(r4)
210ce92c:	18bff31e 	bne	r3,r2,210ce8fc <__flash_rwdata_start+0xffffd004>
      }

      if (space > 0)
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
210ce930:	20800817 	ldw	r2,32(r4)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
210ce934:	20c00017 	ldw	r3,0(r4)
      }

      if (space > 0)
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
210ce938:	12c4703a 	and	r2,r2,r11
210ce93c:	20800815 	stw	r2,32(r4)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
210ce940:	18800135 	stwio	r2,4(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
210ce944:	48800037 	ldwio	r2,0(r9)
210ce948:	003fcc06 	br	210ce87c <__flash_rwdata_start+0xffffcf84>
      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
210ce94c:	20800817 	ldw	r2,32(r4)
210ce950:	1284703a 	and	r2,r2,r10
210ce954:	20800815 	stw	r2,32(r4)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
210ce958:	48800035 	stwio	r2,0(r9)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
210ce95c:	48800037 	ldwio	r2,0(r9)
210ce960:	003fe106 	br	210ce8e8 <__flash_rwdata_start+0xffffcff0>
210ce964:	f800283a 	ret

210ce968 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
210ce968:	defffd04 	addi	sp,sp,-12
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
210ce96c:	21c00017 	ldw	r7,0(r4)
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
210ce970:	dc000115 	stw	r16,4(sp)
210ce974:	dfc00215 	stw	ra,8(sp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
210ce978:	00800044 	movi	r2,1
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
210ce97c:	2021883a 	mov	r16,r4
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
210ce980:	20800815 	stw	r2,32(r4)
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
210ce984:	2809883a 	mov	r4,r5
210ce988:	300b883a 	mov	r5,r6
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
210ce98c:	38800135 	stwio	r2,4(r7)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
210ce990:	01884374 	movhi	r6,8461
210ce994:	31ba1b04 	addi	r6,r6,-6036
210ce998:	800f883a 	mov	r7,r16
210ce99c:	d8000015 	stw	zero,0(sp)
210ce9a0:	10d08880 	call	210d0888 <alt_ic_isr_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
210ce9a4:	00840034 	movhi	r2,4096
210ce9a8:	10894404 	addi	r2,r2,9488
210ce9ac:	11400017 	ldw	r5,0(r2)
210ce9b0:	01884374 	movhi	r6,8461
210ce9b4:	31ba0404 	addi	r6,r6,-6128
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
210ce9b8:	80000915 	stw	zero,36(r16)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
210ce9bc:	81000204 	addi	r4,r16,8
210ce9c0:	800f883a 	mov	r7,r16
210ce9c4:	10d05d00 	call	210d05d0 <alt_alarm_start>
210ce9c8:	1000030e 	bge	r2,zero,210ce9d8 <altera_avalon_jtag_uart_init+0x70>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
210ce9cc:	00a00034 	movhi	r2,32768
210ce9d0:	10bfffc4 	addi	r2,r2,-1
210ce9d4:	80800115 	stw	r2,4(r16)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
210ce9d8:	dfc00217 	ldw	ra,8(sp)
210ce9dc:	dc000117 	ldw	r16,4(sp)
210ce9e0:	dec00304 	addi	sp,sp,12
210ce9e4:	f800283a 	ret

210ce9e8 <altera_avalon_jtag_uart_close>:
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    if (flags & O_NONBLOCK) {
210ce9e8:	2890000c 	andi	r2,r5,16384
210ce9ec:	21c00c17 	ldw	r7,48(r4)
210ce9f0:	10000426 	beq	r2,zero,210cea04 <altera_avalon_jtag_uart_close+0x1c>
210ce9f4:	00000606 	br	210cea10 <altera_avalon_jtag_uart_close+0x28>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
210ce9f8:	21800917 	ldw	r6,36(r4)
210ce9fc:	20c00117 	ldw	r3,4(r4)
210cea00:	30c00a2e 	bgeu	r6,r3,210cea2c <altera_avalon_jtag_uart_close+0x44>
210cea04:	20c00d17 	ldw	r3,52(r4)
210cea08:	19fffb1e 	bne	r3,r7,210ce9f8 <__flash_rwdata_start+0xffffd100>
      return -EWOULDBLOCK; 
    }
  }

  return 0;
}
210cea0c:	f800283a 	ret
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
210cea10:	20800d17 	ldw	r2,52(r4)
210cea14:	11c00626 	beq	r2,r7,210cea30 <altera_avalon_jtag_uart_close+0x48>
210cea18:	20c00917 	ldw	r3,36(r4)
210cea1c:	20800117 	ldw	r2,4(r4)
210cea20:	1880032e 	bgeu	r3,r2,210cea30 <altera_avalon_jtag_uart_close+0x48>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
210cea24:	00bffd44 	movi	r2,-11
    }
  }

  return 0;
}
210cea28:	f800283a 	ret
210cea2c:	f800283a 	ret
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
210cea30:	0005883a 	mov	r2,zero
210cea34:	f800283a 	ret

210cea38 <altera_avalon_jtag_uart_ioctl>:
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  int rc = -ENOTTY;

  switch (req)
210cea38:	009a8044 	movi	r2,27137
210cea3c:	28800d26 	beq	r5,r2,210cea74 <altera_avalon_jtag_uart_ioctl+0x3c>
210cea40:	009a8084 	movi	r2,27138
210cea44:	2880091e 	bne	r5,r2,210cea6c <altera_avalon_jtag_uart_ioctl+0x34>
    }
    break;

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
210cea48:	21400117 	ldw	r5,4(r4)
210cea4c:	00a00034 	movhi	r2,32768
210cea50:	10bfffc4 	addi	r2,r2,-1
210cea54:	28800526 	beq	r5,r2,210cea6c <altera_avalon_jtag_uart_ioctl+0x34>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
210cea58:	20c00917 	ldw	r3,36(r4)
      rc = 0;
210cea5c:	0005883a 	mov	r2,zero

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
210cea60:	1947803a 	cmpltu	r3,r3,r5
210cea64:	30c00015 	stw	r3,0(r6)
210cea68:	f800283a 	ret

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  int rc = -ENOTTY;
210cea6c:	00bff9c4 	movi	r2,-25
  default:
    break;
  }

  return rc;
}
210cea70:	f800283a 	ret

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
210cea74:	20c00117 	ldw	r3,4(r4)
210cea78:	00a00034 	movhi	r2,32768
210cea7c:	10bfffc4 	addi	r2,r2,-1
210cea80:	18bffa26 	beq	r3,r2,210cea6c <__flash_rwdata_start+0xffffd174>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
210cea84:	30800017 	ldw	r2,0(r6)
210cea88:	01600034 	movhi	r5,32768
210cea8c:	297fff04 	addi	r5,r5,-4
210cea90:	10ffff84 	addi	r3,r2,-2
210cea94:	28c0022e 	bgeu	r5,r3,210ceaa0 <altera_avalon_jtag_uart_ioctl+0x68>
210cea98:	00a00034 	movhi	r2,32768
210cea9c:	10bfff84 	addi	r2,r2,-2
210ceaa0:	20800115 	stw	r2,4(r4)
      rc = 0;
210ceaa4:	0005883a 	mov	r2,zero
210ceaa8:	f800283a 	ret

210ceaac <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
210ceaac:	defff604 	addi	sp,sp,-40
210ceab0:	dcc00315 	stw	r19,12(sp)
210ceab4:	dfc00915 	stw	ra,36(sp)
210ceab8:	df000815 	stw	fp,32(sp)
210ceabc:	ddc00715 	stw	r23,28(sp)
210ceac0:	dd800615 	stw	r22,24(sp)
210ceac4:	dd400515 	stw	r21,20(sp)
210ceac8:	dd000415 	stw	r20,16(sp)
210ceacc:	dc800215 	stw	r18,8(sp)
210cead0:	dc400115 	stw	r17,4(sp)
210cead4:	dc000015 	stw	r16,0(sp)
210cead8:	3027883a 	mov	r19,r6
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
210ceadc:	01803e0e 	bge	zero,r6,210cebd8 <altera_avalon_jtag_uart_read+0x12c>
210ceae0:	24000b17 	ldw	r16,44(r4)
210ceae4:	2025883a 	mov	r18,r4
210ceae8:	282b883a 	mov	r21,r5
    /* If we read any data then return it */
    if (ptr != buffer)
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
210ceaec:	3d90000c 	andi	r22,r7,16384
      out = sp->rx_out;

      if (in >= out)
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
210ceaf0:	05020004 	movi	r20,2048
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
210ceaf4:	a839883a 	mov	fp,r21
210ceaf8:	00000a06 	br	210ceb24 <altera_avalon_jtag_uart_read+0x78>
210ceafc:	9880012e 	bgeu	r19,r2,210ceb04 <altera_avalon_jtag_uart_read+0x58>
210ceb00:	9823883a 	mov	r17,r19

      memcpy(ptr, sp->rx_buf + out, n);
      ptr   += n;
      space -= n;

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
210ceb04:	8c21883a 	add	r16,r17,r16
        break; /* No more data available */

      if (n > space)
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
210ceb08:	880d883a 	mov	r6,r17
      ptr   += n;
      space -= n;

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
210ceb0c:	8401ffcc 	andi	r16,r16,2047
        break; /* No more data available */

      if (n > space)
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
210ceb10:	10c74500 	call	210c7450 <memcpy>
      ptr   += n;
      space -= n;
210ceb14:	9c67c83a 	sub	r19,r19,r17

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
210ceb18:	94000b15 	stw	r16,44(r18)

      if (n > space)
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
      ptr   += n;
210ceb1c:	e479883a 	add	fp,fp,r17
      space -= n;

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);
210ceb20:	04c0090e 	bge	zero,r19,210ceb48 <altera_avalon_jtag_uart_read+0x9c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
210ceb24:	95c00a17 	ldw	r23,40(r18)
      out = sp->rx_out;

      if (in >= out)
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
210ceb28:	a405c83a 	sub	r2,r20,r16
    do
    {
      in  = sp->rx_in;
      out = sp->rx_out;

      if (in >= out)
210ceb2c:	bc000136 	bltu	r23,r16,210ceb34 <altera_avalon_jtag_uart_read+0x88>
        n = in - out;
210ceb30:	bc05c83a 	sub	r2,r23,r16
        break; /* No more data available */

      if (n > space)
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
210ceb34:	81400e04 	addi	r5,r16,56
210ceb38:	e009883a 	mov	r4,fp
210ceb3c:	914b883a 	add	r5,r18,r5
210ceb40:	1023883a 	mov	r17,r2
      if (in >= out)
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
210ceb44:	103fed1e 	bne	r2,zero,210ceafc <__flash_rwdata_start+0xffffd204>
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
210ceb48:	e540171e 	bne	fp,r21,210ceba8 <altera_avalon_jtag_uart_read+0xfc>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
210ceb4c:	b0000426 	beq	r22,zero,210ceb60 <altera_avalon_jtag_uart_read+0xb4>
210ceb50:	00002306 	br	210cebe0 <altera_avalon_jtag_uart_read+0x134>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
210ceb54:	90c00917 	ldw	r3,36(r18)
210ceb58:	90800117 	ldw	r2,4(r18)
210ceb5c:	1880022e 	bgeu	r3,r2,210ceb68 <altera_avalon_jtag_uart_read+0xbc>
210ceb60:	90800a17 	ldw	r2,40(r18)
210ceb64:	15fffb26 	beq	r2,r23,210ceb54 <__flash_rwdata_start+0xffffd25c>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
210ceb68:	90800a17 	ldw	r2,40(r18)
210ceb6c:	15c00126 	beq	r2,r23,210ceb74 <altera_avalon_jtag_uart_read+0xc8>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
210ceb70:	04ffe016 	blt	zero,r19,210ceaf4 <__flash_rwdata_start+0xffffd1fc>
  if (ptr != buffer)
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
  else
    return -EIO;
210ceb74:	00bffec4 	movi	r2,-5
}
210ceb78:	dfc00917 	ldw	ra,36(sp)
210ceb7c:	df000817 	ldw	fp,32(sp)
210ceb80:	ddc00717 	ldw	r23,28(sp)
210ceb84:	dd800617 	ldw	r22,24(sp)
210ceb88:	dd400517 	ldw	r21,20(sp)
210ceb8c:	dd000417 	ldw	r20,16(sp)
210ceb90:	dcc00317 	ldw	r19,12(sp)
210ceb94:	dc800217 	ldw	r18,8(sp)
210ceb98:	dc400117 	ldw	r17,4(sp)
210ceb9c:	dc000017 	ldw	r16,0(sp)
210ceba0:	dec00a04 	addi	sp,sp,40
210ceba4:	f800283a 	ret
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
210ceba8:	0007303a 	rdctl	r3,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
210cebac:	00bfff84 	movi	r2,-2
210cebb0:	1884703a 	and	r2,r3,r2
210cebb4:	1001703a 	wrctl	status,r2

  if (ptr != buffer)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
210cebb8:	90800817 	ldw	r2,32(r18)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
210cebbc:	91000017 	ldw	r4,0(r18)

  if (ptr != buffer)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
210cebc0:	10800054 	ori	r2,r2,1
210cebc4:	90800815 	stw	r2,32(r18)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
210cebc8:	20800135 	stwio	r2,4(r4)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
210cebcc:	1801703a 	wrctl	status,r3
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    return ptr - buffer;
210cebd0:	e545c83a 	sub	r2,fp,r21
210cebd4:	003fe806 	br	210ceb78 <__flash_rwdata_start+0xffffd280>
210cebd8:	39d0000c 	andi	r7,r7,16384
  else if (flags & O_NONBLOCK)
210cebdc:	383fe526 	beq	r7,zero,210ceb74 <__flash_rwdata_start+0xffffd27c>
    return -EWOULDBLOCK;
210cebe0:	00bffd44 	movi	r2,-11
210cebe4:	003fe406 	br	210ceb78 <__flash_rwdata_start+0xffffd280>

210cebe8 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
210cebe8:	defff604 	addi	sp,sp,-40
210cebec:	df000815 	stw	fp,32(sp)
210cebf0:	dc000015 	stw	r16,0(sp)
210cebf4:	dfc00915 	stw	ra,36(sp)
210cebf8:	ddc00715 	stw	r23,28(sp)
210cebfc:	dd800615 	stw	r22,24(sp)
210cec00:	dd400515 	stw	r21,20(sp)
210cec04:	dd000415 	stw	r20,16(sp)
210cec08:	dcc00315 	stw	r19,12(sp)
210cec0c:	dc800215 	stw	r18,8(sp)
210cec10:	dc400115 	stw	r17,4(sp)
210cec14:	3039883a 	mov	fp,r6
210cec18:	2021883a 	mov	r16,r4
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
210cec1c:	01804a0e 	bge	zero,r6,210ced48 <altera_avalon_jtag_uart_write+0x160>
210cec20:	2827883a 	mov	r19,r5
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
210cec24:	3c50000c 	andi	r17,r7,16384
210cec28:	2829883a 	mov	r20,r5
      if (in < out)
        n = out - 1 - in;
      else if (out > 0)
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
210cec2c:	0541ffc4 	movi	r21,2047
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
210cec30:	04bfff84 	movi	r18,-2
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
210cec34:	85c00c17 	ldw	r23,48(r16)
      out = sp->tx_out;
210cec38:	80c00d17 	ldw	r3,52(r16)

      if (in < out)
210cec3c:	b8c03c2e 	bgeu	r23,r3,210ced30 <altera_avalon_jtag_uart_write+0x148>
210cec40:	1dbfffc4 	addi	r22,r3,-1
        n = out - 1 - in;
210cec44:	b5edc83a 	sub	r22,r22,r23
      else if (out > 0)
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
210cec48:	b0002526 	beq	r22,zero,210cece0 <altera_avalon_jtag_uart_write+0xf8>
210cec4c:	e580012e 	bgeu	fp,r22,210cec54 <altera_avalon_jtag_uart_write+0x6c>
210cec50:	e02d883a 	mov	r22,fp
        break;

      if (n > count)
        n = count;

      memcpy(sp->tx_buf + in, ptr, n);
210cec54:	b9020e04 	addi	r4,r23,2104
      ptr   += n;
      count -= n;

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
210cec58:	b5ef883a 	add	r23,r22,r23
        break;

      if (n > count)
        n = count;

      memcpy(sp->tx_buf + in, ptr, n);
210cec5c:	a00b883a 	mov	r5,r20
210cec60:	8109883a 	add	r4,r16,r4
210cec64:	b00d883a 	mov	r6,r22
      ptr   += n;
      count -= n;

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
210cec68:	bdc1ffcc 	andi	r23,r23,2047
        break;

      if (n > count)
        n = count;

      memcpy(sp->tx_buf + in, ptr, n);
210cec6c:	10c74500 	call	210c7450 <memcpy>
      ptr   += n;
      count -= n;
210cec70:	e5b9c83a 	sub	fp,fp,r22

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
210cec74:	85c00c15 	stw	r23,48(r16)

      if (n > count)
        n = count;

      memcpy(sp->tx_buf + in, ptr, n);
      ptr   += n;
210cec78:	a5a9883a 	add	r20,r20,r22
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
210cec7c:	073fed16 	blt	zero,fp,210cec34 <__flash_rwdata_start+0xffffd33c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
210cec80:	0007303a 	rdctl	r3,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
210cec84:	00bfff84 	movi	r2,-2
210cec88:	1884703a 	and	r2,r3,r2
210cec8c:	1001703a 	wrctl	status,r2
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
210cec90:	80800817 	ldw	r2,32(r16)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
210cec94:	81000017 	ldw	r4,0(r16)
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
210cec98:	10800094 	ori	r2,r2,2
210cec9c:	80800815 	stw	r2,32(r16)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
210ceca0:	20800135 	stwio	r2,4(r4)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
210ceca4:	1801703a 	wrctl	status,r3
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
210ceca8:	9d003226 	beq	r19,r20,210ced74 <altera_avalon_jtag_uart_write+0x18c>
    return ptr - start;
210cecac:	a4c5c83a 	sub	r2,r20,r19
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
}
210cecb0:	dfc00917 	ldw	ra,36(sp)
210cecb4:	df000817 	ldw	fp,32(sp)
210cecb8:	ddc00717 	ldw	r23,28(sp)
210cecbc:	dd800617 	ldw	r22,24(sp)
210cecc0:	dd400517 	ldw	r21,20(sp)
210cecc4:	dd000417 	ldw	r20,16(sp)
210cecc8:	dcc00317 	ldw	r19,12(sp)
210ceccc:	dc800217 	ldw	r18,8(sp)
210cecd0:	dc400117 	ldw	r17,4(sp)
210cecd4:	dc000017 	ldw	r16,0(sp)
210cecd8:	dec00a04 	addi	sp,sp,40
210cecdc:	f800283a 	ret
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
210cece0:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
210cece4:	2484703a 	and	r2,r4,r18
210cece8:	1001703a 	wrctl	status,r2
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
210cecec:	80800817 	ldw	r2,32(r16)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
210cecf0:	81400017 	ldw	r5,0(r16)
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
210cecf4:	10800094 	ori	r2,r2,2
210cecf8:	80800815 	stw	r2,32(r16)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
210cecfc:	28800135 	stwio	r2,4(r5)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
210ced00:	2001703a 	wrctl	status,r4
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
210ced04:	88001e1e 	bne	r17,zero,210ced80 <altera_avalon_jtag_uart_write+0x198>
210ced08:	81000917 	ldw	r4,36(r16)
210ced0c:	00000206 	br	210ced18 <altera_avalon_jtag_uart_write+0x130>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
210ced10:	80800117 	ldw	r2,4(r16)
210ced14:	2080022e 	bgeu	r4,r2,210ced20 <altera_avalon_jtag_uart_write+0x138>
210ced18:	80800d17 	ldw	r2,52(r16)
210ced1c:	18bffc26 	beq	r3,r2,210ced10 <__flash_rwdata_start+0xffffd418>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
210ced20:	203fc426 	beq	r4,zero,210cec34 <__flash_rwdata_start+0xffffd33c>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
210ced24:	9d3fe11e 	bne	r19,r20,210cecac <__flash_rwdata_start+0xffffd3b4>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
210ced28:	00bffec4 	movi	r2,-5
210ced2c:	003fe006 	br	210cecb0 <__flash_rwdata_start+0xffffd3b8>
      in  = sp->tx_in;
      out = sp->tx_out;

      if (in < out)
        n = out - 1 - in;
      else if (out > 0)
210ced30:	18000326 	beq	r3,zero,210ced40 <altera_avalon_jtag_uart_write+0x158>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
210ced34:	00820004 	movi	r2,2048
210ced38:	15edc83a 	sub	r22,r2,r23
210ced3c:	003fc206 	br	210cec48 <__flash_rwdata_start+0xffffd350>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
210ced40:	adedc83a 	sub	r22,r21,r23
210ced44:	003fc006 	br	210cec48 <__flash_rwdata_start+0xffffd350>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
210ced48:	0007303a 	rdctl	r3,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
210ced4c:	00bfff84 	movi	r2,-2
210ced50:	1884703a 	and	r2,r3,r2
210ced54:	1001703a 	wrctl	status,r2
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
210ced58:	20800817 	ldw	r2,32(r4)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
210ced5c:	21000017 	ldw	r4,0(r4)
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
210ced60:	10800094 	ori	r2,r2,2
210ced64:	80800815 	stw	r2,32(r16)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
210ced68:	20800135 	stwio	r2,4(r4)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
210ced6c:	1801703a 	wrctl	status,r3
210ced70:	3c50000c 	andi	r17,r7,16384
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    return ptr - start;
  else if (flags & O_NONBLOCK)
210ced74:	883fec26 	beq	r17,zero,210ced28 <__flash_rwdata_start+0xffffd430>
    return -EWOULDBLOCK;
210ced78:	00bffd44 	movi	r2,-11
210ced7c:	003fcc06 	br	210cecb0 <__flash_rwdata_start+0xffffd3b8>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
210ced80:	9d3fca1e 	bne	r19,r20,210cecac <__flash_rwdata_start+0xffffd3b4>
210ced84:	003ffc06 	br	210ced78 <__flash_rwdata_start+0xffffd480>

210ced88 <altera_avalon_mailbox_simple_rx_isr>:
{
    altera_avalon_mailbox_dev *dev = (altera_avalon_mailbox_dev*) context;
    alt_irq_context cpu_sr;
    alt_u32 inbox[2];

    inbox[1] = (IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST));
210ced88:	20800a17 	ldw	r2,40(r4)
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_mailbox_simple_rx_isr(void *context)
#else
static void altera_avalon_mailbox_simple_rx_isr(void *context, alt_u32 id)
#endif
{
210ced8c:	defffc04 	addi	sp,sp,-16
210ced90:	dfc00315 	stw	ra,12(sp)
210ced94:	dc000215 	stw	r16,8(sp)
    altera_avalon_mailbox_dev *dev = (altera_avalon_mailbox_dev*) context;
    alt_irq_context cpu_sr;
    alt_u32 inbox[2];

    inbox[1] = (IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST));
210ced98:	10c00137 	ldwio	r3,4(r2)
210ced9c:	d8c00115 	stw	r3,4(sp)
    inbox[0] = (IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_CMD_OFST));
210ceda0:	10800037 	ldwio	r2,0(r2)

    /*
     * Other interrupts are explicitly disabled if callbacks are registered
     * because there is no guarantee that they are preemption-safe.
     */
    if (dev->rx_cb)
210ceda4:	20c00e17 	ldw	r3,56(r4)
    altera_avalon_mailbox_dev *dev = (altera_avalon_mailbox_dev*) context;
    alt_irq_context cpu_sr;
    alt_u32 inbox[2];

    inbox[1] = (IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST));
    inbox[0] = (IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_CMD_OFST));
210ceda8:	d8800015 	stw	r2,0(sp)

    /*
     * Other interrupts are explicitly disabled if callbacks are registered
     * because there is no guarantee that they are preemption-safe.
     */
    if (dev->rx_cb)
210cedac:	18000726 	beq	r3,zero,210cedcc <altera_avalon_mailbox_simple_rx_isr+0x44>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
210cedb0:	0021303a 	rdctl	r16,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
210cedb4:	00bfff84 	movi	r2,-2
210cedb8:	8084703a 	and	r2,r16,r2
210cedbc:	1001703a 	wrctl	status,r2
    {
        cpu_sr = alt_irq_disable_all();
        (dev->rx_cb)(inbox);
210cedc0:	d809883a 	mov	r4,sp
210cedc4:	183ee83a 	callr	r3
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
210cedc8:	8001703a 	wrctl	status,r16
        alt_irq_enable_all(cpu_sr);
    }
}
210cedcc:	dfc00317 	ldw	ra,12(sp)
210cedd0:	dc000217 	ldw	r16,8(sp)
210cedd4:	dec00404 	addi	sp,sp,16
210cedd8:	f800283a 	ret

210ceddc <altera_avalon_mailbox_simple_tx_isr>:
    alt_u32 data;
    alt_irq_context cpu_sr;
    alt_u32 *message = dev->mbox_msg;

    /* Mask mailbox interrupt */
    data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST) &
210ceddc:	20800a17 	ldw	r2,40(r4)
{
    altera_avalon_mailbox_dev *dev = (altera_avalon_mailbox_dev*) context;
    int status = 0;
    alt_u32 data;
    alt_irq_context cpu_sr;
    alt_u32 *message = dev->mbox_msg;
210cede0:	20c01017 	ldw	r3,64(r4)

    /* Mask mailbox interrupt */
    data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST) &
210cede4:	10800304 	addi	r2,r2,12
210cede8:	11800037 	ldwio	r6,0(r2)
210cedec:	017fff44 	movi	r5,-3
210cedf0:	314a703a 	and	r5,r6,r5
               (~ALTERA_AVALON_MAILBOX_SIMPLE_INTR_SPACE_MSK);
    IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);
210cedf4:	11400035 	stwio	r5,0(r2)

    if (message != NULL)
210cedf8:	18001e26 	beq	r3,zero,210cee74 <altera_avalon_mailbox_simple_tx_isr+0x98>
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_mailbox_simple_tx_isr(void *context)
#else
static void altera_avalon_mailbox_simple_tx_isr(void *context, alt_u32 id)
#endif
{
210cedfc:	defffd04 	addi	sp,sp,-12
210cee00:	dc000015 	stw	r16,0(sp)
    IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);

    if (message != NULL)
    {
        /* Post out message requested */
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST, message[1]);
210cee04:	20800a17 	ldw	r2,40(r4)
210cee08:	2021883a 	mov	r16,r4
210cee0c:	19000117 	ldw	r4,4(r3)
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_mailbox_simple_tx_isr(void *context)
#else
static void altera_avalon_mailbox_simple_tx_isr(void *context, alt_u32 id)
#endif
{
210cee10:	dfc00215 	stw	ra,8(sp)
210cee14:	dc400115 	stw	r17,4(sp)
    IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);

    if (message != NULL)
    {
        /* Post out message requested */
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST, message[1]);
210cee18:	11000135 	stwio	r4,4(r2)
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_CMD_OFST, message[0]);
210cee1c:	80800a17 	ldw	r2,40(r16)
210cee20:	19000017 	ldw	r4,0(r3)
210cee24:	11000035 	stwio	r4,0(r2)
    /*
     * Other interrupts are explicitly disabled if callbacks are registered
     * because there is no guarantee that they are preemption-safe.
     */
        status = (IORD_ALTERA_AVALON_MAILBOX_STS(dev->base)
210cee28:	80800a17 	ldw	r2,40(r16)
210cee2c:	11400237 	ldwio	r5,8(r2)
        		  & ALTERA_AVALON_MAILBOX_SIMPLE_STS_FULL_MSK) >> 1;
        if (dev->tx_cb)
210cee30:	81800d17 	ldw	r6,52(r16)
210cee34:	30000926 	beq	r6,zero,210cee5c <altera_avalon_mailbox_simple_tx_isr+0x80>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
210cee38:	0023303a 	rdctl	r17,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
210cee3c:	00bfff84 	movi	r2,-2
210cee40:	8884703a 	and	r2,r17,r2
210cee44:	1001703a 	wrctl	status,r2
    /*
     * Other interrupts are explicitly disabled if callbacks are registered
     * because there is no guarantee that they are preemption-safe.
     */
        status = (IORD_ALTERA_AVALON_MAILBOX_STS(dev->base)
        		  & ALTERA_AVALON_MAILBOX_SIMPLE_STS_FULL_MSK) >> 1;
210cee48:	2940008c 	andi	r5,r5,2
        if (dev->tx_cb)
        {
            cpu_sr = alt_irq_disable_all();
  	        (dev->tx_cb)(message, status);
210cee4c:	280ad07a 	srli	r5,r5,1
210cee50:	1809883a 	mov	r4,r3
210cee54:	303ee83a 	callr	r6
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
210cee58:	8801703a 	wrctl	status,r17
            alt_irq_enable_all(cpu_sr);
        }
        /* Clear mailbox message to NULL after message being posted */
        dev->mbox_msg = NULL;
210cee5c:	80001015 	stw	zero,64(r16)
        dev->lock = 0;
210cee60:	80001105 	stb	zero,68(r16)
    }
}
210cee64:	dfc00217 	ldw	ra,8(sp)
210cee68:	dc400117 	ldw	r17,4(sp)
210cee6c:	dc000017 	ldw	r16,0(sp)
210cee70:	dec00304 	addi	sp,sp,12
210cee74:	f800283a 	ret

210cee78 <altera_avalon_mailbox_simple_init>:
 * Altera avalon mailbox init
 * Initialize mailbox device and identify sender/receiver mailbox
 */
void altera_avalon_mailbox_simple_init (altera_avalon_mailbox_dev *dev,
		                               int intr_id, int irq)
{
210cee78:	defffc04 	addi	sp,sp,-16
210cee7c:	dc400115 	stw	r17,4(sp)
210cee80:	2823883a 	mov	r17,r5
    alt_dev_llist_insert((alt_dev_llist*) dev, &alt_mailbox_simple_list);
210cee84:	d1600d04 	addi	r5,gp,-32716
 * Altera avalon mailbox init
 * Initialize mailbox device and identify sender/receiver mailbox
 */
void altera_avalon_mailbox_simple_init (altera_avalon_mailbox_dev *dev,
		                               int intr_id, int irq)
{
210cee88:	dc800215 	stw	r18,8(sp)
210cee8c:	dc000015 	stw	r16,0(sp)
210cee90:	3025883a 	mov	r18,r6
210cee94:	2021883a 	mov	r16,r4
210cee98:	dfc00315 	stw	ra,12(sp)
    alt_dev_llist_insert((alt_dev_llist*) dev, &alt_mailbox_simple_list);
210cee9c:	10d06c40 	call	210d06c4 <alt_dev_llist_insert>
static void altera_avalon_mailbox_identify (altera_avalon_mailbox_dev *dev)
{
    /* Random signature to test mailbox ownership */
    alt_u32 magic_num = 0x3A11B045;

    IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST, magic_num);
210ceea0:	80800a17 	ldw	r2,40(r16)
210ceea4:	00ce84b4 	movhi	r3,14866
210ceea8:	18ec1144 	addi	r3,r3,-20411
void altera_avalon_mailbox_simple_init (altera_avalon_mailbox_dev *dev,
		                               int intr_id, int irq)
{
    alt_dev_llist_insert((alt_dev_llist*) dev, &alt_mailbox_simple_list);
    
    dev->mailbox_irq    = irq;
210ceeac:	84800b15 	stw	r18,44(r16)
    dev->mailbox_intr_ctrl_id = intr_id;
210ceeb0:	84400c15 	stw	r17,48(r16)
    dev->rx_cb = NULL;
210ceeb4:	80000e15 	stw	zero,56(r16)
    dev->tx_cb = NULL;
210ceeb8:	80000d15 	stw	zero,52(r16)
    dev->mbox_msg = NULL;
210ceebc:	80001015 	stw	zero,64(r16)
static void altera_avalon_mailbox_identify (altera_avalon_mailbox_dev *dev)
{
    /* Random signature to test mailbox ownership */
    alt_u32 magic_num = 0x3A11B045;

    IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST, magic_num);
210ceec0:	10c00135 	stwio	r3,4(r2)
    if((IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST)) == magic_num)
210ceec4:	80800a17 	ldw	r2,40(r16)
210ceec8:	10800104 	addi	r2,r2,4
210ceecc:	11000037 	ldwio	r4,0(r2)
210ceed0:	20c00826 	beq	r4,r3,210ceef4 <altera_avalon_mailbox_simple_init+0x7c>
        dev-> mbox_type = MBOX_TX;
        /* Clear message_ptr to default */
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST, 0x0);
    } else
    {
	    dev->mbox_type = MBOX_RX;
210ceed4:	00800044 	movi	r2,1
210ceed8:	80800f15 	stw	r2,60(r16)
    dev->mbox_msg = NULL;
    
    ALT_SEM_CREATE (&dev->write_lock, 1);

    altera_avalon_mailbox_identify(dev);
}
210ceedc:	dfc00317 	ldw	ra,12(sp)
210ceee0:	dc800217 	ldw	r18,8(sp)
210ceee4:	dc400117 	ldw	r17,4(sp)
210ceee8:	dc000017 	ldw	r16,0(sp)
210ceeec:	dec00404 	addi	sp,sp,16
210ceef0:	f800283a 	ret
    alt_u32 magic_num = 0x3A11B045;

    IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST, magic_num);
    if((IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST)) == magic_num)
    {
        dev-> mbox_type = MBOX_TX;
210ceef4:	80000f15 	stw	zero,60(r16)
        /* Clear message_ptr to default */
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST, 0x0);
210ceef8:	10000035 	stwio	zero,0(r2)
210ceefc:	003ff706 	br	210ceedc <__flash_rwdata_start+0xffffd5e4>

210cef00 <altera_avalon_mailbox_open>:
 * Search the list of registered mailboxes for one with the supplied name.
 * The return value will be NULL on failure, and non-NULL otherwise.
 */
altera_avalon_mailbox_dev* altera_avalon_mailbox_open (const char *name,
		altera_mailbox_tx_cb tx_callback, altera_mailbox_rx_cb rx_callback)
{
210cef00:	defffb04 	addi	sp,sp,-20
210cef04:	dc400215 	stw	r17,8(sp)
210cef08:	2823883a 	mov	r17,r5
    altera_avalon_mailbox_dev *dev;
    alt_u32 data;

    /* Find requested device */
    dev = (altera_avalon_mailbox_dev*) alt_find_dev (name, &alt_mailbox_simple_list);
210cef0c:	d1600d04 	addi	r5,gp,-32716
 * Search the list of registered mailboxes for one with the supplied name.
 * The return value will be NULL on failure, and non-NULL otherwise.
 */
altera_avalon_mailbox_dev* altera_avalon_mailbox_open (const char *name,
		altera_mailbox_tx_cb tx_callback, altera_mailbox_rx_cb rx_callback)
{
210cef10:	dc800315 	stw	r18,12(sp)
210cef14:	dc000115 	stw	r16,4(sp)
210cef18:	dfc00415 	stw	ra,16(sp)
210cef1c:	3025883a 	mov	r18,r6
    altera_avalon_mailbox_dev *dev;
    alt_u32 data;

    /* Find requested device */
    dev = (altera_avalon_mailbox_dev*) alt_find_dev (name, &alt_mailbox_simple_list);
210cef20:	10d08040 	call	210d0804 <alt_find_dev>
210cef24:	1021883a 	mov	r16,r2
    if (dev == NULL)
210cef28:	10002526 	beq	r2,zero,210cefc0 <altera_avalon_mailbox_open+0xc0>
    {
        return NULL;
    }

    /* Mask mailbox interrupt before ISR is being registered. */
    data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST);
210cef2c:	10800a17 	ldw	r2,40(r2)
210cef30:	10800304 	addi	r2,r2,12
210cef34:	11000037 	ldwio	r4,0(r2)
    if (dev->mbox_type == MBOX_TX) {
210cef38:	80c00f17 	ldw	r3,60(r16)
210cef3c:	18002226 	beq	r3,zero,210cefc8 <altera_avalon_mailbox_open+0xc8>
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, \
            (data & ~(ALTERA_AVALON_MAILBOX_SIMPLE_INTR_SPACE_MSK)));
    }
    if (dev->mbox_type == MBOX_RX) {
210cef40:	00800044 	movi	r2,1
210cef44:	18802626 	beq	r3,r2,210cefe0 <altera_avalon_mailbox_open+0xe0>
    }

    /* If IRQ not connected, return device pointer without ISR register,
     * in polling mode.
     */
    if (dev->mailbox_irq == ALT_IRQ_NOT_CONNECTED)
210cef48:	81400b17 	ldw	r5,44(r16)
210cef4c:	00ffffc4 	movi	r3,-1
210cef50:	28c00f26 	beq	r5,r3,210cef90 <altera_avalon_mailbox_open+0x90>
        return dev;

    /* For IRQ connected case */

    if ((tx_callback == NULL) && (rx_callback == NULL))
210cef54:	88002726 	beq	r17,zero,210ceff4 <altera_avalon_mailbox_open+0xf4>
    }

    /* Ensure user correctly use the mailbox
     * Return - Null if wrong direction set
     */
    if (((dev->mbox_type == MBOX_TX) && (rx_callback != NULL)) ||
210cef58:	80c00f17 	ldw	r3,60(r16)
210cef5c:	1800131e 	bne	r3,zero,210cefac <altera_avalon_mailbox_open+0xac>
210cef60:	9000171e 	bne	r18,zero,210cefc0 <altera_avalon_mailbox_open+0xc0>

    /* Register Mailbox's ISR */
    if (dev->mbox_type == MBOX_TX)
    {
    #ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_ic_isr_register(dev->mailbox_intr_ctrl_id, dev->mailbox_irq, altera_avalon_mailbox_simple_tx_isr,
210cef64:	81000c17 	ldw	r4,48(r16)
        return NULL;

    /* IRQ is valid register callback
     * to current mailbox device
     */
    dev->tx_cb  = tx_callback;
210cef68:	84400d15 	stw	r17,52(r16)
    dev->rx_cb  = rx_callback;
210cef6c:	80000e15 	stw	zero,56(r16)

    /* Register Mailbox's ISR */
    if (dev->mbox_type == MBOX_TX)
    {
    #ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_ic_isr_register(dev->mailbox_intr_ctrl_id, dev->mailbox_irq, altera_avalon_mailbox_simple_tx_isr,
210cef70:	01884374 	movhi	r6,8461
210cef74:	31bb7704 	addi	r6,r6,-4644
210cef78:	d8000015 	stw	zero,0(sp)
210cef7c:	800f883a 	mov	r7,r16
210cef80:	10d08880 	call	210d0888 <alt_ic_isr_register>
    #else
        alt_irq_register(dev->mailbox_irq, dev, altera_avalon_mailbox_simple_tx_isr);
    #endif
    }
  
    if (dev->mbox_type == MBOX_RX)
210cef84:	80c00f17 	ldw	r3,60(r16)
210cef88:	00800044 	movi	r2,1
210cef8c:	18802d26 	beq	r3,r2,210cf044 <altera_avalon_mailbox_open+0x144>

    /* IRQ is valid register callback
     * to current mailbox device
     */
    dev->tx_cb  = tx_callback;
    dev->rx_cb  = rx_callback;
210cef90:	8005883a 	mov	r2,r16
        data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST) |
  	             (ALTERA_AVALON_MAILBOX_SIMPLE_INTR_PEN_MSK);
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);
    }
    return dev;
}
210cef94:	dfc00417 	ldw	ra,16(sp)
210cef98:	dc800317 	ldw	r18,12(sp)
210cef9c:	dc400217 	ldw	r17,8(sp)
210cefa0:	dc000117 	ldw	r16,4(sp)
210cefa4:	dec00504 	addi	sp,sp,20
210cefa8:	f800283a 	ret
    }

    /* Ensure user correctly use the mailbox
     * Return - Null if wrong direction set
     */
    if (((dev->mbox_type == MBOX_TX) && (rx_callback != NULL)) ||
210cefac:	00800044 	movi	r2,1
210cefb0:	18800326 	beq	r3,r2,210cefc0 <altera_avalon_mailbox_open+0xc0>
        return NULL;

    /* IRQ is valid register callback
     * to current mailbox device
     */
    dev->tx_cb  = tx_callback;
210cefb4:	84400d15 	stw	r17,52(r16)
    dev->rx_cb  = rx_callback;
210cefb8:	84800e15 	stw	r18,56(r16)
210cefbc:	003ff406 	br	210cef90 <__flash_rwdata_start+0xffffd698>

    /* Find requested device */
    dev = (altera_avalon_mailbox_dev*) alt_find_dev (name, &alt_mailbox_simple_list);
    if (dev == NULL)
    {
        return NULL;
210cefc0:	0005883a 	mov	r2,zero
210cefc4:	003ff306 	br	210cef94 <__flash_rwdata_start+0xffffd69c>
    }

    /* Mask mailbox interrupt before ISR is being registered. */
    data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST);
    if (dev->mbox_type == MBOX_TX) {
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, \
210cefc8:	00ffff44 	movi	r3,-3
210cefcc:	20c6703a 	and	r3,r4,r3
210cefd0:	10c00035 	stwio	r3,0(r2)
210cefd4:	80c00f17 	ldw	r3,60(r16)
            (data & ~(ALTERA_AVALON_MAILBOX_SIMPLE_INTR_SPACE_MSK)));
    }
    if (dev->mbox_type == MBOX_RX) {
210cefd8:	00800044 	movi	r2,1
210cefdc:	18bfda1e 	bne	r3,r2,210cef48 <__flash_rwdata_start+0xffffd650>
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, \
210cefe0:	80c00a17 	ldw	r3,40(r16)
210cefe4:	00bfff84 	movi	r2,-2
210cefe8:	2088703a 	and	r4,r4,r2
210cefec:	19000335 	stwio	r4,12(r3)
210ceff0:	003fd506 	br	210cef48 <__flash_rwdata_start+0xffffd650>
    if (dev->mailbox_irq == ALT_IRQ_NOT_CONNECTED)
        return dev;

    /* For IRQ connected case */

    if ((tx_callback == NULL) && (rx_callback == NULL))
210ceff4:	903fe626 	beq	r18,zero,210cef90 <__flash_rwdata_start+0xffffd698>
    }

    /* Ensure user correctly use the mailbox
     * Return - Null if wrong direction set
     */
    if (((dev->mbox_type == MBOX_TX) && (rx_callback != NULL)) ||
210ceff8:	80c00f17 	ldw	r3,60(r16)
210ceffc:	183ff026 	beq	r3,zero,210cefc0 <__flash_rwdata_start+0xffffd6c8>
210cf000:	01000044 	movi	r4,1
210cf004:	193feb1e 	bne	r3,r4,210cefb4 <__flash_rwdata_start+0xffffd6bc>
        return NULL;

    /* IRQ is valid register callback
     * to current mailbox device
     */
    dev->tx_cb  = tx_callback;
210cf008:	80000d15 	stw	zero,52(r16)
    dev->rx_cb  = rx_callback;
210cf00c:	84800e15 	stw	r18,56(r16)
    }
  
    if (dev->mbox_type == MBOX_RX)
    {
    #ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_ic_isr_register(dev->mailbox_intr_ctrl_id, dev->mailbox_irq, altera_avalon_mailbox_simple_rx_isr,
210cf010:	81000c17 	ldw	r4,48(r16)
210cf014:	01884374 	movhi	r6,8461
210cf018:	31bb6204 	addi	r6,r6,-4728
210cf01c:	d8000015 	stw	zero,0(sp)
210cf020:	800f883a 	mov	r7,r16
210cf024:	10d08880 	call	210d0888 <alt_ic_isr_register>
                            dev, NULL);
    #else
        alt_irq_register(dev->mailbox_irq, dev, altera_avalon_mailbox_simple_rx_isr);
    #endif
        /* Enable Receiver interrupt to listen mode */
        data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST) |
210cf028:	80800a17 	ldw	r2,40(r16)
210cf02c:	10800304 	addi	r2,r2,12
210cf030:	10c00037 	ldwio	r3,0(r2)
210cf034:	18c00054 	ori	r3,r3,1
  	             (ALTERA_AVALON_MAILBOX_SIMPLE_INTR_PEN_MSK);
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);
210cf038:	10c00035 	stwio	r3,0(r2)
210cf03c:	8005883a 	mov	r2,r16
210cf040:	003fd406 	br	210cef94 <__flash_rwdata_start+0xffffd69c>
210cf044:	81400b17 	ldw	r5,44(r16)
210cf048:	003ff106 	br	210cf010 <__flash_rwdata_start+0xffffd718>

210cf04c <altera_avalon_mailbox_close>:
 * Disable mailbox interrupt and irq
 */
void altera_avalon_mailbox_close (altera_avalon_mailbox_dev *dev)
{
    alt_u32 data;
    if ((dev != NULL) && (dev->mailbox_irq != ALT_IRQ_NOT_CONNECTED))
210cf04c:	20001526 	beq	r4,zero,210cf0a4 <altera_avalon_mailbox_close+0x58>
210cf050:	21400b17 	ldw	r5,44(r4)
210cf054:	00bfffc4 	movi	r2,-1
210cf058:	28801226 	beq	r5,r2,210cf0a4 <altera_avalon_mailbox_close+0x58>
    {
        /* Mask interrupt */
        if (dev->mbox_type == MBOX_TX)
210cf05c:	20800f17 	ldw	r2,60(r4)
/*
 * altera_avalon_mailbox_close
 * Disable mailbox interrupt and irq
 */
void altera_avalon_mailbox_close (altera_avalon_mailbox_dev *dev)
{
210cf060:	defffd04 	addi	sp,sp,-12
210cf064:	dc000115 	stw	r16,4(sp)
210cf068:	dfc00215 	stw	ra,8(sp)
210cf06c:	2021883a 	mov	r16,r4
    alt_u32 data;
    if ((dev != NULL) && (dev->mailbox_irq != ALT_IRQ_NOT_CONNECTED))
    {
        /* Mask interrupt */
        if (dev->mbox_type == MBOX_TX)
210cf070:	10000d26 	beq	r2,zero,210cf0a8 <altera_avalon_mailbox_close+0x5c>
        {
            data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST) &
                       (~ALTERA_AVALON_MAILBOX_SIMPLE_INTR_SPACE_MSK);
            IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);
        }
        if (dev->mbox_type == MBOX_RX)
210cf074:	00c00044 	movi	r3,1
210cf078:	10c01826 	beq	r2,r3,210cf0dc <altera_avalon_mailbox_close+0x90>
  
        /* De-register mailbox irq) */
        if (dev->mailbox_irq != ALT_IRQ_NOT_CONNECTED)
        {
        #ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
            alt_ic_isr_register(dev->mailbox_intr_ctrl_id, dev->mailbox_irq, NULL,
210cf07c:	81000c17 	ldw	r4,48(r16)
210cf080:	000d883a 	mov	r6,zero
210cf084:	d8000015 	stw	zero,0(sp)
210cf088:	800f883a 	mov	r7,r16
210cf08c:	10d08880 	call	210d0888 <alt_ic_isr_register>
        #else
            alt_irq_register(dev->mailbox_irq, dev, NULL);
        #endif
        }
        /* De-registering callback to mailbox */
        dev->tx_cb  = NULL;
210cf090:	80000d15 	stw	zero,52(r16)
        dev->rx_cb  = NULL;
210cf094:	80000e15 	stw	zero,56(r16)
    }
}
210cf098:	dfc00217 	ldw	ra,8(sp)
210cf09c:	dc000117 	ldw	r16,4(sp)
210cf0a0:	dec00304 	addi	sp,sp,12
210cf0a4:	f800283a 	ret
    if ((dev != NULL) && (dev->mailbox_irq != ALT_IRQ_NOT_CONNECTED))
    {
        /* Mask interrupt */
        if (dev->mbox_type == MBOX_TX)
        {
            data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST) &
210cf0a8:	20800a17 	ldw	r2,40(r4)
210cf0ac:	10800304 	addi	r2,r2,12
210cf0b0:	11000037 	ldwio	r4,0(r2)
210cf0b4:	00ffff44 	movi	r3,-3
210cf0b8:	20c6703a 	and	r3,r4,r3
                       (~ALTERA_AVALON_MAILBOX_SIMPLE_INTR_SPACE_MSK);
            IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);
210cf0bc:	10c00035 	stwio	r3,0(r2)
        }
        if (dev->mbox_type == MBOX_RX)
210cf0c0:	80c00f17 	ldw	r3,60(r16)
210cf0c4:	00800044 	movi	r2,1
210cf0c8:	18800426 	beq	r3,r2,210cf0dc <altera_avalon_mailbox_close+0x90>
                       (~ALTERA_AVALON_MAILBOX_SIMPLE_INTR_PEN_MSK);
            IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);
        }
  
        /* De-register mailbox irq) */
        if (dev->mailbox_irq != ALT_IRQ_NOT_CONNECTED)
210cf0cc:	81400b17 	ldw	r5,44(r16)
210cf0d0:	00bfffc4 	movi	r2,-1
210cf0d4:	28bfe91e 	bne	r5,r2,210cf07c <__flash_rwdata_start+0xffffd784>
210cf0d8:	003fed06 	br	210cf090 <__flash_rwdata_start+0xffffd798>
                       (~ALTERA_AVALON_MAILBOX_SIMPLE_INTR_SPACE_MSK);
            IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);
        }
        if (dev->mbox_type == MBOX_RX)
        {
            data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST) &
210cf0dc:	80800a17 	ldw	r2,40(r16)
210cf0e0:	10800304 	addi	r2,r2,12
210cf0e4:	11000037 	ldwio	r4,0(r2)
210cf0e8:	00ffff84 	movi	r3,-2
210cf0ec:	20c6703a 	and	r3,r4,r3
                       (~ALTERA_AVALON_MAILBOX_SIMPLE_INTR_PEN_MSK);
            IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);
210cf0f0:	10c00035 	stwio	r3,0(r2)
210cf0f4:	003ff506 	br	210cf0cc <__flash_rwdata_start+0xffffd7d4>

210cf0f8 <altera_avalon_mailbox_status>:

alt_u32 altera_avalon_mailbox_status (altera_avalon_mailbox_dev *dev)
{
    alt_u32 mailbox_sts = 0;

    mailbox_sts = (IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_STS_OFST) & ALTERA_AVALON_MAILBOX_SIMPLE_STS_MSK);
210cf0f8:	20800a17 	ldw	r2,40(r4)
210cf0fc:	10800237 	ldwio	r2,8(r2)

    if (dev->mbox_type == MBOX_TX)
210cf100:	20c00f17 	ldw	r3,60(r4)
210cf104:	1800031e 	bne	r3,zero,210cf114 <altera_avalon_mailbox_status+0x1c>
        mailbox_sts = (mailbox_sts & ALTERA_AVALON_MAILBOX_SIMPLE_STS_FULL_MSK) >> 1;
210cf108:	1080008c 	andi	r2,r2,2
210cf10c:	1004d07a 	srli	r2,r2,1
210cf110:	f800283a 	ret

    if (dev->mbox_type == MBOX_RX)
210cf114:	01000044 	movi	r4,1
210cf118:	1900021e 	bne	r3,r4,210cf124 <altera_avalon_mailbox_status+0x2c>
        mailbox_sts = mailbox_sts & ALTERA_AVALON_MAILBOX_SIMPLE_STS_PENDING_MSK;
210cf11c:	1080004c 	andi	r2,r2,1

    return mailbox_sts;
}
210cf120:	f800283a 	ret

alt_u32 altera_avalon_mailbox_status (altera_avalon_mailbox_dev *dev)
{
    alt_u32 mailbox_sts = 0;

    mailbox_sts = (IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_STS_OFST) & ALTERA_AVALON_MAILBOX_SIMPLE_STS_MSK);
210cf124:	108000cc 	andi	r2,r2,3
210cf128:	f800283a 	ret

210cf12c <altera_avalon_mailbox_send>:
     * Obtain the "write_lock"semaphore to ensures 
     * that writing to the device is thread-safe in multi-thread enviroment
     */
    ALT_SEM_PEND (dev->write_lock, 0);

    if (dev->lock || (IORD_ALTERA_AVALON_MAILBOX_STS(dev->base)
210cf12c:	20801103 	ldbu	r2,68(r4)
210cf130:	10004d1e 	bne	r2,zero,210cf268 <altera_avalon_mailbox_send+0x13c>
210cf134:	20c00a17 	ldw	r3,40(r4)
210cf138:	18800237 	ldwio	r2,8(r3)
    		          & ALTERA_AVALON_MAILBOX_SIMPLE_STS_FULL_MSK))
210cf13c:	1080008c 	andi	r2,r2,2
     * Obtain the "write_lock"semaphore to ensures 
     * that writing to the device is thread-safe in multi-thread enviroment
     */
    ALT_SEM_PEND (dev->write_lock, 0);

    if (dev->lock || (IORD_ALTERA_AVALON_MAILBOX_STS(dev->base)
210cf140:	1000491e 	bne	r2,zero,210cf268 <altera_avalon_mailbox_send+0x13c>
     */
    ALT_SEM_POST (dev->write_lock);



    if ((dev->mailbox_irq == ALT_IRQ_NOT_CONNECTED) || (event==POLL))
210cf144:	22400b17 	ldw	r9,44(r4)
    	return -1;
    }
    else
    {
        dev->mbox_msg = message;
        dev->lock = 1;
210cf148:	02000044 	movi	r8,1
210cf14c:	22001105 	stb	r8,68(r4)
    	/* dev is lock or no free space to send */
    	return -1;
    }
    else
    {
        dev->mbox_msg = message;
210cf150:	21401015 	stw	r5,64(r4)
     */
    ALT_SEM_POST (dev->write_lock);



    if ((dev->mailbox_irq == ALT_IRQ_NOT_CONNECTED) || (event==POLL))
210cf154:	023fffc4 	movi	r8,-1
210cf158:	4a000726 	beq	r9,r8,210cf178 <altera_avalon_mailbox_send+0x4c>
210cf15c:	02000044 	movi	r8,1
210cf160:	3a000526 	beq	r7,r8,210cf178 <altera_avalon_mailbox_send+0x4c>
        dev->lock =0;
        return status;
    } else
    {
        /* Enable Sender interrupt */
        data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST) |
210cf164:	18c00304 	addi	r3,r3,12
210cf168:	19000037 	ldwio	r4,0(r3)
210cf16c:	21000094 	ori	r4,r4,2
                   (ALTERA_AVALON_MAILBOX_SIMPLE_INTR_SPACE_MSK);
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);
210cf170:	19000035 	stwio	r4,0(r3)
    }
  return 0;
210cf174:	f800283a 	ret
210cf178:	20800f17 	ldw	r2,60(r4)

alt_u32 altera_avalon_mailbox_status (altera_avalon_mailbox_dev *dev)
{
    alt_u32 mailbox_sts = 0;

    mailbox_sts = (IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_STS_OFST) & ALTERA_AVALON_MAILBOX_SIMPLE_STS_MSK);
210cf17c:	18c00204 	addi	r3,r3,8


    if ((dev->mailbox_irq == ALT_IRQ_NOT_CONNECTED) || (event==POLL))
    {
        /* Polling mode */
        if (timeout ==0)
210cf180:	3000111e 	bne	r6,zero,210cf1c8 <altera_avalon_mailbox_send+0x9c>
210cf184:	10002326 	beq	r2,zero,210cf214 <altera_avalon_mailbox_send+0xe8>
210cf188:	01800044 	movi	r6,1
210cf18c:	1180281e 	bne	r2,r6,210cf230 <altera_avalon_mailbox_send+0x104>

alt_u32 altera_avalon_mailbox_status (altera_avalon_mailbox_dev *dev)
{
    alt_u32 mailbox_sts = 0;

    mailbox_sts = (IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_STS_OFST) & ALTERA_AVALON_MAILBOX_SIMPLE_STS_MSK);
210cf190:	18800037 	ldwio	r2,0(r3)

    if (dev->mbox_type == MBOX_TX)
        mailbox_sts = (mailbox_sts & ALTERA_AVALON_MAILBOX_SIMPLE_STS_FULL_MSK) >> 1;

    if (dev->mbox_type == MBOX_RX)
        mailbox_sts = mailbox_sts & ALTERA_AVALON_MAILBOX_SIMPLE_STS_PENDING_MSK;
210cf194:	1080004c 	andi	r2,r2,1
        if (timeout ==0)
        {
            do
            {
                mbox_status = altera_avalon_mailbox_status(dev);
            } while (mbox_status);
210cf198:	103ffd1e 	bne	r2,zero,210cf190 <__flash_rwdata_start+0xffffd898>
 */
static alt_32 altera_avalon_mailbox_post (altera_avalon_mailbox_dev *dev,  void *message)
{
    alt_u32 *mbox_msg = (alt_u32*) message ;

    if (mbox_msg != NULL) {
210cf19c:	28003426 	beq	r5,zero,210cf270 <altera_avalon_mailbox_send+0x144>
        /* When message space available, post the message out */
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST, mbox_msg[1]);
210cf1a0:	20800a17 	ldw	r2,40(r4)
210cf1a4:	28c00117 	ldw	r3,4(r5)
210cf1a8:	10c00135 	stwio	r3,4(r2)
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_CMD_OFST, mbox_msg[0]);
210cf1ac:	20800a17 	ldw	r2,40(r4)
210cf1b0:	28c00017 	ldw	r3,0(r5)
210cf1b4:	10c00035 	stwio	r3,0(r2)
        return 0;
210cf1b8:	0005883a 	mov	r2,zero
                return -ETIME;
            }
        }
        status = altera_avalon_mailbox_post (dev, message);
        /* Clear mailbox message to NULL after message being posted */
        dev->mbox_msg = NULL;
210cf1bc:	20001015 	stw	zero,64(r4)
        /* Release lock when message posted */
        dev->lock =0;
210cf1c0:	20001105 	stb	zero,68(r4)
        return status;
210cf1c4:	f800283a 	ret
210cf1c8:	10000c26 	beq	r2,zero,210cf1fc <altera_avalon_mailbox_send+0xd0>
210cf1cc:	01c00044 	movi	r7,1
210cf1d0:	11c00226 	beq	r2,r7,210cf1dc <altera_avalon_mailbox_send+0xb0>
210cf1d4:	00001e06 	br	210cf250 <altera_avalon_mailbox_send+0x124>
        {
            do
            {
                mbox_status = altera_avalon_mailbox_status(dev);
                timeout--;
            } while (mbox_status && (timeout != 0));
210cf1d8:	30000526 	beq	r6,zero,210cf1f0 <altera_avalon_mailbox_send+0xc4>

alt_u32 altera_avalon_mailbox_status (altera_avalon_mailbox_dev *dev)
{
    alt_u32 mailbox_sts = 0;

    mailbox_sts = (IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_STS_OFST) & ALTERA_AVALON_MAILBOX_SIMPLE_STS_MSK);
210cf1dc:	18800037 	ldwio	r2,0(r3)

    if (dev->mbox_type == MBOX_TX)
        mailbox_sts = (mailbox_sts & ALTERA_AVALON_MAILBOX_SIMPLE_STS_FULL_MSK) >> 1;

    if (dev->mbox_type == MBOX_RX)
        mailbox_sts = mailbox_sts & ALTERA_AVALON_MAILBOX_SIMPLE_STS_PENDING_MSK;
210cf1e0:	1080004c 	andi	r2,r2,1
        } else
        {
            do
            {
                mbox_status = altera_avalon_mailbox_status(dev);
                timeout--;
210cf1e4:	31bfffc4 	addi	r6,r6,-1
            } while (mbox_status && (timeout != 0));
210cf1e8:	103ffb1e 	bne	r2,zero,210cf1d8 <__flash_rwdata_start+0xffffd8e0>
            if (timeout == 0)
210cf1ec:	303feb1e 	bne	r6,zero,210cf19c <__flash_rwdata_start+0xffffd8a4>
            {    /* Timeout occur or fail sending */
                return -ETIME;
210cf1f0:	00bff084 	movi	r2,-62
        data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST) |
                   (ALTERA_AVALON_MAILBOX_SIMPLE_INTR_SPACE_MSK);
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);
    }
  return 0;
}
210cf1f4:	f800283a 	ret
        {
            do
            {
                mbox_status = altera_avalon_mailbox_status(dev);
                timeout--;
            } while (mbox_status && (timeout != 0));
210cf1f8:	303ffd26 	beq	r6,zero,210cf1f0 <__flash_rwdata_start+0xffffd8f8>

alt_u32 altera_avalon_mailbox_status (altera_avalon_mailbox_dev *dev)
{
    alt_u32 mailbox_sts = 0;

    mailbox_sts = (IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_STS_OFST) & ALTERA_AVALON_MAILBOX_SIMPLE_STS_MSK);
210cf1fc:	18800037 	ldwio	r2,0(r3)

    if (dev->mbox_type == MBOX_TX)
        mailbox_sts = (mailbox_sts & ALTERA_AVALON_MAILBOX_SIMPLE_STS_FULL_MSK) >> 1;
210cf200:	1080008c 	andi	r2,r2,2
        } else
        {
            do
            {
                mbox_status = altera_avalon_mailbox_status(dev);
                timeout--;
210cf204:	31bfffc4 	addi	r6,r6,-1
            } while (mbox_status && (timeout != 0));
210cf208:	103ffb1e 	bne	r2,zero,210cf1f8 <__flash_rwdata_start+0xffffd900>
            if (timeout == 0)
210cf20c:	303fe31e 	bne	r6,zero,210cf19c <__flash_rwdata_start+0xffffd8a4>
210cf210:	003ff706 	br	210cf1f0 <__flash_rwdata_start+0xffffd8f8>

alt_u32 altera_avalon_mailbox_status (altera_avalon_mailbox_dev *dev)
{
    alt_u32 mailbox_sts = 0;

    mailbox_sts = (IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_STS_OFST) & ALTERA_AVALON_MAILBOX_SIMPLE_STS_MSK);
210cf214:	18800037 	ldwio	r2,0(r3)

    if (dev->mbox_type == MBOX_TX)
        mailbox_sts = (mailbox_sts & ALTERA_AVALON_MAILBOX_SIMPLE_STS_FULL_MSK) >> 1;
210cf218:	1080008c 	andi	r2,r2,2
        if (timeout ==0)
        {
            do
            {
                mbox_status = altera_avalon_mailbox_status(dev);
            } while (mbox_status);
210cf21c:	103fdf26 	beq	r2,zero,210cf19c <__flash_rwdata_start+0xffffd8a4>

alt_u32 altera_avalon_mailbox_status (altera_avalon_mailbox_dev *dev)
{
    alt_u32 mailbox_sts = 0;

    mailbox_sts = (IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_STS_OFST) & ALTERA_AVALON_MAILBOX_SIMPLE_STS_MSK);
210cf220:	18800037 	ldwio	r2,0(r3)

    if (dev->mbox_type == MBOX_TX)
        mailbox_sts = (mailbox_sts & ALTERA_AVALON_MAILBOX_SIMPLE_STS_FULL_MSK) >> 1;
210cf224:	1080008c 	andi	r2,r2,2
        if (timeout ==0)
        {
            do
            {
                mbox_status = altera_avalon_mailbox_status(dev);
            } while (mbox_status);
210cf228:	103ffa1e 	bne	r2,zero,210cf214 <__flash_rwdata_start+0xffffd91c>
210cf22c:	003fdb06 	br	210cf19c <__flash_rwdata_start+0xffffd8a4>

alt_u32 altera_avalon_mailbox_status (altera_avalon_mailbox_dev *dev)
{
    alt_u32 mailbox_sts = 0;

    mailbox_sts = (IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_STS_OFST) & ALTERA_AVALON_MAILBOX_SIMPLE_STS_MSK);
210cf230:	18800037 	ldwio	r2,0(r3)
210cf234:	108000cc 	andi	r2,r2,3
        if (timeout ==0)
        {
            do
            {
                mbox_status = altera_avalon_mailbox_status(dev);
            } while (mbox_status);
210cf238:	103fd826 	beq	r2,zero,210cf19c <__flash_rwdata_start+0xffffd8a4>

alt_u32 altera_avalon_mailbox_status (altera_avalon_mailbox_dev *dev)
{
    alt_u32 mailbox_sts = 0;

    mailbox_sts = (IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_STS_OFST) & ALTERA_AVALON_MAILBOX_SIMPLE_STS_MSK);
210cf23c:	18800037 	ldwio	r2,0(r3)
210cf240:	108000cc 	andi	r2,r2,3
        if (timeout ==0)
        {
            do
            {
                mbox_status = altera_avalon_mailbox_status(dev);
            } while (mbox_status);
210cf244:	103ffa1e 	bne	r2,zero,210cf230 <__flash_rwdata_start+0xffffd938>
210cf248:	003fd406 	br	210cf19c <__flash_rwdata_start+0xffffd8a4>
        {
            do
            {
                mbox_status = altera_avalon_mailbox_status(dev);
                timeout--;
            } while (mbox_status && (timeout != 0));
210cf24c:	303fe826 	beq	r6,zero,210cf1f0 <__flash_rwdata_start+0xffffd8f8>

alt_u32 altera_avalon_mailbox_status (altera_avalon_mailbox_dev *dev)
{
    alt_u32 mailbox_sts = 0;

    mailbox_sts = (IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_STS_OFST) & ALTERA_AVALON_MAILBOX_SIMPLE_STS_MSK);
210cf250:	18800037 	ldwio	r2,0(r3)
210cf254:	108000cc 	andi	r2,r2,3
        } else
        {
            do
            {
                mbox_status = altera_avalon_mailbox_status(dev);
                timeout--;
210cf258:	31bfffc4 	addi	r6,r6,-1
            } while (mbox_status && (timeout != 0));
210cf25c:	103ffb1e 	bne	r2,zero,210cf24c <__flash_rwdata_start+0xffffd954>
            if (timeout == 0)
210cf260:	303fce1e 	bne	r6,zero,210cf19c <__flash_rwdata_start+0xffffd8a4>
210cf264:	003fe206 	br	210cf1f0 <__flash_rwdata_start+0xffffd8f8>

    if (dev->lock || (IORD_ALTERA_AVALON_MAILBOX_STS(dev->base)
    		          & ALTERA_AVALON_MAILBOX_SIMPLE_STS_FULL_MSK))
    {
    	/* dev is lock or no free space to send */
    	return -1;
210cf268:	00bfffc4 	movi	r2,-1
210cf26c:	f800283a 	ret
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST, mbox_msg[1]);
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_CMD_OFST, mbox_msg[0]);
        return 0;
    }
    /* Invalid NULL message received */
    return -EINVAL;
210cf270:	00bffa84 	movi	r2,-22
210cf274:	003fd106 	br	210cf1bc <__flash_rwdata_start+0xffffd8c4>

210cf278 <altera_avalon_mailbox_retrieve_poll>:
int altera_avalon_mailbox_retrieve_poll (altera_avalon_mailbox_dev *dev, alt_u32 *message, alt_u32 timeout)
{
    alt_u32 status = 0;
    alt_u32 data;

    if (dev != NULL && message != NULL)
210cf278:	20004226 	beq	r4,zero,210cf384 <altera_avalon_mailbox_retrieve_poll+0x10c>
210cf27c:	28004126 	beq	r5,zero,210cf384 <altera_avalon_mailbox_retrieve_poll+0x10c>
    {
        /* Mask receiver mailbox interrupt when in polling mode */
        data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST);
210cf280:	20800a17 	ldw	r2,40(r4)
210cf284:	10800304 	addi	r2,r2,12
210cf288:	11c00037 	ldwio	r7,0(r2)
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST,
210cf28c:	00ffff84 	movi	r3,-2
210cf290:	38c6703a 	and	r3,r7,r3
210cf294:	10c00035 	stwio	r3,0(r2)
210cf298:	22000a17 	ldw	r8,40(r4)
210cf29c:	20800f17 	ldw	r2,60(r4)

alt_u32 altera_avalon_mailbox_status (altera_avalon_mailbox_dev *dev)
{
    alt_u32 mailbox_sts = 0;

    mailbox_sts = (IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_STS_OFST) & ALTERA_AVALON_MAILBOX_SIMPLE_STS_MSK);
210cf2a0:	40c00204 	addi	r3,r8,8
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST,
            (data & (~ALTERA_AVALON_MAILBOX_SIMPLE_INTR_PEN_MSK)));


        /* If timeout is '0', poll till message availabe in mailbox */
        if (timeout == 0)
210cf2a4:	30000f1e 	bne	r6,zero,210cf2e4 <altera_avalon_mailbox_retrieve_poll+0x6c>
210cf2a8:	10002726 	beq	r2,zero,210cf348 <altera_avalon_mailbox_retrieve_poll+0xd0>
210cf2ac:	01800044 	movi	r6,1
210cf2b0:	11802c1e 	bne	r2,r6,210cf364 <altera_avalon_mailbox_retrieve_poll+0xec>

alt_u32 altera_avalon_mailbox_status (altera_avalon_mailbox_dev *dev)
{
    alt_u32 mailbox_sts = 0;

    mailbox_sts = (IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_STS_OFST) & ALTERA_AVALON_MAILBOX_SIMPLE_STS_MSK);
210cf2b4:	18800037 	ldwio	r2,0(r3)

    if (dev->mbox_type == MBOX_TX)
        mailbox_sts = (mailbox_sts & ALTERA_AVALON_MAILBOX_SIMPLE_STS_FULL_MSK) >> 1;

    if (dev->mbox_type == MBOX_RX)
        mailbox_sts = mailbox_sts & ALTERA_AVALON_MAILBOX_SIMPLE_STS_PENDING_MSK;
210cf2b8:	1080004c 	andi	r2,r2,1
        if (timeout == 0)
        {
            do
            {
                status = altera_avalon_mailbox_status (dev);
            } while (status == 0);
210cf2bc:	103ffd26 	beq	r2,zero,210cf2b4 <__flash_rwdata_start+0xffffd9bc>
        }

        /* if timeout, status remain 0 */
        if (status)
        {
            message[1] = (IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST));
210cf2c0:	40800137 	ldwio	r2,4(r8)
210cf2c4:	28800115 	stw	r2,4(r5)
            message[0] = (IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_CMD_OFST));
210cf2c8:	20800a17 	ldw	r2,40(r4)
210cf2cc:	10800037 	ldwio	r2,0(r2)
210cf2d0:	28800015 	stw	r2,0(r5)
        }
        /* Restore original state of interrupt mask */
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);
210cf2d4:	20800a17 	ldw	r2,40(r4)
210cf2d8:	11c00335 	stwio	r7,12(r2)

        /* Return success on complete retrieve message
         * otherwise timeout and exit with error
         */
        if (status)
          return 0;
210cf2dc:	0005883a 	mov	r2,zero
210cf2e0:	f800283a 	ret
210cf2e4:	10000d26 	beq	r2,zero,210cf31c <altera_avalon_mailbox_retrieve_poll+0xa4>
210cf2e8:	02400044 	movi	r9,1
210cf2ec:	1240111e 	bne	r2,r9,210cf334 <altera_avalon_mailbox_retrieve_poll+0xbc>

alt_u32 altera_avalon_mailbox_status (altera_avalon_mailbox_dev *dev)
{
    alt_u32 mailbox_sts = 0;

    mailbox_sts = (IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_STS_OFST) & ALTERA_AVALON_MAILBOX_SIMPLE_STS_MSK);
210cf2f0:	18800037 	ldwio	r2,0(r3)

    if (dev->mbox_type == MBOX_TX)
        mailbox_sts = (mailbox_sts & ALTERA_AVALON_MAILBOX_SIMPLE_STS_FULL_MSK) >> 1;

    if (dev->mbox_type == MBOX_RX)
        mailbox_sts = mailbox_sts & ALTERA_AVALON_MAILBOX_SIMPLE_STS_PENDING_MSK;
210cf2f4:	1080004c 	andi	r2,r2,1
        } else
        {
            do
            {
                 status = altera_avalon_mailbox_status (dev);
                 timeout-- ;
210cf2f8:	31bfffc4 	addi	r6,r6,-1
            } while ((status == 0) && timeout);
210cf2fc:	103ff01e 	bne	r2,zero,210cf2c0 <__flash_rwdata_start+0xffffd9c8>
210cf300:	30001f26 	beq	r6,zero,210cf380 <altera_avalon_mailbox_retrieve_poll+0x108>

alt_u32 altera_avalon_mailbox_status (altera_avalon_mailbox_dev *dev)
{
    alt_u32 mailbox_sts = 0;

    mailbox_sts = (IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_STS_OFST) & ALTERA_AVALON_MAILBOX_SIMPLE_STS_MSK);
210cf304:	18800037 	ldwio	r2,0(r3)

    if (dev->mbox_type == MBOX_TX)
        mailbox_sts = (mailbox_sts & ALTERA_AVALON_MAILBOX_SIMPLE_STS_FULL_MSK) >> 1;

    if (dev->mbox_type == MBOX_RX)
        mailbox_sts = mailbox_sts & ALTERA_AVALON_MAILBOX_SIMPLE_STS_PENDING_MSK;
210cf308:	1080004c 	andi	r2,r2,1
        } else
        {
            do
            {
                 status = altera_avalon_mailbox_status (dev);
                 timeout-- ;
210cf30c:	31bfffc4 	addi	r6,r6,-1
            } while ((status == 0) && timeout);
210cf310:	103ffb26 	beq	r2,zero,210cf300 <__flash_rwdata_start+0xffffda08>
210cf314:	003fea06 	br	210cf2c0 <__flash_rwdata_start+0xffffd9c8>
210cf318:	30001926 	beq	r6,zero,210cf380 <altera_avalon_mailbox_retrieve_poll+0x108>

alt_u32 altera_avalon_mailbox_status (altera_avalon_mailbox_dev *dev)
{
    alt_u32 mailbox_sts = 0;

    mailbox_sts = (IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_STS_OFST) & ALTERA_AVALON_MAILBOX_SIMPLE_STS_MSK);
210cf31c:	18800037 	ldwio	r2,0(r3)

    if (dev->mbox_type == MBOX_TX)
        mailbox_sts = (mailbox_sts & ALTERA_AVALON_MAILBOX_SIMPLE_STS_FULL_MSK) >> 1;
210cf320:	1080008c 	andi	r2,r2,2
        } else
        {
            do
            {
                 status = altera_avalon_mailbox_status (dev);
                 timeout-- ;
210cf324:	31bfffc4 	addi	r6,r6,-1
            } while ((status == 0) && timeout);
210cf328:	103ffb26 	beq	r2,zero,210cf318 <__flash_rwdata_start+0xffffda20>
210cf32c:	003fe406 	br	210cf2c0 <__flash_rwdata_start+0xffffd9c8>
210cf330:	30001326 	beq	r6,zero,210cf380 <altera_avalon_mailbox_retrieve_poll+0x108>

alt_u32 altera_avalon_mailbox_status (altera_avalon_mailbox_dev *dev)
{
    alt_u32 mailbox_sts = 0;

    mailbox_sts = (IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_STS_OFST) & ALTERA_AVALON_MAILBOX_SIMPLE_STS_MSK);
210cf334:	18800037 	ldwio	r2,0(r3)
210cf338:	108000cc 	andi	r2,r2,3
        } else
        {
            do
            {
                 status = altera_avalon_mailbox_status (dev);
                 timeout-- ;
210cf33c:	31bfffc4 	addi	r6,r6,-1
            } while ((status == 0) && timeout);
210cf340:	103ffb26 	beq	r2,zero,210cf330 <__flash_rwdata_start+0xffffda38>
210cf344:	003fde06 	br	210cf2c0 <__flash_rwdata_start+0xffffd9c8>

alt_u32 altera_avalon_mailbox_status (altera_avalon_mailbox_dev *dev)
{
    alt_u32 mailbox_sts = 0;

    mailbox_sts = (IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_STS_OFST) & ALTERA_AVALON_MAILBOX_SIMPLE_STS_MSK);
210cf348:	18800037 	ldwio	r2,0(r3)

    if (dev->mbox_type == MBOX_TX)
        mailbox_sts = (mailbox_sts & ALTERA_AVALON_MAILBOX_SIMPLE_STS_FULL_MSK) >> 1;
210cf34c:	1080008c 	andi	r2,r2,2
        if (timeout == 0)
        {
            do
            {
                status = altera_avalon_mailbox_status (dev);
            } while (status == 0);
210cf350:	103fdb1e 	bne	r2,zero,210cf2c0 <__flash_rwdata_start+0xffffd9c8>

alt_u32 altera_avalon_mailbox_status (altera_avalon_mailbox_dev *dev)
{
    alt_u32 mailbox_sts = 0;

    mailbox_sts = (IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_STS_OFST) & ALTERA_AVALON_MAILBOX_SIMPLE_STS_MSK);
210cf354:	18800037 	ldwio	r2,0(r3)

    if (dev->mbox_type == MBOX_TX)
        mailbox_sts = (mailbox_sts & ALTERA_AVALON_MAILBOX_SIMPLE_STS_FULL_MSK) >> 1;
210cf358:	1080008c 	andi	r2,r2,2
        if (timeout == 0)
        {
            do
            {
                status = altera_avalon_mailbox_status (dev);
            } while (status == 0);
210cf35c:	103ffa26 	beq	r2,zero,210cf348 <__flash_rwdata_start+0xffffda50>
210cf360:	003fd706 	br	210cf2c0 <__flash_rwdata_start+0xffffd9c8>

alt_u32 altera_avalon_mailbox_status (altera_avalon_mailbox_dev *dev)
{
    alt_u32 mailbox_sts = 0;

    mailbox_sts = (IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_STS_OFST) & ALTERA_AVALON_MAILBOX_SIMPLE_STS_MSK);
210cf364:	18800037 	ldwio	r2,0(r3)
210cf368:	108000cc 	andi	r2,r2,3
        if (timeout == 0)
        {
            do
            {
                status = altera_avalon_mailbox_status (dev);
            } while (status == 0);
210cf36c:	103fd41e 	bne	r2,zero,210cf2c0 <__flash_rwdata_start+0xffffd9c8>

alt_u32 altera_avalon_mailbox_status (altera_avalon_mailbox_dev *dev)
{
    alt_u32 mailbox_sts = 0;

    mailbox_sts = (IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_STS_OFST) & ALTERA_AVALON_MAILBOX_SIMPLE_STS_MSK);
210cf370:	18800037 	ldwio	r2,0(r3)
210cf374:	108000cc 	andi	r2,r2,3
        if (timeout == 0)
        {
            do
            {
                status = altera_avalon_mailbox_status (dev);
            } while (status == 0);
210cf378:	103ffa26 	beq	r2,zero,210cf364 <__flash_rwdata_start+0xffffda6c>
210cf37c:	003fd006 	br	210cf2c0 <__flash_rwdata_start+0xffffd9c8>
        {
            message[1] = (IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST));
            message[0] = (IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_CMD_OFST));
        }
        /* Restore original state of interrupt mask */
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);
210cf380:	41c00335 	stwio	r7,12(r8)
         */
        if (status)
          return 0;
      }
      /* Invalid Null dev and message */
      message[1] = 0;
210cf384:	28000115 	stw	zero,4(r5)
      message[0] = 0;
210cf388:	28000015 	stw	zero,0(r5)
      return -EINVAL;
210cf38c:	00bffa84 	movi	r2,-22
210cf390:	f800283a 	ret

210cf394 <alt_msgdma_irq>:
 * alt_msgdma_irq()
 *
 * Interrupt handler for the Modular Scatter-Gather DMA controller.
 */
static void alt_msgdma_irq(void *context)
{
210cf394:	defffd04 	addi	sp,sp,-12
210cf398:	dc000015 	stw	r16,0(sp)
210cf39c:	dfc00215 	stw	ra,8(sp)
210cf3a0:	dc400115 	stw	r17,4(sp)
    alt_irq_context cpu_sr;
    alt_u32 temporary_control;

    
    /* disable global interrupt*/
    if (dev->prefetcher_enable)
210cf3a4:	20801783 	ldbu	r2,94(r4)
 * alt_msgdma_irq()
 *
 * Interrupt handler for the Modular Scatter-Gather DMA controller.
 */
static void alt_msgdma_irq(void *context)
{
210cf3a8:	2021883a 	mov	r16,r4
    alt_irq_context cpu_sr;
    alt_u32 temporary_control;

    
    /* disable global interrupt*/
    if (dev->prefetcher_enable)
210cf3ac:	10001d26 	beq	r2,zero,210cf424 <alt_msgdma_irq+0x90>
    {
        temporary_control = 
        		IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base)
210cf3b0:	20c00617 	ldw	r3,24(r4)
210cf3b4:	19000037 	ldwio	r4,0(r3)

    
    /* disable global interrupt*/
    if (dev->prefetcher_enable)
    {
        temporary_control = 
210cf3b8:	00bffdc4 	movi	r2,-9
210cf3bc:	2084703a 	and	r2,r4,r2
        		IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base)
				& ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_CLR_MASK;
        
        IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base,
210cf3c0:	18800035 	stwio	r2,0(r3)
        		temporary_control);
        
        /* clear the IRQ status- W1C */
        IOWR_ALT_MSGDMA_PREFETCHER_STATUS(dev->prefetcher_base,
210cf3c4:	80800617 	ldw	r2,24(r16)
210cf3c8:	00c00044 	movi	r3,1
210cf3cc:	10c00435 	stwio	r3,16(r2)
    * Other interrupts are explicitly disabled if callbacks
    * are registered because there is no guarantee that they are 
    * pre-emption-safe. This allows the driver to support 
    * interrupt pre-emption.
    */
    if(dev->callback) 
210cf3d0:	80c00b17 	ldw	r3,44(r16)
210cf3d4:	18000726 	beq	r3,zero,210cf3f4 <alt_msgdma_irq+0x60>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
210cf3d8:	0023303a 	rdctl	r17,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
210cf3dc:	00bfff84 	movi	r2,-2
210cf3e0:	8884703a 	and	r2,r17,r2
210cf3e4:	1001703a 	wrctl	status,r2
    {
        cpu_sr = alt_irq_disable_all();
        dev->callback (dev->callback_context);
210cf3e8:	81000c17 	ldw	r4,48(r16)
210cf3ec:	183ee83a 	callr	r3
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
210cf3f0:	8801703a 	wrctl	status,r17
        alt_irq_enable_all(cpu_sr);
    }

    /* enable global interrupt */
    if (dev->prefetcher_enable)
210cf3f4:	80801783 	ldbu	r2,94(r16)
210cf3f8:	1000141e 	bne	r2,zero,210cf44c <alt_msgdma_irq+0xb8>
    	IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base,
    			temporary_control);
    }
    else
    {
    	temporary_control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base) 
210cf3fc:	80800317 	ldw	r2,12(r16)
210cf400:	10800104 	addi	r2,r2,4
210cf404:	10c00037 	ldwio	r3,0(r2)
    			| (ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
210cf408:	18c00414 	ori	r3,r3,16
    	
    	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, temporary_control);
210cf40c:	10c00035 	stwio	r3,0(r2)
    }

    return;
}
210cf410:	dfc00217 	ldw	ra,8(sp)
210cf414:	dc400117 	ldw	r17,4(sp)
210cf418:	dc000017 	ldw	r16,0(sp)
210cf41c:	dec00304 	addi	sp,sp,12
210cf420:	f800283a 	ret
        IOWR_ALT_MSGDMA_PREFETCHER_STATUS(dev->prefetcher_base,
        		ALT_MSGDMA_PREFETCHER_STATUS_IRQ_SET_MASK);
    }
    else
    {
    	temporary_control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base)
210cf424:	20800317 	ldw	r2,12(r4)
210cf428:	10800104 	addi	r2,r2,4
210cf42c:	11000037 	ldwio	r4,0(r2)
210cf430:	00fffbc4 	movi	r3,-17
210cf434:	20c6703a 	and	r3,r4,r3
    			& (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
    	
    	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, temporary_control);
210cf438:	10c00035 	stwio	r3,0(r2)
    	/* clear the IRQ status */
    	IOWR_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base,
210cf43c:	80800317 	ldw	r2,12(r16)
210cf440:	00c08004 	movi	r3,512
210cf444:	10c00035 	stwio	r3,0(r2)
210cf448:	003fe106 	br	210cf3d0 <__flash_rwdata_start+0xffffdad8>

    /* enable global interrupt */
    if (dev->prefetcher_enable)
    {
    	temporary_control = 
    			IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base)
210cf44c:	80c00617 	ldw	r3,24(r16)
210cf450:	18800037 	ldwio	r2,0(r3)
				| ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_SET_MASK;
210cf454:	10800214 	ori	r2,r2,8
    	
    	IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base,
210cf458:	18800035 	stwio	r2,0(r3)
210cf45c:	003fec06 	br	210cf410 <__flash_rwdata_start+0xffffdb18>

210cf460 <alt_msgdma_construct_standard_st_to_mm_descriptor>:
	alt_u32 *read_address, 
	alt_u32 *write_address, 
	alt_u32 length, 
	alt_u32 control)
{
    if(dev->max_byte < length ||
210cf460:	20801217 	ldw	r2,72(r4)
210cf464:	11c00a36 	bltu	r2,r7,210cf490 <alt_msgdma_construct_standard_st_to_mm_descriptor+0x30>
210cf468:	20801703 	ldbu	r2,92(r4)
210cf46c:	1000081e 	bne	r2,zero,210cf490 <alt_msgdma_construct_standard_st_to_mm_descriptor+0x30>
        return -EINVAL;
    }
    descriptor->read_address = read_address;
    descriptor->write_address = write_address;
    descriptor->transfer_length = length;
    descriptor->control = control | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
210cf470:	d8800017 	ldw	r2,0(sp)
       dev->enhanced_features != 0
      )
    {
        return -EINVAL;
    }
    descriptor->read_address = read_address;
210cf474:	28000015 	stw	zero,0(r5)
    descriptor->write_address = write_address;
210cf478:	29800115 	stw	r6,4(r5)
    descriptor->transfer_length = length;
    descriptor->control = control | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
210cf47c:	10a00034 	orhi	r2,r2,32768
210cf480:	28800315 	stw	r2,12(r5)
    {
        return -EINVAL;
    }
    descriptor->read_address = read_address;
    descriptor->write_address = write_address;
    descriptor->transfer_length = length;
210cf484:	29c00215 	stw	r7,8(r5)
    descriptor->control = control | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
    
    return 0;
210cf488:	0005883a 	mov	r2,zero
210cf48c:	f800283a 	ret
{
    if(dev->max_byte < length ||
       dev->enhanced_features != 0
      )
    {
        return -EINVAL;
210cf490:	00bffa84 	movi	r2,-22
	alt_msgdma_standard_descriptor *descriptor,
	alt_u32 *write_address, alt_u32 length, alt_u32 control)
{
    return alt_msgdma_construct_standard_descriptor(dev, descriptor, NULL, 
            write_address, length, control);
}
210cf494:	f800283a 	ret

210cf498 <alt_msgdma_construct_standard_mm_to_st_descriptor>:
	alt_u32 *read_address, 
	alt_u32 *write_address, 
	alt_u32 length, 
	alt_u32 control)
{
    if(dev->max_byte < length ||
210cf498:	20801217 	ldw	r2,72(r4)
210cf49c:	11c00a36 	bltu	r2,r7,210cf4c8 <alt_msgdma_construct_standard_mm_to_st_descriptor+0x30>
210cf4a0:	20801703 	ldbu	r2,92(r4)
210cf4a4:	1000081e 	bne	r2,zero,210cf4c8 <alt_msgdma_construct_standard_mm_to_st_descriptor+0x30>
        return -EINVAL;
    }
    descriptor->read_address = read_address;
    descriptor->write_address = write_address;
    descriptor->transfer_length = length;
    descriptor->control = control | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
210cf4a8:	d8800017 	ldw	r2,0(sp)
       dev->enhanced_features != 0
      )
    {
        return -EINVAL;
    }
    descriptor->read_address = read_address;
210cf4ac:	29800015 	stw	r6,0(r5)
    descriptor->write_address = write_address;
210cf4b0:	28000115 	stw	zero,4(r5)
    descriptor->transfer_length = length;
    descriptor->control = control | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
210cf4b4:	10a00034 	orhi	r2,r2,32768
210cf4b8:	28800315 	stw	r2,12(r5)
    {
        return -EINVAL;
    }
    descriptor->read_address = read_address;
    descriptor->write_address = write_address;
    descriptor->transfer_length = length;
210cf4bc:	29c00215 	stw	r7,8(r5)
    descriptor->control = control | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
    
    return 0;
210cf4c0:	0005883a 	mov	r2,zero
210cf4c4:	f800283a 	ret
{
    if(dev->max_byte < length ||
       dev->enhanced_features != 0
      )
    {
        return -EINVAL;
210cf4c8:	00bffa84 	movi	r2,-22
	alt_u32 control)
{
    return alt_msgdma_construct_standard_descriptor(dev, descriptor, read_address, 
            NULL, length, control);

}
210cf4cc:	f800283a 	ret

210cf4d0 <alt_msgdma_construct_standard_mm_to_mm_descriptor>:
	alt_msgdma_standard_descriptor *descriptor,
	alt_u32 *read_address, 
	alt_u32 *write_address, 
	alt_u32 length, 
	alt_u32 control)
{
210cf4d0:	d8c00017 	ldw	r3,0(sp)
	alt_u32 *read_address, 
	alt_u32 *write_address, 
	alt_u32 length, 
	alt_u32 control)
{
    if(dev->max_byte < length ||
210cf4d4:	20801217 	ldw	r2,72(r4)
210cf4d8:	10c00a36 	bltu	r2,r3,210cf504 <alt_msgdma_construct_standard_mm_to_mm_descriptor+0x34>
210cf4dc:	20801703 	ldbu	r2,92(r4)
210cf4e0:	1000081e 	bne	r2,zero,210cf504 <alt_msgdma_construct_standard_mm_to_mm_descriptor+0x34>
        return -EINVAL;
    }
    descriptor->read_address = read_address;
    descriptor->write_address = write_address;
    descriptor->transfer_length = length;
    descriptor->control = control | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
210cf4e4:	d8800117 	ldw	r2,4(sp)
       dev->enhanced_features != 0
      )
    {
        return -EINVAL;
    }
    descriptor->read_address = read_address;
210cf4e8:	29800015 	stw	r6,0(r5)
    descriptor->write_address = write_address;
210cf4ec:	29c00115 	stw	r7,4(r5)
    descriptor->transfer_length = length;
    descriptor->control = control | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
210cf4f0:	10a00034 	orhi	r2,r2,32768
210cf4f4:	28800315 	stw	r2,12(r5)
    {
        return -EINVAL;
    }
    descriptor->read_address = read_address;
    descriptor->write_address = write_address;
    descriptor->transfer_length = length;
210cf4f8:	28c00215 	stw	r3,8(r5)
    descriptor->control = control | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
    
    return 0;
210cf4fc:	0005883a 	mov	r2,zero
210cf500:	f800283a 	ret
{
    if(dev->max_byte < length ||
       dev->enhanced_features != 0
      )
    {
        return -EINVAL;
210cf504:	00bffa84 	movi	r2,-22
	alt_u32 length, 
	alt_u32 control)
{
    return alt_msgdma_construct_standard_descriptor(dev, descriptor, read_address, 
            write_address, length, control);
}
210cf508:	f800283a 	ret

210cf50c <alt_msgdma_construct_extended_st_to_mm_descriptor>:
	alt_u8 read_burst_count, 
	alt_u8 write_burst_count,
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
    if(dev->max_byte < length ||
210cf50c:	20801217 	ldw	r2,72(r4)
	alt_u32 length, 
	alt_u32 control, 
	alt_u16 sequence_number, 
	alt_u8 write_burst_count, 
	alt_u16 write_stride)
{
210cf510:	da400117 	ldw	r9,4(sp)
210cf514:	da000217 	ldw	r8,8(sp)
210cf518:	d8c00317 	ldw	r3,12(sp)
	alt_u8 read_burst_count, 
	alt_u8 write_burst_count,
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
    if(dev->max_byte < length ||
210cf51c:	11c01736 	bltu	r2,r7,210cf57c <alt_msgdma_construct_extended_st_to_mm_descriptor+0x70>
       dev->max_stride < read_stride ||
210cf520:	20801417 	ldw	r2,80(r4)
       dev->max_stride < write_stride ||
210cf524:	1abfffcc 	andi	r10,r3,65535
	alt_u8 write_burst_count,
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
    if(dev->max_byte < length ||
       dev->max_stride < read_stride ||
210cf528:	10001226 	beq	r2,zero,210cf574 <alt_msgdma_construct_extended_st_to_mm_descriptor+0x68>
       dev->max_stride < write_stride ||
210cf52c:	21001703 	ldbu	r4,92(r4)
210cf530:	00800044 	movi	r2,1
210cf534:	2080111e 	bne	r4,r2,210cf57c <alt_msgdma_construct_extended_st_to_mm_descriptor+0x70>
    descriptor->write_burst_count = write_burst_count;
    descriptor->read_stride = read_stride;
    descriptor->write_stride = write_stride;
    descriptor->read_address_high = NULL;
    descriptor->write_address_high = NULL;
    descriptor->control = control | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
210cf538:	d8800017 	ldw	r2,0(sp)
      )
    {
        return -EINVAL;
    }
    
    descriptor->read_address_low = read_address;
210cf53c:	28000015 	stw	zero,0(r5)
    descriptor->write_address_low = write_address;
210cf540:	29800115 	stw	r6,4(r5)
    descriptor->write_burst_count = write_burst_count;
    descriptor->read_stride = read_stride;
    descriptor->write_stride = write_stride;
    descriptor->read_address_high = NULL;
    descriptor->write_address_high = NULL;
    descriptor->control = control | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
210cf544:	10a00034 	orhi	r2,r2,32768
210cf548:	28800715 	stw	r2,28(r5)
        return -EINVAL;
    }
    
    descriptor->read_address_low = read_address;
    descriptor->write_address_low = write_address;
    descriptor->transfer_length = length;
210cf54c:	29c00215 	stw	r7,8(r5)
    descriptor->sequence_number = sequence_number;
210cf550:	2a40030d 	sth	r9,12(r5)
    descriptor->read_burst_count = read_burst_count;
210cf554:	28000385 	stb	zero,14(r5)
    descriptor->write_burst_count = write_burst_count;
210cf558:	2a0003c5 	stb	r8,15(r5)
    descriptor->read_stride = read_stride;
210cf55c:	2800040d 	sth	zero,16(r5)
    descriptor->write_stride = write_stride;
210cf560:	28c0048d 	sth	r3,18(r5)
    descriptor->read_address_high = NULL;
210cf564:	28000515 	stw	zero,20(r5)
    descriptor->write_address_high = NULL;
210cf568:	28000615 	stw	zero,24(r5)
    descriptor->control = control | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;

  return 0 ;
210cf56c:	0005883a 	mov	r2,zero
210cf570:	f800283a 	ret
	alt_u8 write_burst_count,
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
    if(dev->max_byte < length ||
       dev->max_stride < read_stride ||
210cf574:	20801317 	ldw	r2,76(r4)
210cf578:	12bfec2e 	bgeu	r2,r10,210cf52c <__flash_rwdata_start+0xffffdc34>
       dev->max_stride < write_stride ||
       dev->enhanced_features != 1 
      )
    {
        return -EINVAL;
210cf57c:	00bffa84 	movi	r2,-22
	alt_u16 write_stride)
{
    return alt_msgdma_construct_extended_descriptor(dev, descriptor, 
            NULL, write_address, length, control, sequence_number, 0, 
            write_burst_count, 0, write_stride);
}
210cf580:	f800283a 	ret

210cf584 <alt_msgdma_construct_extended_mm_to_st_descriptor>:
	alt_u8 read_burst_count, 
	alt_u8 write_burst_count,
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
    if(dev->max_byte < length ||
210cf584:	20801217 	ldw	r2,72(r4)
	alt_u32 length,
	alt_u32 control,
	alt_u16 sequence_number,
	alt_u8 read_burst_count, 
	alt_u16 read_stride)
{
210cf588:	da400117 	ldw	r9,4(sp)
210cf58c:	da000217 	ldw	r8,8(sp)
210cf590:	d8c00317 	ldw	r3,12(sp)
	alt_u8 read_burst_count, 
	alt_u8 write_burst_count,
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
    if(dev->max_byte < length ||
210cf594:	11c01736 	bltu	r2,r7,210cf5f4 <alt_msgdma_construct_extended_mm_to_st_descriptor+0x70>
210cf598:	20801417 	ldw	r2,80(r4)
       dev->max_stride < read_stride ||
210cf59c:	1abfffcc 	andi	r10,r3,65535
	alt_u8 read_burst_count, 
	alt_u8 write_burst_count,
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
    if(dev->max_byte < length ||
210cf5a0:	10001226 	beq	r2,zero,210cf5ec <alt_msgdma_construct_extended_mm_to_st_descriptor+0x68>
       dev->max_stride < read_stride ||
       dev->max_stride < write_stride ||
210cf5a4:	21001703 	ldbu	r4,92(r4)
210cf5a8:	00800044 	movi	r2,1
210cf5ac:	2080111e 	bne	r4,r2,210cf5f4 <alt_msgdma_construct_extended_mm_to_st_descriptor+0x70>
    descriptor->write_burst_count = write_burst_count;
    descriptor->read_stride = read_stride;
    descriptor->write_stride = write_stride;
    descriptor->read_address_high = NULL;
    descriptor->write_address_high = NULL;
    descriptor->control = control | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
210cf5b0:	d8800017 	ldw	r2,0(sp)
      )
    {
        return -EINVAL;
    }
    
    descriptor->read_address_low = read_address;
210cf5b4:	29800015 	stw	r6,0(r5)
    descriptor->write_address_low = write_address;
210cf5b8:	28000115 	stw	zero,4(r5)
    descriptor->write_burst_count = write_burst_count;
    descriptor->read_stride = read_stride;
    descriptor->write_stride = write_stride;
    descriptor->read_address_high = NULL;
    descriptor->write_address_high = NULL;
    descriptor->control = control | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
210cf5bc:	10a00034 	orhi	r2,r2,32768
210cf5c0:	28800715 	stw	r2,28(r5)
        return -EINVAL;
    }
    
    descriptor->read_address_low = read_address;
    descriptor->write_address_low = write_address;
    descriptor->transfer_length = length;
210cf5c4:	29c00215 	stw	r7,8(r5)
    descriptor->sequence_number = sequence_number;
210cf5c8:	2a40030d 	sth	r9,12(r5)
    descriptor->read_burst_count = read_burst_count;
210cf5cc:	2a000385 	stb	r8,14(r5)
    descriptor->write_burst_count = write_burst_count;
210cf5d0:	280003c5 	stb	zero,15(r5)
    descriptor->read_stride = read_stride;
210cf5d4:	28c0040d 	sth	r3,16(r5)
    descriptor->write_stride = write_stride;
210cf5d8:	2800048d 	sth	zero,18(r5)
    descriptor->read_address_high = NULL;
210cf5dc:	28000515 	stw	zero,20(r5)
    descriptor->write_address_high = NULL;
210cf5e0:	28000615 	stw	zero,24(r5)
    descriptor->control = control | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;

  return 0 ;
210cf5e4:	0005883a 	mov	r2,zero
210cf5e8:	f800283a 	ret
	alt_u8 read_burst_count, 
	alt_u8 write_burst_count,
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
    if(dev->max_byte < length ||
210cf5ec:	20801317 	ldw	r2,76(r4)
210cf5f0:	12bfec2e 	bgeu	r2,r10,210cf5a4 <__flash_rwdata_start+0xffffdcac>
       dev->max_stride < read_stride ||
       dev->max_stride < write_stride ||
       dev->enhanced_features != 1 
      )
    {
        return -EINVAL;
210cf5f4:	00bffa84 	movi	r2,-22
{
    return alt_msgdma_construct_extended_descriptor(dev, descriptor, read_address, 
            NULL, length, control, sequence_number, read_burst_count, 0, 
            read_stride, 0);

}
210cf5f8:	f800283a 	ret

210cf5fc <alt_msgdma_construct_extended_mm_to_mm_descriptor>:
    alt_u16 sequence_number, 
    alt_u8 read_burst_count, 
    alt_u8 write_burst_count,
    alt_u16 read_stride, 
    alt_u16 write_stride)
{
210cf5fc:	d8c00017 	ldw	r3,0(sp)
	alt_u8 read_burst_count, 
	alt_u8 write_burst_count,
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
    if(dev->max_byte < length ||
210cf600:	20801217 	ldw	r2,72(r4)
    alt_u16 sequence_number, 
    alt_u8 read_burst_count, 
    alt_u8 write_burst_count,
    alt_u16 read_stride, 
    alt_u16 write_stride)
{
210cf604:	db000217 	ldw	r12,8(sp)
210cf608:	dac00317 	ldw	r11,12(sp)
210cf60c:	da800417 	ldw	r10,16(sp)
210cf610:	da000517 	ldw	r8,20(sp)
210cf614:	da400617 	ldw	r9,24(sp)
	alt_u8 read_burst_count, 
	alt_u8 write_burst_count,
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
    if(dev->max_byte < length ||
210cf618:	10c01936 	bltu	r2,r3,210cf680 <alt_msgdma_construct_extended_mm_to_mm_descriptor+0x84>
       dev->max_stride < read_stride ||
210cf61c:	20801417 	ldw	r2,80(r4)
210cf620:	23401317 	ldw	r13,76(r4)
210cf624:	43bfffcc 	andi	r14,r8,65535
	alt_u8 read_burst_count, 
	alt_u8 write_burst_count,
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
    if(dev->max_byte < length ||
210cf628:	10001726 	beq	r2,zero,210cf688 <alt_msgdma_construct_extended_mm_to_mm_descriptor+0x8c>
       dev->max_stride < read_stride ||
       dev->max_stride < write_stride ||
210cf62c:	4bbfffcc 	andi	r14,r9,65535
	alt_u8 write_burst_count,
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
    if(dev->max_byte < length ||
       dev->max_stride < read_stride ||
210cf630:	10001226 	beq	r2,zero,210cf67c <alt_msgdma_construct_extended_mm_to_mm_descriptor+0x80>
       dev->max_stride < write_stride ||
210cf634:	21001703 	ldbu	r4,92(r4)
210cf638:	00800044 	movi	r2,1
210cf63c:	2080101e 	bne	r4,r2,210cf680 <alt_msgdma_construct_extended_mm_to_mm_descriptor+0x84>
    descriptor->write_burst_count = write_burst_count;
    descriptor->read_stride = read_stride;
    descriptor->write_stride = write_stride;
    descriptor->read_address_high = NULL;
    descriptor->write_address_high = NULL;
    descriptor->control = control | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
210cf640:	d8800117 	ldw	r2,4(sp)
      )
    {
        return -EINVAL;
    }
    
    descriptor->read_address_low = read_address;
210cf644:	29800015 	stw	r6,0(r5)
    descriptor->write_address_low = write_address;
210cf648:	29c00115 	stw	r7,4(r5)
    descriptor->write_burst_count = write_burst_count;
    descriptor->read_stride = read_stride;
    descriptor->write_stride = write_stride;
    descriptor->read_address_high = NULL;
    descriptor->write_address_high = NULL;
    descriptor->control = control | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
210cf64c:	10a00034 	orhi	r2,r2,32768
210cf650:	28800715 	stw	r2,28(r5)
        return -EINVAL;
    }
    
    descriptor->read_address_low = read_address;
    descriptor->write_address_low = write_address;
    descriptor->transfer_length = length;
210cf654:	28c00215 	stw	r3,8(r5)
    descriptor->sequence_number = sequence_number;
210cf658:	2b00030d 	sth	r12,12(r5)
    descriptor->read_burst_count = read_burst_count;
210cf65c:	2ac00385 	stb	r11,14(r5)
    descriptor->write_burst_count = write_burst_count;
210cf660:	2a8003c5 	stb	r10,15(r5)
    descriptor->read_stride = read_stride;
210cf664:	2a00040d 	sth	r8,16(r5)
    descriptor->write_stride = write_stride;
210cf668:	2a40048d 	sth	r9,18(r5)
    descriptor->read_address_high = NULL;
210cf66c:	28000515 	stw	zero,20(r5)
    descriptor->write_address_high = NULL;
210cf670:	28000615 	stw	zero,24(r5)
    descriptor->control = control | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;

  return 0 ;
210cf674:	0005883a 	mov	r2,zero
210cf678:	f800283a 	ret
	alt_u8 write_burst_count,
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
    if(dev->max_byte < length ||
       dev->max_stride < read_stride ||
210cf67c:	6bbfed2e 	bgeu	r13,r14,210cf634 <__flash_rwdata_start+0xffffdd3c>
       dev->max_stride < write_stride ||
       dev->enhanced_features != 1 
      )
    {
        return -EINVAL;
210cf680:	00bffa84 	movi	r2,-22
{
    return alt_msgdma_construct_extended_descriptor(dev, descriptor, 
            read_address, write_address, length, control, sequence_number, 
            read_burst_count, write_burst_count, read_stride, write_stride);

}
210cf684:	f800283a 	ret
	alt_u8 read_burst_count, 
	alt_u8 write_burst_count,
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
    if(dev->max_byte < length ||
210cf688:	6bbfe82e 	bgeu	r13,r14,210cf62c <__flash_rwdata_start+0xffffdd34>
210cf68c:	003ffc06 	br	210cf680 <__flash_rwdata_start+0xffffdd88>

210cf690 <alt_msgdma_construct_prefetcher_standard_mm_to_mm_descriptor>:
	alt_msgdma_prefetcher_standard_descriptor *descriptor,
	alt_u32 read_address,
	alt_u32 write_address,
	alt_u32 length,
	alt_u32 control)
{
210cf690:	d8c00017 	ldw	r3,0(sp)
	alt_u32 read_address, 
	alt_u32 write_address, 
	alt_u32 length, 
	alt_u32 control)
{
    if(dev->max_byte < length ||
210cf694:	20801217 	ldw	r2,72(r4)
210cf698:	10c00e36 	bltu	r2,r3,210cf6d4 <alt_msgdma_construct_prefetcher_standard_mm_to_mm_descriptor+0x44>
210cf69c:	20801703 	ldbu	r2,92(r4)
210cf6a0:	10000c1e 	bne	r2,zero,210cf6d4 <alt_msgdma_construct_prefetcher_standard_mm_to_mm_descriptor+0x44>
    descriptor->next_desc_ptr = (alt_u32)descriptor;  
    
    /* clear control own_by_hw bit field (SW owns this descriptor)*/
    descriptor->control = (control 
    		& ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK) 
    		| ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
210cf6a4:	d9000117 	ldw	r4,4(sp)
210cf6a8:	00900034 	movhi	r2,16384
210cf6ac:	10bfffc4 	addi	r2,r2,-1
210cf6b0:	2084703a 	and	r2,r4,r2
210cf6b4:	10a00034 	orhi	r2,r2,32768
    descriptor->transfer_length = length;
    /* have descriptor point to itself for park_mode */
    descriptor->next_desc_ptr = (alt_u32)descriptor;  
    
    /* clear control own_by_hw bit field (SW owns this descriptor)*/
    descriptor->control = (control 
210cf6b8:	28800715 	stw	r2,28(r5)
       dev->enhanced_features != 0
      )
    {
        return -EINVAL;
    }
    descriptor->read_address = read_address;
210cf6bc:	29800015 	stw	r6,0(r5)
    descriptor->write_address = write_address;
210cf6c0:	29c00115 	stw	r7,4(r5)
    descriptor->transfer_length = length;
210cf6c4:	28c00215 	stw	r3,8(r5)
    /* have descriptor point to itself for park_mode */
    descriptor->next_desc_ptr = (alt_u32)descriptor;  
210cf6c8:	29400315 	stw	r5,12(r5)
    /* clear control own_by_hw bit field (SW owns this descriptor)*/
    descriptor->control = (control 
    		& ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK) 
    		| ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
    
    return 0;
210cf6cc:	0005883a 	mov	r2,zero
210cf6d0:	f800283a 	ret
{
    if(dev->max_byte < length ||
       dev->enhanced_features != 0
      )
    {
        return -EINVAL;
210cf6d4:	00bffa84 	movi	r2,-22
	alt_u32 length,
	alt_u32 control)
{
    return alt_msgdma_construct_prefetcher_standard_descriptor(dev, descriptor,
    		read_address, write_address, length, control);
}
210cf6d8:	f800283a 	ret

210cf6dc <alt_msgdma_construct_prefetcher_standard_st_to_mm_descriptor>:
	alt_u32 read_address, 
	alt_u32 write_address, 
	alt_u32 length, 
	alt_u32 control)
{
    if(dev->max_byte < length ||
210cf6dc:	20801217 	ldw	r2,72(r4)
210cf6e0:	11c00e36 	bltu	r2,r7,210cf71c <alt_msgdma_construct_prefetcher_standard_st_to_mm_descriptor+0x40>
210cf6e4:	20801703 	ldbu	r2,92(r4)
210cf6e8:	10000c1e 	bne	r2,zero,210cf71c <alt_msgdma_construct_prefetcher_standard_st_to_mm_descriptor+0x40>
    descriptor->next_desc_ptr = (alt_u32)descriptor;  
    
    /* clear control own_by_hw bit field (SW owns this descriptor)*/
    descriptor->control = (control 
    		& ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK) 
    		| ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
210cf6ec:	d8c00017 	ldw	r3,0(sp)
210cf6f0:	00900034 	movhi	r2,16384
210cf6f4:	10bfffc4 	addi	r2,r2,-1
210cf6f8:	1884703a 	and	r2,r3,r2
210cf6fc:	10a00034 	orhi	r2,r2,32768
    descriptor->transfer_length = length;
    /* have descriptor point to itself for park_mode */
    descriptor->next_desc_ptr = (alt_u32)descriptor;  
    
    /* clear control own_by_hw bit field (SW owns this descriptor)*/
    descriptor->control = (control 
210cf700:	28800715 	stw	r2,28(r5)
       dev->enhanced_features != 0
      )
    {
        return -EINVAL;
    }
    descriptor->read_address = read_address;
210cf704:	28000015 	stw	zero,0(r5)
    descriptor->write_address = write_address;
210cf708:	29800115 	stw	r6,4(r5)
    descriptor->transfer_length = length;
210cf70c:	29c00215 	stw	r7,8(r5)
    /* have descriptor point to itself for park_mode */
    descriptor->next_desc_ptr = (alt_u32)descriptor;  
210cf710:	29400315 	stw	r5,12(r5)
    /* clear control own_by_hw bit field (SW owns this descriptor)*/
    descriptor->control = (control 
    		& ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK) 
    		| ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
    
    return 0;
210cf714:	0005883a 	mov	r2,zero
210cf718:	f800283a 	ret
{
    if(dev->max_byte < length ||
       dev->enhanced_features != 0
      )
    {
        return -EINVAL;
210cf71c:	00bffa84 	movi	r2,-22
	alt_u32 length, 
	alt_u32 control)
{
    return alt_msgdma_construct_prefetcher_standard_descriptor(dev, descriptor,
    		0, write_address, length, control);
}
210cf720:	f800283a 	ret

210cf724 <alt_msgdma_construct_prefetcher_standard_mm_to_st_descriptor>:
	alt_u32 read_address, 
	alt_u32 write_address, 
	alt_u32 length, 
	alt_u32 control)
{
    if(dev->max_byte < length ||
210cf724:	20801217 	ldw	r2,72(r4)
210cf728:	11c00e36 	bltu	r2,r7,210cf764 <alt_msgdma_construct_prefetcher_standard_mm_to_st_descriptor+0x40>
210cf72c:	20801703 	ldbu	r2,92(r4)
210cf730:	10000c1e 	bne	r2,zero,210cf764 <alt_msgdma_construct_prefetcher_standard_mm_to_st_descriptor+0x40>
    descriptor->next_desc_ptr = (alt_u32)descriptor;  
    
    /* clear control own_by_hw bit field (SW owns this descriptor)*/
    descriptor->control = (control 
    		& ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK) 
    		| ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
210cf734:	d8c00017 	ldw	r3,0(sp)
210cf738:	00900034 	movhi	r2,16384
210cf73c:	10bfffc4 	addi	r2,r2,-1
210cf740:	1884703a 	and	r2,r3,r2
210cf744:	10a00034 	orhi	r2,r2,32768
    descriptor->transfer_length = length;
    /* have descriptor point to itself for park_mode */
    descriptor->next_desc_ptr = (alt_u32)descriptor;  
    
    /* clear control own_by_hw bit field (SW owns this descriptor)*/
    descriptor->control = (control 
210cf748:	28800715 	stw	r2,28(r5)
       dev->enhanced_features != 0
      )
    {
        return -EINVAL;
    }
    descriptor->read_address = read_address;
210cf74c:	29800015 	stw	r6,0(r5)
    descriptor->write_address = write_address;
210cf750:	28000115 	stw	zero,4(r5)
    descriptor->transfer_length = length;
210cf754:	29c00215 	stw	r7,8(r5)
    /* have descriptor point to itself for park_mode */
    descriptor->next_desc_ptr = (alt_u32)descriptor;  
210cf758:	29400315 	stw	r5,12(r5)
    /* clear control own_by_hw bit field (SW owns this descriptor)*/
    descriptor->control = (control 
    		& ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK) 
    		| ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
    
    return 0;
210cf75c:	0005883a 	mov	r2,zero
210cf760:	f800283a 	ret
{
    if(dev->max_byte < length ||
       dev->enhanced_features != 0
      )
    {
        return -EINVAL;
210cf764:	00bffa84 	movi	r2,-22
	alt_u32 length, 
	alt_u32 control)
{
    return alt_msgdma_construct_prefetcher_standard_descriptor(dev, descriptor,
    		read_address, 0, length, control);
}
210cf768:	f800283a 	ret

210cf76c <alt_msgdma_construct_prefetcher_extended_st_to_mm_descriptor>:
	alt_u32 length, 
	alt_u32 control, 
	alt_u16 sequence_number,
	alt_u8 write_burst_count,
	alt_u16 write_stride)
{
210cf76c:	d8c00017 	ldw	r3,0(sp)
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
	msgdma_addr64 node_addr;
	
	if(dev->max_byte < length ||
210cf770:	20801217 	ldw	r2,72(r4)
	alt_u32 length, 
	alt_u32 control, 
	alt_u16 sequence_number,
	alt_u8 write_burst_count,
	alt_u16 write_stride)
{
210cf774:	da800217 	ldw	r10,8(sp)
210cf778:	da400317 	ldw	r9,12(sp)
210cf77c:	da000417 	ldw	r8,16(sp)
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
	msgdma_addr64 node_addr;
	
	if(dev->max_byte < length ||
210cf780:	10c01c36 	bltu	r2,r3,210cf7f4 <alt_msgdma_construct_prefetcher_extended_st_to_mm_descriptor+0x88>
       dev->max_stride < read_stride ||
210cf784:	20801417 	ldw	r2,80(r4)
       dev->max_stride < write_stride ||
210cf788:	42ffffcc 	andi	r11,r8,65535
	alt_u16 write_stride)
{
	msgdma_addr64 node_addr;
	
	if(dev->max_byte < length ||
       dev->max_stride < read_stride ||
210cf78c:	10001726 	beq	r2,zero,210cf7ec <alt_msgdma_construct_prefetcher_extended_st_to_mm_descriptor+0x80>
       dev->max_stride < write_stride ||
210cf790:	21001703 	ldbu	r4,92(r4)
210cf794:	00800044 	movi	r2,1
210cf798:	2080161e 	bne	r4,r2,210cf7f4 <alt_msgdma_construct_prefetcher_extended_st_to_mm_descriptor+0x88>
    descriptor->next_desc_ptr_high = node_addr.u32[1];
    
    /* clear control own_by_hw bit field (SW still owns this descriptor). */
    descriptor->control = (control 
    		& ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK) 
    		| ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
210cf79c:	d9000117 	ldw	r4,4(sp)
210cf7a0:	00900034 	movhi	r2,16384
210cf7a4:	10bfffc4 	addi	r2,r2,-1
210cf7a8:	2084703a 	and	r2,r4,r2
210cf7ac:	10a00034 	orhi	r2,r2,32768
	node_addr.u64 = (uintptr_t)descriptor;
    descriptor->next_desc_ptr_low = node_addr.u32[0];  
    descriptor->next_desc_ptr_high = node_addr.u32[1];
    
    /* clear control own_by_hw bit field (SW still owns this descriptor). */
    descriptor->control = (control 
210cf7b0:	28800f15 	stw	r2,60(r5)
      )
    {
        return -EINVAL;
    }
    
    descriptor->read_address_high = read_address_high;
210cf7b4:	28000915 	stw	zero,36(r5)
    descriptor->read_address_low = read_address_low;
210cf7b8:	28000015 	stw	zero,0(r5)
    descriptor->write_address_high = write_address_high;
210cf7bc:	29800a15 	stw	r6,40(r5)
    descriptor->write_address_low = write_address_low;
210cf7c0:	29c00115 	stw	r7,4(r5)
    descriptor->transfer_length = length;
210cf7c4:	28c00215 	stw	r3,8(r5)
    descriptor->sequence_number = sequence_number;
210cf7c8:	2a80070d 	sth	r10,28(r5)
    descriptor->read_burst_count = read_burst_count;
210cf7cc:	28000785 	stb	zero,30(r5)
    descriptor->write_burst_count = write_burst_count;
210cf7d0:	2a4007c5 	stb	r9,31(r5)
    descriptor->read_stride = read_stride;
210cf7d4:	2800080d 	sth	zero,32(r5)
    descriptor->write_stride = write_stride;
210cf7d8:	2a00088d 	sth	r8,34(r5)
    /* have descriptor point to itself */
	node_addr.u64 = (uintptr_t)descriptor;
    descriptor->next_desc_ptr_low = node_addr.u32[0];  
210cf7dc:	29400315 	stw	r5,12(r5)
    descriptor->next_desc_ptr_high = node_addr.u32[1];
210cf7e0:	28000b15 	stw	zero,44(r5)
    /* clear control own_by_hw bit field (SW still owns this descriptor). */
    descriptor->control = (control 
    		& ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK) 
    		| ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;

  return 0 ;
210cf7e4:	0005883a 	mov	r2,zero
210cf7e8:	f800283a 	ret
	alt_u16 write_stride)
{
	msgdma_addr64 node_addr;
	
	if(dev->max_byte < length ||
       dev->max_stride < read_stride ||
210cf7ec:	20801317 	ldw	r2,76(r4)
210cf7f0:	12ffe72e 	bgeu	r2,r11,210cf790 <__flash_rwdata_start+0xffffde98>
       dev->max_stride < write_stride ||
       dev->enhanced_features != 1 
      )
    {
        return -EINVAL;
210cf7f4:	00bffa84 	movi	r2,-22
	alt_u16 write_stride)
{
    return alt_msgdma_construct_prefetcher_extended_descriptor(dev, descriptor, 
            0, 0, write_address_high, write_address_low, length, control, 
			sequence_number, 0, write_burst_count, 0, write_stride);
}
210cf7f8:	f800283a 	ret

210cf7fc <alt_msgdma_construct_prefetcher_extended_mm_to_st_descriptor>:
	alt_u32 length, 
	alt_u32 control, 
	alt_u16 sequence_number, 
	alt_u8 read_burst_count, 
	alt_u16 read_stride)
{
210cf7fc:	d8c00017 	ldw	r3,0(sp)
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
	msgdma_addr64 node_addr;
	
	if(dev->max_byte < length ||
210cf800:	20801217 	ldw	r2,72(r4)
	alt_u32 length, 
	alt_u32 control, 
	alt_u16 sequence_number, 
	alt_u8 read_burst_count, 
	alt_u16 read_stride)
{
210cf804:	da800217 	ldw	r10,8(sp)
210cf808:	da400317 	ldw	r9,12(sp)
210cf80c:	da000417 	ldw	r8,16(sp)
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
	msgdma_addr64 node_addr;
	
	if(dev->max_byte < length ||
210cf810:	10c01c36 	bltu	r2,r3,210cf884 <alt_msgdma_construct_prefetcher_extended_mm_to_st_descriptor+0x88>
210cf814:	20801417 	ldw	r2,80(r4)
       dev->max_stride < read_stride ||
210cf818:	42ffffcc 	andi	r11,r8,65535
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
	msgdma_addr64 node_addr;
	
	if(dev->max_byte < length ||
210cf81c:	10001726 	beq	r2,zero,210cf87c <alt_msgdma_construct_prefetcher_extended_mm_to_st_descriptor+0x80>
       dev->max_stride < read_stride ||
       dev->max_stride < write_stride ||
210cf820:	21001703 	ldbu	r4,92(r4)
210cf824:	00800044 	movi	r2,1
210cf828:	2080161e 	bne	r4,r2,210cf884 <alt_msgdma_construct_prefetcher_extended_mm_to_st_descriptor+0x88>
    descriptor->next_desc_ptr_high = node_addr.u32[1];
    
    /* clear control own_by_hw bit field (SW still owns this descriptor). */
    descriptor->control = (control 
    		& ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK) 
    		| ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
210cf82c:	d9000117 	ldw	r4,4(sp)
210cf830:	00900034 	movhi	r2,16384
210cf834:	10bfffc4 	addi	r2,r2,-1
210cf838:	2084703a 	and	r2,r4,r2
210cf83c:	10a00034 	orhi	r2,r2,32768
	node_addr.u64 = (uintptr_t)descriptor;
    descriptor->next_desc_ptr_low = node_addr.u32[0];  
    descriptor->next_desc_ptr_high = node_addr.u32[1];
    
    /* clear control own_by_hw bit field (SW still owns this descriptor). */
    descriptor->control = (control 
210cf840:	28800f15 	stw	r2,60(r5)
      )
    {
        return -EINVAL;
    }
    
    descriptor->read_address_high = read_address_high;
210cf844:	29800915 	stw	r6,36(r5)
    descriptor->read_address_low = read_address_low;
210cf848:	29c00015 	stw	r7,0(r5)
    descriptor->write_address_high = write_address_high;
210cf84c:	28000a15 	stw	zero,40(r5)
    descriptor->write_address_low = write_address_low;
210cf850:	28000115 	stw	zero,4(r5)
    descriptor->transfer_length = length;
210cf854:	28c00215 	stw	r3,8(r5)
    descriptor->sequence_number = sequence_number;
210cf858:	2a80070d 	sth	r10,28(r5)
    descriptor->read_burst_count = read_burst_count;
210cf85c:	2a400785 	stb	r9,30(r5)
    descriptor->write_burst_count = write_burst_count;
210cf860:	280007c5 	stb	zero,31(r5)
    descriptor->read_stride = read_stride;
210cf864:	2a00080d 	sth	r8,32(r5)
    descriptor->write_stride = write_stride;
210cf868:	2800088d 	sth	zero,34(r5)
    /* have descriptor point to itself */
	node_addr.u64 = (uintptr_t)descriptor;
    descriptor->next_desc_ptr_low = node_addr.u32[0];  
210cf86c:	29400315 	stw	r5,12(r5)
    descriptor->next_desc_ptr_high = node_addr.u32[1];
210cf870:	28000b15 	stw	zero,44(r5)
    /* clear control own_by_hw bit field (SW still owns this descriptor). */
    descriptor->control = (control 
    		& ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK) 
    		| ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;

  return 0 ;
210cf874:	0005883a 	mov	r2,zero
210cf878:	f800283a 	ret
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
	msgdma_addr64 node_addr;
	
	if(dev->max_byte < length ||
210cf87c:	20801317 	ldw	r2,76(r4)
210cf880:	12ffe72e 	bgeu	r2,r11,210cf820 <__flash_rwdata_start+0xffffdf28>
       dev->max_stride < read_stride ||
       dev->max_stride < write_stride ||
       dev->enhanced_features != 1 
      )
    {
        return -EINVAL;
210cf884:	00bffa84 	movi	r2,-22
	alt_u16 read_stride)
{
    return alt_msgdma_construct_prefetcher_extended_descriptor(dev, descriptor,
    		read_address_high, read_address_low, 0, 0, length, control, 
			sequence_number, read_burst_count, 0, read_stride, 0);
}
210cf888:	f800283a 	ret

210cf88c <alt_msgdma_construct_prefetcher_extended_mm_to_mm_descriptor>:
	alt_u16 sequence_number,
	alt_u8 read_burst_count,
	alt_u8 write_burst_count, 
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
210cf88c:	d8c00217 	ldw	r3,8(sp)
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
	msgdma_addr64 node_addr;
	
	if(dev->max_byte < length ||
210cf890:	20801217 	ldw	r2,72(r4)
	alt_u16 sequence_number,
	alt_u8 read_burst_count,
	alt_u8 write_burst_count, 
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
210cf894:	db000417 	ldw	r12,16(sp)
210cf898:	dac00517 	ldw	r11,20(sp)
210cf89c:	da800617 	ldw	r10,24(sp)
210cf8a0:	da000717 	ldw	r8,28(sp)
210cf8a4:	da400817 	ldw	r9,32(sp)
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
	msgdma_addr64 node_addr;
	
	if(dev->max_byte < length ||
210cf8a8:	10c02036 	bltu	r2,r3,210cf92c <alt_msgdma_construct_prefetcher_extended_mm_to_mm_descriptor+0xa0>
       dev->max_stride < read_stride ||
210cf8ac:	20801417 	ldw	r2,80(r4)
210cf8b0:	23401317 	ldw	r13,76(r4)
210cf8b4:	43bfffcc 	andi	r14,r8,65535
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
	msgdma_addr64 node_addr;
	
	if(dev->max_byte < length ||
210cf8b8:	10001e26 	beq	r2,zero,210cf934 <alt_msgdma_construct_prefetcher_extended_mm_to_mm_descriptor+0xa8>
       dev->max_stride < read_stride ||
       dev->max_stride < write_stride ||
210cf8bc:	4bbfffcc 	andi	r14,r9,65535
	alt_u16 write_stride)
{
	msgdma_addr64 node_addr;
	
	if(dev->max_byte < length ||
       dev->max_stride < read_stride ||
210cf8c0:	10001926 	beq	r2,zero,210cf928 <alt_msgdma_construct_prefetcher_extended_mm_to_mm_descriptor+0x9c>
       dev->max_stride < write_stride ||
210cf8c4:	21001703 	ldbu	r4,92(r4)
210cf8c8:	00800044 	movi	r2,1
210cf8cc:	2080171e 	bne	r4,r2,210cf92c <alt_msgdma_construct_prefetcher_extended_mm_to_mm_descriptor+0xa0>
    descriptor->next_desc_ptr_high = node_addr.u32[1];
    
    /* clear control own_by_hw bit field (SW still owns this descriptor). */
    descriptor->control = (control 
    		& ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK) 
    		| ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
210cf8d0:	d9000317 	ldw	r4,12(sp)
210cf8d4:	00900034 	movhi	r2,16384
210cf8d8:	10bfffc4 	addi	r2,r2,-1
210cf8dc:	2084703a 	and	r2,r4,r2
        return -EINVAL;
    }
    
    descriptor->read_address_high = read_address_high;
    descriptor->read_address_low = read_address_low;
    descriptor->write_address_high = write_address_high;
210cf8e0:	d9000017 	ldw	r4,0(sp)
    descriptor->next_desc_ptr_high = node_addr.u32[1];
    
    /* clear control own_by_hw bit field (SW still owns this descriptor). */
    descriptor->control = (control 
    		& ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK) 
    		| ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
210cf8e4:	10a00034 	orhi	r2,r2,32768
	node_addr.u64 = (uintptr_t)descriptor;
    descriptor->next_desc_ptr_low = node_addr.u32[0];  
    descriptor->next_desc_ptr_high = node_addr.u32[1];
    
    /* clear control own_by_hw bit field (SW still owns this descriptor). */
    descriptor->control = (control 
210cf8e8:	28800f15 	stw	r2,60(r5)
        return -EINVAL;
    }
    
    descriptor->read_address_high = read_address_high;
    descriptor->read_address_low = read_address_low;
    descriptor->write_address_high = write_address_high;
210cf8ec:	29000a15 	stw	r4,40(r5)
    descriptor->write_address_low = write_address_low;
210cf8f0:	d9000117 	ldw	r4,4(sp)
      )
    {
        return -EINVAL;
    }
    
    descriptor->read_address_high = read_address_high;
210cf8f4:	29800915 	stw	r6,36(r5)
    descriptor->read_address_low = read_address_low;
210cf8f8:	29c00015 	stw	r7,0(r5)
    descriptor->write_address_high = write_address_high;
    descriptor->write_address_low = write_address_low;
210cf8fc:	29000115 	stw	r4,4(r5)
    descriptor->transfer_length = length;
210cf900:	28c00215 	stw	r3,8(r5)
    descriptor->sequence_number = sequence_number;
210cf904:	2b00070d 	sth	r12,28(r5)
    descriptor->read_burst_count = read_burst_count;
210cf908:	2ac00785 	stb	r11,30(r5)
    descriptor->write_burst_count = write_burst_count;
210cf90c:	2a8007c5 	stb	r10,31(r5)
    descriptor->read_stride = read_stride;
210cf910:	2a00080d 	sth	r8,32(r5)
    descriptor->write_stride = write_stride;
210cf914:	2a40088d 	sth	r9,34(r5)
    /* have descriptor point to itself */
	node_addr.u64 = (uintptr_t)descriptor;
    descriptor->next_desc_ptr_low = node_addr.u32[0];  
210cf918:	29400315 	stw	r5,12(r5)
    descriptor->next_desc_ptr_high = node_addr.u32[1];
210cf91c:	28000b15 	stw	zero,44(r5)
    /* clear control own_by_hw bit field (SW still owns this descriptor). */
    descriptor->control = (control 
    		& ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK) 
    		| ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;

  return 0 ;
210cf920:	0005883a 	mov	r2,zero
210cf924:	f800283a 	ret
	alt_u16 write_stride)
{
	msgdma_addr64 node_addr;
	
	if(dev->max_byte < length ||
       dev->max_stride < read_stride ||
210cf928:	6bbfe62e 	bgeu	r13,r14,210cf8c4 <__flash_rwdata_start+0xffffdfcc>
       dev->max_stride < write_stride ||
       dev->enhanced_features != 1 
      )
    {
        return -EINVAL;
210cf92c:	00bffa84 	movi	r2,-22
    return alt_msgdma_construct_prefetcher_extended_descriptor(dev, descriptor,
            read_address_high, read_address_low, write_address_high, 
			write_address_low, length, control, sequence_number, 
			read_burst_count, write_burst_count, read_stride, write_stride);

}
210cf930:	f800283a 	ret
	alt_u16 read_stride, 
	alt_u16 write_stride)
{
	msgdma_addr64 node_addr;
	
	if(dev->max_byte < length ||
210cf934:	6bbfe12e 	bgeu	r13,r14,210cf8bc <__flash_rwdata_start+0xffffdfc4>
210cf938:	003ffc06 	br	210cf92c <__flash_rwdata_start+0xffffe034>

210cf93c <alt_msgdma_prefetcher_add_standard_desc_to_list>:
	alt_msgdma_prefetcher_standard_descriptor** list,
	alt_msgdma_prefetcher_standard_descriptor* descriptor)
{
	alt_msgdma_prefetcher_standard_descriptor *last_descr_ptr;
	
	if (descriptor == NULL)
210cf93c:	28001226 	beq	r5,zero,210cf988 <alt_msgdma_prefetcher_add_standard_desc_to_list+0x4c>
	{
		return -EINVAL;  /* this descriptor cannot be NULL */
	}
	if (descriptor->next_desc_ptr != (alt_u32)descriptor)
210cf940:	29800317 	ldw	r6,12(r5)
210cf944:	2980101e 	bne	r5,r6,210cf988 <alt_msgdma_prefetcher_add_standard_desc_to_list+0x4c>
	{
		return -EINVAL;  /* descriptor.next_ptr must point to itself */
	}
	if (*list == NULL)
210cf948:	20c00017 	ldw	r3,0(r4)
210cf94c:	18001026 	beq	r3,zero,210cf990 <alt_msgdma_prefetcher_add_standard_desc_to_list+0x54>
	{
		*list = descriptor;  /* make this root-node if list is empty */
		return 0;  /* successfully added */
	}
	if (*list == descriptor)
210cf950:	28c00d26 	beq	r5,r3,210cf988 <alt_msgdma_prefetcher_add_standard_desc_to_list+0x4c>
	}
	
	/* get to last node in the list */
	last_descr_ptr = *list; /* start at list root-node */
	/* traverse list until you get the last node */
	while (last_descr_ptr->next_desc_ptr != (alt_u32)*list)  
210cf954:	18800317 	ldw	r2,12(r3)
210cf958:	1809883a 	mov	r4,r3
210cf95c:	18800626 	beq	r3,r2,210cf978 <alt_msgdma_prefetcher_add_standard_desc_to_list+0x3c>
	{
		if (last_descr_ptr->next_desc_ptr == (alt_u32)descriptor)
210cf960:	2880021e 	bne	r5,r2,210cf96c <alt_msgdma_prefetcher_add_standard_desc_to_list+0x30>
210cf964:	00000806 	br	210cf988 <alt_msgdma_prefetcher_add_standard_desc_to_list+0x4c>
210cf968:	30800726 	beq	r6,r2,210cf988 <alt_msgdma_prefetcher_add_standard_desc_to_list+0x4c>
		{
			return -EINVAL;  /* descriptor cannot already be in the list */
		}
		last_descr_ptr = 
210cf96c:	1007883a 	mov	r3,r2
	}
	
	/* get to last node in the list */
	last_descr_ptr = *list; /* start at list root-node */
	/* traverse list until you get the last node */
	while (last_descr_ptr->next_desc_ptr != (alt_u32)*list)  
210cf970:	10800317 	ldw	r2,12(r2)
210cf974:	113ffc1e 	bne	r2,r4,210cf968 <__flash_rwdata_start+0xffffe070>
		}
		last_descr_ptr = 
			(alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
	}
	/* add this descriptor to end of list */
	last_descr_ptr->next_desc_ptr = (alt_u32)((uintptr_t)descriptor);
210cf978:	19800315 	stw	r6,12(r3)
	/* ensure new last pointer points the start of the list */
	descriptor->next_desc_ptr = (alt_u32)((uintptr_t)*list);  
210cf97c:	29000315 	stw	r4,12(r5)
	return 0; /* successfully added */
210cf980:	0005883a 	mov	r2,zero
210cf984:	f800283a 	ret
{
	alt_msgdma_prefetcher_standard_descriptor *last_descr_ptr;
	
	if (descriptor == NULL)
	{
		return -EINVAL;  /* this descriptor cannot be NULL */
210cf988:	00bffa84 	movi	r2,-22
	/* add this descriptor to end of list */
	last_descr_ptr->next_desc_ptr = (alt_u32)((uintptr_t)descriptor);
	/* ensure new last pointer points the start of the list */
	descriptor->next_desc_ptr = (alt_u32)((uintptr_t)*list);  
	return 0; /* successfully added */
}
210cf98c:	f800283a 	ret
	{
		return -EINVAL;  /* descriptor.next_ptr must point to itself */
	}
	if (*list == NULL)
	{
		*list = descriptor;  /* make this root-node if list is empty */
210cf990:	21400015 	stw	r5,0(r4)
		return 0;  /* successfully added */
210cf994:	0005883a 	mov	r2,zero
210cf998:	f800283a 	ret

210cf99c <alt_msgdma_prefetcher_add_extended_desc_to_list>:
	alt_msgdma_prefetcher_extended_descriptor* descriptor)
{
	alt_msgdma_prefetcher_extended_descriptor *last_descr_ptr;
	msgdma_addr64 root_node_addr, next_node_addr;
	
	if (descriptor == NULL)
210cf99c:	28001526 	beq	r5,zero,210cf9f4 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x58>
	{
		return -EINVAL;  /* this descriptor cannot be NULL */
	}
	
	next_node_addr.u64 = (uintptr_t)descriptor;
	if( (descriptor->next_desc_ptr_low != next_node_addr.u32[0]) &&
210cf9a0:	28800317 	ldw	r2,12(r5)
210cf9a4:	11400226 	beq	r2,r5,210cf9b0 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x14>
210cf9a8:	28800b17 	ldw	r2,44(r5)
210cf9ac:	1000111e 	bne	r2,zero,210cf9f4 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x58>
		(descriptor->next_desc_ptr_high != next_node_addr.u32[1]))
	{
		return -EINVAL;  /* descriptor.next_ptr must point to itself */
	}
	
	if (*list == NULL)
210cf9b0:	21800017 	ldw	r6,0(r4)
210cf9b4:	30001726 	beq	r6,zero,210cfa14 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x78>
	{
		*list = descriptor;  /* make this the root-node if list is empty */
		return 0;
	}
	if (*list == descriptor)
210cf9b8:	29800e26 	beq	r5,r6,210cf9f4 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x58>
	last_descr_ptr = *list; /* start at list root-node */
	/* the last nodes next ptr should point to the root node*/
	root_node_addr.u64 = (uintptr_t)*list;
	
	/* traverse list until you get the last node */
	while ((last_descr_ptr->next_desc_ptr_low != root_node_addr.u32[0]) 
210cf9bc:	30800317 	ldw	r2,12(r6)
210cf9c0:	300f883a 	mov	r7,r6
210cf9c4:	11800d26 	beq	r2,r6,210cf9fc <alt_msgdma_prefetcher_add_extended_desc_to_list+0x60>
		&& (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
210cf9c8:	30c00b17 	ldw	r3,44(r6)
210cf9cc:	1800051e 	bne	r3,zero,210cf9e4 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x48>
210cf9d0:	00000a06 	br	210cf9fc <alt_msgdma_prefetcher_add_extended_desc_to_list+0x60>
	last_descr_ptr = *list; /* start at list root-node */
	/* the last nodes next ptr should point to the root node*/
	root_node_addr.u64 = (uintptr_t)*list;
	
	/* traverse list until you get the last node */
	while ((last_descr_ptr->next_desc_ptr_low != root_node_addr.u32[0]) 
210cf9d4:	10800317 	ldw	r2,12(r2)
210cf9d8:	11c00826 	beq	r2,r7,210cf9fc <alt_msgdma_prefetcher_add_extended_desc_to_list+0x60>
		&& (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
210cf9dc:	20c00b17 	ldw	r3,44(r4)
210cf9e0:	18000626 	beq	r3,zero,210cf9fc <alt_msgdma_prefetcher_add_extended_desc_to_list+0x60>
			&& (last_descr_ptr->next_desc_ptr_high == next_node_addr.u32[1]))
		{
			return -EINVAL;  /* descriptor cannot already be in the list */
		}
		/* go to next node in list, using 64 bit address */
		next_node_addr.u32[0] = last_descr_ptr->next_desc_ptr_low;
210cf9e4:	1009883a 	mov	r4,r2
		next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
		last_descr_ptr = 
			(alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
210cf9e8:	100d883a 	mov	r6,r2
	while ((last_descr_ptr->next_desc_ptr_low != root_node_addr.u32[0]) 
		&& (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
	{
		/* first check if descriptor already in the list */
		next_node_addr.u64 = (uintptr_t)descriptor;
		if ((last_descr_ptr->next_desc_ptr_low == next_node_addr.u32[0])
210cf9ec:	28bff91e 	bne	r5,r2,210cf9d4 <__flash_rwdata_start+0xffffe0dc>
			&& (last_descr_ptr->next_desc_ptr_high == next_node_addr.u32[1]))
210cf9f0:	183ff81e 	bne	r3,zero,210cf9d4 <__flash_rwdata_start+0xffffe0dc>
	alt_msgdma_prefetcher_extended_descriptor *last_descr_ptr;
	msgdma_addr64 root_node_addr, next_node_addr;
	
	if (descriptor == NULL)
	{
		return -EINVAL;  /* this descriptor cannot be NULL */
210cf9f4:	00bffa84 	movi	r2,-22
210cf9f8:	f800283a 	ret
		last_descr_ptr = 
			(alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
	}
	/* add this descriptor to end of list */
	next_node_addr.u64 = (uintptr_t)descriptor;
	last_descr_ptr->next_desc_ptr_low = next_node_addr.u32[0];
210cf9fc:	31400315 	stw	r5,12(r6)
	last_descr_ptr->next_desc_ptr_high = next_node_addr.u32[1];
210cfa00:	30000b15 	stw	zero,44(r6)
	/* ensure new last pointer points the beginning of the list */
	descriptor->next_desc_ptr_low = root_node_addr.u32[0];
210cfa04:	29c00315 	stw	r7,12(r5)
	descriptor->next_desc_ptr_high = root_node_addr.u32[1];
210cfa08:	28000b15 	stw	zero,44(r5)
	return 0;
210cfa0c:	0005883a 	mov	r2,zero
}
210cfa10:	f800283a 	ret
		return -EINVAL;  /* descriptor.next_ptr must point to itself */
	}
	
	if (*list == NULL)
	{
		*list = descriptor;  /* make this the root-node if list is empty */
210cfa14:	21400015 	stw	r5,0(r4)
		return 0;
210cfa18:	0005883a 	mov	r2,zero
210cfa1c:	f800283a 	ret

210cfa20 <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits>:
int alt_msgdma_prefetcher_set_std_list_own_by_hw_bits (
	alt_msgdma_prefetcher_standard_descriptor *list)
{
	alt_u32 descriptor_control_field = 0;
	alt_msgdma_prefetcher_standard_descriptor *last_descr_ptr;
	if (list == NULL)
210cfa20:	20000e26 	beq	r4,zero,210cfa5c <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits+0x3c>
	}

	/* update all nodes in the list */
	last_descr_ptr = list; /* start at list root-node */
	/* traverse list to update all of the nodes */
	while (last_descr_ptr->next_desc_ptr != (alt_u32)list)  
210cfa24:	20800317 	ldw	r2,12(r4)
210cfa28:	200b883a 	mov	r5,r4
210cfa2c:	11000626 	beq	r2,r4,210cfa48 <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits+0x28>
	{
		/* get current value */
		descriptor_control_field = last_descr_ptr->control;
		/* update own_by_hw bit only */
		last_descr_ptr->control = descriptor_control_field 
				| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
210cfa30:	20c00717 	ldw	r3,28(r4)
210cfa34:	18d00034 	orhi	r3,r3,16384
	while (last_descr_ptr->next_desc_ptr != (alt_u32)list)  
	{
		/* get current value */
		descriptor_control_field = last_descr_ptr->control;
		/* update own_by_hw bit only */
		last_descr_ptr->control = descriptor_control_field 
210cfa38:	20c00715 	stw	r3,28(r4)
				| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
		/* go to next node in list */
		last_descr_ptr = 
210cfa3c:	1009883a 	mov	r4,r2
	}

	/* update all nodes in the list */
	last_descr_ptr = list; /* start at list root-node */
	/* traverse list to update all of the nodes */
	while (last_descr_ptr->next_desc_ptr != (alt_u32)list)  
210cfa40:	10800317 	ldw	r2,12(r2)
210cfa44:	117ffa1e 	bne	r2,r5,210cfa30 <__flash_rwdata_start+0xffffe138>
	}
	/* update the last node in the list, currently last_descr_ptr after while loop */
	descriptor_control_field = last_descr_ptr->control;    /* get current value */
	/* update own_by_hw bit only */
	last_descr_ptr->control = descriptor_control_field 
		| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
210cfa48:	20c00717 	ldw	r3,28(r4)
	
	return 0;
210cfa4c:	0005883a 	mov	r2,zero
	}
	/* update the last node in the list, currently last_descr_ptr after while loop */
	descriptor_control_field = last_descr_ptr->control;    /* get current value */
	/* update own_by_hw bit only */
	last_descr_ptr->control = descriptor_control_field 
		| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
210cfa50:	18d00034 	orhi	r3,r3,16384
			(alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
	}
	/* update the last node in the list, currently last_descr_ptr after while loop */
	descriptor_control_field = last_descr_ptr->control;    /* get current value */
	/* update own_by_hw bit only */
	last_descr_ptr->control = descriptor_control_field 
210cfa54:	20c00715 	stw	r3,28(r4)
		| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
	
	return 0;
210cfa58:	f800283a 	ret
{
	alt_u32 descriptor_control_field = 0;
	alt_msgdma_prefetcher_standard_descriptor *last_descr_ptr;
	if (list == NULL)
	{
		return -EINVAL;  /* this list cannot be empty */
210cfa5c:	00bffa84 	movi	r2,-22
	/* update own_by_hw bit only */
	last_descr_ptr->control = descriptor_control_field 
		| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
	
	return 0;
}
210cfa60:	f800283a 	ret

210cfa64 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits>:
{
	alt_u32 descriptor_control_field = 0;
	msgdma_addr64 root_node_addr, next_node_addr;
	alt_msgdma_prefetcher_extended_descriptor *last_descr_ptr;
	
	if (list == NULL)
210cfa64:	20001426 	beq	r4,zero,210cfab8 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0x54>
	last_descr_ptr = list; /* start at list root-node */
	/* the last nodes next ptr should point to the root node*/
	root_node_addr.u64 = (uintptr_t)list;

	/* traverse list until you get the last node */
	while ((last_descr_ptr->next_desc_ptr_low != root_node_addr.u32[0]) 
210cfa68:	20800317 	ldw	r2,12(r4)
210cfa6c:	200d883a 	mov	r6,r4
210cfa70:	11000c26 	beq	r2,r4,210cfaa4 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0x40>
		&& (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
210cfa74:	20c00b17 	ldw	r3,44(r4)
210cfa78:	1800031e 	bne	r3,zero,210cfa88 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0x24>
210cfa7c:	00000906 	br	210cfaa4 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0x40>
210cfa80:	28c00b17 	ldw	r3,44(r5)
210cfa84:	18000726 	beq	r3,zero,210cfaa4 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0x40>
	{
		/* start with current value */
		descriptor_control_field = last_descr_ptr->control;
		/* update own_by_hw bit only */
		last_descr_ptr->control = descriptor_control_field 
				| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
210cfa88:	20c00f17 	ldw	r3,60(r4)
		/* go to next node in list, using 64 bit address */
		next_node_addr.u32[0] = last_descr_ptr->next_desc_ptr_low;
210cfa8c:	100b883a 	mov	r5,r2
	{
		/* start with current value */
		descriptor_control_field = last_descr_ptr->control;
		/* update own_by_hw bit only */
		last_descr_ptr->control = descriptor_control_field 
				| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
210cfa90:	18d00034 	orhi	r3,r3,16384
		&& (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
	{
		/* start with current value */
		descriptor_control_field = last_descr_ptr->control;
		/* update own_by_hw bit only */
		last_descr_ptr->control = descriptor_control_field 
210cfa94:	20c00f15 	stw	r3,60(r4)
				| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
		/* go to next node in list, using 64 bit address */
		next_node_addr.u32[0] = last_descr_ptr->next_desc_ptr_low;
		next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
		last_descr_ptr = 
			(alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
210cfa98:	1009883a 	mov	r4,r2
	last_descr_ptr = list; /* start at list root-node */
	/* the last nodes next ptr should point to the root node*/
	root_node_addr.u64 = (uintptr_t)list;

	/* traverse list until you get the last node */
	while ((last_descr_ptr->next_desc_ptr_low != root_node_addr.u32[0]) 
210cfa9c:	10800317 	ldw	r2,12(r2)
210cfaa0:	11bff71e 	bne	r2,r6,210cfa80 <__flash_rwdata_start+0xffffe188>
	}
	/* update the last node in the list, currently last_descr_ptr after while loop */
	descriptor_control_field = last_descr_ptr->control;    /* start with current value */
	/* update own_by_hw bit only */
	last_descr_ptr->control = descriptor_control_field 
		| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
210cfaa4:	20c00f17 	ldw	r3,60(r4)
	return 0;
210cfaa8:	0005883a 	mov	r2,zero
	}
	/* update the last node in the list, currently last_descr_ptr after while loop */
	descriptor_control_field = last_descr_ptr->control;    /* start with current value */
	/* update own_by_hw bit only */
	last_descr_ptr->control = descriptor_control_field 
		| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
210cfaac:	18d00034 	orhi	r3,r3,16384
			(alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
	}
	/* update the last node in the list, currently last_descr_ptr after while loop */
	descriptor_control_field = last_descr_ptr->control;    /* start with current value */
	/* update own_by_hw bit only */
	last_descr_ptr->control = descriptor_control_field 
210cfab0:	20c00f15 	stw	r3,60(r4)
		| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
	return 0;
210cfab4:	f800283a 	ret
	msgdma_addr64 root_node_addr, next_node_addr;
	alt_msgdma_prefetcher_extended_descriptor *last_descr_ptr;
	
	if (list == NULL)
	{
		return -EINVAL;  /* this list cannot be empty */
210cfab8:	00bffa84 	movi	r2,-22
	descriptor_control_field = last_descr_ptr->control;    /* start with current value */
	/* update own_by_hw bit only */
	last_descr_ptr->control = descriptor_control_field 
		| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
	return 0;
}
210cfabc:	f800283a 	ret

210cfac0 <alt_msgdma_start_prefetcher_with_list_addr>:
int alt_msgdma_start_prefetcher_with_list_addr (
	alt_msgdma_dev *dev,
	alt_u64  list_addr,
	alt_u8 park_mode_en,
	alt_u8 poll_en)
{
210cfac0:	da400017 	ldw	r9,0(sp)
	 * semaphore. This ensures that accessing registers is thread-safe.
	 */
	ALT_SEM_PEND (dev->regs_lock, 0);
	
	/* case where prefetcher already started, return busy error */ 
	prefetcher_ctl = IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base);
210cfac4:	20800617 	ldw	r2,24(r4)
210cfac8:	10800037 	ldwio	r2,0(r2)
	if(ALT_MSGDMA_PREFETCHER_CTRL_RUN_GET(prefetcher_ctl)){
210cfacc:	10c0004c 	andi	r3,r2,1
210cfad0:	18003d1e 	bne	r3,zero,210cfbc8 <alt_msgdma_start_prefetcher_with_list_addr+0x108>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
210cfad4:	0007303a 	rdctl	r3,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
210cfad8:	023fff84 	movi	r8,-2
210cfadc:	1a14703a 	and	r10,r3,r8
210cfae0:	5001703a 	wrctl	status,r10
	/* stop issuing more descriptors */
	dispatcher_ctl = ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
	
	/* making sure the read-modify-write below can't be pre-empted */
	context = alt_irq_disable_all();
	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, dispatcher_ctl);
210cfae4:	22800317 	ldw	r10,12(r4)
210cfae8:	02c00804 	movi	r11,32
210cfaec:	52c00135 	stwio	r11,4(r10)
	/*
	 * Clear any (previous) status register information
	 * that might occlude our error checking later.
	 */
	IOWR_ALTERA_MSGDMA_CSR_STATUS( dev->csr_base, 
210cfaf0:	22800317 	ldw	r10,12(r4)
210cfaf4:	52c00037 	ldwio	r11,0(r10)
210cfaf8:	52c00035 	stwio	r11,0(r10)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
210cfafc:	1801703a 	wrctl	status,r3
	 * If a callback routine has been previously registered which will be
	 * called from the msgdma ISR. Set up dispatcher to:
	 *  - Run
	 *  - Stop on an error with any particular descriptor
	 */
	if(dev->callback)
210cfb00:	20c00b17 	ldw	r3,44(r4)
	{
		dispatcher_ctl |= (dev->control | ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK 
				| ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK );
		dispatcher_ctl &=  (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK);
210cfb04:	22800d17 	ldw	r10,52(r4)
	 * If a callback routine has been previously registered which will be
	 * called from the msgdma ISR. Set up dispatcher to:
	 *  - Run
	 *  - Stop on an error with any particular descriptor
	 */
	if(dev->callback)
210cfb08:	18002926 	beq	r3,zero,210cfbb0 <alt_msgdma_start_prefetcher_with_list_addr+0xf0>
	{
		dispatcher_ctl |= (dev->control | ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK 
				| ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK );
		dispatcher_ctl &=  (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK);
210cfb0c:	00fff7c4 	movi	r3,-33
210cfb10:	50c6703a 	and	r3,r10,r3
		
		prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_SET_MASK;
210cfb14:	10800214 	ori	r2,r2,8
	 */
	if(dev->callback)
	{
		dispatcher_ctl |= (dev->control | ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK 
				| ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK );
		dispatcher_ctl &=  (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK);
210cfb18:	18c00514 	ori	r3,r3,20
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
210cfb1c:	0015303a 	rdctl	r10,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
210cfb20:	5210703a 	and	r8,r10,r8
210cfb24:	4001703a 	wrctl	status,r8
		 dispatcher_ctl &= (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK) 
				 & (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
		 prefetcher_ctl &= ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_CLR_MASK;
	     /* making sure the read-modify-write below can't be pre-empted */
	     context = alt_irq_disable_all();
	     IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, dispatcher_ctl);
210cfb28:	22000317 	ldw	r8,12(r4)
210cfb2c:	40c00135 	stwio	r3,4(r8)
	     IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base, prefetcher_ctl);
210cfb30:	20c00617 	ldw	r3,24(r4)
210cfb34:	18800035 	stwio	r2,0(r3)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
210cfb38:	5001703a 	wrctl	status,r10
	     alt_irq_enable_all(context);
	 }   
	
	 /* set next descriptor registers to point to the list root-node */
	 IOWR_ALT_MSGDMA_PREFETCHER_NEXT_DESCRIPTOR_PTR_LOW(dev->prefetcher_base,
210cfb3c:	20c00617 	ldw	r3,24(r4)
210cfb40:	19400135 	stwio	r5,4(r3)
			 root_node_addr.u32[0]);
	 IOWR_ALT_MSGDMA_PREFETCHER_NEXT_DESCRIPTOR_PTR_HIGH(dev->prefetcher_base,
210cfb44:	20c00617 	ldw	r3,24(r4)
210cfb48:	19800235 	stwio	r6,8(r3)
			 root_node_addr.u32[1]);
		
	 /* set park-mode */
	 if (park_mode_en){
210cfb4c:	39c03fcc 	andi	r7,r7,255
210cfb50:	38000b1e 	bne	r7,zero,210cfb80 <alt_msgdma_start_prefetcher_with_list_addr+0xc0>
		 prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_PARK_MODE_SET_MASK;
	 }
	 else {
		 prefetcher_ctl &= ALT_MSGDMA_PREFETCHER_CTRL_PARK_MODE_CLR_MASK;
210cfb54:	00fffbc4 	movi	r3,-17
210cfb58:	10c4703a 	and	r2,r2,r3
	 }
	 
	 /* set poll-en */
	 if (poll_en){
210cfb5c:	48c03fcc 	andi	r3,r9,255
210cfb60:	18000a1e 	bne	r3,zero,210cfb8c <alt_msgdma_start_prefetcher_with_list_addr+0xcc>
210cfb64:	20c00617 	ldw	r3,24(r4)
			 IOWR_ALT_MSGDMA_PREFETCHER_DESCRIPTOR_POLLING_FREQ(
					 dev->prefetcher_base, 0xFF);
		 }
	 }
	 else {
		 prefetcher_ctl &= ALT_MSGDMA_PREFETCHER_CTRL_DESC_POLL_EN_CLR_MASK; 
210cfb68:	013fff44 	movi	r4,-3
210cfb6c:	1104703a 	and	r2,r2,r4
	 }
	 
	 /* set the prefetcher run bit */
	 prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_RUN_SET_MASK;
210cfb70:	10800054 	ori	r2,r2,1
	 /* start the dma since run bit is set */
	 IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base, prefetcher_ctl);
210cfb74:	18800035 	stwio	r2,0(r3)
	  * Now that access to the registers is complete, release the registers
	  * semaphore so that other threads can access the registers.
	  */
	 ALT_SEM_POST (dev->regs_lock);
	 
	 return 0;
210cfb78:	0005883a 	mov	r2,zero
210cfb7c:	f800283a 	ret
	 else {
		 prefetcher_ctl &= ALT_MSGDMA_PREFETCHER_CTRL_PARK_MODE_CLR_MASK;
	 }
	 
	 /* set poll-en */
	 if (poll_en){
210cfb80:	48c03fcc 	andi	r3,r9,255
	 IOWR_ALT_MSGDMA_PREFETCHER_NEXT_DESCRIPTOR_PTR_HIGH(dev->prefetcher_base,
			 root_node_addr.u32[1]);
		
	 /* set park-mode */
	 if (park_mode_en){
		 prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_PARK_MODE_SET_MASK;
210cfb84:	10800414 	ori	r2,r2,16
	 else {
		 prefetcher_ctl &= ALT_MSGDMA_PREFETCHER_CTRL_PARK_MODE_CLR_MASK;
	 }
	 
	 /* set poll-en */
	 if (poll_en){
210cfb88:	183ff626 	beq	r3,zero,210cfb64 <__flash_rwdata_start+0xffffe26c>
		 prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_DESC_POLL_EN_MASK; 
		 if(IORD_ALT_MSGDMA_PREFETCHER_DESCRIPTOR_POLLING_FREQ(
210cfb8c:	20c00617 	ldw	r3,24(r4)
		 prefetcher_ctl &= ALT_MSGDMA_PREFETCHER_CTRL_PARK_MODE_CLR_MASK;
	 }
	 
	 /* set poll-en */
	 if (poll_en){
		 prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_DESC_POLL_EN_MASK; 
210cfb90:	10800094 	ori	r2,r2,2
		 if(IORD_ALT_MSGDMA_PREFETCHER_DESCRIPTOR_POLLING_FREQ(
210cfb94:	19400304 	addi	r5,r3,12
210cfb98:	29800037 	ldwio	r6,0(r5)
210cfb9c:	303ff41e 	bne	r6,zero,210cfb70 <__flash_rwdata_start+0xffffe278>
				 dev->prefetcher_base) == 0){
			 /* set poll frequency to some non-zero default value */
			 IOWR_ALT_MSGDMA_PREFETCHER_DESCRIPTOR_POLLING_FREQ(
210cfba0:	00c03fc4 	movi	r3,255
210cfba4:	28c00035 	stwio	r3,0(r5)
210cfba8:	20c00617 	ldw	r3,24(r4)
210cfbac:	003ff006 	br	210cfb70 <__flash_rwdata_start+0xffffe278>
	  *   - Disable interrupt generation
	  */
	 else
	 {
		 dispatcher_ctl |= (dev->control | ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK);
		 dispatcher_ctl &= (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK) 
210cfbb0:	00fff3c4 	movi	r3,-49
210cfbb4:	50c6703a 	and	r3,r10,r3
				 & (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
		 prefetcher_ctl &= ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_CLR_MASK;
210cfbb8:	02bffdc4 	movi	r10,-9
	  *   - Disable interrupt generation
	  */
	 else
	 {
		 dispatcher_ctl |= (dev->control | ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK);
		 dispatcher_ctl &= (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK) 
210cfbbc:	18c00114 	ori	r3,r3,4
				 & (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
		 prefetcher_ctl &= ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_CLR_MASK;
210cfbc0:	1284703a 	and	r2,r2,r10
210cfbc4:	003fd506 	br	210cfb1c <__flash_rwdata_start+0xffffe224>
	/* case where prefetcher already started, return busy error */ 
	prefetcher_ctl = IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base);
	if(ALT_MSGDMA_PREFETCHER_CTRL_RUN_GET(prefetcher_ctl)){
		/* release the registers semaphore */
		ALT_SEM_POST (dev->regs_lock);
		return -EBUSY;
210cfbc8:	00bffc04 	movi	r2,-16
	  * semaphore so that other threads can access the registers.
	  */
	 ALT_SEM_POST (dev->regs_lock);
	 
	 return 0;
}
210cfbcc:	f800283a 	ret

210cfbd0 <alt_msgdma_start_prefetcher_with_std_desc_list>:
int alt_msgdma_prefetcher_set_std_list_own_by_hw_bits (
	alt_msgdma_prefetcher_standard_descriptor *list)
{
	alt_u32 descriptor_control_field = 0;
	alt_msgdma_prefetcher_standard_descriptor *last_descr_ptr;
	if (list == NULL)
210cfbd0:	28004726 	beq	r5,zero,210cfcf0 <alt_msgdma_start_prefetcher_with_std_desc_list+0x120>
	}

	/* update all nodes in the list */
	last_descr_ptr = list; /* start at list root-node */
	/* traverse list to update all of the nodes */
	while (last_descr_ptr->next_desc_ptr != (alt_u32)list)  
210cfbd4:	28800317 	ldw	r2,12(r5)
210cfbd8:	2811883a 	mov	r8,r5
210cfbdc:	11400626 	beq	r2,r5,210cfbf8 <alt_msgdma_start_prefetcher_with_std_desc_list+0x28>
	{
		/* get current value */
		descriptor_control_field = last_descr_ptr->control;
		/* update own_by_hw bit only */
		last_descr_ptr->control = descriptor_control_field 
				| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
210cfbe0:	28c00717 	ldw	r3,28(r5)
210cfbe4:	18d00034 	orhi	r3,r3,16384
	while (last_descr_ptr->next_desc_ptr != (alt_u32)list)  
	{
		/* get current value */
		descriptor_control_field = last_descr_ptr->control;
		/* update own_by_hw bit only */
		last_descr_ptr->control = descriptor_control_field 
210cfbe8:	28c00715 	stw	r3,28(r5)
				| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
		/* go to next node in list */
		last_descr_ptr = 
210cfbec:	100b883a 	mov	r5,r2
	}

	/* update all nodes in the list */
	last_descr_ptr = list; /* start at list root-node */
	/* traverse list to update all of the nodes */
	while (last_descr_ptr->next_desc_ptr != (alt_u32)list)  
210cfbf0:	10800317 	ldw	r2,12(r2)
210cfbf4:	123ffa1e 	bne	r2,r8,210cfbe0 <__flash_rwdata_start+0xffffe2e8>
	}
	/* update the last node in the list, currently last_descr_ptr after while loop */
	descriptor_control_field = last_descr_ptr->control;    /* get current value */
	/* update own_by_hw bit only */
	last_descr_ptr->control = descriptor_control_field 
		| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
210cfbf8:	28800717 	ldw	r2,28(r5)
	 * semaphore. This ensures that accessing registers is thread-safe.
	 */
	ALT_SEM_PEND (dev->regs_lock, 0);
	
	/* case where prefetcher already started, return busy error */ 
	prefetcher_ctl = IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base);
210cfbfc:	20c00617 	ldw	r3,24(r4)
	}
	/* update the last node in the list, currently last_descr_ptr after while loop */
	descriptor_control_field = last_descr_ptr->control;    /* get current value */
	/* update own_by_hw bit only */
	last_descr_ptr->control = descriptor_control_field 
		| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
210cfc00:	10900034 	orhi	r2,r2,16384
			(alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
	}
	/* update the last node in the list, currently last_descr_ptr after while loop */
	descriptor_control_field = last_descr_ptr->control;    /* get current value */
	/* update own_by_hw bit only */
	last_descr_ptr->control = descriptor_control_field 
210cfc04:	28800715 	stw	r2,28(r5)
	 * semaphore. This ensures that accessing registers is thread-safe.
	 */
	ALT_SEM_PEND (dev->regs_lock, 0);
	
	/* case where prefetcher already started, return busy error */ 
	prefetcher_ctl = IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base);
210cfc08:	18800037 	ldwio	r2,0(r3)
	if(ALT_MSGDMA_PREFETCHER_CTRL_RUN_GET(prefetcher_ctl)){
210cfc0c:	10c0004c 	andi	r3,r2,1
210cfc10:	18003f1e 	bne	r3,zero,210cfd10 <alt_msgdma_start_prefetcher_with_std_desc_list+0x140>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
210cfc14:	0007303a 	rdctl	r3,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
210cfc18:	017fff84 	movi	r5,-2
210cfc1c:	1952703a 	and	r9,r3,r5
210cfc20:	4801703a 	wrctl	status,r9
	/* stop issuing more descriptors */
	dispatcher_ctl = ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
	
	/* making sure the read-modify-write below can't be pre-empted */
	context = alt_irq_disable_all();
	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, dispatcher_ctl);
210cfc24:	22400317 	ldw	r9,12(r4)
210cfc28:	02800804 	movi	r10,32
210cfc2c:	4a800135 	stwio	r10,4(r9)
	/*
	 * Clear any (previous) status register information
	 * that might occlude our error checking later.
	 */
	IOWR_ALTERA_MSGDMA_CSR_STATUS( dev->csr_base, 
210cfc30:	22400317 	ldw	r9,12(r4)
210cfc34:	4a800037 	ldwio	r10,0(r9)
210cfc38:	4a800035 	stwio	r10,0(r9)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
210cfc3c:	1801703a 	wrctl	status,r3
	 * If a callback routine has been previously registered which will be
	 * called from the msgdma ISR. Set up dispatcher to:
	 *  - Run
	 *  - Stop on an error with any particular descriptor
	 */
	if(dev->callback)
210cfc40:	20c00b17 	ldw	r3,44(r4)
	{
		dispatcher_ctl |= (dev->control | ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK 
				| ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK );
		dispatcher_ctl &=  (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK);
210cfc44:	22400d17 	ldw	r9,52(r4)
	 * If a callback routine has been previously registered which will be
	 * called from the msgdma ISR. Set up dispatcher to:
	 *  - Run
	 *  - Stop on an error with any particular descriptor
	 */
	if(dev->callback)
210cfc48:	18002b26 	beq	r3,zero,210cfcf8 <alt_msgdma_start_prefetcher_with_std_desc_list+0x128>
	{
		dispatcher_ctl |= (dev->control | ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK 
				| ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK );
		dispatcher_ctl &=  (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK);
210cfc4c:	00fff7c4 	movi	r3,-33
210cfc50:	48c6703a 	and	r3,r9,r3
		
		prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_SET_MASK;
210cfc54:	10800214 	ori	r2,r2,8
	 */
	if(dev->callback)
	{
		dispatcher_ctl |= (dev->control | ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK 
				| ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK );
		dispatcher_ctl &=  (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK);
210cfc58:	18c00514 	ori	r3,r3,20
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
210cfc5c:	0013303a 	rdctl	r9,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
210cfc60:	494a703a 	and	r5,r9,r5
210cfc64:	2801703a 	wrctl	status,r5
		 dispatcher_ctl &= (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK) 
				 & (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
		 prefetcher_ctl &= ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_CLR_MASK;
	     /* making sure the read-modify-write below can't be pre-empted */
	     context = alt_irq_disable_all();
	     IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, dispatcher_ctl);
210cfc68:	21400317 	ldw	r5,12(r4)
210cfc6c:	28c00135 	stwio	r3,4(r5)
	     IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base, prefetcher_ctl);
210cfc70:	20c00617 	ldw	r3,24(r4)
210cfc74:	18800035 	stwio	r2,0(r3)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
210cfc78:	4801703a 	wrctl	status,r9
	     alt_irq_enable_all(context);
	 }   
	
	 /* set next descriptor registers to point to the list root-node */
	 IOWR_ALT_MSGDMA_PREFETCHER_NEXT_DESCRIPTOR_PTR_LOW(dev->prefetcher_base,
210cfc7c:	20c00617 	ldw	r3,24(r4)
210cfc80:	1a000135 	stwio	r8,4(r3)
			 root_node_addr.u32[0]);
	 IOWR_ALT_MSGDMA_PREFETCHER_NEXT_DESCRIPTOR_PTR_HIGH(dev->prefetcher_base,
210cfc84:	20c00617 	ldw	r3,24(r4)
210cfc88:	18000235 	stwio	zero,8(r3)
			 root_node_addr.u32[1]);
		
	 /* set park-mode */
	 if (park_mode_en){
210cfc8c:	31803fcc 	andi	r6,r6,255
210cfc90:	30000b1e 	bne	r6,zero,210cfcc0 <alt_msgdma_start_prefetcher_with_std_desc_list+0xf0>
		 prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_PARK_MODE_SET_MASK;
	 }
	 else {
		 prefetcher_ctl &= ALT_MSGDMA_PREFETCHER_CTRL_PARK_MODE_CLR_MASK;
210cfc94:	00fffbc4 	movi	r3,-17
	 }
	 
	 /* set poll-en */
	 if (poll_en){
210cfc98:	39c03fcc 	andi	r7,r7,255
	 /* set park-mode */
	 if (park_mode_en){
		 prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_PARK_MODE_SET_MASK;
	 }
	 else {
		 prefetcher_ctl &= ALT_MSGDMA_PREFETCHER_CTRL_PARK_MODE_CLR_MASK;
210cfc9c:	10c4703a 	and	r2,r2,r3
	 }
	 
	 /* set poll-en */
	 if (poll_en){
		 prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_DESC_POLL_EN_MASK; 
		 if(IORD_ALT_MSGDMA_PREFETCHER_DESCRIPTOR_POLLING_FREQ(
210cfca0:	20c00617 	ldw	r3,24(r4)
	 else {
		 prefetcher_ctl &= ALT_MSGDMA_PREFETCHER_CTRL_PARK_MODE_CLR_MASK;
	 }
	 
	 /* set poll-en */
	 if (poll_en){
210cfca4:	38000a1e 	bne	r7,zero,210cfcd0 <alt_msgdma_start_prefetcher_with_std_desc_list+0x100>
			 IOWR_ALT_MSGDMA_PREFETCHER_DESCRIPTOR_POLLING_FREQ(
					 dev->prefetcher_base, 0xFF);
		 }
	 }
	 else {
		 prefetcher_ctl &= ALT_MSGDMA_PREFETCHER_CTRL_DESC_POLL_EN_CLR_MASK; 
210cfca8:	013fff44 	movi	r4,-3
210cfcac:	1104703a 	and	r2,r2,r4
	 }
	 
	 /* set the prefetcher run bit */
	 prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_RUN_SET_MASK;
210cfcb0:	10800054 	ori	r2,r2,1
	 /* start the dma since run bit is set */
	 IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base, prefetcher_ctl);
210cfcb4:	18800035 	stwio	r2,0(r3)
	  * Now that access to the registers is complete, release the registers
	  * semaphore so that other threads can access the registers.
	  */
	 ALT_SEM_POST (dev->regs_lock);
	 
	 return 0;
210cfcb8:	0005883a 	mov	r2,zero
210cfcbc:	f800283a 	ret
	 else {
		 prefetcher_ctl &= ALT_MSGDMA_PREFETCHER_CTRL_PARK_MODE_CLR_MASK;
	 }
	 
	 /* set poll-en */
	 if (poll_en){
210cfcc0:	39c03fcc 	andi	r7,r7,255
	 IOWR_ALT_MSGDMA_PREFETCHER_NEXT_DESCRIPTOR_PTR_HIGH(dev->prefetcher_base,
			 root_node_addr.u32[1]);
		
	 /* set park-mode */
	 if (park_mode_en){
		 prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_PARK_MODE_SET_MASK;
210cfcc4:	10800414 	ori	r2,r2,16
	 }
	 
	 /* set poll-en */
	 if (poll_en){
		 prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_DESC_POLL_EN_MASK; 
		 if(IORD_ALT_MSGDMA_PREFETCHER_DESCRIPTOR_POLLING_FREQ(
210cfcc8:	20c00617 	ldw	r3,24(r4)
	 else {
		 prefetcher_ctl &= ALT_MSGDMA_PREFETCHER_CTRL_PARK_MODE_CLR_MASK;
	 }
	 
	 /* set poll-en */
	 if (poll_en){
210cfccc:	383ff626 	beq	r7,zero,210cfca8 <__flash_rwdata_start+0xffffe3b0>
		 prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_DESC_POLL_EN_MASK; 
210cfcd0:	10800094 	ori	r2,r2,2
		 if(IORD_ALT_MSGDMA_PREFETCHER_DESCRIPTOR_POLLING_FREQ(
210cfcd4:	19400304 	addi	r5,r3,12
210cfcd8:	29800037 	ldwio	r6,0(r5)
210cfcdc:	303ff41e 	bne	r6,zero,210cfcb0 <__flash_rwdata_start+0xffffe3b8>
				 dev->prefetcher_base) == 0){
			 /* set poll frequency to some non-zero default value */
			 IOWR_ALT_MSGDMA_PREFETCHER_DESCRIPTOR_POLLING_FREQ(
210cfce0:	00c03fc4 	movi	r3,255
210cfce4:	28c00035 	stwio	r3,0(r5)
210cfce8:	20c00617 	ldw	r3,24(r4)
210cfcec:	003ff006 	br	210cfcb0 <__flash_rwdata_start+0xffffe3b8>
	alt_msgdma_prefetcher_standard_descriptor *list,
	alt_u8 park_mode_en,
	alt_u8 poll_en)
{	
	if (alt_msgdma_prefetcher_set_std_list_own_by_hw_bits(list) != 0){
		return -EINVAL;
210cfcf0:	00bffa84 	movi	r2,-22
	}
	
	return alt_msgdma_start_prefetcher_with_list_addr (dev, (uintptr_t)list,
			park_mode_en, poll_en);
}
210cfcf4:	f800283a 	ret
	  *   - Disable interrupt generation
	  */
	 else
	 {
		 dispatcher_ctl |= (dev->control | ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK);
		 dispatcher_ctl &= (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK) 
210cfcf8:	00fff3c4 	movi	r3,-49
210cfcfc:	48c6703a 	and	r3,r9,r3
				 & (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
		 prefetcher_ctl &= ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_CLR_MASK;
210cfd00:	027ffdc4 	movi	r9,-9
	  *   - Disable interrupt generation
	  */
	 else
	 {
		 dispatcher_ctl |= (dev->control | ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK);
		 dispatcher_ctl &= (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK) 
210cfd04:	18c00114 	ori	r3,r3,4
				 & (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
		 prefetcher_ctl &= ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_CLR_MASK;
210cfd08:	1244703a 	and	r2,r2,r9
210cfd0c:	003fd306 	br	210cfc5c <__flash_rwdata_start+0xffffe364>
	/* case where prefetcher already started, return busy error */ 
	prefetcher_ctl = IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base);
	if(ALT_MSGDMA_PREFETCHER_CTRL_RUN_GET(prefetcher_ctl)){
		/* release the registers semaphore */
		ALT_SEM_POST (dev->regs_lock);
		return -EBUSY;
210cfd10:	00bffc04 	movi	r2,-16
{	
	if (alt_msgdma_prefetcher_set_std_list_own_by_hw_bits(list) != 0){
		return -EINVAL;
	}
	
	return alt_msgdma_start_prefetcher_with_list_addr (dev, (uintptr_t)list,
210cfd14:	f800283a 	ret

210cfd18 <alt_msgdma_start_prefetcher_with_extd_desc_list>:
int alt_msgdma_start_prefetcher_with_extd_desc_list (
	alt_msgdma_dev *dev,
	alt_msgdma_prefetcher_extended_descriptor *list,
	alt_u8 park_mode_en,
	alt_u8 poll_en)
{
210cfd18:	defffe04 	addi	sp,sp,-8
210cfd1c:	dfc00115 	stw	ra,4(sp)
{
	alt_u32 descriptor_control_field = 0;
	msgdma_addr64 root_node_addr, next_node_addr;
	alt_msgdma_prefetcher_extended_descriptor *last_descr_ptr;
	
	if (list == NULL)
210cfd20:	28001d26 	beq	r5,zero,210cfd98 <alt_msgdma_start_prefetcher_with_extd_desc_list+0x80>
	last_descr_ptr = list; /* start at list root-node */
	/* the last nodes next ptr should point to the root node*/
	root_node_addr.u64 = (uintptr_t)list;

	/* traverse list until you get the last node */
	while ((last_descr_ptr->next_desc_ptr_low != root_node_addr.u32[0]) 
210cfd24:	28800317 	ldw	r2,12(r5)
210cfd28:	3015883a 	mov	r10,r6
210cfd2c:	2813883a 	mov	r9,r5
	}
	
	/* update all nodes in the list */
	last_descr_ptr = list; /* start at list root-node */
	/* the last nodes next ptr should point to the root node*/
	root_node_addr.u64 = (uintptr_t)list;
210cfd30:	280d883a 	mov	r6,r5

	/* traverse list until you get the last node */
	while ((last_descr_ptr->next_desc_ptr_low != root_node_addr.u32[0]) 
210cfd34:	11400c26 	beq	r2,r5,210cfd68 <alt_msgdma_start_prefetcher_with_extd_desc_list+0x50>
		&& (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
210cfd38:	28c00b17 	ldw	r3,44(r5)
210cfd3c:	1800031e 	bne	r3,zero,210cfd4c <alt_msgdma_start_prefetcher_with_extd_desc_list+0x34>
210cfd40:	00000906 	br	210cfd68 <alt_msgdma_start_prefetcher_with_extd_desc_list+0x50>
210cfd44:	40c00b17 	ldw	r3,44(r8)
210cfd48:	18000726 	beq	r3,zero,210cfd68 <alt_msgdma_start_prefetcher_with_extd_desc_list+0x50>
	{
		/* start with current value */
		descriptor_control_field = last_descr_ptr->control;
		/* update own_by_hw bit only */
		last_descr_ptr->control = descriptor_control_field 
				| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
210cfd4c:	28c00f17 	ldw	r3,60(r5)
		/* go to next node in list, using 64 bit address */
		next_node_addr.u32[0] = last_descr_ptr->next_desc_ptr_low;
210cfd50:	1011883a 	mov	r8,r2
	{
		/* start with current value */
		descriptor_control_field = last_descr_ptr->control;
		/* update own_by_hw bit only */
		last_descr_ptr->control = descriptor_control_field 
				| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
210cfd54:	18d00034 	orhi	r3,r3,16384
		&& (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
	{
		/* start with current value */
		descriptor_control_field = last_descr_ptr->control;
		/* update own_by_hw bit only */
		last_descr_ptr->control = descriptor_control_field 
210cfd58:	28c00f15 	stw	r3,60(r5)
				| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
		/* go to next node in list, using 64 bit address */
		next_node_addr.u32[0] = last_descr_ptr->next_desc_ptr_low;
		next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
		last_descr_ptr = 
			(alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
210cfd5c:	100b883a 	mov	r5,r2
	last_descr_ptr = list; /* start at list root-node */
	/* the last nodes next ptr should point to the root node*/
	root_node_addr.u64 = (uintptr_t)list;

	/* traverse list until you get the last node */
	while ((last_descr_ptr->next_desc_ptr_low != root_node_addr.u32[0]) 
210cfd60:	10800317 	ldw	r2,12(r2)
210cfd64:	127ff71e 	bne	r2,r9,210cfd44 <__flash_rwdata_start+0xffffe44c>
	}
	/* update the last node in the list, currently last_descr_ptr after while loop */
	descriptor_control_field = last_descr_ptr->control;    /* start with current value */
	/* update own_by_hw bit only */
	last_descr_ptr->control = descriptor_control_field 
		| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
210cfd68:	28c00f17 	ldw	r3,60(r5)
	alt_u8 poll_en)
{
	if (alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits(list) != 0){
		return -EINVAL;
	}
	return alt_msgdma_start_prefetcher_with_list_addr (dev, (uintptr_t)list, 
210cfd6c:	38803fcc 	andi	r2,r7,255
210cfd70:	51c03fcc 	andi	r7,r10,255
	}
	/* update the last node in the list, currently last_descr_ptr after while loop */
	descriptor_control_field = last_descr_ptr->control;    /* start with current value */
	/* update own_by_hw bit only */
	last_descr_ptr->control = descriptor_control_field 
		| ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
210cfd74:	18d00034 	orhi	r3,r3,16384
			(alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
	}
	/* update the last node in the list, currently last_descr_ptr after while loop */
	descriptor_control_field = last_descr_ptr->control;    /* start with current value */
	/* update own_by_hw bit only */
	last_descr_ptr->control = descriptor_control_field 
210cfd78:	28c00f15 	stw	r3,60(r5)
	alt_u8 poll_en)
{
	if (alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits(list) != 0){
		return -EINVAL;
	}
	return alt_msgdma_start_prefetcher_with_list_addr (dev, (uintptr_t)list, 
210cfd7c:	d8800015 	stw	r2,0(sp)
210cfd80:	300b883a 	mov	r5,r6
210cfd84:	000d883a 	mov	r6,zero
210cfd88:	10cfac00 	call	210cfac0 <alt_msgdma_start_prefetcher_with_list_addr>
			park_mode_en, poll_en);
}
210cfd8c:	dfc00117 	ldw	ra,4(sp)
210cfd90:	dec00204 	addi	sp,sp,8
210cfd94:	f800283a 	ret
	alt_msgdma_prefetcher_extended_descriptor *list,
	alt_u8 park_mode_en,
	alt_u8 poll_en)
{
	if (alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits(list) != 0){
		return -EINVAL;
210cfd98:	00bffa84 	movi	r2,-22
210cfd9c:	003ffb06 	br	210cfd8c <__flash_rwdata_start+0xffffe494>

210cfda0 <alt_msgdma_open>:
 * Returns:
 * - Pointer to msgdma device instance structure, or null if the device
 *   could not be opened.
 */
alt_msgdma_dev* alt_msgdma_open (const char* name)
{
210cfda0:	defffe04 	addi	sp,sp,-8
    alt_msgdma_dev* dev = NULL;

    dev = (alt_msgdma_dev*) alt_find_dev (name, &alt_msgdma_list);
210cfda4:	d1600f04 	addi	r5,gp,-32708
 * Returns:
 * - Pointer to msgdma device instance structure, or null if the device
 *   could not be opened.
 */
alt_msgdma_dev* alt_msgdma_open (const char* name)
{
210cfda8:	dc000015 	stw	r16,0(sp)
210cfdac:	dfc00115 	stw	ra,4(sp)
    alt_msgdma_dev* dev = NULL;

    dev = (alt_msgdma_dev*) alt_find_dev (name, &alt_msgdma_list);
210cfdb0:	10d08040 	call	210d0804 <alt_find_dev>
210cfdb4:	1021883a 	mov	r16,r2

    if (NULL == dev)
210cfdb8:	10000526 	beq	r2,zero,210cfdd0 <alt_msgdma_open+0x30>
    {
        ALT_ERRNO = ENODEV;
    }

    return dev;
}
210cfdbc:	8005883a 	mov	r2,r16
210cfdc0:	dfc00117 	ldw	ra,4(sp)
210cfdc4:	dc000017 	ldw	r16,0(sp)
210cfdc8:	dec00204 	addi	sp,sp,8
210cfdcc:	f800283a 	ret
210cfdd0:	00840034 	movhi	r2,4096
210cfdd4:	10892d04 	addi	r2,r2,9396
210cfdd8:	10800017 	ldw	r2,0(r2)
210cfddc:	10000426 	beq	r2,zero,210cfdf0 <alt_msgdma_open+0x50>
210cfde0:	103ee83a 	callr	r2

    dev = (alt_msgdma_dev*) alt_find_dev (name, &alt_msgdma_list);

    if (NULL == dev)
    {
        ALT_ERRNO = ENODEV;
210cfde4:	00c004c4 	movi	r3,19
210cfde8:	10c00015 	stw	r3,0(r2)
210cfdec:	003ff306 	br	210cfdbc <__flash_rwdata_start+0xffffe4c4>
210cfdf0:	00840034 	movhi	r2,4096
210cfdf4:	10893b04 	addi	r2,r2,9452
210cfdf8:	003ffa06 	br	210cfde4 <__flash_rwdata_start+0xffffe4ec>

210cfdfc <alt_msgdma_init>:
 * This routine disables interrupts, descriptor processing,
 * registers a specific instance of the device with the HAL,
 * and installs an interrupt handler for the device.
 */
void alt_msgdma_init (alt_msgdma_dev *dev, alt_u32 ic_id, alt_u32 irq)
{
210cfdfc:	defffb04 	addi	sp,sp,-20
210cfe00:	dc800315 	stw	r18,12(sp)
210cfe04:	dc400215 	stw	r17,8(sp)
210cfe08:	dc000115 	stw	r16,4(sp)
210cfe0c:	dfc00415 	stw	ra,16(sp)
    extern alt_llist alt_msgdma_list;
    alt_u32 temporary_control;
    int error;

    if (dev->prefetcher_enable)
210cfe10:	20801783 	ldbu	r2,94(r4)
 * This routine disables interrupts, descriptor processing,
 * registers a specific instance of the device with the HAL,
 * and installs an interrupt handler for the device.
 */
void alt_msgdma_init (alt_msgdma_dev *dev, alt_u32 ic_id, alt_u32 irq)
{
210cfe14:	2021883a 	mov	r16,r4
210cfe18:	2825883a 	mov	r18,r5
210cfe1c:	3023883a 	mov	r17,r6
    extern alt_llist alt_msgdma_list;
    alt_u32 temporary_control;
    int error;

    if (dev->prefetcher_enable)
210cfe20:	1000261e 	bne	r2,zero,210cfebc <alt_msgdma_init+0xc0>
    }    
    
    /* Reset the registers and FIFOs of the dispatcher and master modules */
    /* set the reset bit, no need to read the control register first since 
    this write is going to clear it out */
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, ALTERA_MSGDMA_CSR_RESET_MASK);
210cfe24:	80800317 	ldw	r2,12(r16)
210cfe28:	00c00084 	movi	r3,2
210cfe2c:	10c00135 	stwio	r3,4(r2)
210cfe30:	80c00317 	ldw	r3,12(r16)
    while(0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base)
210cfe34:	18800037 	ldwio	r2,0(r3)
    		& ALTERA_MSGDMA_CSR_RESET_STATE_MASK));
210cfe38:	1080100c 	andi	r2,r2,64
    
    /* Reset the registers and FIFOs of the dispatcher and master modules */
    /* set the reset bit, no need to read the control register first since 
    this write is going to clear it out */
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, ALTERA_MSGDMA_CSR_RESET_MASK);
    while(0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base)
210cfe3c:	103ffd1e 	bne	r2,zero,210cfe34 <__flash_rwdata_start+0xffffe53c>
    * Disable interrupts, halt descriptor processing,
    * and clear status register content
    */

    /* disable global interrupt */
    temporary_control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base)
210cfe40:	18c00104 	addi	r3,r3,4
210cfe44:	19000037 	ldwio	r4,0(r3)
210cfe48:	00bffbc4 	movi	r2,-17
210cfe4c:	2084703a 	and	r2,r4,r2
    		& (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
    /* stopping descriptor */
    temporary_control |= ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
210cfe50:	10800814 	ori	r2,r2,32
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, temporary_control);
210cfe54:	18800035 	stwio	r2,0(r3)

    /* clear the CSR status register */
    IOWR_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base, 
210cfe58:	80800317 	ldw	r2,12(r16)
210cfe5c:	10c00037 	ldwio	r3,0(r2)
210cfe60:	10c00035 	stwio	r3,0(r2)
    		IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));
    
    if (dev->prefetcher_enable)
210cfe64:	80801783 	ldbu	r2,94(r16)
210cfe68:	10000426 	beq	r2,zero,210cfe7c <alt_msgdma_init+0x80>
    {
    	/* clear all status bits that are set, since theyre W1C */
    	IOWR_ALT_MSGDMA_PREFETCHER_STATUS(dev->prefetcher_base, 
210cfe6c:	80800617 	ldw	r2,24(r16)
210cfe70:	10800404 	addi	r2,r2,16
210cfe74:	10c00037 	ldwio	r3,0(r2)
210cfe78:	10c00035 	stwio	r3,0(r2)
    			IORD_ALT_MSGDMA_PREFETCHER_STATUS(dev->prefetcher_base));
    }

    /* Register this instance of the msgdma controller with HAL */
    alt_dev_llist_insert((alt_dev_llist*) dev, &alt_msgdma_list);
210cfe7c:	8009883a 	mov	r4,r16
210cfe80:	d1600f04 	addi	r5,gp,-32708
210cfe84:	10d06c40 	call	210d06c4 <alt_dev_llist_insert>
    error = ALT_SEM_CREATE (&dev->regs_lock, 1);
            
    if (!error)
    {        
        /* Install IRQ handler */
        alt_ic_isr_register(ic_id, irq, alt_msgdma_irq, dev, 0x0);
210cfe88:	01884374 	movhi	r6,8461
210cfe8c:	31bce504 	addi	r6,r6,-3180
210cfe90:	d8000015 	stw	zero,0(sp)
210cfe94:	9009883a 	mov	r4,r18
210cfe98:	880b883a 	mov	r5,r17
210cfe9c:	800f883a 	mov	r7,r16
210cfea0:	10d08880 	call	210d0888 <alt_ic_isr_register>
        alt_printf("failed to create semaphores\n");
    }
    
    return;

}
210cfea4:	dfc00417 	ldw	ra,16(sp)
210cfea8:	dc800317 	ldw	r18,12(sp)
210cfeac:	dc400217 	ldw	r17,8(sp)
210cfeb0:	dc000117 	ldw	r16,4(sp)
210cfeb4:	dec00504 	addi	sp,sp,20
210cfeb8:	f800283a 	ret
    int error;

    if (dev->prefetcher_enable)
    {
    	/* start prefetcher reset sequence */
    	IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base, 
210cfebc:	20800617 	ldw	r2,24(r4)
210cfec0:	00c00104 	movi	r3,4
210cfec4:	10c00035 	stwio	r3,0(r2)
210cfec8:	20c00617 	ldw	r3,24(r4)
    			ALT_MSGDMA_PREFETCHER_CTRL_RESET_SET_MASK);
    	/* wait until hw clears the bit */
    	while(ALT_MSGDMA_PREFETCHER_CTRL_RESET_GET(
210cfecc:	18800037 	ldwio	r2,0(r3)
210cfed0:	1080010c 	andi	r2,r2,4
210cfed4:	103ffd1e 	bne	r2,zero,210cfecc <__flash_rwdata_start+0xffffe5d4>
210cfed8:	003fd206 	br	210cfe24 <__flash_rwdata_start+0xffffe52c>

210cfedc <alt_msgdma_register_callback>:
	alt_msgdma_dev *dev,
	alt_msgdma_callback callback,
	alt_u32 control,
	void *context)
{
    dev->callback         = callback;
210cfedc:	21400b15 	stw	r5,44(r4)
    dev->callback_context = context;
210cfee0:	21c00c15 	stw	r7,48(r4)
    dev->control          = control;
210cfee4:	21800d15 	stw	r6,52(r4)
210cfee8:	f800283a 	ret

210cfeec <alt_msgdma_standard_descriptor_async_transfer>:
{
    alt_u32 control = 0;
    alt_irq_context context = 0;
    alt_u16 counter = 0;
    alt_u32 fifo_read_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
210cfeec:	21c00317 	ldw	r7,12(r4)
210cfef0:	39800204 	addi	r6,r7,8
210cfef4:	30800037 	ldwio	r2,0(r6)
	alt_msgdma_extended_descriptor *extended_desc)
{
    alt_u32 control = 0;
    alt_irq_context context = 0;
    alt_u16 counter = 0;
    alt_u32 fifo_read_fill_level = (
210cfef8:	10ffffcc 	andi	r3,r2,65535
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
    alt_u32 fifo_write_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
210cfefc:	30800037 	ldwio	r2,0(r6)
		ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_OFFSET;

	/* Return with error immediately if one of read/write buffer is full */
	if((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
210cff00:	21800917 	ldw	r6,36(r4)
    alt_u16 counter = 0;
    alt_u32 fifo_read_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
    alt_u32 fifo_write_fill_level = (
210cff04:	1004d43a 	srli	r2,r2,16
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_OFFSET;

	/* Return with error immediately if one of read/write buffer is full */
	if((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
210cff08:	1180452e 	bgeu	r2,r6,210d0020 <alt_msgdma_standard_descriptor_async_transfer+0x134>
210cff0c:	1980442e 	bgeu	r3,r6,210d0020 <alt_msgdma_standard_descriptor_async_transfer+0x134>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
210cff10:	0007303a 	rdctl	r3,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
210cff14:	00bfff84 	movi	r2,-2
210cff18:	1884703a 	and	r2,r3,r2
210cff1c:	1001703a 	wrctl	status,r2
	read or write masters  */
	/* stop issuing more descriptors */
	control = ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
	/* making sure the read-modify-write below can't be pre-empted */
	context = alt_irq_disable_all();
	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
210cff20:	00800804 	movi	r2,32
210cff24:	38800135 	stwio	r2,4(r7)
	/*
	* Clear any (previous) status register information
	* that might occlude our error checking later.
	*/
	IOWR_ALTERA_MSGDMA_CSR_STATUS(
210cff28:	20800317 	ldw	r2,12(r4)
210cff2c:	11800037 	ldwio	r6,0(r2)
210cff30:	11800035 	stwio	r6,0(r2)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
210cff34:	1801703a 	wrctl	status,r3
		dev->csr_base, 
		IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));
	alt_irq_enable_all(context);

    if (NULL != standard_desc && NULL == extended_desc)
210cff38:	28003726 	beq	r5,zero,210d0018 <alt_msgdma_standard_descriptor_async_transfer+0x12c>
 * -ETIME -> Time out and skipping the looping after 5 msec.
 */
int alt_msgdma_standard_descriptor_async_transfer(
	alt_msgdma_dev *dev,
	alt_msgdma_standard_descriptor *desc)
{
210cff3c:	defffc04 	addi	sp,sp,-16
210cff40:	dc800215 	stw	r18,8(sp)
210cff44:	dc400115 	stw	r17,4(sp)
210cff48:	dc000015 	stw	r16,0(sp)
210cff4c:	dfc00315 	stw	ra,12(sp)
210cff50:	2825883a 	mov	r18,r5
210cff54:	2023883a 	mov	r17,r4
	IOWR_ALTERA_MSGDMA_CSR_STATUS(
		dev->csr_base, 
		IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));
	alt_irq_enable_all(context);

    if (NULL != standard_desc && NULL == extended_desc)
210cff58:	0404e244 	movi	r16,5001
    {
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  write is succeed*/
        while(0 != alt_msgdma_write_standard_descriptor (
210cff5c:	88c00417 	ldw	r3,16(r17)
static int alt_msgdma_write_standard_descriptor (
	alt_u32 *csr_base, 
	alt_u32 *descriptor_base,
	alt_msgdma_standard_descriptor *descriptor)
{
    if (0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(csr_base) & 
210cff60:	88800317 	ldw	r2,12(r17)
210cff64:	10800037 	ldwio	r2,0(r2)
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  write is succeed*/
        while(0 != alt_msgdma_write_standard_descriptor (
		dev->csr_base, dev->descriptor_base, standard_desc))
        {
            alt_busy_sleep(1); /* delay 1us */
210cff68:	01000044 	movi	r4,1
static int alt_msgdma_write_standard_descriptor (
	alt_u32 *csr_base, 
	alt_u32 *descriptor_base,
	alt_msgdma_standard_descriptor *descriptor)
{
    if (0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(csr_base) & 
210cff6c:	1080010c 	andi	r2,r2,4
210cff70:	10000a26 	beq	r2,zero,210cff9c <alt_msgdma_standard_descriptor_async_transfer+0xb0>
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  write is succeed*/
        while(0 != alt_msgdma_write_standard_descriptor (
		dev->csr_base, dev->descriptor_base, standard_desc))
        {
            alt_busy_sleep(1); /* delay 1us */
210cff74:	10d06640 	call	210d0664 <alt_busy_sleep>
210cff78:	80bfffc4 	addi	r2,r16,-1
            if(5000 <= counter) /* time_out if waiting longer than 5 msec */
210cff7c:	10ffffcc 	andi	r3,r2,65535
210cff80:	1021883a 	mov	r16,r2
210cff84:	183ff51e 	bne	r3,zero,210cff5c <__flash_rwdata_start+0xffffe664>
            {
                alt_printf("time out after 5 msec while waiting" 
210cff88:	01040034 	movhi	r4,4096
210cff8c:	21012f04 	addi	r4,r4,1212
210cff90:	10d0c400 	call	210d0c40 <alt_printf>
				* registers semaphore so that other threads can access the 
				* registers.
				*/
				ALT_SEM_POST (dev->regs_lock);
				
                return -ETIME;
210cff94:	00bff084 	movi	r2,-62
210cff98:	00001506 	br	210cfff0 <alt_msgdma_standard_descriptor_async_transfer+0x104>
      /*at least one descriptor buffer is full, returning so that this function 
		is non-blocking*/
        return -ENOSPC;
    }

	IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_ADDRESS(descriptor_base, 
210cff9c:	91000017 	ldw	r4,0(r18)
210cffa0:	19000035 	stwio	r4,0(r3)
		(alt_u32)descriptor->read_address);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_ADDRESS(descriptor_base, 
210cffa4:	91000117 	ldw	r4,4(r18)
210cffa8:	19000135 	stwio	r4,4(r3)
	(	alt_u32)descriptor->write_address);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_LENGTH(descriptor_base, 
210cffac:	91000217 	ldw	r4,8(r18)
210cffb0:	19000235 	stwio	r4,8(r3)
		descriptor->transfer_length);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_CONTROL_STANDARD(descriptor_base, 
210cffb4:	91000317 	ldw	r4,12(r18)
210cffb8:	19000335 	stwio	r4,12(r3)
    * If a callback routine has been previously registered which will be
    * called from the msgdma ISR. Set up controller to:
    *  - Run
    *  - Stop on an error with any particular descriptor
    */
    if(dev->callback)
210cffbc:	88c00b17 	ldw	r3,44(r17)
    {

        control |= (dev->control |
                    ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK |
                    ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK );
        control &=  (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK);
210cffc0:	89000d17 	ldw	r4,52(r17)
    * If a callback routine has been previously registered which will be
    * called from the msgdma ISR. Set up controller to:
    *  - Run
    *  - Stop on an error with any particular descriptor
    */
    if(dev->callback)
210cffc4:	18001026 	beq	r3,zero,210d0008 <alt_msgdma_standard_descriptor_async_transfer+0x11c>
    {

        control |= (dev->control |
                    ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK |
                    ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK );
        control &=  (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK);
210cffc8:	00fff7c4 	movi	r3,-33
210cffcc:	20c6703a 	and	r3,r4,r3
210cffd0:	18c00514 	ori	r3,r3,20
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
210cffd4:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
210cffd8:	013fff84 	movi	r4,-2
210cffdc:	2908703a 	and	r4,r5,r4
210cffe0:	2001703a 	wrctl	status,r4
                    ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK );
        control &= (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK) &
                   (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
        /* making sure the read-modify-write below can't be pre-empted */
        context = alt_irq_disable_all();
        IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
210cffe4:	89000317 	ldw	r4,12(r17)
210cffe8:	20c00135 	stwio	r3,4(r4)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
210cffec:	2801703a 	wrctl	status,r5
   * Error detection/handling should be performed at the application
   * or callback level as appropriate.
   */
    return alt_msgdma_descriptor_async_transfer(dev, desc, NULL);

}
210cfff0:	dfc00317 	ldw	ra,12(sp)
210cfff4:	dc800217 	ldw	r18,8(sp)
210cfff8:	dc400117 	ldw	r17,4(sp)
210cfffc:	dc000017 	ldw	r16,0(sp)
210d0000:	dec00404 	addi	sp,sp,16
210d0004:	f800283a 	ret
    */
    else
    {
        control |= (dev->control |
                    ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK );
        control &= (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK) &
210d0008:	00fff3c4 	movi	r3,-49
210d000c:	20c6703a 	and	r3,r4,r3
210d0010:	18c00114 	ori	r3,r3,4
210d0014:	003fef06 	br	210cffd4 <__flash_rwdata_start+0xffffe6dc>
		* semaphore so that other threads can access the registers.
		*/
		ALT_SEM_POST (dev->regs_lock);
		
        /* operation not permitted due to descriptor type conflict */
        return -EPERM; 
210d0018:	00bfffc4 	movi	r2,-1
210d001c:	f800283a 	ret
	if((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
		(dev->descriptor_fifo_depth <= fifo_read_fill_level))
	{
		/*at least one write or read FIFO descriptor buffer is full,
		returning so that this function is non-blocking*/
		return -ENOSPC;
210d0020:	00bff904 	movi	r2,-28
210d0024:	f800283a 	ret

210d0028 <alt_msgdma_extended_descriptor_async_transfer>:
{
    alt_u32 control = 0;
    alt_irq_context context = 0;
    alt_u16 counter = 0;
    alt_u32 fifo_read_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
210d0028:	21c00317 	ldw	r7,12(r4)
210d002c:	39800204 	addi	r6,r7,8
210d0030:	30800037 	ldwio	r2,0(r6)
	alt_msgdma_extended_descriptor *extended_desc)
{
    alt_u32 control = 0;
    alt_irq_context context = 0;
    alt_u16 counter = 0;
    alt_u32 fifo_read_fill_level = (
210d0034:	10ffffcc 	andi	r3,r2,65535
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
    alt_u32 fifo_write_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
210d0038:	30800037 	ldwio	r2,0(r6)
		ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_OFFSET;

	/* Return with error immediately if one of read/write buffer is full */
	if((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
210d003c:	21800917 	ldw	r6,36(r4)
    alt_u16 counter = 0;
    alt_u32 fifo_read_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
    alt_u32 fifo_write_fill_level = (
210d0040:	1004d43a 	srli	r2,r2,16
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_OFFSET;

	/* Return with error immediately if one of read/write buffer is full */
	if((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
210d0044:	11804f2e 	bgeu	r2,r6,210d0184 <alt_msgdma_extended_descriptor_async_transfer+0x15c>
210d0048:	19804e2e 	bgeu	r3,r6,210d0184 <alt_msgdma_extended_descriptor_async_transfer+0x15c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
210d004c:	0007303a 	rdctl	r3,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
210d0050:	00bfff84 	movi	r2,-2
210d0054:	1884703a 	and	r2,r3,r2
210d0058:	1001703a 	wrctl	status,r2
	read or write masters  */
	/* stop issuing more descriptors */
	control = ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
	/* making sure the read-modify-write below can't be pre-empted */
	context = alt_irq_disable_all();
	IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
210d005c:	00800804 	movi	r2,32
210d0060:	38800135 	stwio	r2,4(r7)
	/*
	* Clear any (previous) status register information
	* that might occlude our error checking later.
	*/
	IOWR_ALTERA_MSGDMA_CSR_STATUS(
210d0064:	20800317 	ldw	r2,12(r4)
210d0068:	11800037 	ldwio	r6,0(r2)
210d006c:	11800035 	stwio	r6,0(r2)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
210d0070:	1801703a 	wrctl	status,r3
                return -ETIME;
            }
            counter++; 
        }
    }
    else if (NULL == standard_desc && NULL != extended_desc)
210d0074:	28004526 	beq	r5,zero,210d018c <alt_msgdma_extended_descriptor_async_transfer+0x164>
 * -ETIME -> Time out and skipping the looping after 5 msec.
 */
int alt_msgdma_extended_descriptor_async_transfer(
	alt_msgdma_dev *dev,
	alt_msgdma_extended_descriptor *desc)
{
210d0078:	defffc04 	addi	sp,sp,-16
210d007c:	dc800215 	stw	r18,8(sp)
210d0080:	dc400115 	stw	r17,4(sp)
210d0084:	dc000015 	stw	r16,0(sp)
210d0088:	dfc00315 	stw	ra,12(sp)
210d008c:	2821883a 	mov	r16,r5
210d0090:	2023883a 	mov	r17,r4
                return -ETIME;
            }
            counter++; 
        }
    }
    else if (NULL == standard_desc && NULL != extended_desc)
210d0094:	0484e244 	movi	r18,5001
    {
        counter = 0; /* reset counter */
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  write is succeed*/
        while(0 != alt_msgdma_write_extended_descriptor (
210d0098:	88c00417 	ldw	r3,16(r17)
static int alt_msgdma_write_extended_descriptor (
	alt_u32 *csr_base, 
	alt_u32 *descriptor_base,
	alt_msgdma_extended_descriptor *descriptor)
{
    if (0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(csr_base) & 
210d009c:	88800317 	ldw	r2,12(r17)
210d00a0:	10800037 	ldwio	r2,0(r2)
210d00a4:	1080010c 	andi	r2,r2,4
210d00a8:	1000271e 	bne	r2,zero,210d0148 <alt_msgdma_extended_descriptor_async_transfer+0x120>
      /*at least one descriptor buffer is full, returning so that this function 
	is non-blocking*/
        return -ENOSPC;
    }

    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_ADDRESS(
210d00ac:	81000017 	ldw	r4,0(r16)
210d00b0:	19000035 	stwio	r4,0(r3)
		descriptor_base, 
    	(alt_u32)descriptor->read_address_low);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_ADDRESS(
210d00b4:	81000117 	ldw	r4,4(r16)
210d00b8:	19000135 	stwio	r4,4(r3)
		descriptor_base, 
		(alt_u32)descriptor->write_address_low);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_LENGTH(
210d00bc:	81000217 	ldw	r4,8(r16)
210d00c0:	19000235 	stwio	r4,8(r3)
		descriptor_base, 
    	descriptor->transfer_length);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_SEQUENCE_NUMBER(
210d00c4:	8100030b 	ldhu	r4,12(r16)
210d00c8:	1900032d 	sthio	r4,12(r3)
		descriptor_base, 
    	descriptor->sequence_number);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_BURST(
210d00cc:	81000383 	ldbu	r4,14(r16)
210d00d0:	190003a5 	stbio	r4,14(r3)
		descriptor_base, 
    	descriptor->read_burst_count);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_BURST(
210d00d4:	810003c3 	ldbu	r4,15(r16)
210d00d8:	190003e5 	stbio	r4,15(r3)
		descriptor_base, 
    	descriptor->write_burst_count);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_STRIDE(
210d00dc:	8100040b 	ldhu	r4,16(r16)
210d00e0:	1900042d 	sthio	r4,16(r3)
		descriptor_base, 
    	descriptor->read_stride);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_STRIDE(
210d00e4:	8100048b 	ldhu	r4,18(r16)
210d00e8:	190004ad 	sthio	r4,18(r3)
		descriptor_base, 
    	descriptor->write_stride);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_ADDRESS_HIGH(descriptor_base, 0);
210d00ec:	18000535 	stwio	zero,20(r3)
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_ADDRESS_HIGH(descriptor_base, 0);
210d00f0:	18000635 	stwio	zero,24(r3)
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_CONTROL_ENHANCED(
210d00f4:	81000717 	ldw	r4,28(r16)
210d00f8:	19000735 	stwio	r4,28(r3)
    * If a callback routine has been previously registered which will be
    * called from the msgdma ISR. Set up controller to:
    *  - Run
    *  - Stop on an error with any particular descriptor
    */
    if(dev->callback)
210d00fc:	88c00b17 	ldw	r3,44(r17)
    {

        control |= (dev->control |
                    ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK |
                    ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK );
        control &=  (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK);
210d0100:	89000d17 	ldw	r4,52(r17)
    * If a callback routine has been previously registered which will be
    * called from the msgdma ISR. Set up controller to:
    *  - Run
    *  - Stop on an error with any particular descriptor
    */
    if(dev->callback)
210d0104:	18001b26 	beq	r3,zero,210d0174 <alt_msgdma_extended_descriptor_async_transfer+0x14c>
    {

        control |= (dev->control |
                    ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK |
                    ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK );
        control &=  (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK);
210d0108:	00fff7c4 	movi	r3,-33
210d010c:	20c6703a 	and	r3,r4,r3
210d0110:	18c00514 	ori	r3,r3,20
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
210d0114:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
210d0118:	013fff84 	movi	r4,-2
210d011c:	2908703a 	and	r4,r5,r4
210d0120:	2001703a 	wrctl	status,r4
                    ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK );
        control &= (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK) &
                   (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
        /* making sure the read-modify-write below can't be pre-empted */
        context = alt_irq_disable_all();
        IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
210d0124:	89000317 	ldw	r4,12(r17)
210d0128:	20c00135 	stwio	r3,4(r4)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
210d012c:	2801703a 	wrctl	status,r5
    /*
    * Error detection/handling should be performed at the application
    * or callback level as appropriate.
    */
    return alt_msgdma_descriptor_async_transfer(dev, NULL, desc);
}
210d0130:	dfc00317 	ldw	ra,12(sp)
210d0134:	dc800217 	ldw	r18,8(sp)
210d0138:	dc400117 	ldw	r17,4(sp)
210d013c:	dc000017 	ldw	r16,0(sp)
210d0140:	dec00404 	addi	sp,sp,16
210d0144:	f800283a 	ret
        while(0 != alt_msgdma_write_extended_descriptor (
		dev->csr_base, 
		dev->descriptor_base, 
		extended_desc))
        {
            alt_busy_sleep(1); /* delay 1us */
210d0148:	01000044 	movi	r4,1
210d014c:	10d06640 	call	210d0664 <alt_busy_sleep>
210d0150:	90bfffc4 	addi	r2,r18,-1
            if(5000 <= counter) /* time_out if waiting longer than 5 msec */
210d0154:	10ffffcc 	andi	r3,r2,65535
210d0158:	1025883a 	mov	r18,r2
210d015c:	183fce1e 	bne	r3,zero,210d0098 <__flash_rwdata_start+0xffffe7a0>
            {
                alt_printf("time out after 5 msec while waiting free FIFO buffer" 
210d0160:	01040034 	movhi	r4,4096
210d0164:	21014504 	addi	r4,r4,1300
210d0168:	10d0c400 	call	210d0c40 <alt_printf>
				* registers semaphore so that other threads can access the 
				* registers.
				*/
				ALT_SEM_POST (dev->regs_lock);
				
                return -ETIME;
210d016c:	00bff084 	movi	r2,-62
210d0170:	003fef06 	br	210d0130 <__flash_rwdata_start+0xffffe838>
    */
    else
    {
        control |= (dev->control |
                    ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK );
        control &= (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK) &
210d0174:	00fff3c4 	movi	r3,-49
210d0178:	20c6703a 	and	r3,r4,r3
210d017c:	18c00114 	ori	r3,r3,4
210d0180:	003fe406 	br	210d0114 <__flash_rwdata_start+0xffffe81c>
	if((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
		(dev->descriptor_fifo_depth <= fifo_read_fill_level))
	{
		/*at least one write or read FIFO descriptor buffer is full,
		returning so that this function is non-blocking*/
		return -ENOSPC;
210d0184:	00bff904 	movi	r2,-28
210d0188:	f800283a 	ret
		* semaphore so that other threads can access the registers.
		*/
		ALT_SEM_POST (dev->regs_lock);
		
        /* operation not permitted due to descriptor type conflict */
        return -EPERM; 
210d018c:	00bfffc4 	movi	r2,-1
210d0190:	f800283a 	ret

210d0194 <alt_msgdma_standard_descriptor_sync_transfer>:
    alt_u32 control=0;
    alt_irq_context context=0;
    alt_u32 csr_status = 0;
    alt_u16 counter = 0;
    alt_u32 fifo_read_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
210d0194:	21800317 	ldw	r6,12(r4)
 *           return -ETIME (Time out and skipping the looping after 5 msec)
 */
int alt_msgdma_standard_descriptor_sync_transfer(
	alt_msgdma_dev *dev,
	alt_msgdma_standard_descriptor *desc)
{
210d0198:	defffa04 	addi	sp,sp,-24
210d019c:	dc800215 	stw	r18,8(sp)
210d01a0:	dc400115 	stw	r17,4(sp)
210d01a4:	2825883a 	mov	r18,r5
210d01a8:	2023883a 	mov	r17,r4
    alt_u32 control=0;
    alt_irq_context context=0;
    alt_u32 csr_status = 0;
    alt_u16 counter = 0;
    alt_u32 fifo_read_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
210d01ac:	31000204 	addi	r4,r6,8
 *           return -ETIME (Time out and skipping the looping after 5 msec)
 */
int alt_msgdma_standard_descriptor_sync_transfer(
	alt_msgdma_dev *dev,
	alt_msgdma_standard_descriptor *desc)
{
210d01b0:	dfc00515 	stw	ra,20(sp)
210d01b4:	dd000415 	stw	r20,16(sp)
210d01b8:	dcc00315 	stw	r19,12(sp)
210d01bc:	dc000015 	stw	r16,0(sp)
    alt_u32 control=0;
    alt_irq_context context=0;
    alt_u32 csr_status = 0;
    alt_u16 counter = 0;
    alt_u32 fifo_read_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
210d01c0:	20800037 	ldwio	r2,0(r4)
{
    alt_u32 control=0;
    alt_irq_context context=0;
    alt_u32 csr_status = 0;
    alt_u16 counter = 0;
    alt_u32 fifo_read_fill_level = (
210d01c4:	10ffffcc 	andi	r3,r2,65535
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
    alt_u32 fifo_write_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
210d01c8:	20800037 	ldwio	r2,0(r4)
    alt_u16 counter = 0;
    alt_u32 fifo_read_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
    alt_u32 fifo_write_fill_level = (
210d01cc:	0404e244 	movi	r16,5001
210d01d0:	1004d43a 	srli	r2,r2,16
210d01d4:	00000b06 	br	210d0204 <alt_msgdma_standard_descriptor_sync_transfer+0x70>
    
    /* Wait for available FIFO buffer to store new descriptor*/
    while ((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
    	(dev->descriptor_fifo_depth <= fifo_read_fill_level))
    { 
        alt_busy_sleep(1); /* delay 1us */
210d01d8:	10d06640 	call	210d0664 <alt_busy_sleep>
210d01dc:	80bfffc4 	addi	r2,r16,-1
        if(5000 <= counter) /* time_out if waiting longer than 5 msec */
210d01e0:	10ffffcc 	andi	r3,r2,65535
210d01e4:	1021883a 	mov	r16,r2
210d01e8:	18005826 	beq	r3,zero,210d034c <alt_msgdma_standard_descriptor_sync_transfer+0x1b8>
				" for storing descriptor\n");
            return -ETIME;
        }
        counter++;  
        fifo_read_fill_level = (
			IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
210d01ec:	89800317 	ldw	r6,12(r17)
210d01f0:	31000204 	addi	r4,r6,8
210d01f4:	20800037 	ldwio	r2,0(r4)
            alt_printf("time out after 5 msec while waiting free FIFO buffer"
				" for storing descriptor\n");
            return -ETIME;
        }
        counter++;  
        fifo_read_fill_level = (
210d01f8:	10ffffcc 	andi	r3,r2,65535
			IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
			ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
			ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
        fifo_write_fill_level = (
			IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
210d01fc:	20800037 	ldwio	r2,0(r4)
        counter++;  
        fifo_read_fill_level = (
			IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
			ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
			ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
        fifo_write_fill_level = (
210d0200:	1004d43a 	srli	r2,r2,16
                    ALTERA_MSGDMA_CSR_STOPPED_ON_EARLY_TERMINATION_MASK |
                    ALTERA_MSGDMA_CSR_STOP_STATE_MASK |
                    ALTERA_MSGDMA_CSR_RESET_STATE_MASK;
    
    /* Wait for available FIFO buffer to store new descriptor*/
    while ((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
210d0204:	89400917 	ldw	r5,36(r17)
    	(dev->descriptor_fifo_depth <= fifo_read_fill_level))
    { 
        alt_busy_sleep(1); /* delay 1us */
210d0208:	01000044 	movi	r4,1
                    ALTERA_MSGDMA_CSR_STOPPED_ON_EARLY_TERMINATION_MASK |
                    ALTERA_MSGDMA_CSR_STOP_STATE_MASK |
                    ALTERA_MSGDMA_CSR_RESET_STATE_MASK;
    
    /* Wait for available FIFO buffer to store new descriptor*/
    while ((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
210d020c:	117ff22e 	bgeu	r2,r5,210d01d8 <__flash_rwdata_start+0xffffe8e0>
210d0210:	197ff12e 	bgeu	r3,r5,210d01d8 <__flash_rwdata_start+0xffffe8e0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
210d0214:	0029303a 	rdctl	r20,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
210d0218:	00bfff84 	movi	r2,-2
210d021c:	a084703a 	and	r2,r20,r2
210d0220:	1001703a 	wrctl	status,r2
    
    /* Stop the msgdma dispatcher from issuing more descriptors to the
    read or write masters  */
    /* making sure the read-modify-write below can't be pre-empted */
    context = alt_irq_disable_all();
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base,
210d0224:	00800804 	movi	r2,32
210d0228:	30800135 	stwio	r2,4(r6)
        ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK);
    /*
    * Clear any (previous) status register information
    * that might occlude our error checking later.
    */
    IOWR_ALTERA_MSGDMA_CSR_STATUS(
210d022c:	88800317 	ldw	r2,12(r17)
210d0230:	10c00037 	ldwio	r3,0(r2)
210d0234:	10c00035 	stwio	r3,0(r2)
		dev->csr_base, 
		IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));

    if (NULL != standard_desc && NULL == extended_desc)
210d0238:	90005626 	beq	r18,zero,210d0394 <alt_msgdma_standard_descriptor_sync_transfer+0x200>
210d023c:	04c4e244 	movi	r19,5001
    {
        counter = 0; /* reset counter */
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  	write is succeed*/
        while(0 != alt_msgdma_write_standard_descriptor (
210d0240:	88800417 	ldw	r2,16(r17)
static int alt_msgdma_write_standard_descriptor (
	alt_u32 *csr_base, 
	alt_u32 *descriptor_base,
	alt_msgdma_standard_descriptor *descriptor)
{
    if (0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(csr_base) & 
210d0244:	88c00317 	ldw	r3,12(r17)
210d0248:	1c000037 	ldwio	r16,0(r3)
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  	write is succeed*/
        while(0 != alt_msgdma_write_standard_descriptor (
			dev->csr_base, dev->descriptor_base, standard_desc))
        {     
            alt_busy_sleep(1); /* delay 1us */
210d024c:	01000044 	movi	r4,1
static int alt_msgdma_write_standard_descriptor (
	alt_u32 *csr_base, 
	alt_u32 *descriptor_base,
	alt_msgdma_standard_descriptor *descriptor)
{
    if (0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(csr_base) & 
210d0250:	8400010c 	andi	r16,r16,4
210d0254:	80000a26 	beq	r16,zero,210d0280 <alt_msgdma_standard_descriptor_sync_transfer+0xec>
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  	write is succeed*/
        while(0 != alt_msgdma_write_standard_descriptor (
			dev->csr_base, dev->descriptor_base, standard_desc))
        {     
            alt_busy_sleep(1); /* delay 1us */
210d0258:	10d06640 	call	210d0664 <alt_busy_sleep>
210d025c:	98bfffc4 	addi	r2,r19,-1
            if(5000 <= counter) /* time_out if waiting longer than 5 msec */
210d0260:	10ffffcc 	andi	r3,r2,65535
210d0264:	1027883a 	mov	r19,r2
210d0268:	183ff51e 	bne	r3,zero,210d0240 <__flash_rwdata_start+0xffffe948>
            {
                alt_printf("time out after 5 msec while writing standard" 
210d026c:	01040034 	movhi	r4,4096
210d0270:	21016f04 	addi	r4,r4,1468
				* registers semaphore so that other threads can access the 
				* registers.
				*/
				ALT_SEM_POST (dev->regs_lock);
				
                return -ETIME;
210d0274:	043ff084 	movi	r16,-62
			dev->csr_base, dev->descriptor_base, standard_desc))
        {     
            alt_busy_sleep(1); /* delay 1us */
            if(5000 <= counter) /* time_out if waiting longer than 5 msec */
            {
                alt_printf("time out after 5 msec while writing standard" 
210d0278:	10d0c400 	call	210d0c40 <alt_printf>
210d027c:	00002a06 	br	210d0328 <alt_msgdma_standard_descriptor_sync_transfer+0x194>
      /*at least one descriptor buffer is full, returning so that this function 
		is non-blocking*/
        return -ENOSPC;
    }

	IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_ADDRESS(descriptor_base, 
210d0280:	90c00017 	ldw	r3,0(r18)
210d0284:	10c00035 	stwio	r3,0(r2)
		(alt_u32)descriptor->read_address);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_ADDRESS(descriptor_base, 
210d0288:	90c00117 	ldw	r3,4(r18)
210d028c:	10c00135 	stwio	r3,4(r2)
	(	alt_u32)descriptor->write_address);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_LENGTH(descriptor_base, 
210d0290:	90c00217 	ldw	r3,8(r18)
210d0294:	10c00235 	stwio	r3,8(r2)
		descriptor->transfer_length);
	IOWR_ALTERA_MSGDMA_DESCRIPTOR_CONTROL_STANDARD(descriptor_base, 
210d0298:	90c00317 	ldw	r3,12(r18)
210d029c:	10c00335 	stwio	r3,12(r2)
    * Set up msgdma controller to:
    * - Disable interrupt generation
    * - Run once a valid descriptor is written to controller
    * - Stop on an error with any particular descriptor
    */
     IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base,
210d02a0:	89000d17 	ldw	r4,52(r17)
210d02a4:	88c00317 	ldw	r3,12(r17)
210d02a8:	00bff2c4 	movi	r2,-53
210d02ac:	2084703a 	and	r2,r4,r2
210d02b0:	10800114 	ori	r2,r2,4
210d02b4:	18800135 	stwio	r2,4(r3)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
210d02b8:	a001703a 	wrctl	status,r20
	 
	alt_irq_enable_all(context);
     
    counter = 0; /* reset counter */ 
	
	csr_status = IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base);
210d02bc:	89800317 	ldw	r6,12(r17)
210d02c0:	30800037 	ldwio	r2,0(r6)
	
    /* Wait for any pending transfers to complete or checking any errors or 
    conditions causing descriptor to stop dispatching */
    while (!(csr_status & error) && (csr_status & ALTERA_MSGDMA_CSR_BUSY_MASK))
210d02c4:	10c0780c 	andi	r3,r2,480
210d02c8:	1800161e 	bne	r3,zero,210d0324 <alt_msgdma_standard_descriptor_sync_transfer+0x190>
210d02cc:	1080004c 	andi	r2,r2,1
210d02d0:	10002326 	beq	r2,zero,210d0360 <alt_msgdma_standard_descriptor_sync_transfer+0x1cc>
    {
        alt_busy_sleep(1); /* delay 1us */
210d02d4:	01000044 	movi	r4,1
210d02d8:	10d06640 	call	210d0664 <alt_busy_sleep>
210d02dc:	0484e204 	movi	r18,5000
			ALT_SEM_POST (dev->regs_lock);
			
            return -ETIME;
        }
        counter++;
        csr_status = IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base);
210d02e0:	89800317 	ldw	r6,12(r17)
210d02e4:	30800037 	ldwio	r2,0(r6)
	
    /* Wait for any pending transfers to complete or checking any errors or 
    conditions causing descriptor to stop dispatching */
    while (!(csr_status & error) && (csr_status & ALTERA_MSGDMA_CSR_BUSY_MASK))
    {
        alt_busy_sleep(1); /* delay 1us */
210d02e8:	01000044 	movi	r4,1
	
	csr_status = IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base);
	
    /* Wait for any pending transfers to complete or checking any errors or 
    conditions causing descriptor to stop dispatching */
    while (!(csr_status & error) && (csr_status & ALTERA_MSGDMA_CSR_BUSY_MASK))
210d02ec:	10c0780c 	andi	r3,r2,480
210d02f0:	1104703a 	and	r2,r2,r4
210d02f4:	18000b1e 	bne	r3,zero,210d0324 <alt_msgdma_standard_descriptor_sync_transfer+0x190>
210d02f8:	10001926 	beq	r2,zero,210d0360 <alt_msgdma_standard_descriptor_sync_transfer+0x1cc>
    {
        alt_busy_sleep(1); /* delay 1us */
210d02fc:	10d06640 	call	210d0664 <alt_busy_sleep>
210d0300:	90bfffc4 	addi	r2,r18,-1
        if(5000 <= counter) /* time_out if waiting longer than 5 msec */
210d0304:	10ffffcc 	andi	r3,r2,65535
210d0308:	1025883a 	mov	r18,r2
210d030c:	183ff41e 	bne	r3,zero,210d02e0 <__flash_rwdata_start+0xffffe9e8>
        {
            alt_printf("time out after 5 msec while waiting for any pending" 
210d0310:	01040034 	movhi	r4,4096
210d0314:	21018004 	addi	r4,r4,1536
			* Now that access to the registers is complete, release the registers
			* semaphore so that other threads can access the registers.
			*/
			ALT_SEM_POST (dev->regs_lock);
			
            return -ETIME;
210d0318:	043ff084 	movi	r16,-62
    while (!(csr_status & error) && (csr_status & ALTERA_MSGDMA_CSR_BUSY_MASK))
    {
        alt_busy_sleep(1); /* delay 1us */
        if(5000 <= counter) /* time_out if waiting longer than 5 msec */
        {
            alt_printf("time out after 5 msec while waiting for any pending" 
210d031c:	10d0c400 	call	210d0c40 <alt_printf>
210d0320:	00000106 	br	210d0328 <alt_msgdma_standard_descriptor_sync_transfer+0x194>
		* Now that access to the registers is complete, release the registers
		* semaphore so that other threads can access the registers.
		*/
		ALT_SEM_POST (dev->regs_lock);
		
        return error;
210d0324:	04007804 	movi	r16,480
int alt_msgdma_standard_descriptor_sync_transfer(
	alt_msgdma_dev *dev,
	alt_msgdma_standard_descriptor *desc)
{
    return alt_msgdma_descriptor_sync_transfer(dev, desc, NULL);
}
210d0328:	8005883a 	mov	r2,r16
210d032c:	dfc00517 	ldw	ra,20(sp)
210d0330:	dd000417 	ldw	r20,16(sp)
210d0334:	dcc00317 	ldw	r19,12(sp)
210d0338:	dc800217 	ldw	r18,8(sp)
210d033c:	dc400117 	ldw	r17,4(sp)
210d0340:	dc000017 	ldw	r16,0(sp)
210d0344:	dec00604 	addi	sp,sp,24
210d0348:	f800283a 	ret
    	(dev->descriptor_fifo_depth <= fifo_read_fill_level))
    { 
        alt_busy_sleep(1); /* delay 1us */
        if(5000 <= counter) /* time_out if waiting longer than 5 msec */
        {
            alt_printf("time out after 5 msec while waiting free FIFO buffer"
210d034c:	01040034 	movhi	r4,4096
210d0350:	21015b04 	addi	r4,r4,1388
				" for storing descriptor\n");
            return -ETIME;
210d0354:	043ff084 	movi	r16,-62
    	(dev->descriptor_fifo_depth <= fifo_read_fill_level))
    { 
        alt_busy_sleep(1); /* delay 1us */
        if(5000 <= counter) /* time_out if waiting longer than 5 msec */
        {
            alt_printf("time out after 5 msec while waiting free FIFO buffer"
210d0358:	10d0c400 	call	210d0c40 <alt_printf>
210d035c:	003ff206 	br	210d0328 <__flash_rwdata_start+0xffffea30>
    }

    /* Stop the msgdma dispatcher from issuing more descriptors to the
    read or write masters  */
    /* stop issuing more descriptors */
    control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base) | 
210d0360:	31800104 	addi	r6,r6,4
210d0364:	30800037 	ldwio	r2,0(r6)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
210d0368:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
210d036c:	00ffff84 	movi	r3,-2
210d0370:	20c6703a 	and	r3,r4,r3
210d0374:	1801703a 	wrctl	status,r3
210d0378:	10800814 	ori	r2,r2,32
	ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
    /* making sure the read-modify-write below can't be pre-empted */
    context = alt_irq_disable_all();  
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
210d037c:	30800035 	stwio	r2,0(r6)
    /*
    * Clear any (previous) status register information
    * that might occlude our error checking later.
    */
    IOWR_ALTERA_MSGDMA_CSR_STATUS(
210d0380:	88800317 	ldw	r2,12(r17)
210d0384:	10c00037 	ldwio	r3,0(r2)
210d0388:	10c00035 	stwio	r3,0(r2)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
210d038c:	2001703a 	wrctl	status,r4
210d0390:	003fe506 	br	210d0328 <__flash_rwdata_start+0xffffea30>
		* semaphore so that other threads can access the registers.
		*/
		ALT_SEM_POST (dev->regs_lock);
		
        /* operation not permitted due to descriptor type conflict */
        return -EPERM; 
210d0394:	043fffc4 	movi	r16,-1
210d0398:	003fe306 	br	210d0328 <__flash_rwdata_start+0xffffea30>

210d039c <alt_msgdma_extended_descriptor_sync_transfer>:
    alt_u32 control=0;
    alt_irq_context context=0;
    alt_u32 csr_status = 0;
    alt_u16 counter = 0;
    alt_u32 fifo_read_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
210d039c:	20c00317 	ldw	r3,12(r4)
 *           return -ETIME (Time out and skipping the looping after 5 msec)
 */
int alt_msgdma_extended_descriptor_sync_transfer(
	alt_msgdma_dev *dev,
	alt_msgdma_extended_descriptor *desc)
{
210d03a0:	defffa04 	addi	sp,sp,-24
210d03a4:	dc800215 	stw	r18,8(sp)
210d03a8:	dc000015 	stw	r16,0(sp)
210d03ac:	2825883a 	mov	r18,r5
210d03b0:	2021883a 	mov	r16,r4
    alt_u32 control=0;
    alt_irq_context context=0;
    alt_u32 csr_status = 0;
    alt_u16 counter = 0;
    alt_u32 fifo_read_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
210d03b4:	19000204 	addi	r4,r3,8
 *           return -ETIME (Time out and skipping the looping after 5 msec)
 */
int alt_msgdma_extended_descriptor_sync_transfer(
	alt_msgdma_dev *dev,
	alt_msgdma_extended_descriptor *desc)
{
210d03b8:	dfc00515 	stw	ra,20(sp)
210d03bc:	dd000415 	stw	r20,16(sp)
210d03c0:	dcc00315 	stw	r19,12(sp)
210d03c4:	dc400115 	stw	r17,4(sp)
    alt_u32 control=0;
    alt_irq_context context=0;
    alt_u32 csr_status = 0;
    alt_u16 counter = 0;
    alt_u32 fifo_read_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
210d03c8:	20800037 	ldwio	r2,0(r4)
{
    alt_u32 control=0;
    alt_irq_context context=0;
    alt_u32 csr_status = 0;
    alt_u16 counter = 0;
    alt_u32 fifo_read_fill_level = (
210d03cc:	117fffcc 	andi	r5,r2,65535
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
    alt_u32 fifo_write_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
210d03d0:	20800037 	ldwio	r2,0(r4)
    alt_u16 counter = 0;
    alt_u32 fifo_read_fill_level = (
		IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
		ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
    alt_u32 fifo_write_fill_level = (
210d03d4:	0444e244 	movi	r17,5001
210d03d8:	1004d43a 	srli	r2,r2,16
210d03dc:	00000b06 	br	210d040c <alt_msgdma_extended_descriptor_sync_transfer+0x70>
    
    /* Wait for available FIFO buffer to store new descriptor*/
    while ((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
    	(dev->descriptor_fifo_depth <= fifo_read_fill_level))
    { 
        alt_busy_sleep(1); /* delay 1us */
210d03e0:	10d06640 	call	210d0664 <alt_busy_sleep>
210d03e4:	88bfffc4 	addi	r2,r17,-1
        if(5000 <= counter) /* time_out if waiting longer than 5 msec */
210d03e8:	10ffffcc 	andi	r3,r2,65535
210d03ec:	1023883a 	mov	r17,r2
210d03f0:	18007026 	beq	r3,zero,210d05b4 <alt_msgdma_extended_descriptor_sync_transfer+0x218>
				" for storing descriptor\n");
            return -ETIME;
        }
        counter++;  
        fifo_read_fill_level = (
			IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
210d03f4:	80c00317 	ldw	r3,12(r16)
210d03f8:	19000204 	addi	r4,r3,8
210d03fc:	20800037 	ldwio	r2,0(r4)
            alt_printf("time out after 5 msec while waiting free FIFO buffer"
				" for storing descriptor\n");
            return -ETIME;
        }
        counter++;  
        fifo_read_fill_level = (
210d0400:	117fffcc 	andi	r5,r2,65535
			IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
			ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
			ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
        fifo_write_fill_level = (
			IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
210d0404:	20800037 	ldwio	r2,0(r4)
        counter++;  
        fifo_read_fill_level = (
			IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
			ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
			ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
        fifo_write_fill_level = (
210d0408:	1004d43a 	srli	r2,r2,16
                    ALTERA_MSGDMA_CSR_STOPPED_ON_EARLY_TERMINATION_MASK |
                    ALTERA_MSGDMA_CSR_STOP_STATE_MASK |
                    ALTERA_MSGDMA_CSR_RESET_STATE_MASK;
    
    /* Wait for available FIFO buffer to store new descriptor*/
    while ((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
210d040c:	81800917 	ldw	r6,36(r16)
    	(dev->descriptor_fifo_depth <= fifo_read_fill_level))
    { 
        alt_busy_sleep(1); /* delay 1us */
210d0410:	01000044 	movi	r4,1
                    ALTERA_MSGDMA_CSR_STOPPED_ON_EARLY_TERMINATION_MASK |
                    ALTERA_MSGDMA_CSR_STOP_STATE_MASK |
                    ALTERA_MSGDMA_CSR_RESET_STATE_MASK;
    
    /* Wait for available FIFO buffer to store new descriptor*/
    while ((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
210d0414:	11bff22e 	bgeu	r2,r6,210d03e0 <__flash_rwdata_start+0xffffeae8>
210d0418:	29bff12e 	bgeu	r5,r6,210d03e0 <__flash_rwdata_start+0xffffeae8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
210d041c:	0027303a 	rdctl	r19,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
210d0420:	00bfff84 	movi	r2,-2
210d0424:	9884703a 	and	r2,r19,r2
210d0428:	1001703a 	wrctl	status,r2
    
    /* Stop the msgdma dispatcher from issuing more descriptors to the
    read or write masters  */
    /* making sure the read-modify-write below can't be pre-empted */
    context = alt_irq_disable_all();
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base,
210d042c:	00800804 	movi	r2,32
210d0430:	18800135 	stwio	r2,4(r3)
        ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK);
    /*
    * Clear any (previous) status register information
    * that might occlude our error checking later.
    */
    IOWR_ALTERA_MSGDMA_CSR_STATUS(
210d0434:	80800317 	ldw	r2,12(r16)
210d0438:	10c00037 	ldwio	r3,0(r2)
210d043c:	10c00035 	stwio	r3,0(r2)
                return -ETIME;
            }
            counter++;    
        }
    }
    else if (NULL == standard_desc && NULL != extended_desc)
210d0440:	90006126 	beq	r18,zero,210d05c8 <alt_msgdma_extended_descriptor_sync_transfer+0x22c>
210d0444:	0504e244 	movi	r20,5001
    {
        counter = 0; /* reset counter */
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  	write is succeed*/
        while(0 != alt_msgdma_write_extended_descriptor (
210d0448:	80c00417 	ldw	r3,16(r16)
static int alt_msgdma_write_extended_descriptor (
	alt_u32 *csr_base, 
	alt_u32 *descriptor_base,
	alt_msgdma_extended_descriptor *descriptor)
{
    if (0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(csr_base) & 
210d044c:	80800317 	ldw	r2,12(r16)
210d0450:	14400037 	ldwio	r17,0(r2)
210d0454:	8c40010c 	andi	r17,r17,4
210d0458:	8800341e 	bne	r17,zero,210d052c <alt_msgdma_extended_descriptor_sync_transfer+0x190>
      /*at least one descriptor buffer is full, returning so that this function 
	is non-blocking*/
        return -ENOSPC;
    }

    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_ADDRESS(
210d045c:	90800017 	ldw	r2,0(r18)
210d0460:	18800035 	stwio	r2,0(r3)
		descriptor_base, 
    	(alt_u32)descriptor->read_address_low);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_ADDRESS(
210d0464:	90800117 	ldw	r2,4(r18)
210d0468:	18800135 	stwio	r2,4(r3)
		descriptor_base, 
		(alt_u32)descriptor->write_address_low);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_LENGTH(
210d046c:	90800217 	ldw	r2,8(r18)
210d0470:	18800235 	stwio	r2,8(r3)
		descriptor_base, 
    	descriptor->transfer_length);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_SEQUENCE_NUMBER(
210d0474:	9080030b 	ldhu	r2,12(r18)
210d0478:	1880032d 	sthio	r2,12(r3)
		descriptor_base, 
    	descriptor->sequence_number);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_BURST(
210d047c:	90800383 	ldbu	r2,14(r18)
210d0480:	188003a5 	stbio	r2,14(r3)
		descriptor_base, 
    	descriptor->read_burst_count);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_BURST(
210d0484:	908003c3 	ldbu	r2,15(r18)
210d0488:	188003e5 	stbio	r2,15(r3)
		descriptor_base, 
    	descriptor->write_burst_count);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_STRIDE(
210d048c:	9080040b 	ldhu	r2,16(r18)
210d0490:	1880042d 	sthio	r2,16(r3)
		descriptor_base, 
    	descriptor->read_stride);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_STRIDE(
210d0494:	9080048b 	ldhu	r2,18(r18)
210d0498:	188004ad 	sthio	r2,18(r3)
		descriptor_base, 
    	descriptor->write_stride);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_ADDRESS_HIGH(descriptor_base, 0);
210d049c:	18000535 	stwio	zero,20(r3)
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_ADDRESS_HIGH(descriptor_base, 0);
210d04a0:	18000635 	stwio	zero,24(r3)
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_CONTROL_ENHANCED(
210d04a4:	90800717 	ldw	r2,28(r18)
210d04a8:	18800735 	stwio	r2,28(r3)
    * Set up msgdma controller to:
    * - Disable interrupt generation
    * - Run once a valid descriptor is written to controller
    * - Stop on an error with any particular descriptor
    */
     IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base,
210d04ac:	81000d17 	ldw	r4,52(r16)
210d04b0:	80800317 	ldw	r2,12(r16)
210d04b4:	00fff2c4 	movi	r3,-53
210d04b8:	20c6703a 	and	r3,r4,r3
210d04bc:	18c00114 	ori	r3,r3,4
210d04c0:	10c00135 	stwio	r3,4(r2)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
210d04c4:	9801703a 	wrctl	status,r19
	 
	alt_irq_enable_all(context);
     
    counter = 0; /* reset counter */ 
	
	csr_status = IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base);
210d04c8:	80c00317 	ldw	r3,12(r16)
210d04cc:	18800037 	ldwio	r2,0(r3)
	
    /* Wait for any pending transfers to complete or checking any errors or 
    conditions causing descriptor to stop dispatching */
    while (!(csr_status & error) && (csr_status & ALTERA_MSGDMA_CSR_BUSY_MASK))
210d04d0:	1100780c 	andi	r4,r2,480
210d04d4:	2000201e 	bne	r4,zero,210d0558 <alt_msgdma_extended_descriptor_sync_transfer+0x1bc>
210d04d8:	1080004c 	andi	r2,r2,1
210d04dc:	10002826 	beq	r2,zero,210d0580 <alt_msgdma_extended_descriptor_sync_transfer+0x1e4>
    {
        alt_busy_sleep(1); /* delay 1us */
210d04e0:	01000044 	movi	r4,1
210d04e4:	10d06640 	call	210d0664 <alt_busy_sleep>
210d04e8:	0484e204 	movi	r18,5000
			ALT_SEM_POST (dev->regs_lock);
			
            return -ETIME;
        }
        counter++;
        csr_status = IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base);
210d04ec:	80c00317 	ldw	r3,12(r16)
210d04f0:	18800037 	ldwio	r2,0(r3)
	
    /* Wait for any pending transfers to complete or checking any errors or 
    conditions causing descriptor to stop dispatching */
    while (!(csr_status & error) && (csr_status & ALTERA_MSGDMA_CSR_BUSY_MASK))
    {
        alt_busy_sleep(1); /* delay 1us */
210d04f4:	01000044 	movi	r4,1
	
	csr_status = IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base);
	
    /* Wait for any pending transfers to complete or checking any errors or 
    conditions causing descriptor to stop dispatching */
    while (!(csr_status & error) && (csr_status & ALTERA_MSGDMA_CSR_BUSY_MASK))
210d04f8:	1140780c 	andi	r5,r2,480
210d04fc:	1104703a 	and	r2,r2,r4
210d0500:	2800151e 	bne	r5,zero,210d0558 <alt_msgdma_extended_descriptor_sync_transfer+0x1bc>
210d0504:	10001e26 	beq	r2,zero,210d0580 <alt_msgdma_extended_descriptor_sync_transfer+0x1e4>
    {
        alt_busy_sleep(1); /* delay 1us */
210d0508:	10d06640 	call	210d0664 <alt_busy_sleep>
210d050c:	94bfffc4 	addi	r18,r18,-1
        if(5000 <= counter) /* time_out if waiting longer than 5 msec */
210d0510:	90bfffcc 	andi	r2,r18,65535
210d0514:	103ff51e 	bne	r2,zero,210d04ec <__flash_rwdata_start+0xffffebf4>
        {
            alt_printf("time out after 5 msec while waiting for any pending" 
210d0518:	01040034 	movhi	r4,4096
210d051c:	21018004 	addi	r4,r4,1536
			* Now that access to the registers is complete, release the registers
			* semaphore so that other threads can access the registers.
			*/
			ALT_SEM_POST (dev->regs_lock);
			
            return -ETIME;
210d0520:	047ff084 	movi	r17,-62
    while (!(csr_status & error) && (csr_status & ALTERA_MSGDMA_CSR_BUSY_MASK))
    {
        alt_busy_sleep(1); /* delay 1us */
        if(5000 <= counter) /* time_out if waiting longer than 5 msec */
        {
            alt_printf("time out after 5 msec while waiting for any pending" 
210d0524:	10d0c400 	call	210d0c40 <alt_printf>
210d0528:	00000c06 	br	210d055c <alt_msgdma_extended_descriptor_sync_transfer+0x1c0>
        /*writing descriptor structure to the dispatcher, wait until descriptor 
	  	write is succeed*/
        while(0 != alt_msgdma_write_extended_descriptor (
			dev->csr_base, dev->descriptor_base, extended_desc))
        {
            alt_busy_sleep(1); /* delay 1us */
210d052c:	01000044 	movi	r4,1
210d0530:	10d06640 	call	210d0664 <alt_busy_sleep>
210d0534:	a0bfffc4 	addi	r2,r20,-1
            if(5000 <= counter) /* time_out if waiting longer than 5 msec */
210d0538:	10ffffcc 	andi	r3,r2,65535
210d053c:	1029883a 	mov	r20,r2
210d0540:	183fc11e 	bne	r3,zero,210d0448 <__flash_rwdata_start+0xffffeb50>
            {
                alt_printf("time out after 5 msec while writing extended" 
210d0544:	01040034 	movhi	r4,4096
210d0548:	21019204 	addi	r4,r4,1608
				* registers semaphore so that other threads can access the 
				* registers.
				*/
				ALT_SEM_POST (dev->regs_lock);
				
                return -ETIME;
210d054c:	047ff084 	movi	r17,-62
			dev->csr_base, dev->descriptor_base, extended_desc))
        {
            alt_busy_sleep(1); /* delay 1us */
            if(5000 <= counter) /* time_out if waiting longer than 5 msec */
            {
                alt_printf("time out after 5 msec while writing extended" 
210d0550:	10d0c400 	call	210d0c40 <alt_printf>
210d0554:	00000106 	br	210d055c <alt_msgdma_extended_descriptor_sync_transfer+0x1c0>
		* Now that access to the registers is complete, release the registers
		* semaphore so that other threads can access the registers.
		*/
		ALT_SEM_POST (dev->regs_lock);
		
        return error;
210d0558:	04407804 	movi	r17,480
int alt_msgdma_extended_descriptor_sync_transfer(
	alt_msgdma_dev *dev,
	alt_msgdma_extended_descriptor *desc)
{
    return alt_msgdma_descriptor_sync_transfer(dev, NULL, desc);
}
210d055c:	8805883a 	mov	r2,r17
210d0560:	dfc00517 	ldw	ra,20(sp)
210d0564:	dd000417 	ldw	r20,16(sp)
210d0568:	dcc00317 	ldw	r19,12(sp)
210d056c:	dc800217 	ldw	r18,8(sp)
210d0570:	dc400117 	ldw	r17,4(sp)
210d0574:	dc000017 	ldw	r16,0(sp)
210d0578:	dec00604 	addi	sp,sp,24
210d057c:	f800283a 	ret
    }

    /* Stop the msgdma dispatcher from issuing more descriptors to the
    read or write masters  */
    /* stop issuing more descriptors */
    control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base) | 
210d0580:	18c00104 	addi	r3,r3,4
210d0584:	18800037 	ldwio	r2,0(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
210d0588:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
210d058c:	013fff84 	movi	r4,-2
210d0590:	2908703a 	and	r4,r5,r4
210d0594:	2001703a 	wrctl	status,r4
210d0598:	10800814 	ori	r2,r2,32
	ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
    /* making sure the read-modify-write below can't be pre-empted */
    context = alt_irq_disable_all();  
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
210d059c:	18800035 	stwio	r2,0(r3)
    /*
    * Clear any (previous) status register information
    * that might occlude our error checking later.
    */
    IOWR_ALTERA_MSGDMA_CSR_STATUS(
210d05a0:	80800317 	ldw	r2,12(r16)
210d05a4:	10c00037 	ldwio	r3,0(r2)
210d05a8:	10c00035 	stwio	r3,0(r2)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
210d05ac:	2801703a 	wrctl	status,r5
210d05b0:	003fea06 	br	210d055c <__flash_rwdata_start+0xffffec64>
    	(dev->descriptor_fifo_depth <= fifo_read_fill_level))
    { 
        alt_busy_sleep(1); /* delay 1us */
        if(5000 <= counter) /* time_out if waiting longer than 5 msec */
        {
            alt_printf("time out after 5 msec while waiting free FIFO buffer"
210d05b4:	01040034 	movhi	r4,4096
210d05b8:	21015b04 	addi	r4,r4,1388
				" for storing descriptor\n");
            return -ETIME;
210d05bc:	047ff084 	movi	r17,-62
    	(dev->descriptor_fifo_depth <= fifo_read_fill_level))
    { 
        alt_busy_sleep(1); /* delay 1us */
        if(5000 <= counter) /* time_out if waiting longer than 5 msec */
        {
            alt_printf("time out after 5 msec while waiting free FIFO buffer"
210d05c0:	10d0c400 	call	210d0c40 <alt_printf>
210d05c4:	003fe506 	br	210d055c <__flash_rwdata_start+0xffffec64>
		* semaphore so that other threads can access the registers.
		*/
		ALT_SEM_POST (dev->regs_lock);
		
        /* operation not permitted due to descriptor type conflict */
        return -EPERM; 
210d05c8:	047fffc4 	movi	r17,-1
210d05cc:	003fe306 	br	210d055c <__flash_rwdata_start+0xffffec64>

210d05d0 <alt_alarm_start>:
                     void* context)
{
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  
  if (alt_ticks_per_second ())
210d05d0:	00840034 	movhi	r2,4096
210d05d4:	10894404 	addi	r2,r2,9488
210d05d8:	10800017 	ldw	r2,0(r2)
210d05dc:	10001d26 	beq	r2,zero,210d0654 <alt_alarm_start+0x84>
  {
    if (alarm)
210d05e0:	20001e26 	beq	r4,zero,210d065c <alt_alarm_start+0x8c>
    {
      alarm->callback = callback;
210d05e4:	21800315 	stw	r6,12(r4)
      alarm->context  = context;
210d05e8:	21c00515 	stw	r7,20(r4)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
210d05ec:	0007303a 	rdctl	r3,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
210d05f0:	00bfff84 	movi	r2,-2
210d05f4:	1884703a 	and	r2,r3,r2
210d05f8:	1001703a 	wrctl	status,r2
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
210d05fc:	00840034 	movhi	r2,4096
210d0600:	10894304 	addi	r2,r2,9484
210d0604:	10800017 	ldw	r2,0(r2)
210d0608:	11800044 	addi	r6,r2,1
 
      irq_context = alt_irq_disable_all ();
      
      current_nticks = alt_nticks();
      
      alarm->time = nticks + current_nticks + 1; 
210d060c:	314b883a 	add	r5,r6,r5
210d0610:	21400215 	stw	r5,8(r4)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
210d0614:	28800c36 	bltu	r5,r2,210d0648 <alt_alarm_start+0x78>
      {
        alarm->rollover = 1;
      }
      else
      {
        alarm->rollover = 0;
210d0618:	20000405 	stb	zero,16(r4)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
210d061c:	00840034 	movhi	r2,4096
210d0620:	10893404 	addi	r2,r2,9424
  entry->next     = list->next;
210d0624:	11400017 	ldw	r5,0(r2)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
210d0628:	20800115 	stw	r2,4(r4)
  entry->next     = list->next;
210d062c:	21400015 	stw	r5,0(r4)

  list->next->previous = entry;
210d0630:	11400017 	ldw	r5,0(r2)
  list->next           = entry;
210d0634:	11000015 	stw	r4,0(r2)
                alt_llist* entry)
{
  entry->previous = list;
  entry->next     = list->next;

  list->next->previous = entry;
210d0638:	29000115 	stw	r4,4(r5)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
210d063c:	1801703a 	wrctl	status,r3
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
      alt_irq_enable_all (irq_context);

      return 0;
210d0640:	0005883a 	mov	r2,zero
210d0644:	f800283a 	ret
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
      {
        alarm->rollover = 1;
210d0648:	00800044 	movi	r2,1
210d064c:	20800405 	stb	r2,16(r4)
210d0650:	003ff206 	br	210d061c <__flash_rwdata_start+0xffffed24>
      return -EINVAL;
    }
  }
  else
  {
    return -ENOTSUP;
210d0654:	00bfde84 	movi	r2,-134
210d0658:	f800283a 	ret

      return 0;
    }
    else
    {
      return -EINVAL;
210d065c:	00bffa84 	movi	r2,-22
  }
  else
  {
    return -ENOTSUP;
  }
}
210d0660:	f800283a 	ret

210d0664 <alt_busy_sleep>:
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
210d0664:	00c0c7f4 	movhi	r3,799
210d0668:	18ce0c44 	addi	r3,r3,14385
210d066c:	20c7203a 	divu	r3,r4,r3
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
210d0670:	18000f26 	beq	r3,zero,210d06b0 <alt_busy_sleep+0x4c>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
210d0674:	01a00034 	movhi	r6,32768
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
210d0678:	017f3874 	movhi	r5,64737
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
210d067c:	31bfffc4 	addi	r6,r6,-1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
210d0680:	2971f3c4 	addi	r5,r5,-14385
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
210d0684:	0005883a 	mov	r2,zero
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
210d0688:	31bfffc4 	addi	r6,r6,-1
210d068c:	303ffe1e 	bne	r6,zero,210d0688 <__flash_rwdata_start+0xffffed90>
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
210d0690:	10800044 	addi	r2,r2,1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
210d0694:	2149883a 	add	r4,r4,r5
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
210d0698:	10fffb16 	blt	r2,r3,210d0688 <__flash_rwdata_start+0xffffed90>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
210d069c:	21000a64 	muli	r4,r4,41
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
210d06a0:	213fffc4 	addi	r4,r4,-1
210d06a4:	203ffe1e 	bne	r4,zero,210d06a0 <__flash_rwdata_start+0xffffeda8>
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
}
210d06a8:	0005883a 	mov	r2,zero
210d06ac:	f800283a 	ret
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
210d06b0:	21000a64 	muli	r4,r4,41
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
210d06b4:	213fffc4 	addi	r4,r4,-1
210d06b8:	013ffe16 	blt	zero,r4,210d06b4 <__flash_rwdata_start+0xffffedbc>
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
}
210d06bc:	0005883a 	mov	r2,zero
210d06c0:	f800283a 	ret

210d06c4 <alt_dev_llist_insert>:
{
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
210d06c4:	20000a26 	beq	r4,zero,210d06f0 <alt_dev_llist_insert+0x2c>
210d06c8:	20800217 	ldw	r2,8(r4)
210d06cc:	10000826 	beq	r2,zero,210d06f0 <alt_dev_llist_insert+0x2c>

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  entry->next     = list->next;
210d06d0:	28c00017 	ldw	r3,0(r5)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
210d06d4:	21400115 	stw	r5,4(r4)
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
210d06d8:	0005883a 	mov	r2,zero
  entry->next     = list->next;
210d06dc:	20c00015 	stw	r3,0(r4)

  list->next->previous = entry;
210d06e0:	28c00017 	ldw	r3,0(r5)
210d06e4:	19000115 	stw	r4,4(r3)
  list->next           = entry;
210d06e8:	29000015 	stw	r4,0(r5)
210d06ec:	f800283a 	ret
210d06f0:	00840034 	movhi	r2,4096
210d06f4:	10892d04 	addi	r2,r2,9396
210d06f8:	10800017 	ldw	r2,0(r2)
210d06fc:	10000926 	beq	r2,zero,210d0724 <alt_dev_llist_insert+0x60>
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
210d0700:	deffff04 	addi	sp,sp,-4
210d0704:	dfc00015 	stw	ra,0(sp)
210d0708:	103ee83a 	callr	r2
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  {
    ALT_ERRNO = EINVAL;
210d070c:	00c00584 	movi	r3,22
210d0710:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
210d0714:	00bffa84 	movi	r2,-22
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
210d0718:	dfc00017 	ldw	ra,0(sp)
210d071c:	dec00104 	addi	sp,sp,4
210d0720:	f800283a 	ret
210d0724:	00840034 	movhi	r2,4096
210d0728:	10893b04 	addi	r2,r2,9452
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  {
    ALT_ERRNO = EINVAL;
210d072c:	00c00584 	movi	r3,22
210d0730:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
210d0734:	00bffa84 	movi	r2,-22
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
210d0738:	f800283a 	ret

210d073c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
210d073c:	defffc04 	addi	sp,sp,-16
210d0740:	dc800215 	stw	r18,8(sp)
210d0744:	dc000015 	stw	r16,0(sp)
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
210d0748:	04884374 	movhi	r18,8461
210d074c:	04084374 	movhi	r16,8461
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
210d0750:	dfc00315 	stw	ra,12(sp)
210d0754:	dc400115 	stw	r17,4(sp)
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
210d0758:	84049a04 	addi	r16,r16,4712
210d075c:	94849b04 	addi	r18,r18,4716
210d0760:	84800936 	bltu	r16,r18,210d0788 <_do_ctors+0x4c>
210d0764:	84a5c83a 	sub	r18,r16,r18
210d0768:	9024d0ba 	srli	r18,r18,2
210d076c:	0023883a 	mov	r17,zero
210d0770:	94800044 	addi	r18,r18,1
        (*ctor) (); 
210d0774:	80800017 	ldw	r2,0(r16)
210d0778:	8c400044 	addi	r17,r17,1

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
210d077c:	843fff04 	addi	r16,r16,-4
        (*ctor) (); 
210d0780:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
210d0784:	8cbffb1e 	bne	r17,r18,210d0774 <__flash_rwdata_start+0xffffee7c>
        (*ctor) (); 
}
210d0788:	dfc00317 	ldw	ra,12(sp)
210d078c:	dc800217 	ldw	r18,8(sp)
210d0790:	dc400117 	ldw	r17,4(sp)
210d0794:	dc000017 	ldw	r16,0(sp)
210d0798:	dec00404 	addi	sp,sp,16
210d079c:	f800283a 	ret

210d07a0 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
210d07a0:	defffc04 	addi	sp,sp,-16
210d07a4:	dc800215 	stw	r18,8(sp)
210d07a8:	dc000015 	stw	r16,0(sp)
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
210d07ac:	04884374 	movhi	r18,8461
210d07b0:	04084374 	movhi	r16,8461
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
210d07b4:	dfc00315 	stw	ra,12(sp)
210d07b8:	dc400115 	stw	r17,4(sp)
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
210d07bc:	84049a04 	addi	r16,r16,4712
210d07c0:	94849b04 	addi	r18,r18,4716
210d07c4:	84800936 	bltu	r16,r18,210d07ec <_do_dtors+0x4c>
210d07c8:	84a5c83a 	sub	r18,r16,r18
210d07cc:	9024d0ba 	srli	r18,r18,2
210d07d0:	0023883a 	mov	r17,zero
210d07d4:	94800044 	addi	r18,r18,1
        (*dtor) (); 
210d07d8:	80800017 	ldw	r2,0(r16)
210d07dc:	8c400044 	addi	r17,r17,1

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
210d07e0:	843fff04 	addi	r16,r16,-4
        (*dtor) (); 
210d07e4:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
210d07e8:	8cbffb1e 	bne	r17,r18,210d07d8 <__flash_rwdata_start+0xffffeee0>
        (*dtor) (); 
}
210d07ec:	dfc00317 	ldw	ra,12(sp)
210d07f0:	dc800217 	ldw	r18,8(sp)
210d07f4:	dc400117 	ldw	r17,4(sp)
210d07f8:	dc000017 	ldw	r16,0(sp)
210d07fc:	dec00404 	addi	sp,sp,16
210d0800:	f800283a 	ret

210d0804 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
210d0804:	defffb04 	addi	sp,sp,-20
210d0808:	dc000015 	stw	r16,0(sp)
  alt_dev* next = (alt_dev*) llist->next;
210d080c:	2c000017 	ldw	r16,0(r5)
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
210d0810:	dcc00315 	stw	r19,12(sp)
210d0814:	dc800215 	stw	r18,8(sp)
210d0818:	dc400115 	stw	r17,4(sp)
210d081c:	dfc00415 	stw	ra,16(sp)
210d0820:	2823883a 	mov	r17,r5
210d0824:	2027883a 	mov	r19,r4
  alt_dev* next = (alt_dev*) llist->next;
  alt_32 len;

  len  = strlen(name) + 1;
210d0828:	10c23680 	call	210c2368 <strlen>
210d082c:	14800044 	addi	r18,r2,1
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
210d0830:	8c00031e 	bne	r17,r16,210d0840 <alt_find_dev+0x3c>
210d0834:	00000906 	br	210d085c <alt_find_dev+0x58>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
210d0838:	84000017 	ldw	r16,0(r16)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
210d083c:	8c000726 	beq	r17,r16,210d085c <alt_find_dev+0x58>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
210d0840:	81000217 	ldw	r4,8(r16)
210d0844:	980b883a 	mov	r5,r19
210d0848:	900d883a 	mov	r6,r18
210d084c:	10d10dc0 	call	210d10dc <memcmp>
210d0850:	103ff91e 	bne	r2,zero,210d0838 <__flash_rwdata_start+0xffffef40>
    {
      /* match found */

      return next;
210d0854:	8005883a 	mov	r2,r16
210d0858:	00000106 	br	210d0860 <alt_find_dev+0x5c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
210d085c:	0005883a 	mov	r2,zero
}
210d0860:	dfc00417 	ldw	ra,16(sp)
210d0864:	dcc00317 	ldw	r19,12(sp)
210d0868:	dc800217 	ldw	r18,8(sp)
210d086c:	dc400117 	ldw	r17,4(sp)
210d0870:	dc000017 	ldw	r16,0(sp)
210d0874:	dec00504 	addi	sp,sp,20
210d0878:	f800283a 	ret

210d087c <alt_icache_flush_all>:
 */

void alt_icache_flush_all (void)
{
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
210d087c:	0009883a 	mov	r4,zero
210d0880:	01440004 	movi	r5,4096
210d0884:	10d10041 	jmpi	210d1004 <alt_icache_flush>

210d0888 <alt_ic_isr_register>:
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
210d0888:	10d09241 	jmpi	210d0924 <alt_iic_isr_register>

210d088c <alt_ic_irq_enable>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
210d088c:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
210d0890:	00bfff84 	movi	r2,-2
210d0894:	2084703a 	and	r2,r4,r2
210d0898:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active |= (1 << id);
210d089c:	00840034 	movhi	r2,4096
210d08a0:	10894204 	addi	r2,r2,9480
210d08a4:	00c00044 	movi	r3,1
210d08a8:	194a983a 	sll	r5,r3,r5
210d08ac:	10c00017 	ldw	r3,0(r2)
210d08b0:	28cab03a 	or	r5,r5,r3
210d08b4:	11400015 	stw	r5,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
210d08b8:	10800017 	ldw	r2,0(r2)
210d08bc:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
210d08c0:	2001703a 	wrctl	status,r4
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_enable(irq);
}
210d08c4:	0005883a 	mov	r2,zero
210d08c8:	f800283a 	ret

210d08cc <alt_ic_irq_disable>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
210d08cc:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
210d08d0:	00bfff84 	movi	r2,-2
210d08d4:	2084703a 	and	r2,r4,r2
210d08d8:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active &= ~(1 << id);
210d08dc:	00840034 	movhi	r2,4096
210d08e0:	10894204 	addi	r2,r2,9480
210d08e4:	00ffff84 	movi	r3,-2
210d08e8:	194a183a 	rol	r5,r3,r5
210d08ec:	10c00017 	ldw	r3,0(r2)
210d08f0:	28ca703a 	and	r5,r5,r3
210d08f4:	11400015 	stw	r5,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
210d08f8:	10800017 	ldw	r2,0(r2)
210d08fc:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
210d0900:	2001703a 	wrctl	status,r4
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_disable(irq);
}
210d0904:	0005883a 	mov	r2,zero
210d0908:	f800283a 	ret

210d090c <alt_ic_irq_enabled>:
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
210d090c:	000530fa 	rdctl	r2,ienable

    return (irq_enabled & (1 << irq)) ? 1: 0;
210d0910:	00c00044 	movi	r3,1
210d0914:	194a983a 	sll	r5,r3,r5
210d0918:	1144703a 	and	r2,r2,r5
}
210d091c:	1004c03a 	cmpne	r2,r2,zero
210d0920:	f800283a 	ret

210d0924 <alt_iic_isr_register>:
{
  int rc = -EINVAL;  
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  alt_irq_context status;

  if (id < ALT_NIRQ)
210d0924:	00c007c4 	movi	r3,31
210d0928:	19401616 	blt	r3,r5,210d0984 <alt_iic_isr_register+0x60>
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
210d092c:	defffe04 	addi	sp,sp,-8
210d0930:	dfc00115 	stw	ra,4(sp)
210d0934:	dc000015 	stw	r16,0(sp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
210d0938:	0021303a 	rdctl	r16,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
210d093c:	00ffff84 	movi	r3,-2
210d0940:	80c6703a 	and	r3,r16,r3
210d0944:	1801703a 	wrctl	status,r3
     * state.
     */

    status = alt_irq_disable_all();

    alt_irq[id].handler = isr;
210d0948:	280490fa 	slli	r2,r5,3
210d094c:	00c40034 	movhi	r3,4096
210d0950:	18c95004 	addi	r3,r3,9536
210d0954:	1891883a 	add	r8,r3,r2
210d0958:	41800015 	stw	r6,0(r8)
    alt_irq[id].context = isr_context;
210d095c:	41c00115 	stw	r7,4(r8)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
210d0960:	30000626 	beq	r6,zero,210d097c <alt_iic_isr_register+0x58>
210d0964:	10d088c0 	call	210d088c <alt_ic_irq_enable>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
210d0968:	8001703a 	wrctl	status,r16

    alt_irq_enable_all(status);
  }

  return rc; 
}
210d096c:	dfc00117 	ldw	ra,4(sp)
210d0970:	dc000017 	ldw	r16,0(sp)
210d0974:	dec00204 	addi	sp,sp,8
210d0978:	f800283a 	ret
    status = alt_irq_disable_all();

    alt_irq[id].handler = isr;
    alt_irq[id].context = isr_context;

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
210d097c:	10d08cc0 	call	210d08cc <alt_ic_irq_disable>
210d0980:	003ff906 	br	210d0968 <__flash_rwdata_start+0xfffff070>
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  int rc = -EINVAL;  
210d0984:	00bffa84 	movi	r2,-22
210d0988:	f800283a 	ret

210d098c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
210d098c:	defffd04 	addi	sp,sp,-12
210d0990:	dc400115 	stw	r17,4(sp)
210d0994:	dc000015 	stw	r16,0(sp)
210d0998:	2823883a 	mov	r17,r5
210d099c:	3021883a 	mov	r16,r6

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  int old;

  old = open (name, flags, mode);
210d09a0:	01400044 	movi	r5,1
210d09a4:	01807fc4 	movi	r6,511
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
210d09a8:	dfc00215 	stw	ra,8(sp)

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  int old;

  old = open (name, flags, mode);
210d09ac:	10d0a9c0 	call	210d0a9c <open>

  if (old >= 0)
210d09b0:	10000d16 	blt	r2,zero,210d09e8 <alt_io_redirect+0x5c>
  {
    fd->dev      = alt_fd_list[old].dev;
210d09b4:	11c00324 	muli	r7,r2,12
210d09b8:	00c40034 	movhi	r3,4096
210d09bc:	18c44c04 	addi	r3,r3,4400
210d09c0:	19cb883a 	add	r5,r3,r7
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;

    alt_release_fd (old);
210d09c4:	1009883a 	mov	r4,r2
  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
    fd->priv     = alt_fd_list[old].priv;
210d09c8:	2805883a 	mov	r2,r5

  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
210d09cc:	29800017 	ldw	r6,0(r5)
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;
210d09d0:	10800217 	ldw	r2,8(r2)
  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
    fd->priv     = alt_fd_list[old].priv;
210d09d4:	29400117 	ldw	r5,4(r5)

  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
210d09d8:	19800315 	stw	r6,12(r3)
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;
210d09dc:	18800515 	stw	r2,20(r3)
  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
    fd->priv     = alt_fd_list[old].priv;
210d09e0:	19400415 	stw	r5,16(r3)
    fd->fd_flags = alt_fd_list[old].fd_flags;

    alt_release_fd (old);
210d09e4:	10ce5cc0 	call	210ce5cc <alt_release_fd>

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  int old;

  old = open (name, flags, mode);
210d09e8:	8809883a 	mov	r4,r17
210d09ec:	000b883a 	mov	r5,zero
210d09f0:	01807fc4 	movi	r6,511
210d09f4:	10d0a9c0 	call	210d0a9c <open>

  if (old >= 0)
210d09f8:	10000d16 	blt	r2,zero,210d0a30 <alt_io_redirect+0xa4>
  {
    fd->dev      = alt_fd_list[old].dev;
210d09fc:	11400324 	muli	r5,r2,12
210d0a00:	00c40034 	movhi	r3,4096
210d0a04:	18c44c04 	addi	r3,r3,4400
210d0a08:	194d883a 	add	r6,r3,r5
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;

    alt_release_fd (old);
210d0a0c:	1009883a 	mov	r4,r2
  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
    fd->priv     = alt_fd_list[old].priv;
210d0a10:	3005883a 	mov	r2,r6

  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
210d0a14:	31c00017 	ldw	r7,0(r6)
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;
210d0a18:	10800217 	ldw	r2,8(r2)
  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
    fd->priv     = alt_fd_list[old].priv;
210d0a1c:	31800117 	ldw	r6,4(r6)

  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
210d0a20:	19c00015 	stw	r7,0(r3)
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;
210d0a24:	18800215 	stw	r2,8(r3)
  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
    fd->priv     = alt_fd_list[old].priv;
210d0a28:	19800115 	stw	r6,4(r3)
    fd->fd_flags = alt_fd_list[old].fd_flags;

    alt_release_fd (old);
210d0a2c:	10ce5cc0 	call	210ce5cc <alt_release_fd>

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  int old;

  old = open (name, flags, mode);
210d0a30:	8009883a 	mov	r4,r16
210d0a34:	01400044 	movi	r5,1
210d0a38:	01807fc4 	movi	r6,511
210d0a3c:	10d0a9c0 	call	210d0a9c <open>

  if (old >= 0)
210d0a40:	10001116 	blt	r2,zero,210d0a88 <alt_io_redirect+0xfc>
  {
    fd->dev      = alt_fd_list[old].dev;
210d0a44:	11400324 	muli	r5,r2,12
210d0a48:	00c40034 	movhi	r3,4096
210d0a4c:	18c44c04 	addi	r3,r3,4400
210d0a50:	194d883a 	add	r6,r3,r5
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;

    alt_release_fd (old);
210d0a54:	1009883a 	mov	r4,r2
  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
    fd->priv     = alt_fd_list[old].priv;
210d0a58:	3005883a 	mov	r2,r6

  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
210d0a5c:	31c00017 	ldw	r7,0(r6)
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;
210d0a60:	10800217 	ldw	r2,8(r2)
  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
    fd->priv     = alt_fd_list[old].priv;
210d0a64:	31800117 	ldw	r6,4(r6)

  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
210d0a68:	19c00615 	stw	r7,24(r3)
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;
210d0a6c:	18800815 	stw	r2,32(r3)
  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
    fd->priv     = alt_fd_list[old].priv;
210d0a70:	19800715 	stw	r6,28(r3)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
}  
210d0a74:	dfc00217 	ldw	ra,8(sp)
210d0a78:	dc400117 	ldw	r17,4(sp)
210d0a7c:	dc000017 	ldw	r16,0(sp)
210d0a80:	dec00304 	addi	sp,sp,12
  {
    fd->dev      = alt_fd_list[old].dev;
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;

    alt_release_fd (old);
210d0a84:	10ce5cc1 	jmpi	210ce5cc <alt_release_fd>
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
}  
210d0a88:	dfc00217 	ldw	ra,8(sp)
210d0a8c:	dc400117 	ldw	r17,4(sp)
210d0a90:	dc000017 	ldw	r16,0(sp)
210d0a94:	dec00304 	addi	sp,sp,12
210d0a98:	f800283a 	ret

210d0a9c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
210d0a9c:	defffa04 	addi	sp,sp,-24
210d0aa0:	dc800215 	stw	r18,8(sp)
210d0aa4:	2825883a 	mov	r18,r5
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
210d0aa8:	01440034 	movhi	r5,4096
210d0aac:	29492904 	addi	r5,r5,9380
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
210d0ab0:	dcc00315 	stw	r19,12(sp)
210d0ab4:	dc400115 	stw	r17,4(sp)
210d0ab8:	dc000015 	stw	r16,0(sp)
210d0abc:	dfc00515 	stw	ra,20(sp)
210d0ac0:	dd000415 	stw	r20,16(sp)
210d0ac4:	2023883a 	mov	r17,r4
210d0ac8:	3027883a 	mov	r19,r6
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
210d0acc:	10d08040 	call	210d0804 <alt_find_dev>
210d0ad0:	1021883a 	mov	r16,r2
210d0ad4:	10003e26 	beq	r2,zero,210d0bd0 <open+0x134>
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  {
    if ((index = alt_get_fd (dev)) < 0)
210d0ad8:	1009883a 	mov	r4,r2
210d0adc:	10d0fb40 	call	210d0fb4 <alt_get_fd>
210d0ae0:	1029883a 	mov	r20,r2
210d0ae4:	10002d16 	blt	r2,zero,210d0b9c <open+0x100>
    {
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
210d0ae8:	a1400324 	muli	r5,r20,12
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
210d0aec:	00900034 	movhi	r2,16384
    {
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
210d0af0:	00c40034 	movhi	r3,4096
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
210d0af4:	10bfffc4 	addi	r2,r2,-1
    {
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
210d0af8:	18c44c04 	addi	r3,r3,4400
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
210d0afc:	9084703a 	and	r2,r18,r2
    {
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
210d0b00:	28c9883a 	add	r4,r5,r3

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
210d0b04:	10900034 	orhi	r2,r2,16384
210d0b08:	20800215 	stw	r2,8(r4)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
210d0b0c:	00840034 	movhi	r2,4096
210d0b10:	10892804 	addi	r2,r2,9376
210d0b14:	11800017 	ldw	r6,0(r2)
210d0b18:	21400017 	ldw	r5,0(r4)
210d0b1c:	1a400204 	addi	r9,r3,8
210d0b20:	0011883a 	mov	r8,zero
210d0b24:	00000606 	br	210d0b40 <open+0xa4>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
210d0b28:	48800017 	ldw	r2,0(r9)
210d0b2c:	1000010e 	bge	r2,zero,210d0b34 <open+0x98>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
210d0b30:	20c02e1e 	bne	r4,r3,210d0bec <open+0x150>
210d0b34:	18c00304 	addi	r3,r3,12
210d0b38:	4a400304 	addi	r9,r9,12
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
210d0b3c:	32000636 	bltu	r6,r8,210d0b58 <open+0xbc>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
210d0b40:	1a800017 	ldw	r10,0(r3)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
210d0b44:	42000044 	addi	r8,r8,1
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
210d0b48:	517ff726 	beq	r10,r5,210d0b28 <__flash_rwdata_start+0xfffff230>
210d0b4c:	18c00304 	addi	r3,r3,12
210d0b50:	4a400304 	addi	r9,r9,12
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
210d0b54:	323ffa2e 	bgeu	r6,r8,210d0b40 <__flash_rwdata_start+0xfffff248>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
210d0b58:	80800317 	ldw	r2,12(r16)
210d0b5c:	10001a26 	beq	r2,zero,210d0bc8 <open+0x12c>
210d0b60:	880b883a 	mov	r5,r17
210d0b64:	900d883a 	mov	r6,r18
210d0b68:	980f883a 	mov	r7,r19
210d0b6c:	103ee83a 	callr	r2
210d0b70:	1007883a 	mov	r3,r2
210d0b74:	a005883a 	mov	r2,r20
    status = -ENODEV;
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
210d0b78:	18002116 	blt	r3,zero,210d0c00 <open+0x164>
  }
  
  /* return the reference upon success */

  return index;
}
210d0b7c:	dfc00517 	ldw	ra,20(sp)
210d0b80:	dd000417 	ldw	r20,16(sp)
210d0b84:	dcc00317 	ldw	r19,12(sp)
210d0b88:	dc800217 	ldw	r18,8(sp)
210d0b8c:	dc400117 	ldw	r17,4(sp)
210d0b90:	dc000017 	ldw	r16,0(sp)
210d0b94:	dec00604 	addi	sp,sp,24
210d0b98:	f800283a 	ret
210d0b9c:	0521c83a 	sub	r16,zero,r20

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  {
    alt_release_fd (index);  
210d0ba0:	a009883a 	mov	r4,r20
210d0ba4:	10ce5cc0 	call	210ce5cc <alt_release_fd>
210d0ba8:	00840034 	movhi	r2,4096
210d0bac:	10892d04 	addi	r2,r2,9396
210d0bb0:	10800017 	ldw	r2,0(r2)
210d0bb4:	10000f26 	beq	r2,zero,210d0bf4 <open+0x158>
210d0bb8:	103ee83a 	callr	r2
    ALT_ERRNO = -status;
210d0bbc:	14000015 	stw	r16,0(r2)
    return -1;
210d0bc0:	00bfffc4 	movi	r2,-1
210d0bc4:	003fed06 	br	210d0b7c <__flash_rwdata_start+0xfffff284>
210d0bc8:	a005883a 	mov	r2,r20
210d0bcc:	003feb06 	br	210d0b7c <__flash_rwdata_start+0xfffff284>
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
210d0bd0:	8809883a 	mov	r4,r17
210d0bd4:	10d0f040 	call	210d0f04 <alt_find_file>
210d0bd8:	1021883a 	mov	r16,r2

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
210d0bdc:	10000a1e 	bne	r2,zero,210d0c08 <open+0x16c>
210d0be0:	040004c4 	movi	r16,19
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
210d0be4:	053fffc4 	movi	r20,-1
210d0be8:	003fed06 	br	210d0ba0 <__flash_rwdata_start+0xfffff2a8>
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
210d0bec:	04000344 	movi	r16,13
210d0bf0:	003feb06 	br	210d0ba0 <__flash_rwdata_start+0xfffff2a8>
210d0bf4:	00840034 	movhi	r2,4096
210d0bf8:	10893b04 	addi	r2,r2,9452
210d0bfc:	003fef06 	br	210d0bbc <__flash_rwdata_start+0xfffff2c4>
210d0c00:	00e1c83a 	sub	r16,zero,r3
210d0c04:	003fe606 	br	210d0ba0 <__flash_rwdata_start+0xfffff2a8>
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  {
    if ((index = alt_get_fd (dev)) < 0)
210d0c08:	1009883a 	mov	r4,r2
210d0c0c:	10d0fb40 	call	210d0fb4 <alt_get_fd>
210d0c10:	1029883a 	mov	r20,r2
210d0c14:	103fe116 	blt	r2,zero,210d0b9c <__flash_rwdata_start+0xfffff2a4>
    {
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
210d0c18:	a1000324 	muli	r4,r20,12
210d0c1c:	00840034 	movhi	r2,4096
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
210d0c20:	00d00034 	movhi	r3,16384
    {
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
210d0c24:	10844c04 	addi	r2,r2,4400
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
210d0c28:	18ffffc4 	addi	r3,r3,-1
210d0c2c:	110b883a 	add	r5,r2,r4
210d0c30:	90c6703a 	and	r3,r18,r3
    {
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
210d0c34:	2809883a 	mov	r4,r5
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
210d0c38:	28c00215 	stw	r3,8(r5)
210d0c3c:	003fc606 	br	210d0b58 <__flash_rwdata_start+0xfffff260>

210d0c40 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
210d0c40:	defff304 	addi	sp,sp,-52
210d0c44:	dfc00915 	stw	ra,36(sp)
210d0c48:	df000815 	stw	fp,32(sp)
210d0c4c:	ddc00715 	stw	r23,28(sp)
210d0c50:	dd800615 	stw	r22,24(sp)
210d0c54:	dd400515 	stw	r21,20(sp)
210d0c58:	dd000415 	stw	r20,16(sp)
210d0c5c:	dcc00315 	stw	r19,12(sp)
210d0c60:	dc800215 	stw	r18,8(sp)
210d0c64:	dc400115 	stw	r17,4(sp)
210d0c68:	dc000015 	stw	r16,0(sp)
210d0c6c:	d9400a15 	stw	r5,40(sp)
210d0c70:	d9800b15 	stw	r6,44(sp)
210d0c74:	d9c00c15 	stw	r7,48(sp)
    w = fmt;
    while ((c = *w++) != 0)
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
210d0c78:	04400944 	movi	r17,37
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
210d0c7c:	2021883a 	mov	r16,r4
	va_list args;
	va_start(args, fmt);
210d0c80:	dcc00a04 	addi	r19,sp,40
                if (c == '%')
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
210d0c84:	054018c4 	movi	r21,99
                {
                    int v = va_arg(args, int);
                    alt_putchar(v);
                }
                else if (c == 'x')
210d0c88:	05801e04 	movi	r22,120
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
210d0c8c:	048003c4 	movi	r18,15
                        if (digit <= 9)
210d0c90:	05000244 	movi	r20,9
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
210d0c94:	81000007 	ldb	r4,0(r16)
210d0c98:	20000526 	beq	r4,zero,210d0cb0 <alt_printf+0x70>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
210d0c9c:	24401026 	beq	r4,r17,210d0ce0 <alt_printf+0xa0>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
210d0ca0:	84000044 	addi	r16,r16,1
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
        {
            alt_putchar(c);
210d0ca4:	10d0dbc0 	call	210d0dbc <alt_putchar>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
210d0ca8:	81000007 	ldb	r4,0(r16)
210d0cac:	203ffb1e 	bne	r4,zero,210d0c9c <__flash_rwdata_start+0xfffff3a4>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
210d0cb0:	dfc00917 	ldw	ra,36(sp)
210d0cb4:	df000817 	ldw	fp,32(sp)
210d0cb8:	ddc00717 	ldw	r23,28(sp)
210d0cbc:	dd800617 	ldw	r22,24(sp)
210d0cc0:	dd400517 	ldw	r21,20(sp)
210d0cc4:	dd000417 	ldw	r20,16(sp)
210d0cc8:	dcc00317 	ldw	r19,12(sp)
210d0ccc:	dc800217 	ldw	r18,8(sp)
210d0cd0:	dc400117 	ldw	r17,4(sp)
210d0cd4:	dc000017 	ldw	r16,0(sp)
210d0cd8:	dec00d04 	addi	sp,sp,52
210d0cdc:	f800283a 	ret
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
210d0ce0:	80800047 	ldb	r2,1(r16)
210d0ce4:	84000084 	addi	r16,r16,2
210d0ce8:	103ff126 	beq	r2,zero,210d0cb0 <__flash_rwdata_start+0xfffff3b8>
            {
                if (c == '%')
210d0cec:	14402926 	beq	r2,r17,210d0d94 <alt_printf+0x154>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
210d0cf0:	15402b26 	beq	r2,r21,210d0da0 <alt_printf+0x160>
                {
                    int v = va_arg(args, int);
                    alt_putchar(v);
                }
                else if (c == 'x')
210d0cf4:	15800b26 	beq	r2,r22,210d0d24 <alt_printf+0xe4>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
210d0cf8:	00c01cc4 	movi	r3,115
210d0cfc:	10ffe51e 	bne	r2,r3,210d0c94 <__flash_rwdata_start+0xfffff39c>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
210d0d00:	9f000017 	ldw	fp,0(r19)
210d0d04:	9cc00104 	addi	r19,r19,4

                    while(*s)
210d0d08:	e1000007 	ldb	r4,0(fp)
210d0d0c:	203fe126 	beq	r4,zero,210d0c94 <__flash_rwdata_start+0xfffff39c>
                      alt_putchar(*s++);
210d0d10:	e7000044 	addi	fp,fp,1
210d0d14:	10d0dbc0 	call	210d0dbc <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
210d0d18:	e1000007 	ldb	r4,0(fp)
210d0d1c:	203ffc1e 	bne	r4,zero,210d0d10 <__flash_rwdata_start+0xfffff418>
210d0d20:	003fdc06 	br	210d0c94 <__flash_rwdata_start+0xfffff39c>
                    alt_putchar(v);
                }
                else if (c == 'x')
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
210d0d24:	9dc00017 	ldw	r23,0(r19)
210d0d28:	9cc00104 	addi	r19,r19,4
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
210d0d2c:	b8002026 	beq	r23,zero,210d0db0 <alt_printf+0x170>
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
210d0d30:	b8bc002c 	andhi	r2,r23,61440
210d0d34:	07000704 	movi	fp,28
210d0d38:	1000101e 	bne	r2,zero,210d0d7c <alt_printf+0x13c>
                        digit_shift -= 4;
210d0d3c:	e73fff04 	addi	fp,fp,-4
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
210d0d40:	9704983a 	sll	r2,r18,fp
210d0d44:	15c4703a 	and	r2,r2,r23
210d0d48:	103ffc26 	beq	r2,zero,210d0d3c <__flash_rwdata_start+0xfffff444>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
210d0d4c:	e03fd116 	blt	fp,zero,210d0c94 <__flash_rwdata_start+0xfffff39c>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
210d0d50:	9704983a 	sll	r2,r18,fp
210d0d54:	15c4703a 	and	r2,r2,r23
210d0d58:	1704d83a 	srl	r2,r2,fp
                        if (digit <= 9)
210d0d5c:	a0800b36 	bltu	r20,r2,210d0d8c <alt_printf+0x14c>
                            c = '0' + digit;
210d0d60:	11000c04 	addi	r4,r2,48
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
210d0d64:	21003fcc 	andi	r4,r4,255
210d0d68:	2100201c 	xori	r4,r4,128
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
210d0d6c:	e73fff04 	addi	fp,fp,-4
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
                        if (digit <= 9)
                            c = '0' + digit;
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
210d0d70:	213fe004 	addi	r4,r4,-128
210d0d74:	10d0dbc0 	call	210d0dbc <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
210d0d78:	e03fc616 	blt	fp,zero,210d0c94 <__flash_rwdata_start+0xfffff39c>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
210d0d7c:	9704983a 	sll	r2,r18,fp
210d0d80:	15c4703a 	and	r2,r2,r23
210d0d84:	1704d83a 	srl	r2,r2,fp
                        if (digit <= 9)
210d0d88:	a0bff52e 	bgeu	r20,r2,210d0d60 <__flash_rwdata_start+0xfffff468>
                            c = '0' + digit;
                        else
                            c = 'a' + digit - 10;
210d0d8c:	110015c4 	addi	r4,r2,87
210d0d90:	003ff406 	br	210d0d64 <__flash_rwdata_start+0xfffff46c>
            if ((c = *w++) != 0)
            {
                if (c == '%')
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
210d0d94:	8809883a 	mov	r4,r17
210d0d98:	10d0dbc0 	call	210d0dbc <alt_putchar>
210d0d9c:	003fbd06 	br	210d0c94 <__flash_rwdata_start+0xfffff39c>
                } 
                else if (c == 'c')
                {
                    int v = va_arg(args, int);
                    alt_putchar(v);
210d0da0:	99000017 	ldw	r4,0(r19)
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
                {
                    int v = va_arg(args, int);
210d0da4:	9cc00104 	addi	r19,r19,4
                    alt_putchar(v);
210d0da8:	10d0dbc0 	call	210d0dbc <alt_putchar>
210d0dac:	003fb906 	br	210d0c94 <__flash_rwdata_start+0xfffff39c>
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
                    {
                        alt_putchar('0');
210d0db0:	01000c04 	movi	r4,48
210d0db4:	10d0dbc0 	call	210d0dbc <alt_putchar>
                        continue;
210d0db8:	003fb606 	br	210d0c94 <__flash_rwdata_start+0xfffff39c>

210d0dbc <alt_putchar>:
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
210d0dbc:	00840034 	movhi	r2,4096
210d0dc0:	10892304 	addi	r2,r2,9356
210d0dc4:	10800017 	ldw	r2,0(r2)
210d0dc8:	11400217 	ldw	r5,8(r2)
210d0dcc:	10c88481 	jmpi	210c8848 <putc>

210d0dd0 <alt_alarm_stop>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
210d0dd0:	0007303a 	rdctl	r3,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
210d0dd4:	00bfff84 	movi	r2,-2
210d0dd8:	1884703a 	and	r2,r3,r2
210d0ddc:	1001703a 	wrctl	status,r2
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
210d0de0:	21400117 	ldw	r5,4(r4)
210d0de4:	20800017 	ldw	r2,0(r4)
210d0de8:	11400115 	stw	r5,4(r2)
  entry->previous->next = entry->next;
210d0dec:	21400117 	ldw	r5,4(r4)
210d0df0:	28800015 	stw	r2,0(r5)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
210d0df4:	21000115 	stw	r4,4(r4)
  entry->next     = entry;
210d0df8:	21000015 	stw	r4,0(r4)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
210d0dfc:	1801703a 	wrctl	status,r3
210d0e00:	f800283a 	ret

210d0e04 <alt_tick>:

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
210d0e04:	d0a02117 	ldw	r2,-32636(gp)
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
210d0e08:	defffa04 	addi	sp,sp,-24
210d0e0c:	dc000015 	stw	r16,0(sp)
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
210d0e10:	d4201217 	ldw	r16,-32696(gp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
210d0e14:	10800044 	addi	r2,r2,1
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
210d0e18:	dc800215 	stw	r18,8(sp)
210d0e1c:	dfc00515 	stw	ra,20(sp)
210d0e20:	dd000415 	stw	r20,16(sp)
210d0e24:	dcc00315 	stw	r19,12(sp)
210d0e28:	dc400115 	stw	r17,4(sp)
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
210d0e2c:	d4a01204 	addi	r18,gp,-32696

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
210d0e30:	d0a02115 	stw	r2,-32636(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
210d0e34:	84801726 	beq	r16,r18,210d0e94 <alt_tick+0x90>
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
        {
          alarm->rollover = 1;
210d0e38:	04c00044 	movi	r19,1
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
210d0e3c:	053fff84 	movi	r20,-2
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
210d0e40:	80800403 	ldbu	r2,16(r16)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  {
    next = (alt_alarm*) alarm->llist.next;
210d0e44:	84400017 	ldw	r17,0(r16)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
210d0e48:	10000326 	beq	r2,zero,210d0e58 <alt_tick+0x54>
210d0e4c:	d0a02117 	ldw	r2,-32636(gp)
210d0e50:	1000181e 	bne	r2,zero,210d0eb4 <alt_tick+0xb0>
    {
      alarm->rollover = 0;
210d0e54:	80000405 	stb	zero,16(r16)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
210d0e58:	d0e02117 	ldw	r3,-32636(gp)
210d0e5c:	80800217 	ldw	r2,8(r16)
210d0e60:	18800a36 	bltu	r3,r2,210d0e8c <alt_tick+0x88>
    {
      next_callback = alarm->callback (alarm->context);
210d0e64:	80800317 	ldw	r2,12(r16)
210d0e68:	81000517 	ldw	r4,20(r16)
210d0e6c:	103ee83a 	callr	r2

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
210d0e70:	10001426 	beq	r2,zero,210d0ec4 <alt_tick+0xc0>
      {
        alt_alarm_stop (alarm);
      }
      else
      {
        alarm->time += next_callback;
210d0e74:	80c00217 	ldw	r3,8(r16)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
210d0e78:	d1202117 	ldw	r4,-32636(gp)
      {
        alt_alarm_stop (alarm);
      }
      else
      {
        alarm->time += next_callback;
210d0e7c:	10c5883a 	add	r2,r2,r3
210d0e80:	80800215 	stw	r2,8(r16)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
210d0e84:	1100012e 	bgeu	r2,r4,210d0e8c <alt_tick+0x88>
        {
          alarm->rollover = 1;
210d0e88:	84c00405 	stb	r19,16(r16)
210d0e8c:	8821883a 	mov	r16,r17

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
210d0e90:	8cbfeb1e 	bne	r17,r18,210d0e40 <__flash_rwdata_start+0xfffff548>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
210d0e94:	dfc00517 	ldw	ra,20(sp)
210d0e98:	dd000417 	ldw	r20,16(sp)
210d0e9c:	dcc00317 	ldw	r19,12(sp)
210d0ea0:	dc800217 	ldw	r18,8(sp)
210d0ea4:	dc400117 	ldw	r17,4(sp)
210d0ea8:	dc000017 	ldw	r16,0(sp)
210d0eac:	dec00604 	addi	sp,sp,24
210d0eb0:	f800283a 	ret
    {
      alarm->rollover = 0;
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
210d0eb4:	d0a02117 	ldw	r2,-32636(gp)
210d0eb8:	8821883a 	mov	r16,r17

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
210d0ebc:	8cbfe01e 	bne	r17,r18,210d0e40 <__flash_rwdata_start+0xfffff548>
210d0ec0:	003ff406 	br	210d0e94 <__flash_rwdata_start+0xfffff59c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
210d0ec4:	0005303a 	rdctl	r2,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
210d0ec8:	1506703a 	and	r3,r2,r20
210d0ecc:	1801703a 	wrctl	status,r3
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
210d0ed0:	81000117 	ldw	r4,4(r16)
210d0ed4:	80c00017 	ldw	r3,0(r16)
210d0ed8:	19000115 	stw	r4,4(r3)
  entry->previous->next = entry->next;
210d0edc:	81000117 	ldw	r4,4(r16)
210d0ee0:	20c00015 	stw	r3,0(r4)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
210d0ee4:	84000115 	stw	r16,4(r16)
  entry->next     = entry;
210d0ee8:	84000015 	stw	r16,0(r16)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
210d0eec:	1001703a 	wrctl	status,r2
210d0ef0:	8821883a 	mov	r16,r17
210d0ef4:	8cbfd21e 	bne	r17,r18,210d0e40 <__flash_rwdata_start+0xfffff548>
210d0ef8:	003fe606 	br	210d0e94 <__flash_rwdata_start+0xfffff59c>

210d0efc <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
210d0efc:	000170fa 	wrctl	ienable,zero
210d0f00:	f800283a 	ret

210d0f04 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
210d0f04:	defffa04 	addi	sp,sp,-24
210d0f08:	dd000415 	stw	r20,16(sp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
210d0f0c:	05040034 	movhi	r20,4096
210d0f10:	a5092b04 	addi	r20,r20,9388
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
210d0f14:	dc000015 	stw	r16,0(sp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
210d0f18:	a4000017 	ldw	r16,0(r20)
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
210d0f1c:	dfc00515 	stw	ra,20(sp)
210d0f20:	dcc00315 	stw	r19,12(sp)
210d0f24:	dc800215 	stw	r18,8(sp)
210d0f28:	dc400115 	stw	r17,4(sp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
210d0f2c:	85001626 	beq	r16,r20,210d0f88 <alt_find_file+0x84>
210d0f30:	2025883a 	mov	r18,r4
  {
    len = strlen(next->name);
    
    if (next->name[len-1] == '/')
210d0f34:	04c00bc4 	movi	r19,47
210d0f38:	00000806 	br	210d0f5c <alt_find_file+0x58>
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
210d0f3c:	9185883a 	add	r2,r18,r6
210d0f40:	10800007 	ldb	r2,0(r2)
210d0f44:	14c00126 	beq	r2,r19,210d0f4c <alt_find_file+0x48>
210d0f48:	1000021e 	bne	r2,zero,210d0f54 <alt_find_file+0x50>
        !memcmp (next->name, name, len))
210d0f4c:	10d10dc0 	call	210d10dc <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
210d0f50:	10001626 	beq	r2,zero,210d0fac <alt_find_file+0xa8>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
210d0f54:	84000017 	ldw	r16,0(r16)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
210d0f58:	85000b26 	beq	r16,r20,210d0f88 <alt_find_file+0x84>
  {
    len = strlen(next->name);
210d0f5c:	84400217 	ldw	r17,8(r16)
210d0f60:	8809883a 	mov	r4,r17
210d0f64:	10c23680 	call	210c2368 <strlen>
210d0f68:	100d883a 	mov	r6,r2
    
    if (next->name[len-1] == '/')
210d0f6c:	8885883a 	add	r2,r17,r2
210d0f70:	10bfffc7 	ldb	r2,-1(r2)
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
        !memcmp (next->name, name, len))
210d0f74:	8809883a 	mov	r4,r17
210d0f78:	900b883a 	mov	r5,r18
 
  while (next != (alt_dev*) &alt_fs_list)
  {
    len = strlen(next->name);
    
    if (next->name[len-1] == '/')
210d0f7c:	14ffef1e 	bne	r2,r19,210d0f3c <__flash_rwdata_start+0xfffff644>
    {
      len -= 1;
210d0f80:	31bfffc4 	addi	r6,r6,-1
210d0f84:	003fed06 	br	210d0f3c <__flash_rwdata_start+0xfffff644>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
210d0f88:	0005883a 	mov	r2,zero
}
210d0f8c:	dfc00517 	ldw	ra,20(sp)
210d0f90:	dd000417 	ldw	r20,16(sp)
210d0f94:	dcc00317 	ldw	r19,12(sp)
210d0f98:	dc800217 	ldw	r18,8(sp)
210d0f9c:	dc400117 	ldw	r17,4(sp)
210d0fa0:	dc000017 	ldw	r16,0(sp)
210d0fa4:	dec00604 	addi	sp,sp,24
210d0fa8:	f800283a 	ret
    if (((name[len] == '/') || (name[len] == '\0')) && 
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
210d0fac:	8005883a 	mov	r2,r16
210d0fb0:	003ff606 	br	210d0f8c <__flash_rwdata_start+0xfffff694>

210d0fb4 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
210d0fb4:	01840034 	movhi	r6,4096
210d0fb8:	31844c04 	addi	r6,r6,4400
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
210d0fbc:	0005883a 	mov	r2,zero
210d0fc0:	01c00804 	movi	r7,32
210d0fc4:	00000206 	br	210d0fd0 <alt_get_fd+0x1c>
210d0fc8:	10800044 	addi	r2,r2,1
210d0fcc:	11c00b26 	beq	r2,r7,210d0ffc <alt_get_fd+0x48>
210d0fd0:	10c00324 	muli	r3,r2,12
210d0fd4:	1987883a 	add	r3,r3,r6
  {
    if (!alt_fd_list[i].dev)
210d0fd8:	19400017 	ldw	r5,0(r3)
210d0fdc:	283ffa1e 	bne	r5,zero,210d0fc8 <__flash_rwdata_start+0xfffff6d0>
    {
      alt_fd_list[i].dev = dev;
      if (i > alt_max_fd)
210d0fe0:	01440034 	movhi	r5,4096
210d0fe4:	29492804 	addi	r5,r5,9376

  for (i = 0; i < ALT_MAX_FD; i++)
  {
    if (!alt_fd_list[i].dev)
    {
      alt_fd_list[i].dev = dev;
210d0fe8:	19000015 	stw	r4,0(r3)
      if (i > alt_max_fd)
210d0fec:	28c00017 	ldw	r3,0(r5)
210d0ff0:	1880030e 	bge	r3,r2,210d1000 <alt_get_fd+0x4c>
      {
        alt_max_fd = i;
210d0ff4:	28800015 	stw	r2,0(r5)
      }
      rc = i;
      goto alt_get_fd_exit;
210d0ff8:	f800283a 	ret
 */

int alt_get_fd (alt_dev* dev)
{
  alt_32 i;
  int rc = -EMFILE;
210d0ffc:	00bffa04 	movi	r2,-24
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
}
210d1000:	f800283a 	ret

210d1004 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
210d1004:	00840004 	movi	r2,4096
210d1008:	1140012e 	bgeu	r2,r5,210d1010 <alt_icache_flush+0xc>
210d100c:	100b883a 	mov	r5,r2
  if (len > NIOS2_ICACHE_SIZE)
  {
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;
210d1010:	214b883a 	add	r5,r4,r5

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
210d1014:	2005883a 	mov	r2,r4
210d1018:	2140092e 	bgeu	r4,r5,210d1040 <alt_icache_flush+0x3c>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
210d101c:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
210d1020:	10800804 	addi	r2,r2,32
210d1024:	117ffd36 	bltu	r2,r5,210d101c <__flash_rwdata_start+0xfffff724>
210d1028:	0104303a 	nor	r2,zero,r4
210d102c:	2885883a 	add	r2,r5,r2
210d1030:	1004d17a 	srli	r2,r2,5
210d1034:	10800044 	addi	r2,r2,1
210d1038:	1004917a 	slli	r2,r2,5
210d103c:	2085883a 	add	r2,r4,r2
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
210d1040:	210007cc 	andi	r4,r4,31
210d1044:	20000126 	beq	r4,zero,210d104c <alt_icache_flush+0x48>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
210d1048:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
210d104c:	0000203a 	flushp
210d1050:	f800283a 	ret

210d1054 <alt_exception_cause_generated_bad_addr>:
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
  switch (cause) {
210d1054:	213ffe84 	addi	r4,r4,-6
210d1058:	008003c4 	movi	r2,15
210d105c:	11001636 	bltu	r2,r4,210d10b8 <alt_exception_cause_generated_bad_addr+0x64>
210d1060:	200890ba 	slli	r4,r4,2
210d1064:	00884374 	movhi	r2,8461
210d1068:	10841e04 	addi	r2,r2,4216
210d106c:	2089883a 	add	r4,r4,r2
210d1070:	20800017 	ldw	r2,0(r4)
210d1074:	1000683a 	jmp	r2
210d1078:	210d10c0 	call	2210d10c <__flash_rwdata_start+0x103b814>
210d107c:	210d10c0 	call	2210d10c <__flash_rwdata_start+0x103b814>
210d1080:	210d10b8 	rdprs	r4,r4,13378
210d1084:	210d10b8 	rdprs	r4,r4,13378
210d1088:	210d10b8 	rdprs	r4,r4,13378
210d108c:	210d10c0 	call	2210d10c <__flash_rwdata_start+0x103b814>
210d1090:	210d10b8 	rdprs	r4,r4,13378
210d1094:	210d10b8 	rdprs	r4,r4,13378
210d1098:	210d10c0 	call	2210d10c <__flash_rwdata_start+0x103b814>
210d109c:	210d10c0 	call	2210d10c <__flash_rwdata_start+0x103b814>
210d10a0:	210d10b8 	rdprs	r4,r4,13378
210d10a4:	210d10c0 	call	2210d10c <__flash_rwdata_start+0x103b814>
210d10a8:	210d10b8 	rdprs	r4,r4,13378
210d10ac:	210d10b8 	rdprs	r4,r4,13378
210d10b0:	210d10b8 	rdprs	r4,r4,13378
210d10b4:	210d10c0 	call	2210d10c <__flash_rwdata_start+0x103b814>
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
210d10b8:	0005883a 	mov	r2,zero
210d10bc:	f800283a 	ret
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
210d10c0:	00800044 	movi	r2,1
    return 0;

  default:
    return 0;
  }
}
210d10c4:	f800283a 	ret

210d10c8 <atexit>:
210d10c8:	200b883a 	mov	r5,r4
210d10cc:	000d883a 	mov	r6,zero
210d10d0:	0009883a 	mov	r4,zero
210d10d4:	000f883a 	mov	r7,zero
210d10d8:	10d11581 	jmpi	210d1158 <__register_exitproc>

210d10dc <memcmp>:
210d10dc:	01c000c4 	movi	r7,3
210d10e0:	3980192e 	bgeu	r7,r6,210d1148 <memcmp+0x6c>
210d10e4:	2144b03a 	or	r2,r4,r5
210d10e8:	11c4703a 	and	r2,r2,r7
210d10ec:	10000f26 	beq	r2,zero,210d112c <memcmp+0x50>
210d10f0:	20800003 	ldbu	r2,0(r4)
210d10f4:	28c00003 	ldbu	r3,0(r5)
210d10f8:	10c0151e 	bne	r2,r3,210d1150 <memcmp+0x74>
210d10fc:	31bfff84 	addi	r6,r6,-2
210d1100:	01ffffc4 	movi	r7,-1
210d1104:	00000406 	br	210d1118 <memcmp+0x3c>
210d1108:	20800003 	ldbu	r2,0(r4)
210d110c:	28c00003 	ldbu	r3,0(r5)
210d1110:	31bfffc4 	addi	r6,r6,-1
210d1114:	10c00e1e 	bne	r2,r3,210d1150 <memcmp+0x74>
210d1118:	21000044 	addi	r4,r4,1
210d111c:	29400044 	addi	r5,r5,1
210d1120:	31fff91e 	bne	r6,r7,210d1108 <__flash_rwdata_start+0xfffff810>
210d1124:	0005883a 	mov	r2,zero
210d1128:	f800283a 	ret
210d112c:	20c00017 	ldw	r3,0(r4)
210d1130:	28800017 	ldw	r2,0(r5)
210d1134:	1880041e 	bne	r3,r2,210d1148 <memcmp+0x6c>
210d1138:	31bfff04 	addi	r6,r6,-4
210d113c:	21000104 	addi	r4,r4,4
210d1140:	29400104 	addi	r5,r5,4
210d1144:	39bff936 	bltu	r7,r6,210d112c <__flash_rwdata_start+0xfffff834>
210d1148:	303fe91e 	bne	r6,zero,210d10f0 <__flash_rwdata_start+0xfffff7f8>
210d114c:	003ff506 	br	210d1124 <__flash_rwdata_start+0xfffff82c>
210d1150:	10c5c83a 	sub	r2,r2,r3
210d1154:	f800283a 	ret

210d1158 <__register_exitproc>:
210d1158:	00840034 	movhi	r2,4096
210d115c:	defffa04 	addi	sp,sp,-24
210d1160:	10892204 	addi	r2,r2,9352
210d1164:	dc000315 	stw	r16,12(sp)
210d1168:	14000017 	ldw	r16,0(r2)
210d116c:	dc400415 	stw	r17,16(sp)
210d1170:	dfc00515 	stw	ra,20(sp)
210d1174:	80805217 	ldw	r2,328(r16)
210d1178:	2023883a 	mov	r17,r4
210d117c:	10003626 	beq	r2,zero,210d1258 <__register_exitproc+0x100>
210d1180:	10c00117 	ldw	r3,4(r2)
210d1184:	010007c4 	movi	r4,31
210d1188:	20c00e16 	blt	r4,r3,210d11c4 <__register_exitproc+0x6c>
210d118c:	1a400044 	addi	r9,r3,1
210d1190:	8800211e 	bne	r17,zero,210d1218 <__register_exitproc+0xc0>
210d1194:	18c00084 	addi	r3,r3,2
210d1198:	18c7883a 	add	r3,r3,r3
210d119c:	18c7883a 	add	r3,r3,r3
210d11a0:	12400115 	stw	r9,4(r2)
210d11a4:	10c7883a 	add	r3,r2,r3
210d11a8:	19400015 	stw	r5,0(r3)
210d11ac:	0005883a 	mov	r2,zero
210d11b0:	dfc00517 	ldw	ra,20(sp)
210d11b4:	dc400417 	ldw	r17,16(sp)
210d11b8:	dc000317 	ldw	r16,12(sp)
210d11bc:	dec00604 	addi	sp,sp,24
210d11c0:	f800283a 	ret
210d11c4:	00884334 	movhi	r2,8460
210d11c8:	10868004 	addi	r2,r2,6656
210d11cc:	10002526 	beq	r2,zero,210d1264 <__register_exitproc+0x10c>
210d11d0:	01006404 	movi	r4,400
210d11d4:	d9400015 	stw	r5,0(sp)
210d11d8:	d9800115 	stw	r6,4(sp)
210d11dc:	d9c00215 	stw	r7,8(sp)
210d11e0:	10c1a000 	call	210c1a00 <malloc>
210d11e4:	d9400017 	ldw	r5,0(sp)
210d11e8:	d9800117 	ldw	r6,4(sp)
210d11ec:	d9c00217 	ldw	r7,8(sp)
210d11f0:	10001c26 	beq	r2,zero,210d1264 <__register_exitproc+0x10c>
210d11f4:	80c05217 	ldw	r3,328(r16)
210d11f8:	10000115 	stw	zero,4(r2)
210d11fc:	02400044 	movi	r9,1
210d1200:	10c00015 	stw	r3,0(r2)
210d1204:	80805215 	stw	r2,328(r16)
210d1208:	10006215 	stw	zero,392(r2)
210d120c:	10006315 	stw	zero,396(r2)
210d1210:	0007883a 	mov	r3,zero
210d1214:	883fdf26 	beq	r17,zero,210d1194 <__flash_rwdata_start+0xfffff89c>
210d1218:	18d1883a 	add	r8,r3,r3
210d121c:	4211883a 	add	r8,r8,r8
210d1220:	1211883a 	add	r8,r2,r8
210d1224:	41802215 	stw	r6,136(r8)
210d1228:	01000044 	movi	r4,1
210d122c:	11806217 	ldw	r6,392(r2)
210d1230:	20c8983a 	sll	r4,r4,r3
210d1234:	310cb03a 	or	r6,r6,r4
210d1238:	11806215 	stw	r6,392(r2)
210d123c:	41c04215 	stw	r7,264(r8)
210d1240:	01800084 	movi	r6,2
210d1244:	89bfd31e 	bne	r17,r6,210d1194 <__flash_rwdata_start+0xfffff89c>
210d1248:	11806317 	ldw	r6,396(r2)
210d124c:	3108b03a 	or	r4,r6,r4
210d1250:	11006315 	stw	r4,396(r2)
210d1254:	003fcf06 	br	210d1194 <__flash_rwdata_start+0xfffff89c>
210d1258:	80805304 	addi	r2,r16,332
210d125c:	80805215 	stw	r2,328(r16)
210d1260:	003fc706 	br	210d1180 <__flash_rwdata_start+0xfffff888>
210d1264:	00bfffc4 	movi	r2,-1
210d1268:	003fd106 	br	210d11b0 <__flash_rwdata_start+0xfffff8b8>
